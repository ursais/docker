{"version":3,"sources":["../../../src/components/layer.js"],"names":["React","PureComponent","PropTypes","MapContext","assert","deepEqual","propTypes","type","string","isRequired","id","source","beforeId","diffLayerStyles","map","props","prevProps","layout","paint","filter","minzoom","maxzoom","otherProps","moveLayer","key","setLayoutProperty","setPaintProperty","setFilter","setLayerZoomRange","setLayerProperty","layerCounter","Layer","constructor","componentDidMount","_createLayer","componentDidUpdate","_updateLayer","componentWillUnmount","_map","removeLayer","options","Object","assign","style","_loaded","addLayer","once","forceUpdate","getLayer","error","console","warn","_render","context","render","bind"],"mappings":"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","sourcesContent":["// @flow\n// Copyright (c) 2015 Uber Technologies, Inc.\n\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\nimport React, {PureComponent} from 'react';\nimport PropTypes from 'prop-types';\nimport MapContext from './map-context';\nimport assert from '../utils/assert';\nimport deepEqual from '../utils/deep-equal';\n\nimport type {MapContextProps} from './map-context';\n\nconst propTypes = {\n  type: PropTypes.string.isRequired,\n  id: PropTypes.string,\n  source: PropTypes.string,\n  beforeId: PropTypes.string\n};\n\ntype LayerProps = {\n  id?: string,\n  type: string,\n  source?: string,\n  beforeId?: string,\n  layout: any,\n  paint: any,\n  filter?: Array<mixed>,\n  minzoom?: number,\n  maxzoom?: number\n};\n\n/* eslint-disable complexity */\nfunction diffLayerStyles(map: any, id: string, props: LayerProps, prevProps: LayerProps) {\n  const {layout = {}, paint = {}, filter, minzoom, maxzoom, beforeId, ...otherProps} = props;\n\n  if (beforeId !== prevProps.beforeId) {\n    map.moveLayer(id, beforeId);\n  }\n  if (layout !== prevProps.layout) {\n    for (const key in layout) {\n      if (!deepEqual(layout[key], prevProps.layout[key])) {\n        map.setLayoutProperty(id, key, layout[key]);\n      }\n    }\n  }\n  if (paint !== prevProps.paint) {\n    for (const key in paint) {\n      if (!deepEqual(paint[key], prevProps.paint[key])) {\n        map.setPaintProperty(id, key, paint[key]);\n      }\n    }\n  }\n  if (!deepEqual(filter, prevProps.filter)) {\n    map.setFilter(id, filter);\n  }\n  if (minzoom !== prevProps.minzoom || maxzoom !== prevProps.maxzoom) {\n    map.setLayerZoomRange(id, minzoom, maxzoom);\n  }\n  for (const key in otherProps) {\n    if (!deepEqual(otherProps[key], prevProps[key])) {\n      map.setLayerProperty(id, key, otherProps[key]);\n    }\n  }\n}\n/* eslint-enable complexity */\n\nlet layerCounter = 0;\n\nexport default class Layer<Props: LayerProps> extends PureComponent<Props> {\n  static propTypes = propTypes;\n\n  constructor(props: Props) {\n    super(props);\n    this.id = props.id || `jsx-layer-${layerCounter++}`;\n    this.type = props.type;\n  }\n\n  componentDidMount() {\n    this._createLayer();\n  }\n\n  componentDidUpdate(prevProps: LayerProps) {\n    this._updateLayer(prevProps);\n  }\n\n  componentWillUnmount() {\n    this._map.removeLayer(this.id);\n  }\n\n  id: string;\n  type: string;\n  _map: any = null;\n\n  _createLayer() {\n    const map = this._map;\n    const options = Object.assign({}, this.props);\n    options.id = this.id;\n    delete options.beforeId;\n\n    if (map.style._loaded) {\n      // console.log('adding layer');\n      map.addLayer(options, this.props.beforeId);\n    } else {\n      map.once('styledata', () => this.forceUpdate());\n    }\n  }\n\n  /* eslint-disable complexity */\n  _updateLayer(prevProps: LayerProps) {\n    const {props} = this;\n    assert(!props.id || props.id === this.id, 'layer id changed');\n    assert(props.type === this.type, 'layer type changed');\n\n    const map = this._map;\n\n    if (!map.getLayer(this.id)) {\n      this._createLayer();\n      return;\n    }\n\n    try {\n      diffLayerStyles(map, this.id, props, prevProps);\n    } catch (error) {\n      console.warn(error); // eslint-disable-line\n    }\n  }\n  /* eslint-disable complexity */\n\n  _render(context: MapContextProps) {\n    this._map = context.map;\n    return null;\n  }\n\n  render() {\n    return <MapContext.Consumer>{this._render.bind(this)}</MapContext.Consumer>;\n  }\n}\n"],"file":"layer.js"}