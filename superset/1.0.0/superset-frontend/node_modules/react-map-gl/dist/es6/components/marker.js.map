{"version":3,"sources":["../../../src/components/marker.js"],"names":["React","PropTypes","DraggableControl","propTypes","Object","assign","className","string","longitude","number","isRequired","latitude","defaultProps","Marker","_getPosition","offsetLeft","offsetTop","props","dragPos","dragOffset","state","_getDraggedPosition","x","y","_context","viewport","project","_render","draggable","containerStyle","position","left","top","cursor","_containerRef","children"],"mappings":";AAoBA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,OAAOC,gBAAP,MAA6B,qBAA7B;AAIA,IAAMC,SAAS,GAAGC,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBH,gBAAgB,CAACC,SAAnC,EAA8C;AAE9DG,EAAAA,SAAS,EAAEL,SAAS,CAACM,MAFyC;AAI9DC,EAAAA,SAAS,EAAEP,SAAS,CAACQ,MAAV,CAAiBC,UAJkC;AAM9DC,EAAAA,QAAQ,EAAEV,SAAS,CAACQ,MAAV,CAAiBC;AANmC,CAA9C,CAAlB;AASA,IAAME,YAAY,GAAGR,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBH,gBAAgB,CAACU,YAAnC,EAAiD;AACpEN,EAAAA,SAAS,EAAE;AADyD,CAAjD,CAArB;AAiBA,eAAe,MAAMO,MAAN,SAAqBX,gBAArB,CAAmD;AAIhEY,EAAAA,YAAY,GAAqB;AAC/B,QAAM;AAACN,MAAAA,SAAD;AAAYG,MAAAA,QAAZ;AAAsBI,MAAAA,UAAtB;AAAkCC,MAAAA;AAAlC,QAA+C,KAAKC,KAA1D;AACA,QAAM;AAACC,MAAAA,OAAD;AAAUC,MAAAA;AAAV,QAAwB,KAAKC,KAAnC;;AAGA,QAAIF,OAAO,IAAIC,UAAf,EAA2B;AACzB,aAAO,KAAKE,mBAAL,CAAyBH,OAAzB,EAAkCC,UAAlC,CAAP;AACD;;AAGD,QAAI,CAACG,CAAD,EAAIC,CAAJ,IAAS,KAAKC,QAAL,CAAcC,QAAd,CAAuBC,OAAvB,CAA+B,CAAClB,SAAD,EAAYG,QAAZ,CAA/B,CAAb;;AACAW,IAAAA,CAAC,IAAIP,UAAL;AACAQ,IAAAA,CAAC,IAAIP,SAAL;AACA,WAAO,CAACM,CAAD,EAAIC,CAAJ,CAAP;AACD;;AAEDI,EAAAA,OAAO,GAAG;AACR,QAAM;AAACrB,MAAAA,SAAD;AAAYsB,MAAAA;AAAZ,QAAyB,KAAKX,KAApC;AACA,QAAM;AAACC,MAAAA;AAAD,QAAY,KAAKE,KAAvB;;AAEA,QAAM,CAACE,CAAD,EAAIC,CAAJ,IAAS,KAAKT,YAAL,EAAf;;AAEA,QAAMe,cAAc,GAAG;AACrBC,MAAAA,QAAQ,EAAE,UADW;AAErBC,MAAAA,IAAI,EAAET,CAFe;AAGrBU,MAAAA,GAAG,EAAET,CAHgB;AAIrBU,MAAAA,MAAM,EAAEL,SAAS,GAAIV,OAAO,GAAG,UAAH,GAAgB,MAA3B,GAAqC;AAJjC,KAAvB;AAOA,WACE;AACE,MAAA,SAAS,4BAAqBZ,SAArB,CADX;AAEE,MAAA,GAAG,EAAE,KAAK4B,aAFZ;AAGE,MAAA,KAAK,EAAEL;AAHT,OAKG,KAAKZ,KAAL,CAAWkB,QALd,CADF;AASD;;AA1C+D;;gBAA7CtB,M,eACAV,S;;gBADAU,M,kBAEGD,Y","sourcesContent":["// @flow\n// Copyright (c) 2015 Uber Technologies, Inc.\n\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport DraggableControl from './draggable-control';\n\nimport type {DraggableControlProps} from './draggable-control';\n\nconst propTypes = Object.assign({}, DraggableControl.propTypes, {\n  // Custom className\n  className: PropTypes.string,\n  // Longitude of the anchor point\n  longitude: PropTypes.number.isRequired,\n  // Latitude of the anchor point\n  latitude: PropTypes.number.isRequired\n});\n\nconst defaultProps = Object.assign({}, DraggableControl.defaultProps, {\n  className: ''\n});\n\nexport type MarkerProps = DraggableControlProps & {\n  className: string,\n  longitude: number,\n  latitude: number\n};\n\n/*\n * PureComponent doesn't update when context changes.\n * The only way is to implement our own shouldComponentUpdate here. Considering\n * the parent component (StaticMap or InteractiveMap) is pure, and map re-render\n * is almost always triggered by a viewport change, we almost definitely need to\n * recalculate the marker's position when the parent re-renders.\n */\nexport default class Marker extends DraggableControl<MarkerProps> {\n  static propTypes = propTypes;\n  static defaultProps = defaultProps;\n\n  _getPosition(): [number, number] {\n    const {longitude, latitude, offsetLeft, offsetTop} = this.props;\n    const {dragPos, dragOffset} = this.state;\n\n    // If dragging, just return the current drag position\n    if (dragPos && dragOffset) {\n      return this._getDraggedPosition(dragPos, dragOffset);\n    }\n\n    // Otherwise return the projected lat/lng with offset\n    let [x, y] = this._context.viewport.project([longitude, latitude]);\n    x += offsetLeft;\n    y += offsetTop;\n    return [x, y];\n  }\n\n  _render() {\n    const {className, draggable} = this.props;\n    const {dragPos} = this.state;\n\n    const [x, y] = this._getPosition();\n\n    const containerStyle = {\n      position: 'absolute',\n      left: x,\n      top: y,\n      cursor: draggable ? (dragPos ? 'grabbing' : 'grab') : 'auto'\n    };\n\n    return (\n      <div\n        className={`mapboxgl-marker ${className}`}\n        ref={this._containerRef}\n        style={containerStyle}\n      >\n        {this.props.children}\n      </div>\n    );\n  }\n}\n"],"file":"marker.js"}