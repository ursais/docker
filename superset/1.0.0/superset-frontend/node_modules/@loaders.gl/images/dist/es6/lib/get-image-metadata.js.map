{"version":3,"sources":["../../../src/lib/get-image-metadata.js"],"names":["mimeTypeMap","ERR_INVALID_MIME_TYPE","Array","from","keys","join","isImage","arrayBuffer","mimeType","test","getImageTypeHandlers","dataView","toDataView","Boolean","getImageMIMEType","entries","getImageSize","getSize","size","Error","getImageMetadata","metadata","handlers","get","data","ArrayBuffer","isView","DataView","buffer"],"mappings":"AAQA,SAAQA,WAAR,QAA0B,iBAA1B;AAEA,MAAMC,qBAAqB,0DAAmDC,KAAK,CAACC,IAAN,CAC5EH,WAAW,CAACI,IAAZ,EAD4E,EAE5EC,IAF4E,CAEvE,IAFuE,CAAnD,CAA3B;AAKA,OAAO,SAASC,OAAT,CAAiBC,WAAjB,EAA8BC,QAA9B,EAAwC;AAC7C,MAAIA,QAAJ,EAAc;AACZ,UAAM;AAACC,MAAAA;AAAD,QAASC,oBAAoB,CAACF,QAAD,CAAnC;AACA,UAAMG,QAAQ,GAAGC,UAAU,CAACL,WAAD,CAA3B;AACA,WAAOE,IAAI,CAACE,QAAD,CAAX;AACD;;AAED,SAAOE,OAAO,CAACC,gBAAgB,CAACP,WAAD,CAAjB,CAAd;AACD;AAGD,OAAO,SAASO,gBAAT,CAA0BP,WAA1B,EAAuC;AAC5C,QAAMI,QAAQ,GAAGC,UAAU,CAACL,WAAD,CAA3B;;AAGA,OAAK,MAAM,CAACC,QAAD,EAAW;AAACC,IAAAA;AAAD,GAAX,CAAX,IAAiCT,WAAW,CAACe,OAAZ,EAAjC,EAAwD;AACtD,QAAIN,IAAI,CAACE,QAAD,CAAR,EAAoB;AAClB,aAAOH,QAAP;AACD;AACF;;AAED,SAAO,IAAP;AACD;AAED,OAAO,SAASQ,YAAT,CAAsBT,WAAtB,EAAmCC,QAAQ,GAAG,IAA9C,EAAoD;AACzDA,EAAAA,QAAQ,GAAGA,QAAQ,IAAIM,gBAAgB,CAACP,WAAD,CAAvC;AAEA,QAAM;AAACU,IAAAA;AAAD,MAAYP,oBAAoB,CAACF,QAAD,CAAtC;AAEA,QAAMG,QAAQ,GAAGC,UAAU,CAACL,WAAD,CAA3B;AACA,QAAMW,IAAI,GAAGD,OAAO,CAACN,QAAD,CAApB;;AAEA,MAAI,CAACO,IAAL,EAAW;AACT,UAAM,IAAIC,KAAJ,wCAA0CX,QAA1C,EAAN;AACD;;AAED,SAAOU,IAAP;AACD;AAID,OAAO,SAASE,gBAAT,CAA0Bb,WAA1B,EAAuCC,QAAQ,GAAG,IAAlD,EAAwD;AAC7DA,EAAAA,QAAQ,GAAGA,QAAQ,IAAIM,gBAAgB,CAACP,WAAD,CAAvC;AAEA,QAAMc,QAAQ,GAAGL,YAAY,CAACT,WAAD,EAAcC,QAAd,CAA7B;AACAa,EAAAA,QAAQ,CAACb,QAAT,GAAoBA,QAApB;AACA,SAAOa,QAAP;AACD;;AAED,SAASX,oBAAT,CAA8BF,QAA9B,EAAwC;AACtC,QAAMc,QAAQ,GAAGtB,WAAW,CAACuB,GAAZ,CAAgBf,QAAhB,CAAjB;;AACA,MAAI,CAACc,QAAL,EAAe;AACb,UAAM,IAAIH,KAAJ,CAAUlB,qBAAV,CAAN;AACD;;AACD,SAAOqB,QAAP;AACD;;AAED,SAASV,UAAT,CAAoBY,IAApB,EAA0B;AAOxB,MAAIA,IAAI,YAAYC,WAAhB,IAA+BA,WAAW,CAACC,MAAZ,CAAmBF,IAAnB,CAAnC,EAA6D;AAC3D,WAAO,IAAIG,QAAJ,CAAaH,IAAI,CAACI,MAAL,IAAeJ,IAA5B,CAAP;AACD;;AAED,QAAM,IAAIL,KAAJ,CAAU,YAAV,CAAN;AACD","sourcesContent":["// Attributions\n// * Based on binary-gltf-utils under MIT license: Copyright (c) 2016-17 Karl Cheng\n\n// TODO: make these functions work for Node.js buffers?\n// Quarantine references to Buffer to prevent bundler from adding big polyfills\n// import {bufferToArrayBuffer} from '../node/buffer-to-array-buffer';\n// TODO - this should be handled in @loaders.gl/polyfills\n\nimport {mimeTypeMap} from './image-parsers';\n\nconst ERR_INVALID_MIME_TYPE = `Invalid MIME type. Supported MIME types are: ${Array.from(\n  mimeTypeMap.keys()\n).join(', ')}`;\n\n// Supported image types are PNG, JPEG, GIF and BMP.\nexport function isImage(arrayBuffer, mimeType) {\n  if (mimeType) {\n    const {test} = getImageTypeHandlers(mimeType);\n    const dataView = toDataView(arrayBuffer);\n    return test(dataView);\n  }\n  // check if known type\n  return Boolean(getImageMIMEType(arrayBuffer));\n}\n\n// Sniffs the contents of a file to attempt to deduce the image type\nexport function getImageMIMEType(arrayBuffer) {\n  const dataView = toDataView(arrayBuffer);\n\n  // Loop through each file type and see if they work.\n  for (const [mimeType, {test}] of mimeTypeMap.entries()) {\n    if (test(dataView)) {\n      return mimeType;\n    }\n  }\n\n  return null;\n}\n\nexport function getImageSize(arrayBuffer, mimeType = null) {\n  mimeType = mimeType || getImageMIMEType(arrayBuffer);\n\n  const {getSize} = getImageTypeHandlers(mimeType);\n\n  const dataView = toDataView(arrayBuffer);\n  const size = getSize(dataView);\n\n  if (!size) {\n    throw new Error(`invalid image data for type: ${mimeType}`);\n  }\n\n  return size;\n}\n\n// Sniffs the contents of a file to attempt to deduce the image type and size.\n// Supported image types are PNG, JPEG, GIF and BMP.\nexport function getImageMetadata(arrayBuffer, mimeType = null) {\n  mimeType = mimeType || getImageMIMEType(arrayBuffer);\n\n  const metadata = getImageSize(arrayBuffer, mimeType);\n  metadata.mimeType = mimeType;\n  return metadata;\n}\n\nfunction getImageTypeHandlers(mimeType) {\n  const handlers = mimeTypeMap.get(mimeType);\n  if (!handlers) {\n    throw new Error(ERR_INVALID_MIME_TYPE);\n  }\n  return handlers;\n}\n\nfunction toDataView(data) {\n  // TODO: make these functions work for Node.js buffers?\n  // if (bufferToArrayBuffer) {\n  //   data = bufferToArrayBuffer(data);\n  // }\n\n  // Careful - Node Buffers will look like ArrayBuffers (keep after isBuffer)\n  if (data instanceof ArrayBuffer || ArrayBuffer.isView(data)) {\n    return new DataView(data.buffer || data);\n  }\n\n  throw new Error('toDataView');\n}\n"],"file":"get-image-metadata.js"}