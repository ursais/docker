{"version":3,"sources":["../../../src/lib/image-utils-browser.js"],"names":["decodeImage","arrayBufferOrView","mimeType","blob","Blob","type","urlCreator","window","URL","webkitURL","imageUrl","createObjectURL","Promise","resolve","reject","image","Image","onload","onerror","src","getImagePixelData","width","height","canvas","document","createElement","ctx","getContext","drawImage","getImageData"],"mappings":"AAIA,OAAO,SAASA,WAAT,CAAqBC,iBAArB,EAAwC;AAACC,EAAAA,QAAQ,GAAG;AAAZ,CAAxC,EAAmE;AAExE,QAAMC,IAAI,GAAG,IAAIC,IAAJ,CAAS,CAACH,iBAAD,CAAT,EAA8B;AAACI,IAAAA,IAAI,EAAEH;AAAP,GAA9B,CAAb;AACA,QAAMI,UAAU,GAAGC,MAAM,CAACC,GAAP,IAAcD,MAAM,CAACE,SAAxC;AACA,QAAMC,QAAQ,GAAGJ,UAAU,CAACK,eAAX,CAA2BR,IAA3B,CAAjB;AAEA,SAAO,IAAIS,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACtC,UAAMC,KAAK,GAAG,IAAIC,KAAJ,EAAd;;AACAD,IAAAA,KAAK,CAACE,MAAN,GAAe,MAAMJ,OAAO,CAACE,KAAD,CAA5B;;AACAA,IAAAA,KAAK,CAACG,OAAN,GAAgBJ,MAAhB;AACAC,IAAAA,KAAK,CAACI,GAAN,GAAYT,QAAZ;AACA,WAAOK,KAAP;AACD,GANM,CAAP;AAOD;AAGD,OAAO,SAASK,iBAAT,CAA2BL,KAA3B,EAAkCM,KAAK,GAAG,IAA1C,EAAgDC,MAAM,GAAG,IAAzD,EAA+D;AACpED,EAAAA,KAAK,GAAGA,KAAK,IAAIN,KAAK,CAACM,KAAvB;AACAC,EAAAA,MAAM,GAAGA,MAAM,IAAIP,KAAK,CAACO,MAAzB;AACA,QAAMC,MAAM,GAAGC,QAAQ,CAACC,aAAT,CAAuB,QAAvB,CAAf;AACAF,EAAAA,MAAM,CAACF,KAAP,GAAeA,KAAf;AACAE,EAAAA,MAAM,CAACD,MAAP,GAAgBA,MAAhB;AACA,QAAMI,GAAG,GAAGH,MAAM,CAACI,UAAP,CAAkB,IAAlB,CAAZ;AACAD,EAAAA,GAAG,CAACE,SAAJ,CAAcb,KAAd,EAAqB,CAArB,EAAwB,CAAxB,EAA2BM,KAA3B,EAAkCC,MAAlC;AACA,SAAOI,GAAG,CAACG,YAAJ,CAAiB,CAAjB,EAAoB,CAApB,EAAuBR,KAAvB,EAA8BC,MAA9B,CAAP;AACD","sourcesContent":["// TODO - currently only work in browser, great if could work on all platform image types\n/* global document */\n\n// Unpacks compressed image data into an HTML image\nexport function decodeImage(arrayBufferOrView, {mimeType = 'image/jpeg'}) {\n  /* global window, Blob, Image */\n  const blob = new Blob([arrayBufferOrView], {type: mimeType});\n  const urlCreator = window.URL || window.webkitURL;\n  const imageUrl = urlCreator.createObjectURL(blob);\n\n  return new Promise((resolve, reject) => {\n    const image = new Image();\n    image.onload = () => resolve(image);\n    image.onerror = reject;\n    image.src = imageUrl;\n    return image;\n  });\n}\n\n// Get (uncompressed) image pixel data\nexport function getImagePixelData(image, width = null, height = null) {\n  width = width || image.width;\n  height = height || image.height;\n  const canvas = document.createElement('canvas');\n  canvas.width = width;\n  canvas.height = height;\n  const ctx = canvas.getContext('2d');\n  ctx.drawImage(image, 0, 0, width, height);\n  return ctx.getImageData(0, 0, width, height);\n}\n"],"file":"image-utils-browser.js"}