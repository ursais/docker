{"version":3,"sources":["../../../src/lib/encode-image.js"],"names":["assert","global","encodeImage","image","type","_encodeImageNode","HTMLCanvasElement","canvas","toDataURL","Image","document","createElement","width","height","getContext","drawImage","data","replace","Promise","resolve"],"mappings":"AAGA,OAAOA,MAAP,MAAmB,iBAAnB;AACA,SAAQC,MAAR,QAAqB,kBAArB;AASA,OAAO,SAASC,WAAT,CAAqBC,KAArB,EAA4BC,IAA5B,EAAkC;AACvC,MAAIH,MAAM,CAACI,gBAAX,EAA6B;AAC3B,WAAOJ,MAAM,CAACI,gBAAP,CAAwBF,KAAxB,EAA+BC,IAA/B,CAAP;AACD;;AAED,MAAID,KAAK,YAAYG,iBAArB,EAAwC;AACtC,QAAMC,OAAM,GAAGJ,KAAf;AACA,WAAOI,OAAM,CAACC,SAAP,CAAiBJ,IAAjB,CAAP;AACD;;AAEDJ,EAAAA,MAAM,CAACG,KAAK,YAAYM,KAAlB,EAAyB,sCAAzB,CAAN;AACA,MAAMF,MAAM,GAAGG,QAAQ,CAACC,aAAT,CAAuB,QAAvB,CAAf;AACAJ,EAAAA,MAAM,CAACK,KAAP,GAAeT,KAAK,CAACS,KAArB;AACAL,EAAAA,MAAM,CAACM,MAAP,GAAgBV,KAAK,CAACU,MAAtB;AACAN,EAAAA,MAAM,CAACO,UAAP,CAAkB,IAAlB,EAAwBC,SAAxB,CAAkCZ,KAAlC,EAAyC,CAAzC,EAA4C,CAA5C;AAGA,MAAMa,IAAI,GAAGT,MAAM,CAACC,SAAP,CAAiBJ,IAAI,IAAI,KAAzB,EAAgCa,OAAhC,CAAwC,gCAAxC,EAA0E,EAA1E,CAAb;AACA,SAAOC,OAAO,CAACC,OAAR,CAAgBH,IAAhB,CAAP;AACD","sourcesContent":["// Image loading/saving for browser\n/* global document, HTMLCanvasElement, Image */\n\nimport assert from '../utils/assert';\nimport {global} from '../utils/globals';\n\n// Returns data bytes representing a compressed image in PNG or JPG format,\n// This data can be saved using file system (f) methods or\n// used in a request.\n// @param {Image}  image - Image or Canvas\n// @param {String} opt.type='png' - png, jpg or image/png, image/jpg are valid\n// @param {String} opt.dataURI= - Whether to include a data URI header\n\nexport function encodeImage(image, type) {\n  if (global._encodeImageNode) {\n    return global._encodeImageNode(image, type);\n  }\n\n  if (image instanceof HTMLCanvasElement) {\n    const canvas = image;\n    return canvas.toDataURL(type);\n  }\n\n  assert(image instanceof Image, 'getImageData accepts image or canvas');\n  const canvas = document.createElement('canvas');\n  canvas.width = image.width;\n  canvas.height = image.height;\n  canvas.getContext('2d').drawImage(image, 0, 0);\n\n  // Get raw image data\n  const data = canvas.toDataURL(type || 'png').replace(/^data:image\\/(png|jpg);base64,/, '');\n  return Promise.resolve(data);\n}\n"],"file":"encode-image.js"}