import _regeneratorRuntime from "@babel/runtime/regenerator";
import _asyncToGenerator from "@babel/runtime/helpers/esm/asyncToGenerator";
import { global } from '../utils/globals';
import { getImageMetadata } from './get-image-metadata';
export var canParseImage = global._parseImageNode || typeof ImageBitmap !== 'undefined';
export function parseImage(arrayBuffer, options) {
  if (global._parseImageNode) {
    var _getImageMetadata = getImageMetadata(arrayBuffer),
        mimeType = _getImageMetadata.mimeType;

    return global._parseImageNode(arrayBuffer, mimeType, options);
  }

  return parseToImageBitmap(arrayBuffer, options);
}
export function loadImage(_x) {
  return _loadImage.apply(this, arguments);
}

function _loadImage() {
  _loadImage = _asyncToGenerator(_regeneratorRuntime.mark(function _callee(url) {
    var options,
        response,
        arrayBuffer,
        _args = arguments;
    return _regeneratorRuntime.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            options = _args.length > 1 && _args[1] !== undefined ? _args[1] : {};

            if (!(typeof Image === 'undefined')) {
              _context.next = 9;
              break;
            }

            _context.next = 4;
            return fetch(url, options);

          case 4:
            response = _context.sent;
            _context.next = 7;
            return response.arrayBuffer();

          case 7:
            arrayBuffer = _context.sent;
            return _context.abrupt("return", parseImage(arrayBuffer, options));

          case 9:
            _context.next = 11;
            return loadToHTMLImage(url, options);

          case 11:
            return _context.abrupt("return", _context.sent);

          case 12:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  }));
  return _loadImage.apply(this, arguments);
}

export function parseToImageBitmap(arrayBuffer, options) {
  if (typeof createImageBitmap === 'undefined') {
    throw new Error('parseImage');
  }

  var blob = new Blob([new Uint8Array(arrayBuffer)]);
  return createImageBitmap(blob);
}
export function loadToHTMLImage(_x2, _x3) {
  return _loadToHTMLImage.apply(this, arguments);
}

function _loadToHTMLImage() {
  _loadToHTMLImage = _asyncToGenerator(_regeneratorRuntime.mark(function _callee2(url, options) {
    var src, response, xml;
    return _regeneratorRuntime.wrap(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            if (!/\.svg((\?|#).*)?$/.test(url)) {
              _context2.next = 10;
              break;
            }

            _context2.next = 3;
            return fetch(url, options);

          case 3:
            response = _context2.sent;
            _context2.next = 6;
            return response.text();

          case 6:
            xml = _context2.sent;
            src = "data:image/svg+xml;base64,".concat(btoa(xml));
            _context2.next = 13;
            break;

          case 10:
            _context2.next = 12;
            return url;

          case 12:
            src = _context2.sent;

          case 13:
            _context2.next = 15;
            return new Promise(function (resolve, reject) {
              try {
                var image = new Image();

                image.onload = function () {
                  return resolve(image);
                };

                image.onerror = function (err) {
                  return reject(new Error("Could not load image ".concat(url, ": ").concat(err)));
                };

                image.crossOrigin = options && options.crossOrigin || 'anonymous';
                image.src = src;
              } catch (error) {
                reject(error);
              }
            });

          case 15:
            return _context2.abrupt("return", _context2.sent);

          case 16:
          case "end":
            return _context2.stop();
        }
      }
    }, _callee2);
  }));
  return _loadToHTMLImage.apply(this, arguments);
}
//# sourceMappingURL=parse-image.js.map