{"version":3,"sources":["../../../src/lib/image-parsers.js"],"names":["BIG_ENDIAN","LITTLE_ENDIAN","mimeTypeMap","Map","test","isPng","getSize","getPngSize","isJpeg","getJpegSize","isGif","getGifSize","isBmp","getBmpSize","dataView","byteLength","getUint32","width","height","getUint16","getUint8","getJpegMarkers","tableMarkers","sofMarkers","i","marker","has","Set","add"],"mappings":";;;;;;AAAA,IAAMA,UAAU,GAAG,KAAnB;AACA,IAAMC,aAAa,GAAG,IAAtB;AAEO,IAAMC,WAAW,GAAG,IAAIC,GAAJ,CAAQ,CACjC,CAAC,WAAD,EAAc;AAACC,EAAAA,IAAI,EAAEC,KAAP;AAAcC,EAAAA,OAAO,EAAEC;AAAvB,CAAd,CADiC,EAEjC,CAAC,YAAD,EAAe;AAACH,EAAAA,IAAI,EAAEI,MAAP;AAAeF,EAAAA,OAAO,EAAEG;AAAxB,CAAf,CAFiC,EAGjC,CAAC,WAAD,EAAc;AAACL,EAAAA,IAAI,EAAEM,KAAP;AAAcJ,EAAAA,OAAO,EAAEK;AAAvB,CAAd,CAHiC,EAIjC,CAAC,WAAD,EAAc;AAACP,EAAAA,IAAI,EAAEQ,KAAP;AAAcN,EAAAA,OAAO,EAAEO;AAAvB,CAAd,CAJiC,CAAR,CAApB;;;AASP,SAASR,KAAT,CAAeS,QAAf,EAAyB;AAEvB,SAAOA,QAAQ,CAACC,UAAT,IAAuB,EAAvB,IAA6BD,QAAQ,CAACE,SAAT,CAAmB,CAAnB,EAAsBhB,UAAtB,MAAsC,UAA1E;AACD;;AAED,SAASO,UAAT,CAAoBO,QAApB,EAA8B;AAE5B,SAAO;AACLG,IAAAA,KAAK,EAAEH,QAAQ,CAACE,SAAT,CAAmB,EAAnB,EAAuBhB,UAAvB,CADF;AAELkB,IAAAA,MAAM,EAAEJ,QAAQ,CAACE,SAAT,CAAmB,EAAnB,EAAuBhB,UAAvB;AAFH,GAAP;AAID;;AAID,SAASU,KAAT,CAAeI,QAAf,EAAyB;AAEvB,SAAOA,QAAQ,CAACC,UAAT,IAAuB,EAAvB,IAA6BD,QAAQ,CAACE,SAAT,CAAmB,CAAnB,EAAsBhB,UAAtB,MAAsC,UAA1E;AACD;;AAID,SAASW,UAAT,CAAoBG,QAApB,EAA8B;AAE5B,SAAO;AACLG,IAAAA,KAAK,EAAEH,QAAQ,CAACK,SAAT,CAAmB,CAAnB,EAAsBlB,aAAtB,CADF;AAELiB,IAAAA,MAAM,EAAEJ,QAAQ,CAACK,SAAT,CAAmB,CAAnB,EAAsBlB,aAAtB;AAFH,GAAP;AAID;;AAKD,SAASW,KAAT,CAAeE,QAAf,EAAyB;AAGvB,SACEA,QAAQ,CAACC,UAAT,IAAuB,EAAvB,IACAD,QAAQ,CAACK,SAAT,CAAmB,CAAnB,EAAsBnB,UAAtB,MAAsC,MADtC,IAEAc,QAAQ,CAACE,SAAT,CAAmB,CAAnB,EAAsBf,aAAtB,MAAyCa,QAAQ,CAACC,UAHpD;AAKD;;AAED,SAASF,UAAT,CAAoBC,QAApB,EAA8B;AAE5B,SAAO;AACLG,IAAAA,KAAK,EAAEH,QAAQ,CAACE,SAAT,CAAmB,EAAnB,EAAuBf,aAAvB,CADF;AAELiB,IAAAA,MAAM,EAAEJ,QAAQ,CAACE,SAAT,CAAmB,EAAnB,EAAuBf,aAAvB;AAFH,GAAP;AAID;;AAID,SAASO,MAAT,CAAgBM,QAAhB,EAA0B;AAGxB,SACEA,QAAQ,CAACC,UAAT,IAAuB,CAAvB,IACAD,QAAQ,CAACK,SAAT,CAAmB,CAAnB,EAAsBnB,UAAtB,MAAsC,MADtC,IAEAc,QAAQ,CAACM,QAAT,CAAkB,CAAlB,EAAqBpB,UAArB,MAAqC,IAFrC,IAGAc,QAAQ,CAACK,SAAT,CAAmBL,QAAQ,CAACC,UAAT,GAAsB,CAAzC,EAA4Cf,UAA5C,MAA4D,MAJ9D;AAMD;;AAGD,SAASS,WAAT,CAAqBK,QAArB,EAA+B;AAE7B,MAAIA,QAAQ,CAACC,UAAT,GAAsB,CAAtB,IAA2BD,QAAQ,CAACK,SAAT,CAAmB,CAAnB,EAAsBnB,UAAtB,MAAsC,MAArE,EAA6E;AAC3E,WAAO,IAAP;AACD;;AAJ4B,wBAMMqB,cAAc,EANpB;AAAA,MAMtBC,YANsB,mBAMtBA,YANsB;AAAA,MAMRC,UANQ,mBAMRA,UANQ;;AAS7B,MAAIC,CAAC,GAAG,CAAR;;AACA,SAAOA,CAAC,GAAGV,QAAQ,CAACC,UAApB,EAAgC;AAC9B,QAAMU,MAAM,GAAGX,QAAQ,CAACK,SAAT,CAAmBK,CAAnB,EAAsBxB,UAAtB,CAAf;;AAGA,QAAIuB,UAAU,CAACG,GAAX,CAAeD,MAAf,CAAJ,EAA4B;AAC1B,aAAO;AACLP,QAAAA,MAAM,EAAEJ,QAAQ,CAACK,SAAT,CAAmBK,CAAC,GAAG,CAAvB,EAA0BxB,UAA1B,CADH;AAELiB,QAAAA,KAAK,EAAEH,QAAQ,CAACK,SAAT,CAAmBK,CAAC,GAAG,CAAvB,EAA0BxB,UAA1B;AAFF,OAAP;AAID;;AAGD,QAAI,CAACsB,YAAY,CAACI,GAAb,CAAiBD,MAAjB,CAAL,EAA+B;AAC7B,aAAO,IAAP;AACD;;AAGDD,IAAAA,CAAC,IAAI,CAAL;AACAA,IAAAA,CAAC,IAAIV,QAAQ,CAACK,SAAT,CAAmBK,CAAnB,EAAsBxB,UAAtB,CAAL;AACD;;AAED,SAAO,IAAP;AACD;;AAED,SAASqB,cAAT,GAA0B;AAGxB,MAAMC,YAAY,GAAG,IAAIK,GAAJ,CAAQ,CAAC,MAAD,EAAS,MAAT,EAAiB,MAAjB,EAAyB,MAAzB,EAAiC,MAAjC,CAAR,CAArB;;AACA,OAAK,IAAIH,CAAC,GAAG,MAAb,EAAqBA,CAAC,GAAG,MAAzB,EAAiC,EAAEA,CAAnC,EAAsC;AACpCF,IAAAA,YAAY,CAACM,GAAb,CAAiBJ,CAAjB;AACD;;AAID,MAAMD,UAAU,GAAG,IAAII,GAAJ,CAAQ,CACzB,MADyB,EAEzB,MAFyB,EAGzB,MAHyB,EAIzB,MAJyB,EAKzB,MALyB,EAMzB,MANyB,EAOzB,MAPyB,EAQzB,MARyB,EASzB,MATyB,EAUzB,MAVyB,EAWzB,MAXyB,EAYzB,MAZyB,EAazB,MAbyB,EAczB,MAdyB,CAAR,CAAnB;AAiBA,SAAO;AAACL,IAAAA,YAAY,EAAZA,YAAD;AAAeC,IAAAA,UAAU,EAAVA;AAAf,GAAP;AACD","sourcesContent":["const BIG_ENDIAN = false;\nconst LITTLE_ENDIAN = true;\n\nexport const mimeTypeMap = new Map([\n  ['image/png', {test: isPng, getSize: getPngSize}],\n  ['image/jpeg', {test: isJpeg, getSize: getJpegSize}],\n  ['image/gif', {test: isGif, getSize: getGifSize}],\n  ['image/bmp', {test: isBmp, getSize: getBmpSize}]\n]);\n\n// PNG\n\nfunction isPng(dataView) {\n  // Check file contains the first 4 bytes of the PNG signature.\n  return dataView.byteLength >= 24 && dataView.getUint32(0, BIG_ENDIAN) === 0x89504e47;\n}\n\nfunction getPngSize(dataView) {\n  // Extract size from a binary PNG file\n  return {\n    width: dataView.getUint32(16, BIG_ENDIAN),\n    height: dataView.getUint32(20, BIG_ENDIAN)\n  };\n}\n\n// GIF\n\nfunction isGif(dataView) {\n  // Check first 4 bytes of the GIF signature (\"GIF8\").\n  return dataView.byteLength >= 10 && dataView.getUint32(0, BIG_ENDIAN) === 0x47494638;\n}\n\n// Extract size from a binary GIF file\n// TODO: GIF is not this simple\nfunction getGifSize(dataView) {\n  // GIF is little endian.\n  return {\n    width: dataView.getUint16(6, LITTLE_ENDIAN),\n    height: dataView.getUint16(8, LITTLE_ENDIAN)\n  };\n}\n\n// BMP\n\n// TODO: BMP is not this simple\nfunction isBmp(dataView) {\n  // Check magic number is valid (first 2 characters should be \"BM\").\n  // The mandatory bitmap file header is 14 bytes long.\n  return (\n    dataView.byteLength >= 14 &&\n    dataView.getUint16(0, BIG_ENDIAN) === 0x424d &&\n    dataView.getUint32(2, LITTLE_ENDIAN) === dataView.byteLength\n  );\n}\n\nfunction getBmpSize(dataView) {\n  // BMP is little endian.\n  return {\n    width: dataView.getUint32(18, LITTLE_ENDIAN),\n    height: dataView.getUint32(22, LITTLE_ENDIAN)\n  };\n}\n\n// JPEG\n\nfunction isJpeg(dataView) {\n  // Check file contains the JPEG \"start of image\" (SOI) marker\n  // followed by another marker.\n  return (\n    dataView.byteLength >= 3 &&\n    dataView.getUint16(0, BIG_ENDIAN) === 0xffd8 &&\n    dataView.getUint8(2, BIG_ENDIAN) === 0xff &&\n    dataView.getUint16(dataView.byteLength - 2, BIG_ENDIAN) === 0xffd9\n  );\n}\n\n// Extract width and height from a binary JPEG file\nfunction getJpegSize(dataView) {\n  // Check file contains the JPEG \"start of image\" (SOI) marker.\n  if (dataView.byteLength < 2 || dataView.getUint16(0, BIG_ENDIAN) !== 0xffd8) {\n    return null;\n  }\n\n  const {tableMarkers, sofMarkers} = getJpegMarkers();\n\n  // Exclude the two byte SOI marker.\n  let i = 2;\n  while (i < dataView.byteLength) {\n    const marker = dataView.getUint16(i, BIG_ENDIAN);\n\n    // The frame that contains the width and height of the JPEG image.\n    if (sofMarkers.has(marker)) {\n      return {\n        height: dataView.getUint16(i + 5, BIG_ENDIAN), // Number of lines\n        width: dataView.getUint16(i + 7, BIG_ENDIAN) // Number of pixels per line\n      };\n    }\n\n    // Miscellaneous tables/data preceding the frame header.\n    if (!tableMarkers.has(marker)) {\n      return null;\n    }\n\n    // Length includes size of length parameter but not the two byte header.\n    i += 2;\n    i += dataView.getUint16(i, BIG_ENDIAN);\n  }\n\n  return null;\n}\n\nfunction getJpegMarkers() {\n  // Tables/misc header markers.\n  // DQT, DHT, DAC, DRI, COM, APP_n\n  const tableMarkers = new Set([0xffdb, 0xffc4, 0xffcc, 0xffdd, 0xfffe]);\n  for (let i = 0xffe0; i < 0xfff0; ++i) {\n    tableMarkers.add(i);\n  }\n\n  // SOF markers and DHP marker.\n  // These markers are after tables/misc data.\n  const sofMarkers = new Set([\n    0xffc0,\n    0xffc1,\n    0xffc2,\n    0xffc3,\n    0xffc5,\n    0xffc6,\n    0xffc7,\n    0xffc9,\n    0xffca,\n    0xffcb,\n    0xffcd,\n    0xffce,\n    0xffcf,\n    0xffde\n  ]);\n\n  return {tableMarkers, sofMarkers};\n}\n"],"file":"image-parsers.js"}