"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createReadStream = createReadStream;
exports.parseFile = parseFile;
exports.parseFileSync = parseFileSync;
exports.loadFile = loadFile;
Object.defineProperty(exports, "parse", {
  enumerable: true,
  get: function get() {
    return _parse.parse;
  }
});
Object.defineProperty(exports, "parseSync", {
  enumerable: true,
  get: function get() {
    return _parseSync.parseSync;
  }
});
Object.defineProperty(exports, "fetchFile", {
  enumerable: true,
  get: function get() {
    return _fetchFile.fetchFile;
  }
});
Object.defineProperty(exports, "load", {
  enumerable: true,
  get: function get() {
    return _load.load;
  }
});
Object.defineProperty(exports, "loadInBatches", {
  enumerable: true,
  get: function get() {
    return _load.loadInBatches;
  }
});
Object.defineProperty(exports, "isBrowser", {
  enumerable: true,
  get: function get() {
    return _globals.isBrowser;
  }
});
Object.defineProperty(exports, "self", {
  enumerable: true,
  get: function get() {
    return _globals.self;
  }
});
Object.defineProperty(exports, "window", {
  enumerable: true,
  get: function get() {
    return _globals.window;
  }
});
Object.defineProperty(exports, "global", {
  enumerable: true,
  get: function get() {
    return _globals.global;
  }
});
Object.defineProperty(exports, "document", {
  enumerable: true,
  get: function get() {
    return _globals.document;
  }
});
Object.defineProperty(exports, "setPathPrefix", {
  enumerable: true,
  get: function get() {
    return _fileAliases2.setPathPrefix;
  }
});
Object.defineProperty(exports, "getPathPrefix", {
  enumerable: true,
  get: function get() {
    return _fileAliases2.getPathPrefix;
  }
});
Object.defineProperty(exports, "resolvePath", {
  enumerable: true,
  get: function get() {
    return _fileAliases2.resolvePath;
  }
});
Object.defineProperty(exports, "readFileSync", {
  enumerable: true,
  get: function get() {
    return _readFile.readFileSync;
  }
});
Object.defineProperty(exports, "writeFile", {
  enumerable: true,
  get: function get() {
    return _writeFile.writeFile;
  }
});
Object.defineProperty(exports, "writeFileSync", {
  enumerable: true,
  get: function get() {
    return _writeFile.writeFileSync;
  }
});
Object.defineProperty(exports, "_getErrorMessageFromResponseSync", {
  enumerable: true,
  get: function get() {
    return _fetchErrorMessage.getErrorMessageFromResponseSync;
  }
});
Object.defineProperty(exports, "_getErrorMessageFromResponse", {
  enumerable: true,
  get: function get() {
    return _fetchErrorMessage.getErrorMessageFromResponse;
  }
});
Object.defineProperty(exports, "registerLoaders", {
  enumerable: true,
  get: function get() {
    return _registerLoaders.registerLoaders;
  }
});
Object.defineProperty(exports, "_unregisterLoaders", {
  enumerable: true,
  get: function get() {
    return _registerLoaders._unregisterLoaders;
  }
});
Object.defineProperty(exports, "parseInBatches", {
  enumerable: true,
  get: function get() {
    return _parseInBatches.parseInBatches;
  }
});
Object.defineProperty(exports, "parseInBatchesSync", {
  enumerable: true,
  get: function get() {
    return _parseInBatchesSync.parseInBatchesSync;
  }
});
Object.defineProperty(exports, "encode", {
  enumerable: true,
  get: function get() {
    return _encode.encode;
  }
});
Object.defineProperty(exports, "encodeSync", {
  enumerable: true,
  get: function get() {
    return _encode.encodeSync;
  }
});
Object.defineProperty(exports, "encodeInBatches", {
  enumerable: true,
  get: function get() {
    return _encode.encodeInBatches;
  }
});
Object.defineProperty(exports, "save", {
  enumerable: true,
  get: function get() {
    return _save.save;
  }
});
Object.defineProperty(exports, "saveSync", {
  enumerable: true,
  get: function get() {
    return _save.saveSync;
  }
});
Object.defineProperty(exports, "isPromise", {
  enumerable: true,
  get: function get() {
    return _isType.isPromise;
  }
});
Object.defineProperty(exports, "isIterable", {
  enumerable: true,
  get: function get() {
    return _isType.isIterable;
  }
});
Object.defineProperty(exports, "isAsyncIterable", {
  enumerable: true,
  get: function get() {
    return _isType.isAsyncIterable;
  }
});
Object.defineProperty(exports, "isIterator", {
  enumerable: true,
  get: function get() {
    return _isType.isIterator;
  }
});
Object.defineProperty(exports, "isFetchResponse", {
  enumerable: true,
  get: function get() {
    return _isType.isFetchResponse;
  }
});
Object.defineProperty(exports, "isReadableStream", {
  enumerable: true,
  get: function get() {
    return _isType.isReadableStream;
  }
});
Object.defineProperty(exports, "isWritableStream", {
  enumerable: true,
  get: function get() {
    return _isType.isWritableStream;
  }
});
Object.defineProperty(exports, "toArrayBuffer", {
  enumerable: true,
  get: function get() {
    return _binaryUtils.toArrayBuffer;
  }
});
Object.defineProperty(exports, "getStreamIterator", {
  enumerable: true,
  get: function get() {
    return _streamUtils.getStreamIterator;
  }
});
Object.defineProperty(exports, "forEach", {
  enumerable: true,
  get: function get() {
    return _asyncIteratorUtils.forEach;
  }
});
Object.defineProperty(exports, "concatenateAsyncIterator", {
  enumerable: true,
  get: function get() {
    return _asyncIteratorUtils.concatenateAsyncIterator;
  }
});
Object.defineProperty(exports, "lineAsyncIterator", {
  enumerable: true,
  get: function get() {
    return _asyncIteratorUtils.lineAsyncIterator;
  }
});
Object.defineProperty(exports, "textDecoderAsyncIterator", {
  enumerable: true,
  get: function get() {
    return _asyncIteratorUtils.textDecoderAsyncIterator;
  }
});
Object.defineProperty(exports, "numberedLineAsyncIterator", {
  enumerable: true,
  get: function get() {
    return _asyncIteratorUtils.numberedLineAsyncIterator;
  }
});
Object.defineProperty(exports, "assert", {
  enumerable: true,
  get: function get() {
    return _assert["default"];
  }
});
Object.defineProperty(exports, "_selectLoader", {
  enumerable: true,
  get: function get() {
    return _selectLoader.selectLoader;
  }
});
Object.defineProperty(exports, "_WorkerThread", {
  enumerable: true,
  get: function get() {
    return _workerThread["default"];
  }
});
Object.defineProperty(exports, "_WorkerFarm", {
  enumerable: true,
  get: function get() {
    return _workerFarm["default"];
  }
});
Object.defineProperty(exports, "_WorkerPool", {
  enumerable: true,
  get: function get() {
    return _workerPool["default"];
  }
});
Object.defineProperty(exports, "_fetchProgress", {
  enumerable: true,
  get: function get() {
    return _fetchProgress["default"];
  }
});
exports.path = exports.TextDecoder = exports.TextEncoder = void 0;

var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var _parse = require("./lib/parse");

var _parseSync = require("./lib/parse-sync");

var _fetchFile = require("./lib/fetch/fetch-file");

var _load = require("./lib/load");

var _fileAliases = require("./lib/fetch/file-aliases");

var _globals = require("./utils/globals");

var path = _interopRequireWildcard(require("./lib/path/path"));

exports.path = path;

var _fileAliases2 = require("./lib/fetch/file-aliases.js");

var _readFile = require("./lib/fetch/read-file");

var _writeFile = require("./lib/fetch/write-file");

var _fetchErrorMessage = require("./lib/fetch/fetch-error-message");

var _registerLoaders = require("./lib/register-loaders");

var _parseInBatches = require("./lib/parse-in-batches");

var _parseInBatchesSync = require("./lib/parse-in-batches-sync");

var _encode = require("./lib/encode");

var _save = require("./lib/save");

var _isType = require("./javascript-utils/is-type");

var _binaryUtils = require("./javascript-utils/binary-utils");

var _streamUtils = require("./javascript-utils/stream-utils");

var _asyncIteratorUtils = require("./javascript-utils/async-iterator-utils");

var _assert = _interopRequireDefault(require("./utils/assert"));

var _selectLoader = require("./lib/select-loader");

var _workerThread = _interopRequireDefault(require("./worker-utils/worker-thread"));

var _workerFarm = _interopRequireDefault(require("./worker-utils/worker-farm"));

var _workerPool = _interopRequireDefault(require("./worker-utils/worker-pool"));

var _fetchProgress = _interopRequireDefault(require("./lib/progress/fetch-progress"));

var TextEncoder = _globals.global.TextEncoder;
exports.TextEncoder = TextEncoder;
var TextDecoder = _globals.global.TextDecoder;
exports.TextDecoder = TextDecoder;

function createReadStream(_x, _x2) {
  return _createReadStream.apply(this, arguments);
}

function _createReadStream() {
  _createReadStream = (0, _asyncToGenerator2["default"])(_regenerator["default"].mark(function _callee(url, options) {
    var response;
    return _regenerator["default"].wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            console.warn('createReadStream() deprecated, use fetch().then(resp => resp.body)');
            url = (0, _fileAliases.resolvePath)(url);
            _context.next = 4;
            return (0, _fetchFile.fetchFile)(url, options);

          case 4:
            response = _context.sent;
            return _context.abrupt("return", response.body);

          case 6:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  }));
  return _createReadStream.apply(this, arguments);
}

function parseFile() {
  console.warn('parse() deprecated, use parse()');
  return _parse.parse.apply(void 0, arguments);
}

function parseFileSync() {
  console.warn('parseSync() deprecated, use parseSync()');
  return _parseSync.parseSync.apply(void 0, arguments);
}

function loadFile() {
  console.warn('loadFile() deprecated, use load()');
  return _load.load.apply(void 0, arguments);
}
//# sourceMappingURL=index.js.map