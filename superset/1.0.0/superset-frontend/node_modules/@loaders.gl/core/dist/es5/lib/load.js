"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.loadInBatches = loadInBatches;
exports.load = load;

var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var _isType = require("../javascript-utils/is-type");

var _fetchFile = require("./fetch/fetch-file");

var _normalizeLoader = require("./loader-utils/normalize-loader");

var _normalizeOptions = require("./loader-utils/normalize-options");

var _selectLoader = require("./select-loader");

var _parse = require("./parse");

var _parseInBatches = require("./parse-in-batches");

function loadInBatches(_x, _x2, _x3) {
  return _loadInBatches.apply(this, arguments);
}

function _loadInBatches() {
  _loadInBatches = (0, _asyncToGenerator2["default"])(_regenerator["default"].mark(function _callee(url, loaders, options) {
    var response;
    return _regenerator["default"].wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            _context.next = 2;
            return (0, _fetchFile.fetchFile)(url, options);

          case 2:
            response = _context.sent;
            return _context.abrupt("return", (0, _parseInBatches.parseInBatches)(response, loaders, options, url));

          case 4:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  }));
  return _loadInBatches.apply(this, arguments);
}

function load(_x4, _x5, _x6) {
  return _load.apply(this, arguments);
}

function _load() {
  _load = (0, _asyncToGenerator2["default"])(_regenerator["default"].mark(function _callee2(url, loaders, options) {
    var autoUrl, loader, loaderOptions, data;
    return _regenerator["default"].wrap(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            if (!Array.isArray(loaders) && !(0, _normalizeLoader.isLoaderObject)(loaders)) {
              options = loaders;
              loaders = null;
            }

            autoUrl = (0, _isType.isFileReadable)(url) ? url.name : url;
            loader = (0, _selectLoader.selectLoader)(loaders, autoUrl, null, {
              nothrow: true
            });

            if (!loader) {
              _context2.next = 9;
              break;
            }

            if (!loader.loadAndParse) {
              _context2.next = 9;
              break;
            }

            loaderOptions = (0, _normalizeOptions.mergeLoaderAndUserOptions)(options, loader);
            _context2.next = 8;
            return loader.loadAndParse(url, loaderOptions);

          case 8:
            return _context2.abrupt("return", _context2.sent);

          case 9:
            data = url;

            if (!((0, _isType.isFileReadable)(data) || typeof data === 'string')) {
              _context2.next = 14;
              break;
            }

            _context2.next = 13;
            return (0, _fetchFile.fetchFile)(url, options);

          case 13:
            data = _context2.sent;

          case 14:
            return _context2.abrupt("return", (0, _parse.parse)(data, loaders, options, url));

          case 15:
          case "end":
            return _context2.stop();
        }
      }
    }, _callee2);
  }));
  return _load.apply(this, arguments);
}
//# sourceMappingURL=load.js.map