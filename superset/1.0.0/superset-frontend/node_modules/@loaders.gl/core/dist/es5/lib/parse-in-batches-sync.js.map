{"version":3,"sources":["../../../src/lib/parse-in-batches-sync.js"],"names":["parseInBatchesSync","data","loaders","options","url","Array","isArray","loader","context","parseWithLoaderInBatchesSync","inputIterator","outputIterator","Error"],"mappings":";;;;;;;;;;;;;AAAA;;AACA;;AACA;;AACA;;AACA;;SAGsBA,kB;;;;;wFAAf,iBAAkCC,IAAlC,EAAwCC,OAAxC,EAAiDC,OAAjD,EAA0DC,GAA1D;AAAA;AAAA;AAAA;AAAA;AAAA;AAGL,gBAAI,CAACC,KAAK,CAACC,OAAN,CAAcJ,OAAd,CAAD,IAA2B,CAAC,qCAAeA,OAAf,CAAhC,EAAyD;AACvDE,cAAAA,GAAG,GAAGD,OAAN;AACAA,cAAAA,OAAO,GAAGD,OAAV;AACAA,cAAAA,OAAO,GAAG,IAAV;AACD;;AAIKK,YAAAA,MAXD,GAWU,gCAAaL,OAAb,EAAsBE,GAAtB,EAA2B,IAA3B,CAXV;AAcLD,YAAAA,OAAO,GAAG,iDAA0BA,OAA1B,EAAmCI,MAAnC,CAAV;AAEMC,YAAAA,OAhBD,GAgBW,wCAAiB;AAACJ,cAAAA,GAAG,EAAHA;AAAD,aAAjB,EAAwBD,OAAxB,CAhBX;AAAA,6CAkBEM,4BAA4B,CAACF,MAAD,EAASN,IAAT,EAAeE,OAAf,EAAwBK,OAAxB,CAlB9B;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;;;AAqBP,SAASC,4BAAT,CAAsCF,MAAtC,EAA8CN,IAA9C,EAAoDE,OAApD,EAA6DK,OAA7D,EAAsE;AAEpE,MAAID,MAAM,CAACP,kBAAX,EAA+B;AAC7B,QAAMU,aAAa,GAAG,kCAAoBT,IAApB,CAAtB;AACA,QAAMU,cAAc,GAAGJ,MAAM,CAACP,kBAAP,CAA0BU,aAA1B,EAAyCP,OAAzC,EAAkDK,OAAlD,EAA2DD,MAA3D,CAAvB;AACA,WAAOI,cAAP;AACD;;AAED,QAAM,IAAIC,KAAJ,CAAU,4CAAV,CAAN;AACD","sourcesContent":["import {isLoaderObject} from './loader-utils/normalize-loader';\nimport {mergeLoaderAndUserOptions} from './loader-utils/normalize-options';\nimport {getIteratorFromData} from './loader-utils/get-data';\nimport {getLoaderContext} from './loader-utils/get-loader-context';\nimport {selectLoader} from './select-loader';\n\n// TODO - remove?\nexport async function parseInBatchesSync(data, loaders, options, url) {\n  // Signature: parseInBatchesSync(data, options, url)\n  // Uses registered loaders\n  if (!Array.isArray(loaders) && !isLoaderObject(loaders)) {\n    url = options;\n    options = loaders;\n    loaders = null;\n  }\n\n  // Chooses a loader and normalizes it\n  // TODO - only uses URL, need a selectLoader variant that peeks at first stream chunk...\n  const loader = selectLoader(loaders, url, null);\n\n  // Normalize options\n  options = mergeLoaderAndUserOptions(options, loader);\n\n  const context = getLoaderContext({url}, options);\n\n  return parseWithLoaderInBatchesSync(loader, data, options, context);\n}\n\nfunction parseWithLoaderInBatchesSync(loader, data, options, context) {\n  // Create async iterator adapter for data, and concatenate result\n  if (loader.parseInBatchesSync) {\n    const inputIterator = getIteratorFromData(data);\n    const outputIterator = loader.parseInBatchesSync(inputIterator, options, context, loader);\n    return outputIterator;\n  }\n\n  throw new Error('parseWithLoaderInBatchesSync not available');\n}\n"],"file":"parse-in-batches-sync.js"}