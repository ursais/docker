{"version":3,"sources":["../../../src/javascript-utils/stream-utils.js"],"names":["getStreamIterator","stream","isBrowser","nodeVersion","Symbol","asyncIterator","getIterator","makeBrowserStreamIterator","makeNodeStreamIterator","reader","getReader","read","done","value","releaseLock","data","_readableState","ended","onceReadable","Promise","resolve","once"],"mappings":";;;;;;;;;;;;;;;;;AAAA;;AAEO,SAASA,iBAAT,CAA2BC,MAA3B,EAAmC;AAExC,MAAIC,sBAAaC,wBAAe,EAAhC,EAAoC;AAElC,QAAI,OAAOF,MAAM,CAACG,MAAM,CAACC,aAAR,CAAb,KAAwC,UAA5C,EAAwD;AACtD,aAAOJ,MAAP;AACD;;AAGD,QAAI,OAAOA,MAAM,CAACK,WAAd,KAA8B,UAAlC,EAA8C;AAC5C,aAAOL,MAAM,CAACK,WAAP,EAAP;AACD;AACF;;AAED,SAAOJ,qBAAYK,yBAAyB,CAACN,MAAD,CAArC,GAAgDO,sBAAsB,CAACP,MAAD,CAA7E;AACD;;SAKeM,yB;;;;;iGAAhB,iBAA0CN,MAA1C;AAAA;;AAAA;AAAA;AAAA;AAAA;AAEQQ,YAAAA,MAFR,GAEiBR,MAAM,CAACS,SAAP,EAFjB;AAAA;;AAAA;AAAA,iBAMW,IANX;AAAA;AAAA;AAAA;;AAAA;AAAA,yDAQkCD,MAAM,CAACE,IAAP,EARlC;;AAAA;AAAA;AAQaC,YAAAA,IARb,QAQaA,IARb;AAQmBC,YAAAA,KARnB,QAQmBA,KARnB;;AAAA,iBAUUD,IAVV;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAcM,mBAAMC,KAAN;;AAdN;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAmBIJ,YAAAA,MAAM,CAACK,WAAP;;AAnBJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;;;SA0BgBN,sB;;;;;8FAAhB,kBAAuCP,MAAvC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yDAEiBA,MAFjB;;AAAA;AAEEA,YAAAA,MAFF;;AAAA;AAAA,iBAKS,IALT;AAAA;AAAA;AAAA;;AAMUc,YAAAA,IANV,GAMiBd,MAAM,CAACU,IAAP,EANjB;;AAAA,kBAOQI,IAAI,KAAK,IAPjB;AAAA;AAAA;AAAA;;AAAA;AAQM,mBAAMA,IAAN;;AARN;AAAA;;AAAA;AAAA,iBAYQd,MAAM,CAACe,cAAP,CAAsBC,KAZ9B;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAAA,yDAeUC,YAAY,CAACjB,MAAD,CAftB;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;;;SAmBeiB,Y;;;;;kFAAf,kBAA4BjB,MAA5B;AAAA;AAAA;AAAA;AAAA;AAAA,8CACS,IAAIkB,OAAJ,CAAY,UAAAC,OAAO,EAAI;AAC5BnB,cAAAA,MAAM,CAACoB,IAAP,CAAY,UAAZ,EAAwBD,OAAxB;AACD,aAFM,CADT;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G","sourcesContent":["import {isBrowser, nodeVersion} from '../utils/globals';\n\nexport function getStreamIterator(stream) {\n  // Hacky test for node version to ensure we don't call bad polyfills\n  if (isBrowser || nodeVersion >= 10) {\n    // NODE 10+: stream is an asyncIterator\n    if (typeof stream[Symbol.asyncIterator] === 'function') {\n      return stream;\n    }\n\n    // WhatWG: stream is supposed to have a `getIterator` method\n    if (typeof stream.getIterator === 'function') {\n      return stream.getIterator();\n    }\n  }\n\n  return isBrowser ? makeBrowserStreamIterator(stream) : makeNodeStreamIterator(stream);\n}\n\n// BROWSER IMPLEMENTATION\n// See https://jakearchibald.com/2017/async-iterators-and-generators/#making-streams-iterate\n\nasync function* makeBrowserStreamIterator(stream) {\n  // In the brower, we first need to get a lock on the stream\n  const reader = stream.getReader();\n\n  try {\n    // eslint-disable-next-line no-constant-condition\n    while (true) {\n      // Read from the stream\n      const {done, value} = await reader.read();\n      // Exit if we're done\n      if (done) {\n        return;\n      }\n      // Else yield the chunk\n      yield value;\n    }\n  } catch (error) {\n    // TODO - examples makes it look like this should always be called,\n    // but that generates exceptions so only call it if we do not reach the end\n    reader.releaseLock();\n  }\n}\n\n// NODE <10 IMPLEMENTATION\n// See https://github.com/bustle/streaming-iterables, MIT license\n\nasync function* makeNodeStreamIterator(stream) {\n  // Node createStream will return promises to handle http requests\n  stream = await stream;\n\n  // eslint-disable-next-line no-constant-condition\n  while (true) {\n    const data = stream.read();\n    if (data !== null) {\n      yield data;\n      // eslint-disable-next-line no-continue\n      continue;\n    }\n    if (stream._readableState.ended) {\n      return;\n    }\n    await onceReadable(stream);\n  }\n}\n\nasync function onceReadable(stream) {\n  return new Promise(resolve => {\n    stream.once('readable', resolve);\n  });\n}\n\n// TODO - we could add our own polyfill\n// const {Readable} = require('stream');\n// if (typeof Readable !== 'undefined' && !Readable.prototype[Symbol.asyncIterator]) {\n//   Readable.prototype[Symbol.asyncIterator] = function () {\n//     return makeNodeStreamIterator(this);\n//   }\n// }\n"],"file":"stream-utils.js"}