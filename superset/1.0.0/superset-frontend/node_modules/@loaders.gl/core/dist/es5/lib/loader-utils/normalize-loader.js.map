{"version":3,"sources":["../../../../src/lib/loader-utils/normalize-loader.js"],"names":["isLoaderObject","loader","Array","isArray","hasParser","parseTextSync","parseSync","parse","loadAndParse","parseStream","parseInBatches","worker","normalizeLoader","options","extension","extensions","length","text","binary"],"mappings":";;;;;;;;;;;;AAAA;;;;;;AAEO,SAASA,cAAT,CAAwBC,MAAxB,EAAgC;AACrC,MAAI,CAACA,MAAL,EAAa;AACX,WAAO,KAAP;AACD;;AAED,MAAIC,KAAK,CAACC,OAAN,CAAcF,MAAd,CAAJ,EAA2B;AACzBA,IAAAA,MAAM,GAAGA,MAAM,CAAC,CAAD,CAAf;AACD;;AAED,MAAMG,SAAS,GACbH,MAAM,CAACI,aAAP,IACAJ,MAAM,CAACK,SADP,IAEAL,MAAM,CAACM,KAFP,IAGAN,MAAM,CAACO,YAHP,IAIAP,MAAM,CAACQ,WAJP,IAKAR,MAAM,CAACS,cALP,IAOAT,MAAM,CAACU,MART;AAUA,SAAOP,SAAP;AACD;;AAEM,SAASQ,eAAT,CAAyBX,MAAzB,EAAiC;AACtC,0BAAOD,cAAc,CAACC,MAAD,CAArB;AAKA,MAAIY,OAAJ;;AACA,MAAIX,KAAK,CAACC,OAAN,CAAcF,MAAd,CAAJ,EAA2B;AACzBY,IAAAA,OAAO,GAAGZ,MAAM,CAAC,CAAD,CAAhB;AACAA,IAAAA,MAAM,GAAGA,MAAM,CAAC,CAAD,CAAf;AACAA,IAAAA,MAAM,qBACDA,MADC;AAEJY,MAAAA,OAAO,oBAAMZ,MAAM,CAACY,OAAb,MAAyBA,OAAzB;AAFH,MAAN;AAID;;AAKD,MAAIZ,MAAM,CAACa,SAAX,EAAsB;AACpBb,IAAAA,MAAM,CAACc,UAAP,GAAoBd,MAAM,CAACc,UAAP,IAAqBd,MAAM,CAACa,SAAhD;AACA,WAAOb,MAAM,CAACa,SAAd;AACD;;AAGD,MAAI,CAACZ,KAAK,CAACC,OAAN,CAAcF,MAAM,CAACc,UAArB,CAAL,EAAuC;AACrCd,IAAAA,MAAM,CAACc,UAAP,GAAoB,CAACd,MAAM,CAACc,UAAR,CAApB;AACD;;AAED,0BAAOd,MAAM,CAACc,UAAP,IAAqBd,MAAM,CAACc,UAAP,CAAkBC,MAAlB,GAA2B,CAAhD,IAAqDf,MAAM,CAACc,UAAP,CAAkB,CAAlB,CAA5D;;AAKA,MAAId,MAAM,CAACI,aAAX,EAA0B;AACxBJ,IAAAA,MAAM,CAACgB,IAAP,GAAc,IAAd;AACD;;AAED,MAAI,CAAChB,MAAM,CAACgB,IAAZ,EAAkB;AAChBhB,IAAAA,MAAM,CAACiB,MAAP,GAAgB,IAAhB;AACD;;AAYD,SAAOjB,MAAP;AACD","sourcesContent":["import assert from '../../utils/assert';\n\nexport function isLoaderObject(loader) {\n  if (!loader) {\n    return false;\n  }\n\n  if (Array.isArray(loader)) {\n    loader = loader[0];\n  }\n\n  const hasParser =\n    loader.parseTextSync ||\n    loader.parseSync ||\n    loader.parse ||\n    loader.loadAndParse ||\n    loader.parseStream || // TODO Replace with parseInBatches\n    loader.parseInBatches ||\n    // loader.parseInBatchesSync || // Optimization only, parseInBatches needed\n    loader.worker;\n\n  return hasParser;\n}\n\nexport function normalizeLoader(loader) {\n  assert(isLoaderObject(loader));\n\n  // NORMALIZE [LOADER, OPTIONS] => LOADER\n\n  // If [loader, options], create a new loaders object with options merged in\n  let options;\n  if (Array.isArray(loader)) {\n    options = loader[1];\n    loader = loader[0];\n    loader = {\n      ...loader,\n      options: {...loader.options, ...options}\n    };\n  }\n\n  // NORMALIZE LOADER.EXTENSIONS\n\n  // Remove `extension`` prop, replace with `extensions``\n  if (loader.extension) {\n    loader.extensions = loader.extensions || loader.extension;\n    delete loader.extension;\n  }\n\n  // Ensure loader.extensions is an array\n  if (!Array.isArray(loader.extensions)) {\n    loader.extensions = [loader.extensions];\n  }\n\n  assert(loader.extensions && loader.extensions.length > 0 && loader.extensions[0]);\n\n  // NORMALIZE text and binary flags\n\n  // Ensure at least one of text/binary flags are properly set\n  if (loader.parseTextSync) {\n    loader.text = true;\n  }\n\n  if (!loader.text) {\n    loader.binary = true;\n  }\n\n  // TODO - Does adding a default MIME type add any value?\n  /*\n  if (!loader.mimeType) {\n    if (loader.binary) {\n      // TODO - do we need separate mime types for binary and text formats?\n      loader.mimeType = 'application/octet-stream';\n    }\n  }\n  */\n\n  return loader;\n}\n"],"file":"normalize-loader.js"}