{"version":3,"sources":["../../../../src/lib/loader-utils/parse-with-worker.js"],"names":["_workerFarm","getWorkerFarm","options","props","maxConcurrency","onDebug","WorkerFarm","onMessage","onWorkerMessage","setProps","worker","data","resolve","reject","type","result","arraybuffer","url","postMessage","id","message","parseWithWorker","workerSource","workerName","context","workerFarm","JSON","parse","stringify","process","source"],"mappings":";;;;;;;;;;;;;AAAA;;AACA;;AACA;;AAEA;;AAEA,IAAIA,WAAW,GAAG,IAAlB;;AAEA,SAASC,aAAT,GAAqC;AAAA,MAAdC,OAAc,uEAAJ,EAAI;AACnC,MAAMC,KAAK,GAAG,EAAd;;AACA,MAAID,OAAO,CAACE,cAAZ,EAA4B;AAC1BD,IAAAA,KAAK,CAACC,cAAN,GAAuBF,OAAO,CAACE,cAA/B;AACD;;AACD,MAAIF,OAAO,CAACG,OAAZ,EAAqB;AACnBF,IAAAA,KAAK,CAACE,OAAN,GAAgBH,OAAO,CAACG,OAAxB;AACD;;AAED,MAAI,CAACL,WAAL,EAAkB;AAChBA,IAAAA,WAAW,GAAG,IAAIM,uBAAJ,CAAe;AAACC,MAAAA,SAAS,EAAEC;AAAZ,KAAf,CAAd;AACD;;AACDR,EAAAA,WAAW,CAACS,QAAZ,CAAqBN,KAArB;;AAEA,SAAOH,WAAP;AACD;;SAEcQ,e;;;;;qFAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAgCE,YAAAA,MAAhC,QAAgCA,MAAhC,EAAwCC,IAAxC,QAAwCA,IAAxC,EAA8CC,OAA9C,QAA8CA,OAA9C,EAAuDC,MAAvD,QAAuDA,MAAvD;AAAA,0BACUF,IAAI,CAACG,IADf;AAAA,4CAES,MAFT,uBAMS,SANT,uBAeS,OAfT;AAAA;;AAAA;AAGMF,YAAAA,OAAO,CAACD,IAAI,CAACI,MAAN,CAAP;AAHN;;AAAA;AAAA;AAAA;AAAA,mBAQ6B,kBAAMJ,IAAI,CAACK,WAAX,EAAwBL,IAAI,CAACT,OAA7B,EAAsCS,IAAI,CAACM,GAA3C,CAR7B;;AAAA;AAQcF,YAAAA,MARd;AASQL,YAAAA,MAAM,CAACQ,WAAP,CAAmB;AAACJ,cAAAA,IAAI,EAAE,cAAP;AAAuBK,cAAAA,EAAE,EAAER,IAAI,CAACQ,EAAhC;AAAoCJ,cAAAA,MAAM,EAANA;AAApC,aAAnB,EAAgE,kCAAgBA,MAAhB,CAAhE;AATR;AAAA;;AAAA;AAAA;AAAA;AAWQL,YAAAA,MAAM,CAACQ,WAAP,CAAmB;AAACJ,cAAAA,IAAI,EAAE,eAAP;AAAwBK,cAAAA,EAAE,EAAER,IAAI,CAACQ,EAAjC;AAAqCC,cAAAA,OAAO,EAAE,YAAMA;AAApD,aAAnB;;AAXR;AAAA;;AAAA;AAgBMP,YAAAA,MAAM,CAACF,IAAI,CAACS,OAAN,CAAN;AAhBN;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;;;AA4Be,SAASC,eAAT,CACbC,YADa,EAEbC,UAFa,EAGbZ,IAHa,EAMb;AAAA,MAFAT,OAEA,uEAFU,EAEV;AAAA,MADAsB,OACA,uEADU,EACV;AACA,MAAMC,UAAU,GAAGxB,aAAa,CAACC,OAAD,CAAhC;AAIAA,EAAAA,OAAO,GAAGwB,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,SAAL,CAAe1B,OAAf,CAAX,CAAV;AAEA,SAAOuB,UAAU,CAACI,OAAX,CAAmBP,YAAnB,uBAA+CC,UAA/C,GAA6D;AAClEP,IAAAA,WAAW,EAAE,gCAAcL,IAAd,CADqD;AAElET,IAAAA,OAAO,EAAPA,OAFkE;AAGlE4B,IAAAA,MAAM,EAAE,YAH0D;AAIlEhB,IAAAA,IAAI,EAAE;AAJ4D,GAA7D,CAAP;AAMD","sourcesContent":["import {toArrayBuffer} from '../../javascript-utils/binary-utils';\nimport WorkerFarm from '../../worker-utils/worker-farm';\nimport {parse} from '../parse';\n\nimport {getTransferList} from '../../worker-utils/worker-utils';\n\nlet _workerFarm = null;\n\nfunction getWorkerFarm(options = {}) {\n  const props = {};\n  if (options.maxConcurrency) {\n    props.maxConcurrency = options.maxConcurrency;\n  }\n  if (options.onDebug) {\n    props.onDebug = options.onDebug;\n  }\n\n  if (!_workerFarm) {\n    _workerFarm = new WorkerFarm({onMessage: onWorkerMessage});\n  }\n  _workerFarm.setProps(props);\n\n  return _workerFarm;\n}\n\nasync function onWorkerMessage({worker, data, resolve, reject}) {\n  switch (data.type) {\n    case 'done':\n      resolve(data.result);\n      break;\n\n    case 'process':\n      try {\n        const result = await parse(data.arraybuffer, data.options, data.url);\n        worker.postMessage({type: 'process-done', id: data.id, result}, getTransferList(result));\n      } catch (error) {\n        worker.postMessage({type: 'process-error', id: data.id, message: error.message});\n      }\n      break;\n\n    case 'error':\n      reject(data.message);\n      break;\n\n    default:\n    // TODO - is this not an error case? Log a warning?\n  }\n}\n\n/**\n * this function expects that the worker function sends certain messages,\n * this can be automated if the worker is wrapper by a call to createWorker in @loaders.gl/loader-utils.\n */\nexport default function parseWithWorker(\n  workerSource,\n  workerName,\n  data,\n  options = {},\n  context = {}\n) {\n  const workerFarm = getWorkerFarm(options);\n\n  // options.log object contains functions which cannot be transferred\n  // TODO - decide how to handle logging on workers\n  options = JSON.parse(JSON.stringify(options));\n\n  return workerFarm.process(workerSource, `loaders.gl-${workerName}`, {\n    arraybuffer: toArrayBuffer(data),\n    options,\n    source: 'loaders.gl', // Lets worker ignore unrelated messages\n    type: 'process' // For future extension\n  });\n}\n"],"file":"parse-with-worker.js"}