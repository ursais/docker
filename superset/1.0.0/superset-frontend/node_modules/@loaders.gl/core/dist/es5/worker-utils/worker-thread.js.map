{"version":3,"sources":["../../../src/worker-utils/worker-thread.js"],"names":["count","defaultOnMessage","data","resolve","WorkerThread","source","name","onMessage","url","worker","Worker","Promise","reject","onmessage","event","onerror","error","transferList","postMessage","terminate"],"mappings":";;;;;;;;;;;;;;;;;AACA;;AAEA,IAAIA,KAAK,GAAG,CAAZ;;AAGA,SAASC,gBAAT,OAA2C;AAAA,MAAhBC,IAAgB,QAAhBA,IAAgB;AAAA,MAAVC,OAAU,QAAVA,OAAU;AACzCA,EAAAA,OAAO,CAACD,IAAD,CAAP;AACD;;IAEoBE,Y;AACnB,+BAAiE;AAAA,QAApDC,MAAoD,SAApDA,MAAoD;AAAA,2BAA5CC,IAA4C;AAAA,QAA5CA,IAA4C,gDAAvBN,KAAK,EAAkB;AAAA,QAAZO,SAAY,SAAZA,SAAY;AAAA;AAC/D,QAAMC,GAAG,GAAG,+BAAaH,MAAb,CAAZ;AACA,SAAKI,MAAL,GAAc,IAAIC,MAAJ,CAAWF,GAAX,EAAgB;AAACF,MAAAA,IAAI,EAAJA;AAAD,KAAhB,CAAd;AACA,SAAKA,IAAL,GAAYA,IAAZ;AACA,SAAKC,SAAL,GAAiBA,SAAS,IAAIN,gBAA9B;AACD;;;;;sGAOaC,I;;;;;;;iDACL,IAAIS,OAAJ,CAAY,UAACR,OAAD,EAAUS,MAAV,EAAqB;AACtC,kBAAA,KAAI,CAACH,MAAL,CAAYI,SAAZ,GAAwB,UAAAC,KAAK;AAAA,2BAC3B,KAAI,CAACP,SAAL,CAAe;AAACE,sBAAAA,MAAM,EAAE,KAAI,CAACA,MAAd;AAAsBP,sBAAAA,IAAI,EAAEY,KAAK,CAACZ,IAAlC;AAAwCC,sBAAAA,OAAO,EAAPA,OAAxC;AAAiDS,sBAAAA,MAAM,EAANA;AAAjD,qBAAf,CAD2B;AAAA,mBAA7B;;AAEA,kBAAA,KAAI,CAACH,MAAL,CAAYM,OAAZ,GAAsB,UAAAC,KAAK;AAAA,2BAAIJ,MAAM,CAACI,KAAD,CAAV;AAAA,mBAA3B;;AACA,sBAAMC,YAAY,GAAG,kCAAgBf,IAAhB,CAArB;;AACA,kBAAA,KAAI,CAACO,MAAL,CAAYS,WAAZ,CAAwBhB,IAAxB,EAA8Be,YAA9B;AACD,iBANM,C;;;;;;;;;;;;;;;;;;8BASC;AACR,WAAKR,MAAL,CAAYU,SAAZ;AACA,WAAKV,MAAL,GAAc,IAAd;AACD","sourcesContent":["/* global Worker */\nimport {getWorkerURL, getTransferList} from './worker-utils';\n\nlet count = 0;\n\n// By default resolves to the first message the worker sends back\nfunction defaultOnMessage({data, resolve}) {\n  resolve(data);\n}\n\nexport default class WorkerThread {\n  constructor({source, name = `web-worker-${count++}`, onMessage}) {\n    const url = getWorkerURL(source);\n    this.worker = new Worker(url, {name});\n    this.name = name;\n    this.onMessage = onMessage || defaultOnMessage;\n  }\n\n  /**\n   * Process binary data in a worker\n   * @param data {data containing binary typed arrays} - data to be transferred to worker\n   * @returns a Promise with data containing typed arrays transferred back from work\n   */\n  async process(data) {\n    return new Promise((resolve, reject) => {\n      this.worker.onmessage = event =>\n        this.onMessage({worker: this.worker, data: event.data, resolve, reject});\n      this.worker.onerror = error => reject(error);\n      const transferList = getTransferList(data);\n      this.worker.postMessage(data, transferList);\n    });\n  }\n\n  destroy() {\n    this.worker.terminate();\n    this.worker = null;\n  }\n}\n"],"file":"worker-thread.js"}