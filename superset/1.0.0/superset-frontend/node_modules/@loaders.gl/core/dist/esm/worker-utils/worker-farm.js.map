{"version":3,"sources":["../../../src/worker-utils/worker-farm.js"],"names":["WorkerPool","DEFAULT_MAX_CONCURRENCY","WorkerFarm","maxConcurrency","onMessage","onDebug","workerPools","Map","props","forEach","workerPool","destroy","workerSource","workerName","data","_getWorkerPool","process","get","source","name","set"],"mappings":";;;;AAAA,OAAOA,UAAP,MAAuB,eAAvB;AAEA,IAAMC,uBAAuB,GAAG,CAAhC;;IAKqBC,U;AAKnB,4BAAuF;AAAA,mCAA1EC,cAA0E;AAAA,QAA1EA,cAA0E,oCAAzDF,uBAAyD;AAAA,QAAhCG,SAAgC,QAAhCA,SAAgC;AAAA,4BAArBC,OAAqB;AAAA,QAArBA,OAAqB,6BAAX,YAAM,CAAE,CAAG;;AAAA;;AACrF,SAAKF,cAAL,GAAsBA,cAAtB;AACA,SAAKC,SAAL,GAAiBA,SAAjB;AACA,SAAKC,OAAL,GAAeA,OAAf;AACA,SAAKC,WAAL,GAAmB,IAAIC,GAAJ,EAAnB;AACD;;;;6BAEQC,K,EAAO;AACd,UAAI,oBAAoBA,KAAxB,EAA+B;AAC7B,aAAKL,cAAL,GAAsBK,KAAK,CAACL,cAA5B;AACD;;AAED,UAAI,aAAaK,KAAjB,EAAwB;AACtB,aAAKH,OAAL,GAAeG,KAAK,CAACH,OAArB;AACD;AACF;;;8BAES;AACR,WAAKC,WAAL,CAAiBG,OAAjB,CAAyB,UAAAC,UAAU;AAAA,eAAIA,UAAU,CAACC,OAAX,EAAJ;AAAA,OAAnC;AACD;;;;iFAOaC,Y,EAAcC,U,EAAYC,I;;;;;;AAChCJ,gBAAAA,U,GAAa,KAAKK,cAAL,CAAoBH,YAApB,EAAkCC,UAAlC,C;iDACZH,UAAU,CAACM,OAAX,CAAmBF,IAAnB,C;;;;;;;;;;;;;;;;;;mCAKMF,Y,EAAcC,U,EAAY;AACvC,UAAIH,UAAU,GAAG,KAAKJ,WAAL,CAAiBW,GAAjB,CAAqBJ,UAArB,CAAjB;;AACA,UAAI,CAACH,UAAL,EAAiB;AACfA,QAAAA,UAAU,GAAG,IAAIV,UAAJ,CAAe;AAC1BkB,UAAAA,MAAM,EAAEN,YADkB;AAE1BO,UAAAA,IAAI,EAAEN,UAFoB;AAG1BT,UAAAA,SAAS,EAAE,KAAKA,SAHU;AAI1BD,UAAAA,cAAc,EAAE,KAAKA,cAJK;AAK1BE,UAAAA,OAAO,EAAE,KAAKA;AALY,SAAf,CAAb;AAOA,aAAKC,WAAL,CAAiBc,GAAjB,CAAqBP,UAArB,EAAiCH,UAAjC;AACD;;AACD,aAAOA,UAAP;AACD;;;;;;SAnDkBR,U","sourcesContent":["import WorkerPool from './worker-pool';\n\nconst DEFAULT_MAX_CONCURRENCY = 5;\n\n/**\n * Process multiple data messages with a \"farm\" of different workers (in worker pools)\n */\nexport default class WorkerFarm {\n  /**\n   * @param processor {function | string} - worker function\n   * @param maxConcurrency {number} - max count of workers\n   */\n  constructor({maxConcurrency = DEFAULT_MAX_CONCURRENCY, onMessage, onDebug = () => {}}) {\n    this.maxConcurrency = maxConcurrency;\n    this.onMessage = onMessage;\n    this.onDebug = onDebug;\n    this.workerPools = new Map();\n  }\n\n  setProps(props) {\n    if ('maxConcurrency' in props) {\n      this.maxConcurrency = props.maxConcurrency;\n    }\n\n    if ('onDebug' in props) {\n      this.onDebug = props.onDebug;\n    }\n  }\n\n  destroy() {\n    this.workerPools.forEach(workerPool => workerPool.destroy());\n  }\n\n  /**\n   * Process binary data in a worker\n   * @param data {data containing binary typed arrays} - data to be transferred to worker\n   * @returns a Promise with data containing typed arrays transferred back from work\n   */\n  async process(workerSource, workerName, data) {\n    const workerPool = this._getWorkerPool(workerSource, workerName);\n    return workerPool.process(data);\n  }\n\n  // PRIVATE\n\n  _getWorkerPool(workerSource, workerName) {\n    let workerPool = this.workerPools.get(workerName);\n    if (!workerPool) {\n      workerPool = new WorkerPool({\n        source: workerSource,\n        name: workerName,\n        onMessage: this.onMessage,\n        maxConcurrency: this.maxConcurrency,\n        onDebug: this.onDebug\n      });\n      this.workerPools.set(workerName, workerPool);\n    }\n    return workerPool;\n  }\n}\n"],"file":"worker-farm.js"}