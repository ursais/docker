{"version":3,"sources":["../../../../src/node/utils/to-buffer.node.js"],"names":["assert","toBuffer","binaryData","ArrayBuffer","isView","buffer","Buffer","byteLength","view","Uint8Array","i","length"],"mappings":"AAAA,OAAOA,MAAP,MAAmB,oBAAnB;AAGA,eAAe,SAASC,QAAT,CAAkBC,UAAlB,EAA8B;AAC3C,MAAIC,WAAW,CAACC,MAAZ,CAAmBF,UAAnB,CAAJ,EAAoC;AAClCA,IAAAA,UAAU,GAAGA,UAAU,CAACG,MAAxB;AACD;;AAED,MAAI,OAAOC,MAAP,KAAkB,WAAlB,IAAiCJ,UAAU,YAAYC,WAA3D,EAAwE;AAEtE,QAAME,MAAM,GAAG,IAAIC,MAAJ,CAAWJ,UAAU,CAACK,UAAtB,CAAf;AACA,QAAMC,IAAI,GAAG,IAAIC,UAAJ,CAAeP,UAAf,CAAb;;AACA,SAAK,IAAIQ,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGL,MAAM,CAACM,MAA3B,EAAmC,EAAED,CAArC,EAAwC;AACtCL,MAAAA,MAAM,CAACK,CAAD,CAAN,GAAYF,IAAI,CAACE,CAAD,CAAhB;AACD;;AACD,WAAOL,MAAP;AACD;;AAED,SAAOL,MAAM,CAAC,KAAD,CAAb;AACD","sourcesContent":["import assert from '../../utils/assert';\n\n// Convert (copy) ArrayBuffer to Buffer\nexport default function toBuffer(binaryData) {\n  if (ArrayBuffer.isView(binaryData)) {\n    binaryData = binaryData.buffer;\n  }\n\n  if (typeof Buffer !== 'undefined' && binaryData instanceof ArrayBuffer) {\n    /* global Buffer */\n    const buffer = new Buffer(binaryData.byteLength);\n    const view = new Uint8Array(binaryData);\n    for (let i = 0; i < buffer.length; ++i) {\n      buffer[i] = view[i];\n    }\n    return buffer;\n  }\n\n  return assert(false);\n}\n"],"file":"to-buffer.node.js"}