{"version":3,"sources":["../../../../src/lib/fetch/read-file.js"],"names":["isBrowser","node","resolvePath","readFileSyncBrowser","readFileSync","url","options"],"mappings":"AAAA,SAAQA,SAAR,QAAwB,qBAAxB;AACA,OAAO,KAAKC,IAAZ,MAAsB,gCAAtB;AACA,SAAQC,WAAR,QAA0B,gBAA1B;AACA,SAAQC,mBAAR,QAAkC,qBAAlC;AAGA,OAAO,SAASC,YAAT,CAAsBC,GAAtB,EAAyC;AAAA,MAAdC,OAAc,uEAAJ,EAAI;AAC9CD,EAAAA,GAAG,GAAGH,WAAW,CAACG,GAAD,CAAjB;;AACA,MAAI,CAACL,SAAD,IAAcC,IAAI,CAACG,YAAvB,EAAqC;AACnC,WAAOH,IAAI,CAACG,YAAL,CAAkBC,GAAlB,EAAuBC,OAAvB,CAAP;AACD;;AACD,SAAOH,mBAAmB,CAACE,GAAD,EAAMC,OAAN,CAA1B;AACD","sourcesContent":["import {isBrowser} from '../../utils/globals';\nimport * as node from '../../node/read-file-sync.node';\nimport {resolvePath} from './file-aliases';\nimport {readFileSyncBrowser} from './read-file.browser';\n\n// In a few cases (data URIs, node.js) \"files\" can be read synchronously\nexport function readFileSync(url, options = {}) {\n  url = resolvePath(url);\n  if (!isBrowser && node.readFileSync) {\n    return node.readFileSync(url, options);\n  }\n  return readFileSyncBrowser(url, options);\n}\n"],"file":"read-file.js"}