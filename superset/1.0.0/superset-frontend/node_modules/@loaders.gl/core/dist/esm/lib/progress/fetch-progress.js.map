{"version":3,"sources":["../../../../src/lib/progress/fetch-progress.js"],"names":["fetchProgress","response","onProgress","onDone","onError","ok","body","contentLength","headers","get","totalBytes","parseInt","ReadableStream","progressStream","start","controller","reader","getReader","read","Response","loadedBytes","done","value","close","byteLength","percent","Math","round","enqueue","error"],"mappings":";;AAIA,wBAA8BA,aAA9B;AAAA;AAAA;;;8DAAe,iBACbC,QADa,EAEbC,UAFa;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGbC,YAAAA,MAHa,2DAGJ,YAAM,CAAE,CAHJ;AAIbC,YAAAA,OAJa,2DAIH,YAAM,CAAE,CAJL;AAAA;AAAA,mBAMIH,QANJ;;AAAA;AAMbA,YAAAA,QANa;;AAAA,gBAORA,QAAQ,CAACI,EAPD;AAAA;AAAA;AAAA;;AAAA,6CASJJ,QATI;;AAAA;AAAA,gBAWRA,QAAQ,CAACK,IAXD;AAAA;AAAA;AAAA;;AAAA,6CAaJL,QAbI;;AAAA;AAePM,YAAAA,aAfO,GAeSN,QAAQ,CAACO,OAAT,CAAiBC,GAAjB,CAAqB,gBAArB,CAfT;AAgBPC,YAAAA,UAhBO,GAgBMH,aAAa,IAAII,QAAQ,CAACJ,aAAD,EAAgB,EAAhB,CAhB/B;;AAAA,gBAiBPA,aAAa,GAAG,CAjBT;AAAA;AAAA;AAAA;;AAAA,6CAkBJN,QAlBI;;AAAA;AAAA,kBAqBT,OAAOW,cAAP,KAA0B,WArBjB;AAAA;AAAA;AAAA;;AAAA,6CAsBJX,QAtBI;;AAAA;AA0BPY,YAAAA,cA1BO,GA0BU,IAAID,cAAJ,CAAmB;AACxCE,cAAAA,KADwC,iBAClCC,UADkC,EACtB;AAChB,oBAAMC,MAAM,GAAGf,QAAQ,CAACK,IAAT,CAAcW,SAAd,EAAf;AACAC,gBAAAA,IAAI,CAACH,UAAD,EAAaC,MAAb,EAAqB,CAArB,EAAwBN,UAAxB,EAAoCR,UAApC,EAAgDC,MAAhD,EAAwDC,OAAxD,CAAJ;AACD;AAJuC,aAAnB,CA1BV;AAAA,6CAiCN,IAAIe,QAAJ,CAAaN,cAAb,CAjCM;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;;;SAuCAK,I;;;;;qDAAf,kBAAoBH,UAApB,EAAgCC,MAAhC,EAAwCI,WAAxC,EAAqDV,UAArD,EAAiER,UAAjE,EAA6EC,MAA7E,EAAqFC,OAArF;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAEgCY,MAAM,CAACE,IAAP,EAFhC;;AAAA;AAAA;AAEWG,YAAAA,IAFX,QAEWA,IAFX;AAEiBC,YAAAA,KAFjB,QAEiBA,KAFjB;;AAAA,iBAGQD,IAHR;AAAA;AAAA;AAAA;;AAIMlB,YAAAA,MAAM;AACNY,YAAAA,UAAU,CAACQ,KAAX;AALN;;AAAA;AAQIH,YAAAA,WAAW,IAAIE,KAAK,CAACE,UAArB;AACMC,YAAAA,OATV,GASoBC,IAAI,CAACC,KAAL,CAAYP,WAAW,GAAGV,UAAf,GAA6B,GAAxC,CATpB;AAUIR,YAAAA,UAAU,CAACuB,OAAD,EAAU;AAACL,cAAAA,WAAW,EAAXA,WAAD;AAAcV,cAAAA,UAAU,EAAVA;AAAd,aAAV,CAAV;AACAK,YAAAA,UAAU,CAACa,OAAX,CAAmBN,KAAnB;AAXJ;AAAA,mBAYUJ,IAAI,CAACH,UAAD,EAAaC,MAAb,EAAqBI,WAArB,EAAkCV,UAAlC,EAA8CR,UAA9C,EAA0DC,MAA1D,EAAkEC,OAAlE,CAZd;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAcIW,YAAAA,UAAU,CAACc,KAAX;AACAzB,YAAAA,OAAO,cAAP;;AAfJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G","sourcesContent":["// Forked from github AnthumChris/fetch-progress-indicators under MIT license\n/* global Response, ReadableStream */\n\n// Intercepts the Response stream and creates a new Response\nexport default async function fetchProgress(\n  response,\n  onProgress,\n  onDone = () => {},\n  onError = () => {}\n) {\n  response = await response;\n  if (!response.ok) {\n    // ERROR checking needs to be done separately\n    return response;\n  }\n  if (!response.body) {\n    // 'ReadableStream not yet supported in this browser.\n    return response;\n  }\n  const contentLength = response.headers.get('content-length');\n  const totalBytes = contentLength && parseInt(contentLength, 10);\n  if (!(contentLength > 0)) {\n    return response;\n  }\n  // Currently override only implemented in browser\n  if (typeof ReadableStream === 'undefined') {\n    return response;\n  }\n\n  // Create a new stream that invisbly wraps original stream\n  const progressStream = new ReadableStream({\n    start(controller) {\n      const reader = response.body.getReader();\n      read(controller, reader, 0, totalBytes, onProgress, onDone, onError);\n    }\n  });\n\n  return new Response(progressStream);\n}\n\n// Forward to original streams controller\n// TODO - this causes a crazy deep \"async stack\"... rewrite as async iterator?\n// eslint-disable-next-line max-params\nasync function read(controller, reader, loadedBytes, totalBytes, onProgress, onDone, onError) {\n  try {\n    const {done, value} = await reader.read();\n    if (done) {\n      onDone();\n      controller.close();\n      return;\n    }\n    loadedBytes += value.byteLength;\n    const percent = Math.round((loadedBytes / totalBytes) * 100);\n    onProgress(percent, {loadedBytes, totalBytes});\n    controller.enqueue(value);\n    await read(controller, reader, loadedBytes, totalBytes, onProgress, onDone, onError);\n  } catch (error) {\n    controller.error(error);\n    onError(error);\n  }\n}\n"],"file":"fetch-progress.js"}