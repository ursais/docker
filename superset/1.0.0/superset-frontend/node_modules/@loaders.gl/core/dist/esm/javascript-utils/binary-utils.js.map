{"version":3,"sources":["../../../src/javascript-utils/binary-utils.js"],"names":["assert","toArrayBuffer","bufferToArrayBuffer","data","ArrayBuffer","isView","buffer","text","uint8Array","TextEncoder","encode"],"mappings":"AACA,OAAOA,MAAP,MAAmB,iBAAnB;AACA,SAAQC,aAAa,IAAIC,mBAAzB,QAAmD,oCAAnD;AAEA,OAAO,SAASD,aAAT,CAAuBE,IAAvB,EAA6B;AAClC,MAAID,mBAAJ,EAAyB;AAEvBC,IAAAA,IAAI,GAAGD,mBAAmB,CAACC,IAAD,CAA1B;AACD;;AAED,MAAIA,IAAI,YAAYC,WAApB,EAAiC;AAC/B,WAAOD,IAAP;AACD;;AAGD,MAAIC,WAAW,CAACC,MAAZ,CAAmBF,IAAnB,CAAJ,EAA8B;AAC5B,WAAOA,IAAI,CAACG,MAAZ;AACD;;AAED,MAAI,OAAOH,IAAP,KAAgB,QAApB,EAA8B;AAC5B,QAAMI,IAAI,GAAGJ,IAAb;AACA,QAAMK,UAAU,GAAG,IAAIC,WAAJ,GAAkBC,MAAlB,CAAyBH,IAAzB,CAAnB;AACA,WAAOC,UAAU,CAACF,MAAlB;AACD;;AAED,SAAON,MAAM,CAAC,KAAD,CAAb;AACD","sourcesContent":["/* global ArrayBuffer, TextEncoder */\nimport assert from '../utils/assert';\nimport {toArrayBuffer as bufferToArrayBuffer} from '../node/utils/to-array-buffer.node';\n\nexport function toArrayBuffer(data) {\n  if (bufferToArrayBuffer) {\n    // TODO - per docs we should just be able to call buffer.buffer, but there are issues\n    data = bufferToArrayBuffer(data);\n  }\n\n  if (data instanceof ArrayBuffer) {\n    return data;\n  }\n\n  // Careful - Node Buffers will look like ArrayBuffers (keep after isBuffer)\n  if (ArrayBuffer.isView(data)) {\n    return data.buffer;\n  }\n\n  if (typeof data === 'string') {\n    const text = data;\n    const uint8Array = new TextEncoder().encode(text);\n    return uint8Array.buffer;\n  }\n\n  return assert(false);\n}\n\n// export function blobToArrayBuffer(blob) {\n//   return new Promise((resolve, reject) => {\n//     let arrayBuffer;\n//     const fileReader = new FileReader();\n//     fileReader.onload = event => {\n//       arrayBuffer = event.target.result;\n//     };\n//     fileReader.onloadend = event => resolve(arrayBuffer);\n//     fileReader.onerror = reject;\n//     fileReader.readAsArrayBuffer(blob);\n//   });\n// }\n"],"file":"binary-utils.js"}