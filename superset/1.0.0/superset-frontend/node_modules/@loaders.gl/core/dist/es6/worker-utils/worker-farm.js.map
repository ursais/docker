{"version":3,"sources":["../../../src/worker-utils/worker-farm.js"],"names":["WorkerPool","DEFAULT_MAX_CONCURRENCY","WorkerFarm","constructor","maxConcurrency","onMessage","onDebug","workerPools","Map","setProps","props","destroy","forEach","workerPool","process","workerSource","workerName","data","_getWorkerPool","get","source","name","set"],"mappings":"AAAA,OAAOA,UAAP,MAAuB,eAAvB;AAEA,MAAMC,uBAAuB,GAAG,CAAhC;AAKA,eAAe,MAAMC,UAAN,CAAiB;AAK9BC,EAAAA,WAAW,CAAC;AAACC,IAAAA,cAAc,GAAGH,uBAAlB;AAA2CI,IAAAA,SAA3C;AAAsDC,IAAAA,OAAO,GAAG,MAAM,CAAE;AAAxE,GAAD,EAA4E;AACrF,SAAKF,cAAL,GAAsBA,cAAtB;AACA,SAAKC,SAAL,GAAiBA,SAAjB;AACA,SAAKC,OAAL,GAAeA,OAAf;AACA,SAAKC,WAAL,GAAmB,IAAIC,GAAJ,EAAnB;AACD;;AAEDC,EAAAA,QAAQ,CAACC,KAAD,EAAQ;AACd,QAAI,oBAAoBA,KAAxB,EAA+B;AAC7B,WAAKN,cAAL,GAAsBM,KAAK,CAACN,cAA5B;AACD;;AAED,QAAI,aAAaM,KAAjB,EAAwB;AACtB,WAAKJ,OAAL,GAAeI,KAAK,CAACJ,OAArB;AACD;AACF;;AAEDK,EAAAA,OAAO,GAAG;AACR,SAAKJ,WAAL,CAAiBK,OAAjB,CAAyBC,UAAU,IAAIA,UAAU,CAACF,OAAX,EAAvC;AACD;;AAOD,QAAMG,OAAN,CAAcC,YAAd,EAA4BC,UAA5B,EAAwCC,IAAxC,EAA8C;AAC5C,UAAMJ,UAAU,GAAG,KAAKK,cAAL,CAAoBH,YAApB,EAAkCC,UAAlC,CAAnB;;AACA,WAAOH,UAAU,CAACC,OAAX,CAAmBG,IAAnB,CAAP;AACD;;AAIDC,EAAAA,cAAc,CAACH,YAAD,EAAeC,UAAf,EAA2B;AACvC,QAAIH,UAAU,GAAG,KAAKN,WAAL,CAAiBY,GAAjB,CAAqBH,UAArB,CAAjB;;AACA,QAAI,CAACH,UAAL,EAAiB;AACfA,MAAAA,UAAU,GAAG,IAAIb,UAAJ,CAAe;AAC1BoB,QAAAA,MAAM,EAAEL,YADkB;AAE1BM,QAAAA,IAAI,EAAEL,UAFoB;AAG1BX,QAAAA,SAAS,EAAE,KAAKA,SAHU;AAI1BD,QAAAA,cAAc,EAAE,KAAKA,cAJK;AAK1BE,QAAAA,OAAO,EAAE,KAAKA;AALY,OAAf,CAAb;AAOA,WAAKC,WAAL,CAAiBe,GAAjB,CAAqBN,UAArB,EAAiCH,UAAjC;AACD;;AACD,WAAOA,UAAP;AACD;;AAnD6B","sourcesContent":["import WorkerPool from './worker-pool';\n\nconst DEFAULT_MAX_CONCURRENCY = 5;\n\n/**\n * Process multiple data messages with a \"farm\" of different workers (in worker pools)\n */\nexport default class WorkerFarm {\n  /**\n   * @param processor {function | string} - worker function\n   * @param maxConcurrency {number} - max count of workers\n   */\n  constructor({maxConcurrency = DEFAULT_MAX_CONCURRENCY, onMessage, onDebug = () => {}}) {\n    this.maxConcurrency = maxConcurrency;\n    this.onMessage = onMessage;\n    this.onDebug = onDebug;\n    this.workerPools = new Map();\n  }\n\n  setProps(props) {\n    if ('maxConcurrency' in props) {\n      this.maxConcurrency = props.maxConcurrency;\n    }\n\n    if ('onDebug' in props) {\n      this.onDebug = props.onDebug;\n    }\n  }\n\n  destroy() {\n    this.workerPools.forEach(workerPool => workerPool.destroy());\n  }\n\n  /**\n   * Process binary data in a worker\n   * @param data {data containing binary typed arrays} - data to be transferred to worker\n   * @returns a Promise with data containing typed arrays transferred back from work\n   */\n  async process(workerSource, workerName, data) {\n    const workerPool = this._getWorkerPool(workerSource, workerName);\n    return workerPool.process(data);\n  }\n\n  // PRIVATE\n\n  _getWorkerPool(workerSource, workerName) {\n    let workerPool = this.workerPools.get(workerName);\n    if (!workerPool) {\n      workerPool = new WorkerPool({\n        source: workerSource,\n        name: workerName,\n        onMessage: this.onMessage,\n        maxConcurrency: this.maxConcurrency,\n        onDebug: this.onDebug\n      });\n      this.workerPools.set(workerName, workerPool);\n    }\n    return workerPool;\n  }\n}\n"],"file":"worker-farm.js"}