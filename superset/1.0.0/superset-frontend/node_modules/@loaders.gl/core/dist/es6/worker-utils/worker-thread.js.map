{"version":3,"sources":["../../../src/worker-utils/worker-thread.js"],"names":["getWorkerURL","getTransferList","count","defaultOnMessage","data","resolve","WorkerThread","constructor","source","name","onMessage","url","worker","Worker","process","Promise","reject","onmessage","event","onerror","error","transferList","postMessage","destroy","terminate"],"mappings":"AACA,SAAQA,YAAR,EAAsBC,eAAtB,QAA4C,gBAA5C;AAEA,IAAIC,KAAK,GAAG,CAAZ;;AAGA,SAASC,gBAAT,CAA0B;AAACC,EAAAA,IAAD;AAAOC,EAAAA;AAAP,CAA1B,EAA2C;AACzCA,EAAAA,OAAO,CAACD,IAAD,CAAP;AACD;;AAED,eAAe,MAAME,YAAN,CAAmB;AAChCC,EAAAA,WAAW,CAAC;AAACC,IAAAA,MAAD;AAASC,IAAAA,IAAI,wBAAiBP,KAAK,EAAtB,CAAb;AAAyCQ,IAAAA;AAAzC,GAAD,EAAsD;AAC/D,UAAMC,GAAG,GAAGX,YAAY,CAACQ,MAAD,CAAxB;AACA,SAAKI,MAAL,GAAc,IAAIC,MAAJ,CAAWF,GAAX,EAAgB;AAACF,MAAAA;AAAD,KAAhB,CAAd;AACA,SAAKA,IAAL,GAAYA,IAAZ;AACA,SAAKC,SAAL,GAAiBA,SAAS,IAAIP,gBAA9B;AACD;;AAOD,QAAMW,OAAN,CAAcV,IAAd,EAAoB;AAClB,WAAO,IAAIW,OAAJ,CAAY,CAACV,OAAD,EAAUW,MAAV,KAAqB;AACtC,WAAKJ,MAAL,CAAYK,SAAZ,GAAwBC,KAAK,IAC3B,KAAKR,SAAL,CAAe;AAACE,QAAAA,MAAM,EAAE,KAAKA,MAAd;AAAsBR,QAAAA,IAAI,EAAEc,KAAK,CAACd,IAAlC;AAAwCC,QAAAA,OAAxC;AAAiDW,QAAAA;AAAjD,OAAf,CADF;;AAEA,WAAKJ,MAAL,CAAYO,OAAZ,GAAsBC,KAAK,IAAIJ,MAAM,CAACI,KAAD,CAArC;;AACA,YAAMC,YAAY,GAAGpB,eAAe,CAACG,IAAD,CAApC;AACA,WAAKQ,MAAL,CAAYU,WAAZ,CAAwBlB,IAAxB,EAA8BiB,YAA9B;AACD,KANM,CAAP;AAOD;;AAEDE,EAAAA,OAAO,GAAG;AACR,SAAKX,MAAL,CAAYY,SAAZ;AACA,SAAKZ,MAAL,GAAc,IAAd;AACD;;AA1B+B","sourcesContent":["/* global Worker */\nimport {getWorkerURL, getTransferList} from './worker-utils';\n\nlet count = 0;\n\n// By default resolves to the first message the worker sends back\nfunction defaultOnMessage({data, resolve}) {\n  resolve(data);\n}\n\nexport default class WorkerThread {\n  constructor({source, name = `web-worker-${count++}`, onMessage}) {\n    const url = getWorkerURL(source);\n    this.worker = new Worker(url, {name});\n    this.name = name;\n    this.onMessage = onMessage || defaultOnMessage;\n  }\n\n  /**\n   * Process binary data in a worker\n   * @param data {data containing binary typed arrays} - data to be transferred to worker\n   * @returns a Promise with data containing typed arrays transferred back from work\n   */\n  async process(data) {\n    return new Promise((resolve, reject) => {\n      this.worker.onmessage = event =>\n        this.onMessage({worker: this.worker, data: event.data, resolve, reject});\n      this.worker.onerror = error => reject(error);\n      const transferList = getTransferList(data);\n      this.worker.postMessage(data, transferList);\n    });\n  }\n\n  destroy() {\n    this.worker.terminate();\n    this.worker = null;\n  }\n}\n"],"file":"worker-thread.js"}