{"version":3,"sources":["../../../src/lib/load.js"],"names":["isFileReadable","fetchFile","isLoaderObject","mergeLoaderAndUserOptions","selectLoader","parse","parseInBatches","loadInBatches","url","loaders","options","response","load","Array","isArray","autoUrl","name","loader","nothrow","loadAndParse","loaderOptions","data"],"mappings":"AAAA,SAAQA,cAAR,QAA6B,6BAA7B;AACA,SAAQC,SAAR,QAAwB,oBAAxB;AACA,SAAQC,cAAR,QAA6B,iCAA7B;AACA,SAAQC,yBAAR,QAAwC,kCAAxC;AACA,SAAQC,YAAR,QAA2B,iBAA3B;AAEA,SAAQC,KAAR,QAAoB,SAApB;AACA,SAAQC,cAAR,QAA6B,oBAA7B;AAEA,OAAO,eAAeC,aAAf,CAA6BC,GAA7B,EAAkCC,OAAlC,EAA2CC,OAA3C,EAAoD;AACzD,QAAMC,QAAQ,GAAG,MAAMV,SAAS,CAACO,GAAD,EAAME,OAAN,CAAhC;AACA,SAAOJ,cAAc,CAACK,QAAD,EAAWF,OAAX,EAAoBC,OAApB,EAA6BF,GAA7B,CAArB;AACD;AAKD,OAAO,eAAeI,IAAf,CAAoBJ,GAApB,EAAyBC,OAAzB,EAAkCC,OAAlC,EAA2C;AAEhD,MAAI,CAACG,KAAK,CAACC,OAAN,CAAcL,OAAd,CAAD,IAA2B,CAACP,cAAc,CAACO,OAAD,CAA9C,EAAyD;AACvDC,IAAAA,OAAO,GAAGD,OAAV;AACAA,IAAAA,OAAO,GAAG,IAAV;AACD;;AAGD,QAAMM,OAAO,GAAGf,cAAc,CAACQ,GAAD,CAAd,GAAsBA,GAAG,CAACQ,IAA1B,GAAiCR,GAAjD;AAIA,QAAMS,MAAM,GAAGb,YAAY,CAACK,OAAD,EAAUM,OAAV,EAAmB,IAAnB,EAAyB;AAACG,IAAAA,OAAO,EAAE;AAAV,GAAzB,CAA3B;;AAEA,MAAID,MAAJ,EAAY;AAIV,QAAIA,MAAM,CAACE,YAAX,EAAyB;AACvB,YAAMC,aAAa,GAAGjB,yBAAyB,CAACO,OAAD,EAAUO,MAAV,CAA/C;AACA,aAAO,MAAMA,MAAM,CAACE,YAAP,CAAoBX,GAApB,EAAyBY,aAAzB,CAAb;AACD;AACF;;AAGD,MAAIC,IAAI,GAAGb,GAAX;;AACA,MAAIR,cAAc,CAACqB,IAAD,CAAd,IAAwB,OAAOA,IAAP,KAAgB,QAA5C,EAAsD;AACpDA,IAAAA,IAAI,GAAG,MAAMpB,SAAS,CAACO,GAAD,EAAME,OAAN,CAAtB;AACD;;AAKD,SAAOL,KAAK,CAACgB,IAAD,EAAOZ,OAAP,EAAgBC,OAAhB,EAAyBF,GAAzB,CAAZ;AACD","sourcesContent":["import {isFileReadable} from '../javascript-utils/is-type';\nimport {fetchFile} from './fetch/fetch-file';\nimport {isLoaderObject} from './loader-utils/normalize-loader';\nimport {mergeLoaderAndUserOptions} from './loader-utils/normalize-options';\nimport {selectLoader} from './select-loader';\n\nimport {parse} from './parse';\nimport {parseInBatches} from './parse-in-batches';\n\nexport async function loadInBatches(url, loaders, options) {\n  const response = await fetchFile(url, options);\n  return parseInBatches(response, loaders, options, url);\n}\n\n// Note: Load does duplicate a lot of parse.\n// Works like parse but can call `loadAndParse` for parsers that need to do their own loading\n// it can also call fetchFile on string urls, which `parse` won't do.\nexport async function load(url, loaders, options) {\n  // Signature: load(url, options)\n  if (!Array.isArray(loaders) && !isLoaderObject(loaders)) {\n    options = loaders;\n    loaders = null;\n  }\n\n  // Extract a url for auto detection\n  const autoUrl = isFileReadable(url) ? url.name : url;\n\n  // Initial loader autodection (Use registered loaders if none provided)\n  // This only uses URL extensions to detect loaders.\n  const loader = selectLoader(loaders, autoUrl, null, {nothrow: true});\n\n  if (loader) {\n    // Some loaders do not separate reading and parsing of data (e.g ImageLoader)\n    // These can only be handled by `load`, not `parse`\n    // TODO - ImageLoaders can be rewritten to separate load and parse, phase out this variant?\n    if (loader.loadAndParse) {\n      const loaderOptions = mergeLoaderAndUserOptions(options, loader);\n      return await loader.loadAndParse(url, loaderOptions);\n    }\n  }\n\n  // at this point, data can be binary or text\n  let data = url;\n  if (isFileReadable(data) || typeof data === 'string') {\n    data = await fetchFile(url, options);\n  }\n\n  // Fall back to parse\n  // Note: An improved round of autodetection is possible now that data has been loaded\n  // This means that another loader might be selected\n  return parse(data, loaders, options, url);\n}\n"],"file":"load.js"}