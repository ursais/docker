{"version":3,"sources":["../../../src/lib/parse-in-batches-sync.js"],"names":["isLoaderObject","mergeLoaderAndUserOptions","getIteratorFromData","getLoaderContext","selectLoader","parseInBatchesSync","data","loaders","options","url","Array","isArray","loader","context","parseWithLoaderInBatchesSync","inputIterator","outputIterator","Error"],"mappings":"AAAA,SAAQA,cAAR,QAA6B,iCAA7B;AACA,SAAQC,yBAAR,QAAwC,kCAAxC;AACA,SAAQC,mBAAR,QAAkC,yBAAlC;AACA,SAAQC,gBAAR,QAA+B,mCAA/B;AACA,SAAQC,YAAR,QAA2B,iBAA3B;AAGA,OAAO,eAAeC,kBAAf,CAAkCC,IAAlC,EAAwCC,OAAxC,EAAiDC,OAAjD,EAA0DC,GAA1D,EAA+D;AAGpE,MAAI,CAACC,KAAK,CAACC,OAAN,CAAcJ,OAAd,CAAD,IAA2B,CAACP,cAAc,CAACO,OAAD,CAA9C,EAAyD;AACvDE,IAAAA,GAAG,GAAGD,OAAN;AACAA,IAAAA,OAAO,GAAGD,OAAV;AACAA,IAAAA,OAAO,GAAG,IAAV;AACD;;AAID,QAAMK,MAAM,GAAGR,YAAY,CAACG,OAAD,EAAUE,GAAV,EAAe,IAAf,CAA3B;AAGAD,EAAAA,OAAO,GAAGP,yBAAyB,CAACO,OAAD,EAAUI,MAAV,CAAnC;AAEA,QAAMC,OAAO,GAAGV,gBAAgB,CAAC;AAACM,IAAAA;AAAD,GAAD,EAAQD,OAAR,CAAhC;AAEA,SAAOM,4BAA4B,CAACF,MAAD,EAASN,IAAT,EAAeE,OAAf,EAAwBK,OAAxB,CAAnC;AACD;;AAED,SAASC,4BAAT,CAAsCF,MAAtC,EAA8CN,IAA9C,EAAoDE,OAApD,EAA6DK,OAA7D,EAAsE;AAEpE,MAAID,MAAM,CAACP,kBAAX,EAA+B;AAC7B,UAAMU,aAAa,GAAGb,mBAAmB,CAACI,IAAD,CAAzC;AACA,UAAMU,cAAc,GAAGJ,MAAM,CAACP,kBAAP,CAA0BU,aAA1B,EAAyCP,OAAzC,EAAkDK,OAAlD,EAA2DD,MAA3D,CAAvB;AACA,WAAOI,cAAP;AACD;;AAED,QAAM,IAAIC,KAAJ,CAAU,4CAAV,CAAN;AACD","sourcesContent":["import {isLoaderObject} from './loader-utils/normalize-loader';\nimport {mergeLoaderAndUserOptions} from './loader-utils/normalize-options';\nimport {getIteratorFromData} from './loader-utils/get-data';\nimport {getLoaderContext} from './loader-utils/get-loader-context';\nimport {selectLoader} from './select-loader';\n\n// TODO - remove?\nexport async function parseInBatchesSync(data, loaders, options, url) {\n  // Signature: parseInBatchesSync(data, options, url)\n  // Uses registered loaders\n  if (!Array.isArray(loaders) && !isLoaderObject(loaders)) {\n    url = options;\n    options = loaders;\n    loaders = null;\n  }\n\n  // Chooses a loader and normalizes it\n  // TODO - only uses URL, need a selectLoader variant that peeks at first stream chunk...\n  const loader = selectLoader(loaders, url, null);\n\n  // Normalize options\n  options = mergeLoaderAndUserOptions(options, loader);\n\n  const context = getLoaderContext({url}, options);\n\n  return parseWithLoaderInBatchesSync(loader, data, options, context);\n}\n\nfunction parseWithLoaderInBatchesSync(loader, data, options, context) {\n  // Create async iterator adapter for data, and concatenate result\n  if (loader.parseInBatchesSync) {\n    const inputIterator = getIteratorFromData(data);\n    const outputIterator = loader.parseInBatchesSync(inputIterator, options, context, loader);\n    return outputIterator;\n  }\n\n  throw new Error('parseWithLoaderInBatchesSync not available');\n}\n"],"file":"parse-in-batches-sync.js"}