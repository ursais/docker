{"version":3,"sources":["../../../src/lib/parse-sync.js"],"names":["selectLoader","isLoaderObject","mergeLoaderAndUserOptions","getArrayBufferOrStringFromDataSync","getLoaderContext","parseSync","data","loaders","options","url","Array","isArray","loader","context","parseWithLoaderSync","parseTextSync","Error","name"],"mappings":"AAAA,SAAQA,YAAR,QAA2B,iBAA3B;AACA,SAAQC,cAAR,QAA6B,iCAA7B;AACA,SAAQC,yBAAR,QAAwC,kCAAxC;AACA,SAAQC,kCAAR,QAAiD,yBAAjD;AACA,SAAQC,gBAAR,QAA+B,mCAA/B;AAEA,OAAO,SAASC,SAAT,CAAmBC,IAAnB,EAAyBC,OAAzB,EAAkCC,OAAlC,EAA2CC,GAA3C,EAAgD;AAGrD,MAAI,CAACC,KAAK,CAACC,OAAN,CAAcJ,OAAd,CAAD,IAA2B,CAACN,cAAc,CAACM,OAAD,CAA9C,EAAyD;AACvDE,IAAAA,GAAG,GAAGD,OAAN;AACAA,IAAAA,OAAO,GAAGD,OAAV;AACAA,IAAAA,OAAO,GAAG,IAAV;AACD;;AAGD,QAAMK,MAAM,GAAGZ,YAAY,CAACO,OAAD,EAAUE,GAAV,EAAeH,IAAf,CAA3B;;AAEA,MAAI,CAACM,MAAL,EAAa;AACX,WAAO,IAAP;AACD;;AAGDJ,EAAAA,OAAO,GAAGN,yBAAyB,CAACM,OAAD,EAAUI,MAAV,CAAnC;AAEA,QAAMC,OAAO,GAAGT,gBAAgB,CAAC;AAACK,IAAAA,GAAD;AAAMJ,IAAAA;AAAN,GAAD,EAAmBG,OAAnB,CAAhC;AAEA,SAAOM,mBAAmB,CAACF,MAAD,EAASN,IAAT,EAAeE,OAAf,EAAwBK,OAAxB,CAA1B;AACD;;AAGD,SAASC,mBAAT,CAA6BF,MAA7B,EAAqCN,IAArC,EAA2CE,OAA3C,EAAoDK,OAApD,EAA6D;AAC3DP,EAAAA,IAAI,GAAGH,kCAAkC,CAACG,IAAD,EAAOM,MAAP,CAAzC;;AAEA,MAAIA,MAAM,CAACG,aAAP,IAAwB,OAAOT,IAAP,KAAgB,QAA5C,EAAsD;AACpD,WAAOM,MAAM,CAACG,aAAP,CAAqBT,IAArB,EAA2BE,OAA3B,EAAoCK,OAApC,EAA6CD,MAA7C,CAAP;AACD;;AAED,MAAIA,MAAM,CAACP,SAAX,EAAsB;AACpB,WAAOO,MAAM,CAACP,SAAP,CAAiBC,IAAjB,EAAuBE,OAAvB,EAAgCK,OAAhC,EAAyCD,MAAzC,CAAP;AACD;;AAGD,QAAM,IAAII,KAAJ,2BAA6BH,OAAO,CAACJ,GAAR,IAAe,MAA5C,oBAA4DG,MAAM,CAACK,IAAnE,aAAN;AACD","sourcesContent":["import {selectLoader} from './select-loader';\nimport {isLoaderObject} from './loader-utils/normalize-loader';\nimport {mergeLoaderAndUserOptions} from './loader-utils/normalize-options';\nimport {getArrayBufferOrStringFromDataSync} from './loader-utils/get-data';\nimport {getLoaderContext} from './loader-utils/get-loader-context';\n\nexport function parseSync(data, loaders, options, url) {\n  // Signature: parseSync(data, options, url)\n  // Uses registered loaders\n  if (!Array.isArray(loaders) && !isLoaderObject(loaders)) {\n    url = options;\n    options = loaders;\n    loaders = null;\n  }\n\n  // Chooses a loader and normalize it\n  const loader = selectLoader(loaders, url, data);\n  // Note: if nothrow option was set, it is possible that no loader was found, if so just return null\n  if (!loader) {\n    return null;\n  }\n\n  // Normalize options\n  options = mergeLoaderAndUserOptions(options, loader);\n\n  const context = getLoaderContext({url, parseSync}, options);\n\n  return parseWithLoaderSync(loader, data, options, context);\n}\n\n// TODO - should accept loader.parseSync/parse and generate 1 chunk asyncIterator\nfunction parseWithLoaderSync(loader, data, options, context) {\n  data = getArrayBufferOrStringFromDataSync(data, loader);\n\n  if (loader.parseTextSync && typeof data === 'string') {\n    return loader.parseTextSync(data, options, context, loader);\n  }\n\n  if (loader.parseSync) {\n    return loader.parseSync(data, options, context, loader);\n  }\n\n  // TBD - If synchronous parser not available, return null\n  throw new Error(`Could not parse ${context.url || 'data'} using ${loader.name} loader`);\n}\n"],"file":"parse-sync.js"}