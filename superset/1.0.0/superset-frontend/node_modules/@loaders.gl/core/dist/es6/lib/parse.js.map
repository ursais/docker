{"version":3,"sources":["../../../src/lib/parse.js"],"names":["assert","isLoaderObject","mergeLoaderAndUserOptions","getUrlFromData","getArrayBufferOrStringFromData","getLoaderContext","parseWithWorker","selectLoader","parse","data","loaders","options","url","Array","isArray","autoUrl","loader","context","parseWithLoader","parseTextSync","dataType","parseSync","worker","name"],"mappings":"AAAA,OAAOA,MAAP,MAAmB,iBAAnB;AACA,SAAQC,cAAR,QAA6B,iCAA7B;AACA,SAAQC,yBAAR,QAAwC,kCAAxC;AACA,SAAQC,cAAR,QAA6B,yBAA7B;AACA,SAAQC,8BAAR,QAA6C,yBAA7C;AACA,SAAQC,gBAAR,QAA+B,mCAA/B;AACA,OAAOC,eAAP,MAA4B,kCAA5B;AACA,SAAQC,YAAR,QAA2B,iBAA3B;AAEA,OAAO,eAAeC,KAAf,CAAqBC,IAArB,EAA2BC,OAA3B,EAAoCC,OAApC,EAA6CC,GAA7C,EAAkD;AAGvD,MAAIF,OAAO,IAAI,CAACG,KAAK,CAACC,OAAN,CAAcJ,OAAd,CAAZ,IAAsC,CAACT,cAAc,CAACS,OAAD,CAAzD,EAAoE;AAClEE,IAAAA,GAAG,GAAGD,OAAN;AACAA,IAAAA,OAAO,GAAGD,OAAV;AACAA,IAAAA,OAAO,GAAG,IAAV;AACD;;AAEDC,EAAAA,OAAO,GAAGA,OAAO,IAAI,EAArB;AAGA,QAAMI,OAAO,GAAGZ,cAAc,CAACM,IAAD,EAAOG,GAAP,CAA9B;AAGA,QAAMI,MAAM,GAAGT,YAAY,CAACG,OAAD,EAAUK,OAAV,EAAmBN,IAAnB,CAA3B;AAGAE,EAAAA,OAAO,GAAGT,yBAAyB,CAACS,OAAD,EAAUK,MAAV,CAAnC;AAEA,QAAMC,OAAO,GAAGZ,gBAAgB,CAAC;AAACO,IAAAA,GAAG,EAAEG,OAAN;AAAeP,IAAAA;AAAf,GAAD,EAAwBG,OAAxB,CAAhC;AAEA,SAAO,MAAMO,eAAe,CAACF,MAAD,EAASP,IAAT,EAAeE,OAAf,EAAwBM,OAAxB,CAA5B;AACD;;AAKD,eAAeC,eAAf,CAA+BF,MAA/B,EAAuCP,IAAvC,EAA6CE,OAA7C,EAAsDM,OAAtD,EAA+D;AAC7DR,EAAAA,IAAI,GAAG,MAAML,8BAA8B,CAACK,IAAD,EAAOO,MAAP,CAA3C;;AAGA,MAAIA,MAAM,CAACG,aAAP,IAAwB,OAAOV,IAAP,KAAgB,QAA5C,EAAsD;AACpDE,IAAAA,OAAO,CAACS,QAAR,GAAmB,MAAnB;AACA,WAAOJ,MAAM,CAACG,aAAP,CAAqBV,IAArB,EAA2BE,OAA3B,EAAoCM,OAApC,EAA6CD,MAA7C,CAAP;AACD;;AAGD,MAAIA,MAAM,CAACR,KAAX,EAAkB;AAChB,WAAO,MAAMQ,MAAM,CAACR,KAAP,CAAaC,IAAb,EAAmBE,OAAnB,EAA4BM,OAA5B,EAAqCD,MAArC,CAAb;AACD;;AAGD,MAAIA,MAAM,CAACK,SAAX,EAAsB;AACpB,WAAOL,MAAM,CAACK,SAAP,CAAiBZ,IAAjB,EAAuBE,OAAvB,EAAgCM,OAAhC,EAAyCD,MAAzC,CAAP;AACD;;AAED,MAAIA,MAAM,CAACM,MAAX,EAAmB;AACjB,WAAO,MAAMhB,eAAe,CAACU,MAAM,CAACM,MAAR,EAAgBN,MAAM,CAACO,IAAvB,EAA6Bd,IAA7B,EAAmCE,OAAnC,EAA4CM,OAA5C,EAAqDD,MAArD,CAA5B;AACD;;AAID,SAAOhB,MAAM,CAAC,KAAD,CAAb;AACD","sourcesContent":["import assert from '../utils/assert';\nimport {isLoaderObject} from './loader-utils/normalize-loader';\nimport {mergeLoaderAndUserOptions} from './loader-utils/normalize-options';\nimport {getUrlFromData} from './loader-utils/get-data';\nimport {getArrayBufferOrStringFromData} from './loader-utils/get-data';\nimport {getLoaderContext} from './loader-utils/get-loader-context';\nimport parseWithWorker from './loader-utils/parse-with-worker';\nimport {selectLoader} from './select-loader';\n\nexport async function parse(data, loaders, options, url) {\n  // Signature: parse(data, options, url)\n  // Uses registered loaders\n  if (loaders && !Array.isArray(loaders) && !isLoaderObject(loaders)) {\n    url = options;\n    options = loaders;\n    loaders = null;\n  }\n\n  options = options || {};\n\n  // Extract a url for auto detection\n  const autoUrl = getUrlFromData(data, url);\n\n  // Chooses a loader and normalize it\n  const loader = selectLoader(loaders, autoUrl, data);\n\n  // Normalize options\n  options = mergeLoaderAndUserOptions(options, loader);\n\n  const context = getLoaderContext({url: autoUrl, parse}, options);\n\n  return await parseWithLoader(loader, data, options, context);\n}\n\n// TODO: support progress and abort\n// TODO: support moving loading to worker\n// TODO - should accept loader.parseAsyncIterator and concatenate.\nasync function parseWithLoader(loader, data, options, context) {\n  data = await getArrayBufferOrStringFromData(data, loader);\n\n  // First check for synchronous text parser, wrap results in promises\n  if (loader.parseTextSync && typeof data === 'string') {\n    options.dataType = 'text';\n    return loader.parseTextSync(data, options, context, loader);\n  }\n\n  // Check for asynchronous parser\n  if (loader.parse) {\n    return await loader.parse(data, options, context, loader);\n  }\n\n  // Now check for synchronous binary data parser, wrap results in promises\n  if (loader.parseSync) {\n    return loader.parseSync(data, options, context, loader);\n  }\n\n  if (loader.worker) {\n    return await parseWithWorker(loader.worker, loader.name, data, options, context, loader);\n  }\n\n  // TBD - If asynchronous parser not available, return null\n  // => This loader does not work on loaded data and only supports `loadAndParseAsync`\n  return assert(false);\n}\n"],"file":"parse.js"}