{"version":3,"sources":["../../../../src/lib/loader-utils/get-data.js"],"names":["isFetchResponse","isReadableStream","isAsyncIterable","isIterable","isIterator","isFileReadable","getStreamIterator","fetchFileReadable","checkFetchResponseStatus","checkFetchResponseStatusSync","ERR_DATA","getUrlFromData","data","url","name","replace","getArrayBufferOrStringFromDataSync","loader","text","ArrayBuffer","isView","arrayBuffer","buffer","binary","textDecoder","TextDecoder","decode","Error","getArrayBufferOrStringFromData","isArrayBuffer","getAsyncIteratorFromData","body","Symbol","asyncIterator","getIteratorFromData","oneChunk","iterator"],"mappings":"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","sourcesContent":["/* global TextDecoder */\nimport {\n  isFetchResponse,\n  isReadableStream,\n  isAsyncIterable,\n  isIterable,\n  isIterator,\n  isFileReadable\n} from '../../javascript-utils/is-type';\nimport {getStreamIterator} from '../../javascript-utils/stream-utils';\nimport fetchFileReadable from '../fetch/fetch-file.browser';\nimport {checkFetchResponseStatus, checkFetchResponseStatusSync} from './check-errors';\n\nconst ERR_DATA = 'Cannot convert supplied data type';\n\n// Extract a URL from `parse` arguments if possible\n// If a fetch Response object or File/Blob were passed in get URL from those objects\nexport function getUrlFromData(data, url) {\n  if (isFetchResponse(data)) {\n    url = url || data.url;\n  } else if (isFileReadable(url)) {\n    // File or Blob\n    url = url.name;\n  }\n  // Strip any query string\n  return typeof url === 'string' ? url.replace(/\\?.*/, '') : url;\n}\n\nexport function getArrayBufferOrStringFromDataSync(data, loader) {\n  if (loader.text && typeof data === 'string') {\n    return data;\n  }\n\n  if (data instanceof ArrayBuffer || ArrayBuffer.isView(data)) {\n    const arrayBuffer = data.buffer || data;\n    if (loader.text && !loader.binary) {\n      const textDecoder = new TextDecoder('utf8');\n      return textDecoder.decode(arrayBuffer);\n    }\n    return arrayBuffer;\n  }\n\n  throw new Error(ERR_DATA);\n}\n\n// Convert async iterator to a promise\nexport async function getArrayBufferOrStringFromData(data, loader) {\n  // Resolve any promise\n  data = await data;\n\n  const isArrayBuffer = data instanceof ArrayBuffer || ArrayBuffer.isView(data);\n  if (typeof data === 'string' || isArrayBuffer) {\n    return getArrayBufferOrStringFromDataSync(data, loader);\n  }\n\n  // Blobs and files are FileReader compatible\n  if (isFileReadable(data)) {\n    data = await fetchFileReadable(data);\n  }\n\n  if (isFetchResponse(data)) {\n    await checkFetchResponseStatus(data);\n    return loader.binary ? await data.arrayBuffer() : await data.text();\n  }\n\n  // if (isIterable(data) || isAsyncIterable(data)) {\n  // }\n\n  // Assume arrayBuffer iterator - attempt to concatenate\n  // return concatenateAsyncIterator(data);\n\n  throw new Error(ERR_DATA);\n}\n\nexport function getAsyncIteratorFromData(data) {\n  if (isIterator(data)) {\n    return data;\n  }\n\n  // TODO: Our fetchFileReaderObject response does not yet support a body stream\n  if (isFetchResponse(data) && data.body) {\n    // Note Since this function is not async, we currently can't load error message, just status\n    checkFetchResponseStatusSync(data);\n    return getStreamIterator(data.body);\n  }\n\n  if (isReadableStream(data)) {\n    return getStreamIterator(data);\n  }\n\n  if (isAsyncIterable(data)) {\n    return data[Symbol.asyncIterator]();\n  }\n\n  return getIteratorFromData(data);\n}\n\nexport function getIteratorFromData(data) {\n  // generate an iterator that emits a single chunk\n  if (data instanceof ArrayBuffer || ArrayBuffer.isView(data)) {\n    return (function* oneChunk() {\n      yield data.buffer || data;\n    })();\n  }\n\n  if (isIterator(data)) {\n    return data;\n  }\n\n  if (isIterable(data)) {\n    return data[Symbol.iterator]();\n  }\n\n  throw new Error(ERR_DATA);\n}\n"],"file":"get-data.js"}