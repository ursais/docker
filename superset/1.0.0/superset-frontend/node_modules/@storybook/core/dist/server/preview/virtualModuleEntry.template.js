"use strict";

var _clientApi = require("{{clientApi}}");

var _clientLogger = require("{{clientLogger}}");

var _configFilename = require("{{configFilename}}");

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

if (_configFilename.args || _configFilename.argTypes) {
  _clientLogger.logger.warn('Invalid args/argTypes in config, ignoring.', JSON.stringify({
    args: _configFilename.args,
    argTypes: _configFilename.argTypes
  }));
}

if (_configFilename.decorators) {
  _configFilename.decorators.forEach(function (decorator) {
    return (0, _clientApi.addDecorator)(decorator, false);
  });
}

if (_configFilename.loaders) {
  _configFilename.loaders.forEach(function (loader) {
    return (0, _clientApi.addLoader)(loader, false);
  });
}

if (_configFilename.parameters || _configFilename.globals || _configFilename.globalTypes) {
  (0, _clientApi.addParameters)(_objectSpread(_objectSpread({}, _configFilename.parameters), {}, {
    globals: _configFilename.globals,
    globalTypes: _configFilename.globalTypes
  }), false);
}

if (_configFilename.argTypesEnhancers) {
  _configFilename.argTypesEnhancers.forEach(function (enhancer) {
    return (0, _clientApi.addArgTypesEnhancer)(enhancer);
  });
}