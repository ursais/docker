"use strict";

require("core-js/modules/es.symbol");

require("core-js/modules/es.symbol.description");

require("core-js/modules/es.symbol.iterator");

require("core-js/modules/es.array.from");

require("core-js/modules/es.array.is-array");

require("core-js/modules/es.array.iterator");

require("core-js/modules/es.array.map");

require("core-js/modules/es.array.slice");

require("core-js/modules/es.date.to-string");

require("core-js/modules/es.function.name");

require("core-js/modules/es.object.to-string");

require("core-js/modules/es.regexp.to-string");

require("core-js/modules/es.string.iterator");

require("core-js/modules/web.dom-collections.iterator");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _react = _interopRequireDefault(require("react"));

var _memoizerific = _interopRequireDefault(require("memoizerific"));

var _api = require("@storybook/api");

var _components = require("@storybook/components");

var _constants = require("../constants");

var _helpers = require("../helpers");

var _PaddingIcon = _interopRequireDefault(require("../components/PaddingIcon"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && Symbol.iterator in Object(iter)) return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

var createPaddingSelectorItem = (0, _memoizerific["default"])(1000)(function (id, name, value, hasValue, active, change) {
  return {
    id: id || name,
    title: name,
    onClick: function onClick() {
      return change({
        selected: value,
        name: name
      });
    },
    active: active,
    right: hasValue ? value : undefined
  };
});
var getDisplayedItems = (0, _memoizerific["default"])(10)(function (list, selected, change) {
  var availablePaddingSelectorItems = [];

  if (selected !== _constants.DEFAULT_PADDING) {
    availablePaddingSelectorItems.push(createPaddingSelectorItem('reset', 'Clear paddings', _constants.DEFAULT_PADDING, false, false, change));
  }

  if (list.length) {
    availablePaddingSelectorItems.push.apply(availablePaddingSelectorItems, _toConsumableArray(list.map(function (_ref) {
      var name = _ref.name,
          value = _ref.value;
      return createPaddingSelectorItem(null, name, value, true, value === selected, change);
    })));
  }

  return availablePaddingSelectorItems;
});

var PaddingSelector = function PaddingSelector(_ref2) {
  var api = _ref2.api;
  var items = (0, _api.useParameter)(_constants.PARAM_KEY, []);
  var selectedPadding = (0, _helpers.getSelectedPadding)(items, api.getAddonState(_constants.PARAM_KEY));
  return items.length ? /*#__PURE__*/_react["default"].createElement(_components.WithTooltip, {
    placement: "top",
    trigger: "click",
    tooltip: function tooltip(_ref3) {
      var onHide = _ref3.onHide;
      return /*#__PURE__*/_react["default"].createElement(_components.TooltipLinkList, {
        links: getDisplayedItems(items, selectedPadding, function (_ref4) {
          var selected = _ref4.selected;
          api.setAddonState(_constants.PARAM_KEY, selected);
          api.emit(_constants.EVENTS.UPDATE, selected);
          onHide();
        })
      });
    },
    closeOnClick: true
  }, /*#__PURE__*/_react["default"].createElement(_components.IconButton, {
    key: "padding",
    active: selectedPadding !== _constants.DEFAULT_PADDING,
    title: "Change the paddings of the preview"
  }, /*#__PURE__*/_react["default"].createElement(_PaddingIcon["default"], null))) : null;
};

var _default = PaddingSelector;
exports["default"] = _default;