{"version":3,"sources":["../../src/spherical-coordinates.js"],"names":["EPSILON","EARTH_RADIUS_METERS","SphericalCoordinates","phi","theta","radius","bearing","pitch","altitude","radiusScale","arguments","length","Number","isFinite","check","formatString","config","printTypes","printDegrees","f","formatValue","other","constructor","copy","lng","lat","z","v","vec3","Math","atan2","acos","Vector3","rotateX","radians","rotateZ","max","min","PI","Error"],"mappings":"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","sourcesContent":["// Copyright (c) 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\n// Adaptation of THREE.js Spherical class, under MIT license\nimport {formatValue, equals, config} from './lib/common';\nimport {degrees, radians, clamp} from './lib/common';\nimport Vector3 from './vector3';\n\nimport * as vec3 from 'gl-matrix/vec3';\n\n// TODO - import epsilon\nconst EPSILON = 0.000001;\n\nconst EARTH_RADIUS_METERS = 6.371e6;\n\n// Todo [rho, theta, phi] ?\nexport default class SphericalCoordinates {\n  /**\n   * Ref: https://en.wikipedia.org/wiki/Spherical_coordinate_system\n   * The poles (phi) are at the positive and negative y axis.\n   * The equator starts at positive z.\n   * @class\n   * @param {Number} phi=0 - rotation around X (latitude)\n   * @param {Number} theta=0 - rotation around Y (longitude)\n   * @param {Number} radius=1 - Distance from center\n   */\n  /* eslint-disable complexity */\n  constructor({\n    phi,\n    theta,\n    radius,\n    bearing,\n    pitch,\n    altitude,\n    radiusScale = EARTH_RADIUS_METERS\n  } = {}) {\n    if (arguments.length === 0) {\n      this.phi = 0;\n      this.theta = 0;\n      this.radius = 1;\n    } else if (Number.isFinite(phi) || Number.isFinite(theta)) {\n      this.phi = phi || 0; // up / down towards top and bottom pole\n      this.theta = theta || 0; // around the equator of the sphere\n    } else if (Number.isFinite(bearing) || Number.isFinite(pitch)) {\n      this.bearing = bearing || 0; // up / down towards top and bottom pole\n      this.pitch = pitch || 0; // around the equator of the sphere\n    }\n    this.radius = radius || 1; // radial distance from center\n    this.radiusScale = radiusScale || 1; // Used by lngLatZ\n    this.check();\n  }\n  /* eslint-enable complexity */\n\n  toString() {\n    return this.formatString(config);\n  }\n\n  formatString({printTypes, printDegrees}) {\n    const f = formatValue;\n    return `${printTypes ? 'Spherical' : ''}\\\n[rho:${f(this.radius)},theta:${f(this.theta)},phi:${f(this.phi)}]`;\n  }\n\n  equals(other) {\n    return (\n      equals(this.radius, other.radius) &&\n      equals(this.theta, other.theta) &&\n      equals(this.phi, other.phi)\n    );\n  }\n\n  exactEquals(other) {\n    return this.radius === other.radius && this.theta === other.theta && this.phi === other.phi;\n  }\n\n  /* eslint-disable brace-style */\n  // Cartographic (bearing 0 north, pitch 0 look from above)\n  get bearing() {\n    return 180 - degrees(this.phi);\n  }\n  set bearing(v) {\n    this.phi = Math.PI - radians(v);\n  }\n  get pitch() {\n    return degrees(this.theta);\n  }\n  set pitch(v) {\n    this.theta = radians(v);\n  }\n  // get pitch() { return 90 - degrees(this.phi); }\n  // set pitch(v) { this.phi = radians(v) + Math.PI / 2; }\n  // get altitude() { return this.radius - 1; } // relative altitude\n\n  // lnglatZ coordinates\n  get longitude() {\n    return degrees(this.phi);\n  }\n  get latitude() {\n    return degrees(this.theta);\n  }\n  get lng() {\n    return degrees(this.phi);\n  }\n  get lat() {\n    return degrees(this.theta);\n  }\n  get z() {\n    return (this.radius - 1) * this.radiusScale;\n  }\n  /* eslint-enable brace-style */\n\n  set(radius, phi, theta) {\n    this.radius = radius;\n    this.phi = phi;\n    this.theta = theta;\n    return this.check();\n  }\n\n  clone() {\n    return new this.constructor().copy(this);\n  }\n\n  copy(other) {\n    this.radius = other.radius;\n    this.phi = other.phi;\n    this.theta = other.theta;\n    return this.check();\n  }\n\n  fromLngLatZ([lng, lat, z]) {\n    this.radius = 1 + z / this.radiusScale;\n    this.phi = radians(lat);\n    this.theta = radians(lng);\n  }\n\n  fromVector3(v) {\n    this.radius = vec3.length(v);\n    if (this.radius === 0) {\n      this.theta = 0;\n      this.phi = 0;\n    } else {\n      this.theta = Math.atan2(v[0], v[1]); // equator angle around y-up axis\n      this.phi = Math.acos(clamp(v[2] / this.radius, -1, 1)); // polar angle\n    }\n    return this.check();\n  }\n\n  toVector3() {\n    return new Vector3(0, 0, this.radius)\n      .rotateX({radians: this.theta})\n      .rotateZ({radians: this.phi});\n  }\n\n  // restrict phi to be betwee EPS and PI-EPS\n  makeSafe() {\n    this.phi = Math.max(EPSILON, Math.min(Math.PI - EPSILON, this.phi));\n  }\n\n  check() {\n    // this.makeSafe();\n    if (!Number.isFinite(this.phi) || !Number.isFinite(this.theta) || !(this.radius > 0)) {\n      throw new Error('SphericalCoordinates: some fields set to invalid numbers');\n    }\n    return this;\n  }\n}\n"],"file":"spherical-coordinates.js"}