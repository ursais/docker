{"version":3,"sources":["../../src/pose.js"],"names":["Pose","x","y","z","roll","pitch","yaw","position","orientation","Array","isArray","length","Vector3","Euler","RollPitchYaw","pose","equals","exactEquals","sr","Math","sin","sp","sw","cr","cos","cp","cw","matrix","Matrix4","setRowMajor","multiplyRight","getTransformationMatrix","invert","value"],"mappings":"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","sourcesContent":["// Copyright (c) 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\nimport Matrix4 from './matrix4';\nimport Vector3 from './vector3';\nimport Euler from './euler';\n\nexport default class Pose {\n  /**\n   * A pose contains both rotation and rotations.\n   * Note that every single pose defines its own coordinate system\n   * (with the position of the pose in the origin, and zero rotations).\n   * These \"pose relative\" coordinate will be centered on the defining\n   * pose's position and with with the defining pose's orientation\n   * aligned with axis.\n   */\n  constructor({x = 0, y = 0, z = 0, roll = 0, pitch = 0, yaw = 0, position, orientation}) {\n    if (Array.isArray(position) && position.length === 3) {\n      this.position = new Vector3(position);\n    } else {\n      this.position = new Vector3(x, y, z);\n    }\n    if (Array.isArray(orientation) && orientation.length === 4) {\n      this.orientation = new Euler(orientation, orientation[3]);\n    } else {\n      this.orientation = new Euler(roll, pitch, yaw, Euler.RollPitchYaw);\n    }\n  }\n\n  /* eslint-disable no-multi-spaces, brace-style, no-return-assign */\n  get x() {\n    return this.position.x;\n  }\n  set x(value) {\n    return (this.position.x = value);\n  }\n  get y() {\n    return this.position.y;\n  }\n  set y(value) {\n    return (this.position.y = value);\n  }\n  get z() {\n    return this.position.z;\n  }\n  set z(value) {\n    return (this.position.z = value);\n  }\n  get roll() {\n    return this.orientation.roll;\n  }\n  set roll(value) {\n    return (this.orientation.roll = value);\n  }\n  get pitch() {\n    return this.orientation.pitch;\n  }\n  set pitch(value) {\n    return (this.orientation.pitch = value);\n  }\n  get yaw() {\n    return this.orientation.yaw;\n  }\n  set yaw(value) {\n    return (this.orientation.yaw = value);\n  }\n  /* eslint-enable no-multi-spaces, brace-style, no-return-assign */\n\n  getPosition() {\n    return this.position;\n  }\n\n  getOrientation() {\n    return this.orientation;\n  }\n\n  equals(pose) {\n    if (!pose) {\n      return false;\n    }\n    return this.position.equals(pose.position) && this.orientation.equals(pose.orientation);\n  }\n\n  exactEquals(pose) {\n    if (!pose) {\n      return false;\n    }\n    return (\n      this.position.exactEquals(pose.position) && this.orientation.exactEquals(pose.orientation)\n    );\n  }\n\n  /*\n   * Returns a 4x4 matrix that transforms a coordinates (in the same\n   * coordinate system as this pose) into the \"pose-relative\" coordinate\n   * system defined by this pose.\n   * The pose relative coordinates with have origin in the position of this\n   * pose, and axis will be aligned with the rotation of this pose.\n   */\n  getTransformationMatrix() {\n    // setup precomputations for the sin/cos of the angles\n    const sr = Math.sin(this.roll);\n    const sp = Math.sin(this.pitch);\n    const sw = Math.sin(this.yaw);\n\n    const cr = Math.cos(this.roll);\n    const cp = Math.cos(this.pitch);\n    const cw = Math.cos(this.yaw);\n\n    const matrix = new Matrix4().setRowMajor(\n      cw * cp, // 0,0\n      -sw * cr + cw * sp * sr, // 0,1\n      sw * sr + cw * sp * cr, // 0,2\n      this.x, // 0,3\n\n      sw * cp, // 1,0\n      cw * cr + sw * sp * sr, // 1,1\n      -cw * sr + sw * sp * cr, // 1,2\n      this.y, // 1,3\n\n      -sp, // 2,0\n      cp * sr, // 2,1\n      cp * cr, // 2,2\n      this.z, // 2,3\n\n      0,\n      0,\n      0,\n      1\n    );\n\n    return matrix;\n  }\n\n  /*\n   * Given a second pose that represent the same object in a second coordinate\n   * system, this method returns a 4x4 matrix that transforms coordinates in the\n   * second coordinate system into the coordinate system of this pose.\n   */\n  getTransformationMatrixFromPose(pose) {\n    return new Matrix4()\n      .multiplyRight(this.getTransformationMatrix())\n      .multiplyRight(pose.getTransformationMatrix().invert());\n  }\n\n  /*\n   * Given a second pose that represent the same object in a second coordinate\n   * system, this method returns a 4x4 matrix that transforms coordinates in the\n   * coordinate system of this pose into the coordinate system of the second pose.\n   *\n   * Note: This method returns the inverse of that returned by\n   * this.getTransformationMatrixFromPose(pose)\n   */\n  getTransformationMatrixToPose(pose) {\n    return new Matrix4()\n      .multiplyRight(pose.getTransformationMatrix())\n      .multiplyRight(this.getTransformationMatrix().invert());\n  }\n}\n"],"file":"pose.js"}