{"version":3,"sources":["../../../src/lib/matrix.js"],"names":["MathArray","checkNumber","config","Matrix","toString","string","printRowMajor","row","RANK","col","i","ELEMENTS","getElement","j","columnMajor","setElement","value","getColumn","columnIndex","result","Vector","firstIndex","setColumn","columnVector"],"mappings":"AAAA,OAAOA,SAAP,MAAsB,cAAtB;AACA,SAAQC,WAAR,QAA0B,UAA1B;AACA,SAAQC,MAAR,QAAqB,UAArB;AAEA,eAAe,MAAMC,MAAN,SAAqBH,SAArB,CAA+B;AAC5CI,EAAAA,QAAQ,GAAG;AACV,QAAIC,MAAM,GAAE,GAAZ;;AACE,QAAIH,MAAM,CAACI,aAAX,EAA0B;AAC3BD,MAAAA,MAAM,IAAI,YAAV;;AACG,WAAK,IAAIE,GAAG,GAAG,CAAf,EAAkBA,GAAG,GAAG,KAAKC,IAA7B,EAAmC,EAAED,GAArC,EAA0C;AAC3C,aAAK,IAAIE,GAAG,GAAG,CAAf,EAAkBA,GAAG,GAAG,KAAKD,IAA7B,EAAmC,EAAEC,GAArC,EAA0C;AACrCJ,UAAAA,MAAM,IAAK,IAAG,KAAKE,GAAG,GAAG,KAAKC,IAAX,GAAkBC,GAAvB,CAA4B,EAA1C;AACF;AACD;AACF,KAPD,MAOO;AACLJ,MAAAA,MAAM,IAAI,YAAV;;AACA,WAAK,IAAIK,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,KAAKC,QAAzB,EAAmC,EAAED,CAArC,EAAwC;AACtCL,QAAAA,MAAM,IAAK,IAAG,KAAKK,CAAL,CAAQ,EAAtB;AACD;AACF;;AACD,WAAOL,MAAP;AACF;;AAGDO,EAAAA,UAAU,CAACF,CAAD,EAAIG,CAAJ,EAA4B;AAAA,QAArBC,WAAqB,uEAAP,KAAO;AACpC,WAAOA,WAAW,GAAG,KAAKJ,CAAC,GAAG,CAAJ,GAAQG,CAAb,CAAH,GAAqB,KAAKA,CAAC,GAAG,CAAJ,GAAQH,CAAb,CAAvC;AACD;;AAGDK,EAAAA,UAAU,CAACL,CAAD,EAAIG,CAAJ,EAAOG,KAAP,EAAmC;AAAA,QAArBF,WAAqB,uEAAP,KAAO;;AAC3C,QAAIA,WAAJ,EAAiB;AACf,WAAKJ,CAAC,GAAG,KAAKF,IAAT,GAAgBK,CAArB,IAA0BZ,WAAW,CAACe,KAAD,CAArC;AACD,KAFD,MAEO;AACL,WAAKH,CAAC,GAAG,KAAKL,IAAT,GAAgBE,CAArB,IAA0BT,WAAW,CAACe,KAAD,CAArC;AACD;;AACD,WAAO,IAAP;AACD;;AAEDC,EAAAA,SAAS,CAACC,WAAD,EAA0C;AAAA,QAA5BC,MAA4B,uEAAnB,IAAI,KAAKC,MAAT,EAAmB;AACjD,UAAMC,UAAU,GAAGH,WAAW,GAAG,KAAKV,IAAtC;;AACA,SAAK,IAAIE,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,KAAKF,IAAzB,EAA+B,EAAEE,CAAjC,EAAoC;AAClCS,MAAAA,MAAM,CAACT,CAAD,CAAN,GAAY,KAAKW,UAAU,GAAGX,CAAlB,CAAZ;AACD;;AACD,WAAOS,MAAP;AACD;;AAEDG,EAAAA,SAAS,CAACJ,WAAD,EAAcK,YAAd,EAA4B;AACnC,UAAMF,UAAU,GAAGH,WAAW,GAAG,KAAKV,IAAtC;;AACA,SAAK,IAAIE,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,KAAKF,IAAzB,EAA+B,EAAEE,CAAjC,EAAoC;AAClC,WAAKW,UAAU,GAAGX,CAAlB,IAAuBa,YAAY,CAACb,CAAD,CAAnC;AACD;;AACD,WAAO,IAAP;AACD;;AAhD2C","sourcesContent":["import MathArray from './math-array';\nimport {checkNumber} from './common';\nimport {config} from './common';\n\nexport default class Matrix extends MathArray {\n  toString() {\n  \tlet string ='[';\n     if (config.printRowMajor) {\n\t   string += 'row-major:'\n       for (let row = 0; row < this.RANK; ++row) {\n\t     for (let col = 0; col < this.RANK; ++col) {\n       \t   string += ` ${this[row * this.RANK + col]}`;\n       \t}\n       }\n     } else {\n       string += 'col-major:'\n       for (let i = 0; i < this.ELEMENTS; ++i) {\n         string += ` ${this[i]}`;\n       }\n     }\n     return string;\n  }\n\n  // By default assumes row major indices\n  getElement(i, j, columnMajor = false) {\n    return columnMajor ? this[i * 3 + j] : this[j * 3 + i];\n  }\n\n  // By default assumes row major indices\n  setElement(i, j, value, columnMajor = false) {\n    if (columnMajor) {\n      this[i * this.RANK + j] = checkNumber(value);\n    } else {\n      this[j * this.RANK + i] = checkNumber(value);\n    }\n    return this;\n  }\n\n  getColumn(columnIndex, result = new this.Vector()) {\n    const firstIndex = columnIndex * this.RANK;\n    for (let i = 0; i < this.RANK; ++i) {\n      result[i] = this[firstIndex + i];\n    }\n    return result;\n  }\n\n  setColumn(columnIndex, columnVector) {\n    const firstIndex = columnIndex * this.RANK;\n    for (let i = 0; i < this.RANK; ++i) {\n      this[firstIndex + i] = columnVector[i];\n    }\n    return this;\n  }\n}\n"],"file":"matrix.js"}