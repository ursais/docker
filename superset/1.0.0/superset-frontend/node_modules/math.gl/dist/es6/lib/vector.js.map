{"version":3,"sources":["../../../src/lib/vector.js"],"names":["MathArray","checkNumber","assert","x","m","Error","Vector","value","y","len","Math","sqrt","lengthSquared","magnitude","length","i","ELEMENTS","distance","mathArray","distanceSquared","dist","dot","product","normalize","check","add","vectors","vector","subtract","multiply","divide","scale","Array","isArray","scaleAndAdd","lengthSq","distanceTo","distanceToSquared","getComponent","setComponent","addVectors","a","b","copy","subVectors","multiplyVectors","addScaledVector","constructor","multiplyScalar"],"mappings":"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","sourcesContent":["import MathArray from './math-array';\nimport {checkNumber} from './common';\n// import assert from 'assert';\nconst assert = (x, m) => {\n  if (!x) {\n    throw new Error(m);\n  }\n};\n\nexport default class Vector extends MathArray {\n  // ACCESSORS\n\n  get x() {\n    return this[0];\n  }\n  set x(value) {\n    return (this[0] = checkNumber(value));\n  }\n\n  get y() {\n    return this[1];\n  }\n  set y(value) {\n    return (this[1] = checkNumber(value));\n  }\n\n  // NOTE: `length` is a reserved word for Arrays, so we can't use `v.length()`\n  // Offer `len` and `magnitude`\n  len() {\n    return Math.sqrt(this.lengthSquared());\n  }\n\n  magnitude() {\n    return Math.sqrt(this.lengthSquared());\n  }\n\n  lengthSquared() {\n    let length = 0;\n    for (let i = 0; i < this.ELEMENTS; ++i) {\n      length += this[i] * this[i];\n    }\n    return length;\n  }\n\n  distance(mathArray) {\n    return Math.sqrt(this.distanceSquared(mathArray));\n  }\n\n  distanceSquared(mathArray) {\n    let length = 0;\n    for (let i = 0; i < this.ELEMENTS; ++i) {\n      const dist = this[i] - mathArray[i];\n      length += dist * dist;\n    }\n    return checkNumber(length);\n  }\n\n  dot(mathArray) {\n    let product = 0;\n    for (let i = 0; i < this.ELEMENTS; ++i) {\n      product += this[i] * mathArray[i];\n    }\n    return checkNumber(product);\n  }\n\n  // MODIFIERS\n\n  normalize() {\n    const length = this.magnitude();\n    if (length !== 0) {\n      for (let i = 0; i < this.ELEMENTS; ++i) {\n        this[i] /= length;\n      }\n    }\n    return this.check();\n  }\n\n  // negate() {\n  //   for (let i = 0; i < this.ELEMENTS; ++i) {\n  //     this[i] = -this[i];\n  //   }\n  //   return this.check();\n  // }\n\n  // inverse() {\n  //   for (let i = 0; i < this.ELEMENTS; ++i) {\n  //     this[i] = 1 / this[i];\n  //   }\n  //   return this.check();\n  // }\n\n  add(...vectors) {\n    for (const vector of vectors) {\n      for (let i = 0; i < this.ELEMENTS; ++i) {\n        this[i] += vector[i];\n      }\n    }\n    return this.check();\n  }\n\n  subtract(...vectors) {\n    for (const vector of vectors) {\n      for (let i = 0; i < this.ELEMENTS; ++i) {\n        this[i] -= vector[i];\n      }\n    }\n    return this.check();\n  }\n\n  multiply(...vectors) {\n    for (const vector of vectors) {\n      for (let i = 0; i < this.ELEMENTS; ++i) {\n        this[i] *= vector[i];\n      }\n    }\n    return this.check();\n  }\n\n  divide(...vectors) {\n    for (const vector of vectors) {\n      for (let i = 0; i < this.ELEMENTS; ++i) {\n        this[i] /= vector[i];\n      }\n    }\n    return this.check();\n  }\n\n  scale(scale) {\n    if (Array.isArray(scale)) {\n      return this.multiply(scale);\n    }\n    for (let i = 0; i < this.ELEMENTS; ++i) {\n      this[i] *= scale;\n    }\n    return this.check();\n  }\n\n  scaleAndAdd(vector, scale) {\n    for (let i = 0; i < this.ELEMENTS; ++i) {\n      this[i] = this[i] * scale + vector[i];\n    }\n    return this.check();\n  }\n\n  // THREE.js compatibility\n  lengthSq() {\n    return this.lengthSquared();\n  }\n\n  distanceTo(vector) {\n    return this.distance(vector);\n  }\n\n  distanceToSquared(vector) {\n    return this.distanceSquared(vector);\n  }\n\n  getComponent(i) {\n    assert(i >= 0 && i < this.ELEMENTS, 'index is out of range');\n    return checkNumber(this[i]);\n  }\n\n  setComponent(i, value) {\n    assert(i >= 0 && i < this.ELEMENTS, 'index is out of range');\n    this[i] = value;\n    return this.check();\n  }\n\n  addVectors(a, b) {\n    return this.copy(a).add(b);\n  }\n\n  subVectors(a, b) {\n    return this.copy(a).subtract(b);\n  }\n\n  multiplyVectors(a, b) {\n    return this.copy(a).multiply(b);\n  }\n\n  addScaledVector(a, b) {\n    return this.add(new this.constructor(a).multiplyScalar(b));\n  }\n}\n"],"file":"vector.js"}