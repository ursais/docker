{"version":3,"sources":["../../src/spherical-coordinates.js"],"names":["formatValue","equals","config","degrees","radians","clamp","Vector3","vec3","EPSILON","EARTH_RADIUS_METERS","SphericalCoordinates","constructor","phi","theta","radius","bearing","pitch","altitude","radiusScale","arguments","length","Number","isFinite","check","toString","formatString","printTypes","printDegrees","f","other","exactEquals","v","Math","PI","longitude","latitude","lng","lat","z","set","clone","copy","fromLngLatZ","fromVector3","atan2","acos","toVector3","rotateX","rotateZ","makeSafe","max","min","Error"],"mappings":"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","sourcesContent":["// Copyright (c) 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\n// Adaptation of THREE.js Spherical class, under MIT license\nimport {formatValue, equals, config} from './lib/common';\nimport {degrees, radians, clamp} from './lib/common';\nimport Vector3 from './vector3';\n\nimport * as vec3 from 'gl-matrix/vec3';\n\n// TODO - import epsilon\nconst EPSILON = 0.000001;\n\nconst EARTH_RADIUS_METERS = 6.371e6;\n\n// Todo [rho, theta, phi] ?\nexport default class SphericalCoordinates {\n  /**\n   * Ref: https://en.wikipedia.org/wiki/Spherical_coordinate_system\n   * The poles (phi) are at the positive and negative y axis.\n   * The equator starts at positive z.\n   * @class\n   * @param {Number} phi=0 - rotation around X (latitude)\n   * @param {Number} theta=0 - rotation around Y (longitude)\n   * @param {Number} radius=1 - Distance from center\n   */\n  /* eslint-disable complexity */\n  constructor({\n    phi,\n    theta,\n    radius,\n    bearing,\n    pitch,\n    altitude,\n    radiusScale = EARTH_RADIUS_METERS\n  } = {}) {\n    if (arguments.length === 0) {\n      this.phi = 0;\n      this.theta = 0;\n      this.radius = 1;\n    } else if (Number.isFinite(phi) || Number.isFinite(theta)) {\n      this.phi = phi || 0; // up / down towards top and bottom pole\n      this.theta = theta || 0; // around the equator of the sphere\n    } else if (Number.isFinite(bearing) || Number.isFinite(pitch)) {\n      this.bearing = bearing || 0; // up / down towards top and bottom pole\n      this.pitch = pitch || 0; // around the equator of the sphere\n    }\n    this.radius = radius || 1; // radial distance from center\n    this.radiusScale = radiusScale || 1; // Used by lngLatZ\n    this.check();\n  }\n  /* eslint-enable complexity */\n\n  toString() {\n    return this.formatString(config);\n  }\n\n  formatString({printTypes, printDegrees}) {\n    const f = formatValue;\n    return `${printTypes ? 'Spherical' : ''}\\\n[rho:${f(this.radius)},theta:${f(this.theta)},phi:${f(this.phi)}]`;\n  }\n\n  equals(other) {\n    return (\n      equals(this.radius, other.radius) &&\n      equals(this.theta, other.theta) &&\n      equals(this.phi, other.phi)\n    );\n  }\n\n  exactEquals(other) {\n    return this.radius === other.radius && this.theta === other.theta && this.phi === other.phi;\n  }\n\n  /* eslint-disable brace-style */\n  // Cartographic (bearing 0 north, pitch 0 look from above)\n  get bearing() {\n    return 180 - degrees(this.phi);\n  }\n  set bearing(v) {\n    this.phi = Math.PI - radians(v);\n  }\n  get pitch() {\n    return degrees(this.theta);\n  }\n  set pitch(v) {\n    this.theta = radians(v);\n  }\n  // get pitch() { return 90 - degrees(this.phi); }\n  // set pitch(v) { this.phi = radians(v) + Math.PI / 2; }\n  // get altitude() { return this.radius - 1; } // relative altitude\n\n  // lnglatZ coordinates\n  get longitude() {\n    return degrees(this.phi);\n  }\n  get latitude() {\n    return degrees(this.theta);\n  }\n  get lng() {\n    return degrees(this.phi);\n  }\n  get lat() {\n    return degrees(this.theta);\n  }\n  get z() {\n    return (this.radius - 1) * this.radiusScale;\n  }\n  /* eslint-enable brace-style */\n\n  set(radius, phi, theta) {\n    this.radius = radius;\n    this.phi = phi;\n    this.theta = theta;\n    return this.check();\n  }\n\n  clone() {\n    return new this.constructor().copy(this);\n  }\n\n  copy(other) {\n    this.radius = other.radius;\n    this.phi = other.phi;\n    this.theta = other.theta;\n    return this.check();\n  }\n\n  fromLngLatZ([lng, lat, z]) {\n    this.radius = 1 + z / this.radiusScale;\n    this.phi = radians(lat);\n    this.theta = radians(lng);\n  }\n\n  fromVector3(v) {\n    this.radius = vec3.length(v);\n    if (this.radius === 0) {\n      this.theta = 0;\n      this.phi = 0;\n    } else {\n      this.theta = Math.atan2(v[0], v[1]); // equator angle around y-up axis\n      this.phi = Math.acos(clamp(v[2] / this.radius, -1, 1)); // polar angle\n    }\n    return this.check();\n  }\n\n  toVector3() {\n    return new Vector3(0, 0, this.radius)\n      .rotateX({radians: this.theta})\n      .rotateZ({radians: this.phi});\n  }\n\n  // restrict phi to be betwee EPS and PI-EPS\n  makeSafe() {\n    this.phi = Math.max(EPSILON, Math.min(Math.PI - EPSILON, this.phi));\n  }\n\n  check() {\n    // this.makeSafe();\n    if (!Number.isFinite(this.phi) || !Number.isFinite(this.theta) || !(this.radius > 0)) {\n      throw new Error('SphericalCoordinates: some fields set to invalid numbers');\n    }\n    return this;\n  }\n}\n"],"file":"spherical-coordinates.js"}