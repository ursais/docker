{"version":3,"sources":["../../src/quaternion.js"],"names":["MathArray","checkNumber","quat","IDENTITY_QUATERNION","validateQuaternion","q","length","Number","isFinite","Quaternion","constructor","x","y","z","w","Array","isArray","arguments","copy","set","fromMatrix3","m","fromMat3","check","fromValues","identity","ELEMENTS","value","squaredLength","a","dot","b","undefined","Error","rotationTo","vectorA","vectorB","add","calculateW","conjugate","invert","lerp","t","multiply","normalize","rotateX","rad","rotateY","rotateZ","scale","i","j","k","l","setAxisAngle","axis","slerp","start","target","ratio"],"mappings":"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","sourcesContent":["// Copyright (c) 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nimport MathArray from './lib/math-array';\nimport {checkNumber} from './lib/common';\n\nimport * as quat from 'gl-matrix/quat';\n\nconst IDENTITY_QUATERNION = [0, 0, 0, 1];\n\nexport function validateQuaternion(q) {\n  return (\n    q.length === 4 &&\n    Number.isFinite(q[0]) &&\n    Number.isFinite(q[1]) &&\n    Number.isFinite(q[2]) &&\n    Number.isFinite(q[3])\n  );\n}\n\nexport default class Quaternion extends MathArray {\n  // Creates a new identity quaternion\n  // w^2 + x^2 + y^2 + z^2 = 1\n  constructor(x = 0, y = 0, z = 0, w = 1) {\n    super(4);\n    if (Array.isArray(x) && arguments.length === 1) {\n      this.copy(x);\n    } else {\n      this.set(x, y, z, w);\n    }\n  }\n\n  // Creates a quaternion from the given 3x3 rotation matrix.\n  // NOTE: The resultant quaternion is not normalized, so you should\n  // be sure to renormalize the quaternion yourself where necessary.\n  fromMatrix3(m) {\n    quat.fromMat3(this, m);\n    return this.check();\n  }\n\n  // Creates a new quat initialized with the given values\n  fromValues(x, y, z, w) {\n    return this.set(x, y, z, w);\n  }\n\n  // Set a quat to the identity quaternion\n  identity() {\n    quat.identity(this);\n    return this.check();\n  }\n\n  // Getters/setters\n  /* eslint-disable no-multi-spaces, brace-style, no-return-assign */\n  get ELEMENTS() {\n    return 4;\n  }\n\n  get x() {\n    return this[0];\n  }\n\n  set x(value) {\n    return (this[0] = checkNumber(value));\n  }\n\n  get y() {\n    return this[1];\n  }\n\n  set y(value) {\n    return (this[1] = checkNumber(value));\n  }\n\n  get z() {\n    return this[2];\n  }\n\n  set z(value) {\n    return (this[2] = checkNumber(value));\n  }\n\n  get w() {\n    return this[3];\n  }\n\n  set w(value) {\n    return (this[3] = checkNumber(value));\n  }\n\n  /* eslint-enable no-multi-spaces, brace-style, no-return-assign */\n\n  // Calculates the length of a quat\n  length() {\n    return quat.length(this);\n  }\n\n  // Calculates the squared length of a quat\n  squaredLength(a) {\n    return quat.squaredLength(this);\n  }\n\n  // Calculates the dot product of two quat's\n  // @return {Number}\n  dot(a, b) {\n    if (b !== undefined) {\n      throw new Error('Quaternion.dot only takes one argument');\n    }\n    return quat.dot(this, a);\n  }\n\n  // Gets the rotation axis and angle for a given quaternion.\n  // If a quaternion is created with setAxisAngle, this method will\n  // return the same values as providied in the original parameter\n  // list OR functionally equivalent values.\n  // Example: The quaternion formed by axis [0, 0, 1] and angle -90\n  // is the same as the quaternion formed by [0, 0, 1] and 270.\n  // This method favors the latter.\n  // @return {{[x,y,z], Number}}\n  // getAxisAngle() {\n  //   const axis = [];\n  //   const angle = quat.getAxisAngle(axis, this);\n  //   return {axis, angle};\n  // }\n\n  // MODIFIERS\n\n  // Sets a quaternion to represent the shortest rotation from one vector\n  // to another. Both vectors are assumed to be unit length.\n  rotationTo(vectorA, vectorB) {\n    quat.rotationTo(this, vectorA, vectorB);\n    return this.check();\n  }\n\n  // Sets the specified quaternion with values corresponding to the given axes.\n  // Each axis is a vec3 and is expected to be unit length and perpendicular\n  // to all other specified axes.\n  // setAxes() {\n  //   Number\n  // }\n\n  // Performs a spherical linear interpolation with two control points\n  // sqlerp() {\n  //   Number;\n  // }\n\n  // Adds two quat's\n  add(a, b) {\n    if (b !== undefined) {\n      throw new Error('Quaternion.add only takes one argument');\n    }\n    quat.add(this, a);\n    return this.check();\n  }\n\n  // Calculates the W component of a quat from the X, Y, and Z components.\n  // Any existing W component will be ignored.\n  calculateW() {\n    quat.calculateW(this, this);\n    return this.check();\n  }\n\n  // Calculates the conjugate of a quat If the quaternion is normalized,\n  // this function is faster than quat.inverse and produces the same result.\n  conjugate() {\n    quat.conjugate(this, this);\n    return this.check();\n  }\n\n  // Calculates the inverse of a quat\n  invert() {\n    quat.invert(this, this);\n    return this.check();\n  }\n\n  // Performs a linear interpolation between two quat's\n  lerp(a, b, t) {\n    quat.lerp(this, a, b, t);\n    return this.check();\n  }\n\n  // Multiplies two quat's\n  multiply(a, b) {\n    if (b !== undefined) {\n      throw new Error('Quaternion.multiply only takes one argument');\n    }\n    quat.multiply(this, this, a);\n    return this.check();\n  }\n\n  // Normalize a quat\n  normalize() {\n    quat.normalize(this, this);\n    return this.check();\n  }\n\n  // Rotates a quaternion by the given angle about the X axis\n  rotateX(rad) {\n    quat.rotateX(this, this, rad);\n    return this.check();\n  }\n\n  // Rotates a quaternion by the given angle about the Y axis\n  rotateY(rad) {\n    quat.rotateY(this, this, rad);\n    return this.check();\n  }\n\n  // Rotates a quaternion by the given angle about the Z axis\n  rotateZ(rad) {\n    quat.rotateZ(this, this, rad);\n    return this.check();\n  }\n\n  // Scales a quat by a scalar number\n  scale(b) {\n    quat.scale(this, this, b);\n    return this.check();\n  }\n\n  // Set the components of a quat to the given values\n  set(i, j, k, l) {\n    quat.set(this, i, j, k, l);\n    return this.check();\n  }\n\n  // Sets a quat from the given angle and rotation axis, then returns it.\n  setAxisAngle(axis, rad) {\n    quat.setAxisAngle(this, axis, rad);\n    return this.check();\n  }\n\n  // Performs a spherical linear interpolation between two quat\n  slerp({start = IDENTITY_QUATERNION, target, ratio}) {\n    quat.slerp(this, start, target, ratio);\n    return this.check();\n  }\n}\n"],"file":"quaternion.js"}