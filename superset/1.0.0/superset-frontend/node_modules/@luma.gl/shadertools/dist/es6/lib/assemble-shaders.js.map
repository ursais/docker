{"version":3,"sources":["../../../src/lib/assemble-shaders.js"],"names":["VERTEX_SHADER","FRAGMENT_SHADER","resolveModules","getShaderModule","getPlatformShaderDefines","getVersionDefines","injectShader","DECLARATION_INJECT_MARKER","assert","INJECT_SHADER_DECLARATIONS","SHADER_TYPE","HOOK_FUNCTIONS","MODULE_INJECTIONS","FRAGMENT_SHADER_PROLOGUE","createShaderHook","hook","opts","trim","stage","signature","split","name","replace","Object","assign","createModuleInjection","moduleName","injection","order","shaderStage","slice","moduleInjections","resetGlobalShaderHooks","assembleShaders","gl","vs","fs","modules","assembleShader","source","type","getUniforms","assembleGetUniforms","assembleModuleMap","id","defines","hookFunctions","inject","prologue","log","isVertex","sourceLines","glslVersion","versionLine","coreSource","indexOf","join","allDefines","forEach","module","getDefines","assembledSource","getShaderName","getShaderType","getApplicationDefines","injectStandardStubs","hookInjections","mainInjections","key","match","checkDeprecations","moduleSource","getModuleSource","injections","push","getHookFunctions","uniforms","moduleUniforms","result","shaderModule","toUpperCase","injectShaderName","count","sourceText","define","value","Number","isFinite","hookName","hookFunction","header","sort","a","b","footer"],"mappings":"AAAA,SAAQA,aAAR,EAAuBC,eAAvB,QAA6C,aAA7C;AACA,SAAQC,cAAR,EAAwBC,eAAxB,QAA8C,mBAA9C;AACA,SAAQC,wBAAR,EAAkCC,iBAAlC,QAA0D,oBAA1D;AACA,OAAOC,YAAP,IAAsBC,yBAAtB,QAAsD,iBAAtD;AACA,SAAQC,MAAR,QAAqB,UAArB;AAGA,MAAMC,0BAA0B,iBAAUF,yBAAV,SAAhC;AAEA,MAAMG,WAAW,GAAG;AAClB,GAACV,aAAD,GAAiB,QADC;AAElB,GAACC,eAAD,GAAmB;AAFD,CAApB;AAKA,MAAMU,cAAc,GAAG;AACrB,GAACX,aAAD,GAAiB,EADI;AAErB,GAACC,eAAD,GAAmB;AAFE,CAAvB;AAKA,MAAMW,iBAAiB,GAAG;AACxB,GAACZ,aAAD,GAAiB,EADO;AAExB,GAACC,eAAD,GAAmB;AAFK,CAA1B;AAOA,MAAMY,wBAAwB,+BAA9B;AAKA,OAAO,SAASC,gBAAT,CAA0BC,IAA1B,EAAgCC,IAAI,GAAG,EAAvC,EAA2C;AAChDD,EAAAA,IAAI,GAAGA,IAAI,CAACE,IAAL,EAAP;AACA,QAAM,CAACC,KAAD,EAAQC,SAAR,IAAqBJ,IAAI,CAACK,KAAL,CAAW,GAAX,CAA3B;AACA,QAAMC,IAAI,GAAGN,IAAI,CAACO,OAAL,CAAa,MAAb,EAAqB,EAArB,CAAb;AACAX,EAAAA,cAAc,CAACO,KAAD,CAAd,CAAsBG,IAAtB,IAA8BE,MAAM,CAACC,MAAP,CAAcR,IAAd,EAAoB;AAACG,IAAAA;AAAD,GAApB,CAA9B;AACD;AAED,OAAO,SAASM,qBAAT,CAA+BC,UAA/B,EAA2CV,IAA3C,EAAiD;AACtD,QAAM;AAACD,IAAAA,IAAD;AAAOY,IAAAA,SAAP;AAAkBC,IAAAA,KAAK,GAAG;AAA1B,MAA+BZ,IAArC;AACA,QAAMa,WAAW,GAAGd,IAAI,CAACe,KAAL,CAAW,CAAX,EAAc,CAAd,CAApB;AAEA,QAAMC,gBAAgB,GAAGnB,iBAAiB,CAACiB,WAAD,CAA1C;AACAE,EAAAA,gBAAgB,CAACL,UAAD,CAAhB,GAA+BK,gBAAgB,CAACL,UAAD,CAAhB,IAAgC,EAA/D;AAEAlB,EAAAA,MAAM,CAAC,CAACuB,gBAAgB,CAACL,UAAD,CAAhB,CAA6BX,IAA7B,CAAF,EAAsC,kCAAtC,CAAN;AAEAgB,EAAAA,gBAAgB,CAACL,UAAD,CAAhB,CAA6BX,IAA7B,IAAqC;AACnCY,IAAAA,SADmC;AAEnCC,IAAAA;AAFmC,GAArC;AAID;AAGD,OAAO,SAASI,sBAAT,GAAkC;AACvCrB,EAAAA,cAAc,CAACX,aAAD,CAAd,GAAgC,EAAhC;AACAW,EAAAA,cAAc,CAACV,eAAD,CAAd,GAAkC,EAAlC;AAEAW,EAAAA,iBAAiB,CAACZ,aAAD,CAAjB,GAAmC,EAAnC;AACAY,EAAAA,iBAAiB,CAACX,eAAD,CAAjB,GAAqC,EAArC;AACD;AAGD,OAAO,SAASgC,eAAT,CAAyBC,EAAzB,EAA6BlB,IAA7B,EAAmC;AACxC,QAAM;AAACmB,IAAAA,EAAD;AAAKC,IAAAA;AAAL,MAAWpB,IAAjB;AACA,QAAMqB,OAAO,GAAGnC,cAAc,CAACc,IAAI,CAACqB,OAAL,IAAgB,EAAjB,CAA9B;AACA,SAAO;AACLH,IAAAA,EADK;AAELC,IAAAA,EAAE,EAAEG,cAAc,CAACJ,EAAD,EAAKX,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBR,IAAlB,EAAwB;AAACuB,MAAAA,MAAM,EAAEJ,EAAT;AAAaK,MAAAA,IAAI,EAAExC,aAAnB;AAAkCqC,MAAAA;AAAlC,KAAxB,CAAL,CAFb;AAGLD,IAAAA,EAAE,EAAEE,cAAc,CAACJ,EAAD,EAAKX,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBR,IAAlB,EAAwB;AAACuB,MAAAA,MAAM,EAAEH,EAAT;AAAaI,MAAAA,IAAI,EAAEvC,eAAnB;AAAoCoC,MAAAA;AAApC,KAAxB,CAAL,CAHb;AAILI,IAAAA,WAAW,EAAEC,mBAAmB,CAACL,OAAD,CAJ3B;AAKLA,IAAAA,OAAO,EAAEM,iBAAiB,CAACN,OAAD;AALrB,GAAP;AAOD;;AAID,SAASC,cAAT,CACEJ,EADF,EAEE;AACEU,EAAAA,EADF;AAEEL,EAAAA,MAFF;AAGEC,EAAAA,IAHF;AAIEH,EAAAA,OAJF;AAKEQ,EAAAA,OAAO,GAAG,EALZ;AAMEC,EAAAA,aAAa,GAAGnC,cANlB;AAOEoB,EAAAA,gBAAgB,GAAGnB,iBAPrB;AAQEmC,EAAAA,MAAM,GAAG,EARX;AASEC,EAAAA,QAAQ,GAAG,IATb;AAUEC,EAAAA;AAVF,CAFF,EAcE;AACAzC,EAAAA,MAAM,CAAC,OAAO+B,MAAP,KAAkB,QAAnB,EAA6B,gCAA7B,CAAN;;AAGA,MAAIO,aAAa,KAAKnC,cAAtB,EAAsC;AACpCmC,IAAAA,aAAa,GAAG;AACd,OAAC9C,aAAD,GAAiBuB,MAAM,CAACC,MAAP,CACf,EADe,EAEfb,cAAc,CAACX,aAAD,CAFC,EAGf8C,aAAa,CAAC9C,aAAD,CAHE,CADH;AAMd,OAACC,eAAD,GAAmBsB,MAAM,CAACC,MAAP,CACjB,EADiB,EAEjBb,cAAc,CAACV,eAAD,CAFG,EAGjB6C,aAAa,CAAC7C,eAAD,CAHI;AANL,KAAhB;AAYD;;AAED,MAAI8B,gBAAgB,KAAKnB,iBAAzB,EAA4C;AAC1CmB,IAAAA,gBAAgB,GAAG;AACjB,OAAC/B,aAAD,GAAiBuB,MAAM,CAACC,MAAP,CACf,EADe,EAEfZ,iBAAiB,CAACZ,aAAD,CAFF,EAGf+B,gBAAgB,CAAC/B,aAAD,CAHD,CADA;AAMjB,OAACC,eAAD,GAAmBsB,MAAM,CAACC,MAAP,CACjB,EADiB,EAEjBZ,iBAAiB,CAACX,eAAD,CAFA,EAGjB8B,gBAAgB,CAAC9B,eAAD,CAHC;AANF,KAAnB;AAYD;;AAED,QAAMiD,QAAQ,GAAGV,IAAI,KAAKxC,aAA1B;AAEA,QAAMmD,WAAW,GAAGZ,MAAM,CAACnB,KAAP,CAAa,IAAb,CAApB;AACA,MAAIgC,WAAW,GAAG,GAAlB;AACA,MAAIC,WAAW,GAAG,EAAlB;AACA,MAAIC,UAAU,GAAGf,MAAjB;;AAGA,MAAIY,WAAW,CAAC,CAAD,CAAX,CAAeI,OAAf,CAAuB,WAAvB,MAAwC,CAA5C,EAA+C;AAC7CH,IAAAA,WAAW,GAAG,GAAd;AACAC,IAAAA,WAAW,GAAGF,WAAW,CAAC,CAAD,CAAzB;AACAG,IAAAA,UAAU,GAAGH,WAAW,CAACrB,KAAZ,CAAkB,CAAlB,EAAqB0B,IAArB,CAA0B,IAA1B,CAAb;AACD,GAJD,MAIO;AACLH,IAAAA,WAAW,sBAAeD,WAAf,CAAX;AACD;;AAGD,QAAMK,UAAU,GAAG,EAAnB;AACApB,EAAAA,OAAO,CAACqB,OAAR,CAAgBC,MAAM,IAAI;AACxBpC,IAAAA,MAAM,CAACC,MAAP,CAAciC,UAAd,EAA0BE,MAAM,CAACC,UAAP,EAA1B;AACD,GAFD;AAGArC,EAAAA,MAAM,CAACC,MAAP,CAAciC,UAAd,EAA0BZ,OAA1B;AAKA,MAAIgB,eAAe,GAAGb,QAAQ,aAE9BK,WAF8B,eAG9BS,aAAa,CAAC;AAAClB,IAAAA,EAAD;AAAKL,IAAAA,MAAL;AAAaC,IAAAA;AAAb,GAAD,CAHiB,eAI9BuB,aAAa,CAAC;AAACvB,IAAAA;AAAD,GAAD,CAJiB,eAK9BpC,wBAAwB,CAAC8B,EAAD,CALM,eAM9B7B,iBAAiB,CAAC6B,EAAD,EAAKkB,WAAL,EAAkB,CAACF,QAAnB,CANa,eAO9Bc,qBAAqB,CAACP,UAAD,CAPS,eAQ9BP,QAAQ,GAAG,EAAH,GAAQrC,wBARc,oBAUvBwC,WAVuB,OAA9B;AAcA,MAAIY,mBAAmB,GAAG,KAA1B;AACA,QAAMC,cAAc,GAAG,EAAvB;AACA,QAAMC,cAAc,GAAG,EAAvB;;AAEA,OAAK,MAAMC,GAAX,IAAkBrB,MAAlB,EAA0B;AACxB,UAAMpB,SAAS,GACb,OAAOoB,MAAM,CAACqB,GAAD,CAAb,KAAuB,QAAvB,GAAkC;AAACzC,MAAAA,SAAS,EAAEoB,MAAM,CAACqB,GAAD,CAAlB;AAAyBxC,MAAAA,KAAK,EAAE;AAAhC,KAAlC,GAAuEmB,MAAM,CAACqB,GAAD,CAD/E;;AAEA,QAAIA,GAAG,CAACC,KAAJ,CAAU,UAAV,CAAJ,EAA2B;AACzB,UAAID,GAAG,CAAC,CAAD,CAAH,KAAW,GAAf,EAAoB;AAClBD,QAAAA,cAAc,CAACC,GAAD,CAAd,GAAsB,CAACzC,SAAD,CAAtB;AACD,OAFD,MAEO;AACLuC,QAAAA,cAAc,CAACE,GAAD,CAAd,GAAsB,CAACzC,SAAD,CAAtB;AACD;AACF,KAND,MAMO;AAELwC,MAAAA,cAAc,CAACC,GAAD,CAAd,GAAsB,CAACzC,SAAD,CAAtB;AACD;AACF;;AAED,OAAK,MAAMgC,MAAX,IAAqBtB,OAArB,EAA8B;AAC5B,YAAQsB,MAAM,CAACtC,IAAf;AACE,WAAK,QAAL;AACE4C,QAAAA,mBAAmB,GAAG,IAAtB;AACA;;AAEF;AACE,YAAIhB,GAAJ,EAAS;AACPU,UAAAA,MAAM,CAACW,iBAAP,CAAyBhB,UAAzB,EAAqCL,GAArC;AACD;;AACD,cAAMsB,YAAY,GAAGZ,MAAM,CAACa,eAAP,CAAuBhC,IAAvB,EAA6BY,WAA7B,CAArB;AAEAS,QAAAA,eAAe,IAAIU,YAAnB;;AAEA,YAAIxC,gBAAgB,CAACS,IAAD,CAAhB,CAAuBmB,MAAM,CAACtC,IAA9B,CAAJ,EAAyC;AACvC,gBAAMoD,UAAU,GAAG1C,gBAAgB,CAACS,IAAD,CAAhB,CAAuBmB,MAAM,CAACtC,IAA9B,CAAnB;;AACA,eAAK,MAAM+C,GAAX,IAAkBK,UAAlB,EAA8B;AAC5B,gBAAIL,GAAG,CAACC,KAAJ,CAAU,WAAV,CAAJ,EAA4B;AAC1BF,cAAAA,cAAc,CAACC,GAAD,CAAd,GAAsBD,cAAc,CAACC,GAAD,CAAd,IAAuB,EAA7C;AACAD,cAAAA,cAAc,CAACC,GAAD,CAAd,CAAoBM,IAApB,CAAyBD,UAAU,CAACL,GAAD,CAAnC;AACD,aAHD,MAGO;AACLF,cAAAA,cAAc,CAACE,GAAD,CAAd,GAAsBF,cAAc,CAACE,GAAD,CAAd,IAAuB,EAA7C;AACAF,cAAAA,cAAc,CAACE,GAAD,CAAd,CAAoBM,IAApB,CAAyBD,UAAU,CAACL,GAAD,CAAnC;AACD;AACF;AACF;;AAxBL;AA0BD;;AAGDP,EAAAA,eAAe,IAAIpD,0BAAnB;AAEAoD,EAAAA,eAAe,IAAIc,gBAAgB,CAAC7B,aAAa,CAACN,IAAD,CAAd,EAAsB0B,cAAtB,CAAnC;AAGAL,EAAAA,eAAe,IAAIP,UAAnB;AAGAO,EAAAA,eAAe,GAAGvD,YAAY,CAACuD,eAAD,EAAkBrB,IAAlB,EAAwB2B,cAAxB,EAAwCF,mBAAxC,CAA9B;AAEA,SAAOJ,eAAP;AACD;;AAMD,SAASnB,mBAAT,CAA6BL,OAA7B,EAAsC;AACpC,SAAO,SAASI,WAAT,CAAqBzB,IAArB,EAA2B;AAChC,UAAM4D,QAAQ,GAAG,EAAjB;;AACA,SAAK,MAAMjB,MAAX,IAAqBtB,OAArB,EAA8B;AAG5B,YAAMwC,cAAc,GAAGlB,MAAM,CAAClB,WAAP,CAAmBzB,IAAnB,EAAyB4D,QAAzB,CAAvB;AACArD,MAAAA,MAAM,CAACC,MAAP,CAAcoD,QAAd,EAAwBC,cAAxB;AACD;;AACD,WAAOD,QAAP;AACD,GATD;AAUD;;AAKD,SAASjC,iBAAT,CAA2BN,OAA3B,EAAoC;AAClC,QAAMyC,MAAM,GAAG,EAAf;;AACA,OAAK,MAAMpD,UAAX,IAAyBW,OAAzB,EAAkC;AAChC,UAAM0C,YAAY,GAAG5E,eAAe,CAACuB,UAAD,CAApC;AACAoD,IAAAA,MAAM,CAACpD,UAAD,CAAN,GAAqBqD,YAArB;AACD;;AACD,SAAOD,MAAP;AACD;;AAED,SAASf,aAAT,CAAuB;AAACvB,EAAAA;AAAD,CAAvB,EAA+B;AAC7B,yCACoB9B,WAAW,CAAC8B,IAAD,CAAX,CAAkBwC,WAAlB,EADpB;AAGD;;AAKD,SAASlB,aAAT,CAAuB;AAAClB,EAAAA,EAAD;AAAKL,EAAAA,MAAL;AAAaC,EAAAA;AAAb,CAAvB,EAA2C;AACzC,QAAMyC,gBAAgB,GAAGrC,EAAE,IAAI,OAAOA,EAAP,KAAc,QAApB,IAAgCL,MAAM,CAACgB,OAAP,CAAe,aAAf,MAAkC,CAAC,CAA5F;AACA,SAAO0B,gBAAgB,mCAEHrC,EAFG,cAEGlC,WAAW,CAAC8B,IAAD,CAFd,YAKnB,EALJ;AAMD;;AAGD,SAASwB,qBAAT,CAA+BnB,OAAO,GAAG,EAAzC,EAA6C;AAC3C,MAAIqC,KAAK,GAAG,CAAZ;AACA,MAAIC,UAAU,GAAG,EAAjB;;AACA,OAAK,MAAMC,MAAX,IAAqBvC,OAArB,EAA8B;AAC5B,QAAIqC,KAAK,KAAK,CAAd,EAAiB;AACfC,MAAAA,UAAU,IAAI,4BAAd;AACD;;AACDD,IAAAA,KAAK;AAEL,UAAMG,KAAK,GAAGxC,OAAO,CAACuC,MAAD,CAArB;;AACA,QAAIC,KAAK,IAAIC,MAAM,CAACC,QAAP,CAAgBF,KAAhB,CAAb,EAAqC;AACnCF,MAAAA,UAAU,sBAAeC,MAAM,CAACJ,WAAP,EAAf,cAAuCnC,OAAO,CAACuC,MAAD,CAA9C,OAAV;AACD;AACF;;AACD,MAAIF,KAAK,KAAK,CAAd,EAAiB;AACfC,IAAAA,UAAU,IAAI,IAAd;AACD;;AACD,SAAOA,UAAP;AACD;;AAED,SAASR,gBAAT,CAA0B7B,aAA1B,EAAyCoB,cAAzC,EAAyD;AACvD,MAAIY,MAAM,GAAG,EAAb;;AACA,OAAK,MAAMU,QAAX,IAAuB1C,aAAvB,EAAsC;AACpC,UAAM2C,YAAY,GAAG3C,aAAa,CAAC0C,QAAD,CAAlC;AACAV,IAAAA,MAAM,mBAAYW,YAAY,CAACtE,SAAzB,SAAN;;AACA,QAAIsE,YAAY,CAACC,MAAjB,EAAyB;AACvBZ,MAAAA,MAAM,gBAASW,YAAY,CAACC,MAAtB,CAAN;AACD;;AACD,QAAIxB,cAAc,CAACsB,QAAD,CAAlB,EAA8B;AAC5B,YAAMf,UAAU,GAAGP,cAAc,CAACsB,QAAD,CAAjC;AACAf,MAAAA,UAAU,CAACkB,IAAX,CAAgB,CAACC,CAAD,EAAIC,CAAJ,KAAUD,CAAC,CAAChE,KAAF,GAAUiE,CAAC,CAACjE,KAAtC;;AACA,WAAK,MAAMD,SAAX,IAAwB8C,UAAxB,EAAoC;AAClCK,QAAAA,MAAM,gBAASnD,SAAS,CAACA,SAAnB,OAAN;AACD;AACF;;AACD,QAAI8D,YAAY,CAACK,MAAjB,EAAyB;AACvBhB,MAAAA,MAAM,gBAASW,YAAY,CAACK,MAAtB,CAAN;AACD;;AACDhB,IAAAA,MAAM,IAAI,KAAV;AACD;;AAED,SAAOA,MAAP;AACD","sourcesContent":["import {VERTEX_SHADER, FRAGMENT_SHADER} from './constants';\nimport {resolveModules, getShaderModule} from './resolve-modules';\nimport {getPlatformShaderDefines, getVersionDefines} from './platform-defines';\nimport injectShader, {DECLARATION_INJECT_MARKER} from './inject-shader';\nimport {assert} from '../utils';\n/* eslint-disable max-depth, complexity */\n\nconst INJECT_SHADER_DECLARATIONS = `\\n\\n${DECLARATION_INJECT_MARKER}\\n\\n`;\n\nconst SHADER_TYPE = {\n  [VERTEX_SHADER]: 'vertex',\n  [FRAGMENT_SHADER]: 'fragment'\n};\n\nconst HOOK_FUNCTIONS = {\n  [VERTEX_SHADER]: {},\n  [FRAGMENT_SHADER]: {}\n};\n\nconst MODULE_INJECTIONS = {\n  [VERTEX_SHADER]: {},\n  [FRAGMENT_SHADER]: {}\n};\n\n// Precision prologue to inject before functions are injected in shader\n// TODO - extract any existing prologue in the fragment source and move it up...\nconst FRAGMENT_SHADER_PROLOGUE = `\\\nprecision highp float;\n\n`;\n\nexport function createShaderHook(hook, opts = {}) {\n  hook = hook.trim();\n  const [stage, signature] = hook.split(':');\n  const name = hook.replace(/\\(.+/, '');\n  HOOK_FUNCTIONS[stage][name] = Object.assign(opts, {signature});\n}\n\nexport function createModuleInjection(moduleName, opts) {\n  const {hook, injection, order = 0} = opts;\n  const shaderStage = hook.slice(0, 2);\n\n  const moduleInjections = MODULE_INJECTIONS[shaderStage];\n  moduleInjections[moduleName] = moduleInjections[moduleName] || {};\n\n  assert(!moduleInjections[moduleName][hook], 'Module injection already created');\n\n  moduleInjections[moduleName][hook] = {\n    injection,\n    order\n  };\n}\n\n// Helpful for tests\nexport function resetGlobalShaderHooks() {\n  HOOK_FUNCTIONS[VERTEX_SHADER] = {};\n  HOOK_FUNCTIONS[FRAGMENT_SHADER] = {};\n\n  MODULE_INJECTIONS[VERTEX_SHADER] = {};\n  MODULE_INJECTIONS[FRAGMENT_SHADER] = {};\n}\n\n// Inject a list of modules\nexport function assembleShaders(gl, opts) {\n  const {vs, fs} = opts;\n  const modules = resolveModules(opts.modules || []);\n  return {\n    gl,\n    vs: assembleShader(gl, Object.assign({}, opts, {source: vs, type: VERTEX_SHADER, modules})),\n    fs: assembleShader(gl, Object.assign({}, opts, {source: fs, type: FRAGMENT_SHADER, modules})),\n    getUniforms: assembleGetUniforms(modules),\n    modules: assembleModuleMap(modules)\n  };\n}\n\n// Pulls together complete source code for either a vertex or a fragment shader\n// adding prologues, requested module chunks, and any final injections.\nfunction assembleShader(\n  gl,\n  {\n    id,\n    source,\n    type,\n    modules,\n    defines = {},\n    hookFunctions = HOOK_FUNCTIONS,\n    moduleInjections = MODULE_INJECTIONS,\n    inject = {},\n    prologue = true,\n    log\n  }\n) {\n  assert(typeof source === 'string', 'shader source must be a string');\n\n  // TODO(Tarek): Supporting global hooks, remove when they're removed.\n  if (hookFunctions !== HOOK_FUNCTIONS) {\n    hookFunctions = {\n      [VERTEX_SHADER]: Object.assign(\n        {},\n        HOOK_FUNCTIONS[VERTEX_SHADER],\n        hookFunctions[VERTEX_SHADER]\n      ),\n      [FRAGMENT_SHADER]: Object.assign(\n        {},\n        HOOK_FUNCTIONS[FRAGMENT_SHADER],\n        hookFunctions[FRAGMENT_SHADER]\n      )\n    };\n  }\n\n  if (moduleInjections !== MODULE_INJECTIONS) {\n    moduleInjections = {\n      [VERTEX_SHADER]: Object.assign(\n        {},\n        MODULE_INJECTIONS[VERTEX_SHADER],\n        moduleInjections[VERTEX_SHADER]\n      ),\n      [FRAGMENT_SHADER]: Object.assign(\n        {},\n        MODULE_INJECTIONS[FRAGMENT_SHADER],\n        moduleInjections[FRAGMENT_SHADER]\n      )\n    };\n  }\n\n  const isVertex = type === VERTEX_SHADER;\n\n  const sourceLines = source.split('\\n');\n  let glslVersion = 100;\n  let versionLine = '';\n  let coreSource = source;\n  // Extract any version directive string from source.\n  // TODO : keep all pre-processor statements at the begining of the shader.\n  if (sourceLines[0].indexOf('#version ') === 0) {\n    glslVersion = 300; // TODO - regexp that matches atual version number\n    versionLine = sourceLines[0];\n    coreSource = sourceLines.slice(1).join('\\n');\n  } else {\n    versionLine = `#version ${glslVersion}`;\n  }\n\n  // Combine Module and Application Defines\n  const allDefines = {};\n  modules.forEach(module => {\n    Object.assign(allDefines, module.getDefines());\n  });\n  Object.assign(allDefines, defines);\n\n  // Add platform defines (use these to work around platform-specific bugs and limitations)\n  // Add common defines (GLSL version compatibility, feature detection)\n  // Add precision declaration for fragment shaders\n  let assembledSource = prologue\n    ? `\\\n${versionLine}\n${getShaderName({id, source, type})}\n${getShaderType({type})}\n${getPlatformShaderDefines(gl)}\n${getVersionDefines(gl, glslVersion, !isVertex)}\n${getApplicationDefines(allDefines)}\n${isVertex ? '' : FRAGMENT_SHADER_PROLOGUE}\n`\n    : `${versionLine}\n`;\n\n  // Add source of dependent modules in resolved order\n  let injectStandardStubs = false;\n  const hookInjections = {};\n  const mainInjections = {};\n\n  for (const key in inject) {\n    const injection =\n      typeof inject[key] === 'string' ? {injection: inject[key], order: 0} : inject[key];\n    if (key.match(/^(v|f)s:/)) {\n      if (key[3] === '#') {\n        mainInjections[key] = [injection];\n      } else {\n        hookInjections[key] = [injection];\n      }\n    } else {\n      // Regex injection\n      mainInjections[key] = [injection];\n    }\n  }\n\n  for (const module of modules) {\n    switch (module.name) {\n      case 'inject':\n        injectStandardStubs = true;\n        break;\n\n      default:\n        if (log) {\n          module.checkDeprecations(coreSource, log);\n        }\n        const moduleSource = module.getModuleSource(type, glslVersion);\n        // Add the module source, and a #define that declares it presence\n        assembledSource += moduleSource;\n\n        if (moduleInjections[type][module.name]) {\n          const injections = moduleInjections[type][module.name];\n          for (const key in injections) {\n            if (key.match(/^(v|f)s:#/)) {\n              mainInjections[key] = mainInjections[key] || [];\n              mainInjections[key].push(injections[key]);\n            } else {\n              hookInjections[key] = hookInjections[key] || [];\n              hookInjections[key].push(injections[key]);\n            }\n          }\n        }\n    }\n  }\n\n  // For injectShader\n  assembledSource += INJECT_SHADER_DECLARATIONS;\n\n  assembledSource += getHookFunctions(hookFunctions[type], hookInjections);\n\n  // Add the version directive and actual source of this shader\n  assembledSource += coreSource;\n\n  // Apply any requested shader injections\n  assembledSource = injectShader(assembledSource, type, mainInjections, injectStandardStubs);\n\n  return assembledSource;\n}\n\n// Returns a combined `getUniforms` covering the options for all the modules,\n// the created function will pass on options to the inidividual `getUniforms`\n// function of each shader module and combine the results into one object that\n// can be passed to setUniforms.\nfunction assembleGetUniforms(modules) {\n  return function getUniforms(opts) {\n    const uniforms = {};\n    for (const module of modules) {\n      // `modules` is already sorted by dependency level. This guarantees that\n      // modules have access to the uniforms that are generated by their dependencies.\n      const moduleUniforms = module.getUniforms(opts, uniforms);\n      Object.assign(uniforms, moduleUniforms);\n    }\n    return uniforms;\n  };\n}\n\n// Returns a map with module names as keys, resolving to their module definitions\n// The presence of a key indicates that the module is available in this program,\n// whether directly included, or through a dependency of some other module\nfunction assembleModuleMap(modules) {\n  const result = {};\n  for (const moduleName of modules) {\n    const shaderModule = getShaderModule(moduleName);\n    result[moduleName] = shaderModule;\n  }\n  return result;\n}\n\nfunction getShaderType({type}) {\n  return `\n#define SHADER_TYPE_${SHADER_TYPE[type].toUpperCase()}\n`;\n}\n\n// Generate \"glslify-compatible\" SHADER_NAME defines\n// These are understood by the GLSL error parsing function\n// If id is provided and no SHADER_NAME constant is present in source, create one\nfunction getShaderName({id, source, type}) {\n  const injectShaderName = id && typeof id === 'string' && source.indexOf('SHADER_NAME') === -1;\n  return injectShaderName\n    ? `\n#define SHADER_NAME ${id}_${SHADER_TYPE[type]}\n\n`\n    : '';\n}\n\n// Generates application defines from an object\nfunction getApplicationDefines(defines = {}) {\n  let count = 0;\n  let sourceText = '';\n  for (const define in defines) {\n    if (count === 0) {\n      sourceText += '\\n// APPLICATION DEFINES\\n';\n    }\n    count++;\n\n    const value = defines[define];\n    if (value || Number.isFinite(value)) {\n      sourceText += `#define ${define.toUpperCase()} ${defines[define]}\\n`;\n    }\n  }\n  if (count === 0) {\n    sourceText += '\\n';\n  }\n  return sourceText;\n}\n\nfunction getHookFunctions(hookFunctions, hookInjections) {\n  let result = '';\n  for (const hookName in hookFunctions) {\n    const hookFunction = hookFunctions[hookName];\n    result += `void ${hookFunction.signature} {\\n`;\n    if (hookFunction.header) {\n      result += `  ${hookFunction.header}`;\n    }\n    if (hookInjections[hookName]) {\n      const injections = hookInjections[hookName];\n      injections.sort((a, b) => a.order - b.order);\n      for (const injection of injections) {\n        result += `  ${injection.injection}\\n`;\n      }\n    }\n    if (hookFunction.footer) {\n      result += `  ${hookFunction.footer}`;\n    }\n    result += '}\\n';\n  }\n\n  return result;\n}\n"],"file":"assemble-shaders.js"}