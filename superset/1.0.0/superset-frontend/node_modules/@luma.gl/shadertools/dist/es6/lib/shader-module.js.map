{"version":3,"sources":["../../../src/lib/shader-module.js"],"names":["transpileShader","assert","parsePropTypes","VERTEX_SHADER","FRAGMENT_SHADER","ShaderModule","constructor","name","vs","fs","dependencies","uniforms","getUniforms","deprecations","defines","vertexShader","fragmentShader","getModuleUniforms","_parseDeprecationDefinitions","getModuleSource","type","targetGLSLVersion","moduleSource","toUpperCase","opts","_defaultGetUniforms","getDefines","checkDeprecations","shaderSource","log","forEach","def","regex","test","deprecated","old","new","removed","RegExp","propTypes","key","propDef","private","validate","value","normalizeShaderModule","module","normalized","shaderModule","bind"],"mappings":"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","sourcesContent":["import transpileShader from './transpile-shader';\nimport {assert} from '../utils';\nimport {parsePropTypes} from './filters/prop-types';\n\nconst VERTEX_SHADER = 'vs';\nconst FRAGMENT_SHADER = 'fs';\n\nexport default class ShaderModule {\n  constructor({\n    name,\n    vs,\n    fs,\n    dependencies = [],\n    uniforms,\n    getUniforms,\n    deprecations = [],\n    defines = {},\n    // DEPRECATED\n    vertexShader,\n    fragmentShader\n  }) {\n    assert(typeof name === 'string');\n    this.name = name;\n    this.vs = vs || vertexShader;\n    this.fs = fs || fragmentShader;\n    this.getModuleUniforms = getUniforms;\n    this.dependencies = dependencies;\n    this.deprecations = this._parseDeprecationDefinitions(deprecations);\n    this.defines = defines;\n\n    if (uniforms) {\n      this.uniforms = parsePropTypes(uniforms);\n    }\n  }\n\n  // Extracts the source code chunk for the specified shader type from the named shader module\n  getModuleSource(type, targetGLSLVersion) {\n    let moduleSource;\n    switch (type) {\n      case VERTEX_SHADER:\n        moduleSource = transpileShader(this.vs || '', targetGLSLVersion, true);\n        break;\n      case FRAGMENT_SHADER:\n        moduleSource = transpileShader(this.fs || '', targetGLSLVersion, false);\n        break;\n      default:\n        assert(false);\n    }\n\n    return `\\\n#define MODULE_${this.name.toUpperCase()}\n${moduleSource}\\\n// END MODULE_${this.name}\n\n`;\n  }\n\n  getUniforms(opts, uniforms) {\n    if (this.getModuleUniforms) {\n      return this.getModuleUniforms(opts, uniforms);\n    }\n    // Build uniforms from the uniforms array\n    if (this.uniforms) {\n      return this._defaultGetUniforms(opts);\n    }\n    return {};\n  }\n\n  getDefines() {\n    return this.defines;\n  }\n\n  // Warn about deprecated uniforms or functions\n  checkDeprecations(shaderSource, log) {\n    this.deprecations.forEach(def => {\n      if (def.regex.test(shaderSource)) {\n        if (def.deprecated) {\n          log.deprecated(def.old, def.new)();\n        } else {\n          log.removed(def.old, def.new)();\n        }\n      }\n    });\n  }\n\n  _parseDeprecationDefinitions(deprecations) {\n    deprecations.forEach(def => {\n      switch (def.type) {\n        case 'function':\n          def.regex = new RegExp(`\\\\b${def.old}\\\\(`);\n          break;\n        default:\n          def.regex = new RegExp(`${def.type} ${def.old};`);\n      }\n    });\n\n    return deprecations;\n  }\n\n  _defaultGetUniforms(opts = {}) {\n    const uniforms = {};\n    const propTypes = this.uniforms;\n\n    for (const key in propTypes) {\n      const propDef = propTypes[key];\n      if (key in opts && !propDef.private) {\n        if (propDef.validate) {\n          assert(propDef.validate(opts[key], propDef), `${this.name}: invalid ${key}`);\n        }\n        uniforms[key] = opts[key];\n      } else {\n        uniforms[key] = propDef.value;\n      }\n    }\n\n    return uniforms;\n  }\n}\n\n// This utility mutates the original module\n// Keeping for backward compatibility\n// TODO - remove in v8\nexport function normalizeShaderModule(module) {\n  if (!module.normalized) {\n    module.normalized = true;\n    if (module.uniforms && !module.getUniforms) {\n      const shaderModule = new ShaderModule(module);\n      module.getUniforms = shaderModule.getUniforms.bind(shaderModule);\n    }\n  }\n  return module;\n}\n"],"file":"shader-module.js"}