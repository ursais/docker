import { VERTEX_SHADER, FRAGMENT_SHADER } from './constants';
import { resolveModules, getShaderModule } from './resolve-modules';
import { getPlatformShaderDefines, getVersionDefines } from './platform-defines';
import injectShader, { DECLARATION_INJECT_MARKER } from './inject-shader';
import { assert } from '../utils';
const INJECT_SHADER_DECLARATIONS = "\n\n".concat(DECLARATION_INJECT_MARKER, "\n\n");
const SHADER_TYPE = {
  [VERTEX_SHADER]: 'vertex',
  [FRAGMENT_SHADER]: 'fragment'
};
const HOOK_FUNCTIONS = {
  [VERTEX_SHADER]: {},
  [FRAGMENT_SHADER]: {}
};
const MODULE_INJECTIONS = {
  [VERTEX_SHADER]: {},
  [FRAGMENT_SHADER]: {}
};
const FRAGMENT_SHADER_PROLOGUE = "precision highp float;\n\n";
export function createShaderHook(hook, opts = {}) {
  hook = hook.trim();
  const [stage, signature] = hook.split(':');
  const name = hook.replace(/\(.+/, '');
  HOOK_FUNCTIONS[stage][name] = Object.assign(opts, {
    signature
  });
}
export function createModuleInjection(moduleName, opts) {
  const {
    hook,
    injection,
    order = 0
  } = opts;
  const shaderStage = hook.slice(0, 2);
  const moduleInjections = MODULE_INJECTIONS[shaderStage];
  moduleInjections[moduleName] = moduleInjections[moduleName] || {};
  assert(!moduleInjections[moduleName][hook], 'Module injection already created');
  moduleInjections[moduleName][hook] = {
    injection,
    order
  };
}
export function resetGlobalShaderHooks() {
  HOOK_FUNCTIONS[VERTEX_SHADER] = {};
  HOOK_FUNCTIONS[FRAGMENT_SHADER] = {};
  MODULE_INJECTIONS[VERTEX_SHADER] = {};
  MODULE_INJECTIONS[FRAGMENT_SHADER] = {};
}
export function assembleShaders(gl, opts) {
  const {
    vs,
    fs
  } = opts;
  const modules = resolveModules(opts.modules || []);
  return {
    gl,
    vs: assembleShader(gl, Object.assign({}, opts, {
      source: vs,
      type: VERTEX_SHADER,
      modules
    })),
    fs: assembleShader(gl, Object.assign({}, opts, {
      source: fs,
      type: FRAGMENT_SHADER,
      modules
    })),
    getUniforms: assembleGetUniforms(modules),
    modules: assembleModuleMap(modules)
  };
}

function assembleShader(gl, {
  id,
  source,
  type,
  modules,
  defines = {},
  hookFunctions = HOOK_FUNCTIONS,
  moduleInjections = MODULE_INJECTIONS,
  inject = {},
  prologue = true,
  log
}) {
  assert(typeof source === 'string', 'shader source must be a string');

  if (hookFunctions !== HOOK_FUNCTIONS) {
    hookFunctions = {
      [VERTEX_SHADER]: Object.assign({}, HOOK_FUNCTIONS[VERTEX_SHADER], hookFunctions[VERTEX_SHADER]),
      [FRAGMENT_SHADER]: Object.assign({}, HOOK_FUNCTIONS[FRAGMENT_SHADER], hookFunctions[FRAGMENT_SHADER])
    };
  }

  if (moduleInjections !== MODULE_INJECTIONS) {
    moduleInjections = {
      [VERTEX_SHADER]: Object.assign({}, MODULE_INJECTIONS[VERTEX_SHADER], moduleInjections[VERTEX_SHADER]),
      [FRAGMENT_SHADER]: Object.assign({}, MODULE_INJECTIONS[FRAGMENT_SHADER], moduleInjections[FRAGMENT_SHADER])
    };
  }

  const isVertex = type === VERTEX_SHADER;
  const sourceLines = source.split('\n');
  let glslVersion = 100;
  let versionLine = '';
  let coreSource = source;

  if (sourceLines[0].indexOf('#version ') === 0) {
    glslVersion = 300;
    versionLine = sourceLines[0];
    coreSource = sourceLines.slice(1).join('\n');
  } else {
    versionLine = "#version ".concat(glslVersion);
  }

  const allDefines = {};
  modules.forEach(module => {
    Object.assign(allDefines, module.getDefines());
  });
  Object.assign(allDefines, defines);
  let assembledSource = prologue ? "".concat(versionLine, "\n").concat(getShaderName({
    id,
    source,
    type
  }), "\n").concat(getShaderType({
    type
  }), "\n").concat(getPlatformShaderDefines(gl), "\n").concat(getVersionDefines(gl, glslVersion, !isVertex), "\n").concat(getApplicationDefines(allDefines), "\n").concat(isVertex ? '' : FRAGMENT_SHADER_PROLOGUE, "\n") : "".concat(versionLine, "\n");
  let injectStandardStubs = false;
  const hookInjections = {};
  const mainInjections = {};

  for (const key in inject) {
    const injection = typeof inject[key] === 'string' ? {
      injection: inject[key],
      order: 0
    } : inject[key];

    if (key.match(/^(v|f)s:/)) {
      if (key[3] === '#') {
        mainInjections[key] = [injection];
      } else {
        hookInjections[key] = [injection];
      }
    } else {
      mainInjections[key] = [injection];
    }
  }

  for (const module of modules) {
    switch (module.name) {
      case 'inject':
        injectStandardStubs = true;
        break;

      default:
        if (log) {
          module.checkDeprecations(coreSource, log);
        }

        const moduleSource = module.getModuleSource(type, glslVersion);
        assembledSource += moduleSource;

        if (moduleInjections[type][module.name]) {
          const injections = moduleInjections[type][module.name];

          for (const key in injections) {
            if (key.match(/^(v|f)s:#/)) {
              mainInjections[key] = mainInjections[key] || [];
              mainInjections[key].push(injections[key]);
            } else {
              hookInjections[key] = hookInjections[key] || [];
              hookInjections[key].push(injections[key]);
            }
          }
        }

    }
  }

  assembledSource += INJECT_SHADER_DECLARATIONS;
  assembledSource += getHookFunctions(hookFunctions[type], hookInjections);
  assembledSource += coreSource;
  assembledSource = injectShader(assembledSource, type, mainInjections, injectStandardStubs);
  return assembledSource;
}

function assembleGetUniforms(modules) {
  return function getUniforms(opts) {
    const uniforms = {};

    for (const module of modules) {
      const moduleUniforms = module.getUniforms(opts, uniforms);
      Object.assign(uniforms, moduleUniforms);
    }

    return uniforms;
  };
}

function assembleModuleMap(modules) {
  const result = {};

  for (const moduleName of modules) {
    const shaderModule = getShaderModule(moduleName);
    result[moduleName] = shaderModule;
  }

  return result;
}

function getShaderType({
  type
}) {
  return "\n#define SHADER_TYPE_".concat(SHADER_TYPE[type].toUpperCase(), "\n");
}

function getShaderName({
  id,
  source,
  type
}) {
  const injectShaderName = id && typeof id === 'string' && source.indexOf('SHADER_NAME') === -1;
  return injectShaderName ? "\n#define SHADER_NAME ".concat(id, "_").concat(SHADER_TYPE[type], "\n\n") : '';
}

function getApplicationDefines(defines = {}) {
  let count = 0;
  let sourceText = '';

  for (const define in defines) {
    if (count === 0) {
      sourceText += '\n// APPLICATION DEFINES\n';
    }

    count++;
    const value = defines[define];

    if (value || Number.isFinite(value)) {
      sourceText += "#define ".concat(define.toUpperCase(), " ").concat(defines[define], "\n");
    }
  }

  if (count === 0) {
    sourceText += '\n';
  }

  return sourceText;
}

function getHookFunctions(hookFunctions, hookInjections) {
  let result = '';

  for (const hookName in hookFunctions) {
    const hookFunction = hookFunctions[hookName];
    result += "void ".concat(hookFunction.signature, " {\n");

    if (hookFunction.header) {
      result += "  ".concat(hookFunction.header);
    }

    if (hookInjections[hookName]) {
      const injections = hookInjections[hookName];
      injections.sort((a, b) => a.order - b.order);

      for (const injection of injections) {
        result += "  ".concat(injection.injection, "\n");
      }
    }

    if (hookFunction.footer) {
      result += "  ".concat(hookFunction.footer);
    }

    result += '}\n';
  }

  return result;
}
//# sourceMappingURL=assemble-shaders.js.map