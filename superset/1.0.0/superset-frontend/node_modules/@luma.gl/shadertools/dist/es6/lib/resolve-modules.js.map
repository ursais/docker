{"version":3,"sources":["../../../src/lib/resolve-modules.js"],"names":["ShaderModuleRegistry","shaderModuleRegistry","setDefaultShaderModules","modules","getDefaultShaderModules","registerShaderModules","shaderModuleList","ignoreMultipleRegistrations","resolveModules","concat","defaultShaderModules","getShaderDependencies","getShaderModule","moduleOrName","moduleMap","moduleDepth","getDependencyGraph","level","Object","keys","sort","a","b","map","name","Error","module","undefined","dependencies","TEST_EXPORTS"],"mappings":"AAAA,OAAOA,oBAAP,MAAiC,0BAAjC;AAEA,MAAMC,oBAAoB,GAAG,IAAID,oBAAJ,EAA7B;AAQA,OAAO,SAASE,uBAAT,CAAiCC,OAAjC,EAA0C;AAC/CF,EAAAA,oBAAoB,CAACC,uBAArB,CAA6CC,OAA7C;AACD;AAED,OAAO,SAASC,uBAAT,GAAmC;AACxC,SAAOH,oBAAoB,CAACG,uBAArB,EAAP;AACD;AAMD,OAAO,SAASC,qBAAT,CACLC,gBADK,EAEL;AAACC,EAAAA,2BAA2B,GAAG;AAA/B,IAAwC,EAFnC,EAGL;AACAN,EAAAA,oBAAoB,CAACI,qBAArB,CAA2CC,gBAA3C,EAA6D;AAACC,IAAAA;AAAD,GAA7D;AACD;AAGD,OAAO,SAASC,cAAT,CAAwBL,OAAxB,EAAiC;AACtCA,EAAAA,OAAO,GAAGA,OAAO,CAACM,MAAR,CAAeR,oBAAoB,CAACS,oBAApC,CAAV;AACAP,EAAAA,OAAO,GAAGF,oBAAoB,CAACO,cAArB,CAAoCL,OAApC,CAAV;AACA,SAAOQ,qBAAqB,CAACR,OAAD,CAA5B;AACD;AAID,OAAO,SAASS,eAAT,CAAyBC,YAAzB,EAAuC;AAC5C,SAAOZ,oBAAoB,CAACW,eAArB,CAAqCC,YAArC,CAAP;AACD;;AAcD,SAASF,qBAAT,CAA+BR,OAA/B,EAAwC;AACtC,QAAMW,SAAS,GAAG,EAAlB;AACA,QAAMC,WAAW,GAAG,EAApB;AACAC,EAAAA,kBAAkB,CAAC;AAACb,IAAAA,OAAD;AAAUc,IAAAA,KAAK,EAAE,CAAjB;AAAoBH,IAAAA,SAApB;AAA+BC,IAAAA;AAA/B,GAAD,CAAlB;AAGA,SAAOG,MAAM,CAACC,IAAP,CAAYJ,WAAZ,EACJK,IADI,CACC,CAACC,CAAD,EAAIC,CAAJ,KAAUP,WAAW,CAACO,CAAD,CAAX,GAAiBP,WAAW,CAACM,CAAD,CADvC,EAEJE,GAFI,CAEAC,IAAI,IAAIV,SAAS,CAACU,IAAD,CAFjB,CAAP;AAGD;;AAWD,SAASR,kBAAT,CAA4B;AAACb,EAAAA,OAAD;AAAUc,EAAAA,KAAV;AAAiBH,EAAAA,SAAjB;AAA4BC,EAAAA;AAA5B,CAA5B,EAAsE;AACpE,MAAIE,KAAK,IAAI,CAAb,EAAgB;AACd,UAAM,IAAIQ,KAAJ,CAAU,0CAAV,CAAN;AACD;;AAGD,OAAK,MAAMC,MAAX,IAAqBvB,OAArB,EAA8B;AAC5BW,IAAAA,SAAS,CAACY,MAAM,CAACF,IAAR,CAAT,GAAyBE,MAAzB;;AACA,QAAIX,WAAW,CAACW,MAAM,CAACF,IAAR,CAAX,KAA6BG,SAA7B,IAA0CZ,WAAW,CAACW,MAAM,CAACF,IAAR,CAAX,GAA2BP,KAAzE,EAAgF;AAC9EF,MAAAA,WAAW,CAACW,MAAM,CAACF,IAAR,CAAX,GAA2BP,KAA3B;AACD;AACF;;AAGD,OAAK,MAAMS,MAAX,IAAqBvB,OAArB,EAA8B;AAC5B,QAAIuB,MAAM,CAACE,YAAX,EAAyB;AACvBZ,MAAAA,kBAAkB,CAAC;AAACb,QAAAA,OAAO,EAAEuB,MAAM,CAACE,YAAjB;AAA+BX,QAAAA,KAAK,EAAEA,KAAK,GAAG,CAA9C;AAAiDH,QAAAA,SAAjD;AAA4DC,QAAAA;AAA5D,OAAD,CAAlB;AACD;AACF;AACF;;AAED,OAAO,MAAMc,YAAY,GAAG;AAC1BlB,EAAAA,qBAD0B;AAE1BK,EAAAA;AAF0B,CAArB","sourcesContent":["import ShaderModuleRegistry from './shader-module-registry';\n\nconst shaderModuleRegistry = new ShaderModuleRegistry();\n\n/**\n * Registers an array of default shader modules. These will be concatenated\n * automatically at the end of any shader module list passed to\n * `assembleShaders` (plus `resolveModules` and `getShaderDependencies`)\n * @param {Object[]} modules - Array of shader modules\n */\nexport function setDefaultShaderModules(modules) {\n  shaderModuleRegistry.setDefaultShaderModules(modules);\n}\n\nexport function getDefaultShaderModules() {\n  return shaderModuleRegistry.getDefaultShaderModules();\n}\n\n/**\n * Registers an array of shader modules\n * @param {Object[]} shaderModuleList - Array of shader modules\n */\nexport function registerShaderModules(\n  shaderModuleList,\n  {ignoreMultipleRegistrations = false} = {}\n) {\n  shaderModuleRegistry.registerShaderModules(shaderModuleList, {ignoreMultipleRegistrations});\n}\n\n// registers any supplied modules and returns a list of module names\nexport function resolveModules(modules) {\n  modules = modules.concat(shaderModuleRegistry.defaultShaderModules);\n  modules = shaderModuleRegistry.resolveModules(modules);\n  return getShaderDependencies(modules);\n}\n\n// Looks up a moduleName among registered modules and returns definition.\n// If \"inline\" module, returns it directly\nexport function getShaderModule(moduleOrName) {\n  return shaderModuleRegistry.getShaderModule(moduleOrName);\n}\n\n/**\n * Takes a list of shader module names and returns a new list of\n * shader module names that includes all dependencies, sorted so\n * that modules that are dependencies of other modules come first.\n *\n * If the shader glsl code from the returned modules is concatenated\n * in the reverse order, it is guaranteed that all functions be resolved and\n * that all function and variable definitions come before use.\n *\n * @param {String[]} modules - Array of modules (inline modules or module names)\n * @return {String[]} - Array of modules\n */\nfunction getShaderDependencies(modules) {\n  const moduleMap = {};\n  const moduleDepth = {};\n  getDependencyGraph({modules, level: 0, moduleMap, moduleDepth});\n\n  // Return a reverse sort so that dependencies come before the modules that use them\n  return Object.keys(moduleDepth)\n    .sort((a, b) => moduleDepth[b] - moduleDepth[a])\n    .map(name => moduleMap[name]);\n}\n\n/**\n * Recursively checks module dpendencies to calculate dependency\n * level of each module.\n *\n * @param {String[]} modules - Array of modules\n * @param {Number} level - Current level\n * @return {result} - Map of module name to its level\n */\n// Adds another level of dependencies to the result map\nfunction getDependencyGraph({modules, level, moduleMap, moduleDepth}) {\n  if (level >= 5) {\n    throw new Error('Possible loop in shader dependency graph');\n  }\n\n  // Update level on all current modules\n  for (const module of modules) {\n    moduleMap[module.name] = module;\n    if (moduleDepth[module.name] === undefined || moduleDepth[module.name] < level) {\n      moduleDepth[module.name] = level;\n    }\n  }\n\n  // Recurse\n  for (const module of modules) {\n    if (module.dependencies) {\n      getDependencyGraph({modules: module.dependencies, level: level + 1, moduleMap, moduleDepth});\n    }\n  }\n}\n\nexport const TEST_EXPORTS = {\n  getShaderDependencies,\n  getDependencyGraph\n};\n"],"file":"resolve-modules.js"}