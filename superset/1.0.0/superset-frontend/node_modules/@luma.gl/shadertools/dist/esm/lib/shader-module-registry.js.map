{"version":3,"sources":["../../../src/lib/shader-module-registry.js"],"names":["ShaderModule","assert","ShaderModuleRegistry","shaderModules","defaultShaderModules","modules","resolveModules","shaderModuleList","ignoreMultipleRegistrations","shaderModule","_registerShaderModule","moduleOrName","module","map","getShaderModule","name","dependencies","Error"],"mappings":";;AAAA,OAAOA,YAAP,MAAyB,iBAAzB;AACA,SAAQC,MAAR,QAAqB,UAArB;;IAEqBC,oB;AACnB,kCAAc;AAAA;;AACZ,SAAKC,aAAL,GAAqB,EAArB;AACA,SAAKC,oBAAL,GAA4B,EAA5B;AACD;;;;4CAEuBC,O,EAAS;AAC/B,WAAKD,oBAAL,GAA4B,KAAKE,cAAL,CAAoBD,OAApB,CAA5B;AACD;;;8CAEyB;AACxB,aAAO,KAAKD,oBAAZ;AACD;;;0CAEqBG,gB,EAA8D;AAAA,qFAAJ,EAAI;AAAA,uCAA3CC,2BAA2C;AAAA,UAA3CA,2BAA2C,sCAAb,KAAa;;AAAA;AAAA;AAAA;;AAAA;AAClF,6BAA2BD,gBAA3B,8HAA6C;AAAA,cAAlCE,YAAkC;;AAC3C,eAAKC,qBAAL,CAA2BD,YAA3B,EAAyCD,2BAAzC;AACD;AAHiF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAInF;;;oCAEeG,Y,EAAc;AAE5B,UAAIA,YAAY,YAAYX,YAA5B,EAA0C;AACxC,eAAOW,YAAP;AACD;;AAGD,UAAI,OAAOA,YAAP,KAAwB,QAA5B,EAAsC;AACpC,eAAO,KAAKD,qBAAL,CAA2BC,YAA3B,EAAyC,IAAzC,CAAP;AACD;;AAGD,UAAMC,MAAM,GAAG,KAAKT,aAAL,CAAmBQ,YAAnB,CAAf;;AACA,UAAI,CAACC,MAAL,EAAa;AACXX,QAAAA,MAAM,CAAC,KAAD,kCAAiCU,YAAjC,EAAN;AACD;;AACD,aAAOC,MAAP;AACD;;;mCAIcP,O,EAAS;AAAA;;AACtB,aAAOA,OAAO,CAACQ,GAAR,CAAY,UAAAF,YAAY;AAAA,eAAI,KAAI,CAACG,eAAL,CAAqBH,YAArB,CAAJ;AAAA,OAAxB,CAAP;AACD;;;0CAIqBC,M,EAA6C;AAAA,UAArCJ,2BAAqC,uEAAP,KAAO;;AAEjE,UAAII,MAAM,YAAYZ,YAAtB,EAAoC;AAClC,eAAOY,MAAP;AACD;;AAEDX,MAAAA,MAAM,CAACW,MAAM,CAACG,IAAR,EAAc,2BAAd,CAAN;;AAEA,UAAI,CAAC,KAAKZ,aAAL,CAAmBS,MAAM,CAACG,IAA1B,CAAD,IAAoCP,2BAAxC,EAAqE;AAEnEI,QAAAA,MAAM,GAAG,IAAIZ,YAAJ,CAAiBY,MAAjB,CAAT;AACAA,QAAAA,MAAM,CAACI,YAAP,GAAsB,KAAKV,cAAL,CAAoBM,MAAM,CAACI,YAA3B,CAAtB;AACA,aAAKb,aAAL,CAAmBS,MAAM,CAACG,IAA1B,IAAkCH,MAAlC;AACD,OALD,MAKO;AAEL,cAAM,IAAIK,KAAJ,yBAA2BL,MAAM,CAACG,IAAlC,yBAAN;AACD;;AAED,aAAO,KAAKZ,aAAL,CAAmBS,MAAM,CAACG,IAA1B,CAAP;AACD;;;;;;SAlEkBb,oB","sourcesContent":["import ShaderModule from './shader-module';\nimport {assert} from '../utils';\n\nexport default class ShaderModuleRegistry {\n  constructor() {\n    this.shaderModules = {};\n    this.defaultShaderModules = [];\n  }\n\n  setDefaultShaderModules(modules) {\n    this.defaultShaderModules = this.resolveModules(modules);\n  }\n\n  getDefaultShaderModules() {\n    return this.defaultShaderModules;\n  }\n\n  registerShaderModules(shaderModuleList, {ignoreMultipleRegistrations = false} = {}) {\n    for (const shaderModule of shaderModuleList) {\n      this._registerShaderModule(shaderModule, ignoreMultipleRegistrations);\n    }\n  }\n\n  getShaderModule(moduleOrName) {\n    // Check if \"inline\" module, return it\n    if (moduleOrName instanceof ShaderModule) {\n      return moduleOrName;\n    }\n\n    // Check if module descriptor\n    if (typeof moduleOrName !== 'string') {\n      return this._registerShaderModule(moduleOrName, true);\n    }\n\n    // Module name - Look up module\n    const module = this.shaderModules[moduleOrName];\n    if (!module) {\n      assert(false, `Unknown shader module ${moduleOrName}`);\n    }\n    return module;\n  }\n\n  // registers any supplied modules, resolves any names into modules\n  // returns a list of modules\n  resolveModules(modules) {\n    return modules.map(moduleOrName => this.getShaderModule(moduleOrName));\n  }\n\n  // PRIVATE API\n\n  _registerShaderModule(module, ignoreMultipleRegistrations = false) {\n    // Check if \"inline\" module, return it\n    if (module instanceof ShaderModule) {\n      return module;\n    }\n\n    assert(module.name, 'shader module has no name');\n\n    if (!this.shaderModules[module.name] || ignoreMultipleRegistrations) {\n      // if ignoreMultipleRegistrations = true, we allow module to be re-registered\n      module = new ShaderModule(module);\n      module.dependencies = this.resolveModules(module.dependencies);\n      this.shaderModules[module.name] = module;\n    } else {\n      // TODO - instead verify that definition is not changing...\n      throw new Error(`shader module ${module.name} already registered`);\n    }\n\n    return this.shaderModules[module.name];\n  }\n}\n"],"file":"shader-module-registry.js"}