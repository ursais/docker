{"version":3,"sources":["../../../src/lib/shader-module.js"],"names":["transpileShader","assert","parsePropTypes","VERTEX_SHADER","FRAGMENT_SHADER","ShaderModule","name","vs","fs","dependencies","uniforms","getUniforms","deprecations","defines","vertexShader","fragmentShader","getModuleUniforms","_parseDeprecationDefinitions","type","targetGLSLVersion","moduleSource","toUpperCase","opts","_defaultGetUniforms","shaderSource","log","forEach","def","regex","test","deprecated","old","removed","RegExp","propTypes","key","propDef","validate","value","normalizeShaderModule","module","normalized","shaderModule","bind"],"mappings":"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","sourcesContent":["import transpileShader from './transpile-shader';\nimport {assert} from '../utils';\nimport {parsePropTypes} from './filters/prop-types';\n\nconst VERTEX_SHADER = 'vs';\nconst FRAGMENT_SHADER = 'fs';\n\nexport default class ShaderModule {\n  constructor({\n    name,\n    vs,\n    fs,\n    dependencies = [],\n    uniforms,\n    getUniforms,\n    deprecations = [],\n    defines = {},\n    // DEPRECATED\n    vertexShader,\n    fragmentShader\n  }) {\n    assert(typeof name === 'string');\n    this.name = name;\n    this.vs = vs || vertexShader;\n    this.fs = fs || fragmentShader;\n    this.getModuleUniforms = getUniforms;\n    this.dependencies = dependencies;\n    this.deprecations = this._parseDeprecationDefinitions(deprecations);\n    this.defines = defines;\n\n    if (uniforms) {\n      this.uniforms = parsePropTypes(uniforms);\n    }\n  }\n\n  // Extracts the source code chunk for the specified shader type from the named shader module\n  getModuleSource(type, targetGLSLVersion) {\n    let moduleSource;\n    switch (type) {\n      case VERTEX_SHADER:\n        moduleSource = transpileShader(this.vs || '', targetGLSLVersion, true);\n        break;\n      case FRAGMENT_SHADER:\n        moduleSource = transpileShader(this.fs || '', targetGLSLVersion, false);\n        break;\n      default:\n        assert(false);\n    }\n\n    return `\\\n#define MODULE_${this.name.toUpperCase()}\n${moduleSource}\\\n// END MODULE_${this.name}\n\n`;\n  }\n\n  getUniforms(opts, uniforms) {\n    if (this.getModuleUniforms) {\n      return this.getModuleUniforms(opts, uniforms);\n    }\n    // Build uniforms from the uniforms array\n    if (this.uniforms) {\n      return this._defaultGetUniforms(opts);\n    }\n    return {};\n  }\n\n  getDefines() {\n    return this.defines;\n  }\n\n  // Warn about deprecated uniforms or functions\n  checkDeprecations(shaderSource, log) {\n    this.deprecations.forEach(def => {\n      if (def.regex.test(shaderSource)) {\n        if (def.deprecated) {\n          log.deprecated(def.old, def.new)();\n        } else {\n          log.removed(def.old, def.new)();\n        }\n      }\n    });\n  }\n\n  _parseDeprecationDefinitions(deprecations) {\n    deprecations.forEach(def => {\n      switch (def.type) {\n        case 'function':\n          def.regex = new RegExp(`\\\\b${def.old}\\\\(`);\n          break;\n        default:\n          def.regex = new RegExp(`${def.type} ${def.old};`);\n      }\n    });\n\n    return deprecations;\n  }\n\n  _defaultGetUniforms(opts = {}) {\n    const uniforms = {};\n    const propTypes = this.uniforms;\n\n    for (const key in propTypes) {\n      const propDef = propTypes[key];\n      if (key in opts && !propDef.private) {\n        if (propDef.validate) {\n          assert(propDef.validate(opts[key], propDef), `${this.name}: invalid ${key}`);\n        }\n        uniforms[key] = opts[key];\n      } else {\n        uniforms[key] = propDef.value;\n      }\n    }\n\n    return uniforms;\n  }\n}\n\n// This utility mutates the original module\n// Keeping for backward compatibility\n// TODO - remove in v8\nexport function normalizeShaderModule(module) {\n  if (!module.normalized) {\n    module.normalized = true;\n    if (module.uniforms && !module.getUniforms) {\n      const shaderModule = new ShaderModule(module);\n      module.getUniforms = shaderModule.getUniforms.bind(shaderModule);\n    }\n  }\n  return module;\n}\n"],"file":"shader-module.js"}