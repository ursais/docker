{"version":3,"sources":["../../../src/lib/transpile-shader.js"],"names":["transpileShader","source","targetGLSLVersion","isVertex","convertVertexShaderTo300","convertFragmentShaderTo300","convertVertexShaderTo100","convertFragmentShaderTo100","Error","replace"],"mappings":";;;;;;;AAGe,SAASA,eAAT,CAAyBC,MAAzB,EAAiCC,iBAAjC,EAAoDC,QAApD,EAA8D;AAC3E,UAAQD,iBAAR;AACE,SAAK,GAAL;AACE,aAAOC,QAAQ,GAAGC,wBAAwB,CAACH,MAAD,CAA3B,GAAsCI,0BAA0B,CAACJ,MAAD,CAA/E;;AACF,SAAK,GAAL;AACE,aAAOE,QAAQ,GAAGG,wBAAwB,CAACL,MAAD,CAA3B,GAAsCM,0BAA0B,CAACN,MAAD,CAA/E;;AACF;AACE,YAAM,IAAIO,KAAJ,gCAAkCN,iBAAlC,EAAN;AANJ;AAQD;;AAED,SAASE,wBAAT,CAAkCH,MAAlC,EAA0C;AACxC,SAAOA,MAAM,CACVQ,OADI,CACI,eADJ,EACqB,KADrB,EAEJA,OAFI,CAEI,aAFJ,EAEmB,MAFnB,EAGJA,OAHI,CAGI,cAHJ,EAGoB,UAHpB,EAIJA,OAJI,CAII,iBAJJ,EAIuB,UAJvB,EAKJA,OALI,CAKI,oBALJ,EAK0B,aAL1B,EAMJA,OANI,CAMI,sBANJ,EAM4B,aAN5B,CAAP;AAOD;;AAED,SAASJ,0BAAT,CAAoCJ,MAApC,EAA4C;AAC1C,SAAOA,MAAM,CACVQ,OADI,CACI,aADJ,EACmB,KADnB,EAEJA,OAFI,CAEI,cAFJ,EAEoB,UAFpB,EAGJA,OAHI,CAGI,gBAHJ,EAGsB,UAHtB,EAIJA,OAJI,CAII,oBAJJ,EAI0B,aAJ1B,EAKJA,OALI,CAKI,sBALJ,EAK4B,aAL5B,CAAP;AASD;;AAED,SAASH,wBAAT,CAAkCL,MAAlC,EAA0C;AAExC,SAAOA,MAAM,CACVQ,OADI,CACI,UADJ,EACgB,YADhB,EAEJA,OAFI,CAEI,WAFJ,EAEiB,UAFjB,EAGJA,OAHI,CAGI,YAHJ,EAGkB,YAHlB,CAAP;AAID;;AAED,SAASF,0BAAT,CAAoCN,MAApC,EAA4C;AAE1C,SAAOA,MAAM,CAACQ,OAAP,CAAe,UAAf,EAA2B,UAA3B,EAAuCA,OAAvC,CAA+C,YAA/C,EAA6D,YAA7D,CAAP;AAID","sourcesContent":["// Transpiles shader source code to target GLSL version\n// Note: We always run transpiler even if same version e.g. 3.00 => 3.00\n// RFC: https://github.com/uber/luma.gl/blob/7.0-release/dev-docs/RFCs/v6.0/portable-glsl-300-rfc.md\nexport default function transpileShader(source, targetGLSLVersion, isVertex) {\n  switch (targetGLSLVersion) {\n    case 300:\n      return isVertex ? convertVertexShaderTo300(source) : convertFragmentShaderTo300(source);\n    case 100:\n      return isVertex ? convertVertexShaderTo100(source) : convertFragmentShaderTo100(source);\n    default:\n      throw new Error(`unknown GLSL version ${targetGLSLVersion}`);\n  }\n}\n\nfunction convertVertexShaderTo300(source) {\n  return source\n    .replace(/attribute\\s+/g, 'in ')\n    .replace(/varying\\s+/g, 'out ')\n    .replace(/texture2D\\(/g, 'texture(')\n    .replace(/textureCube\\(+/g, 'texture(')\n    .replace(/texture2DLodEXT\\(/g, 'textureLod(')\n    .replace(/textureCubeLodEXT\\(/g, 'textureLod(');\n}\n\nfunction convertFragmentShaderTo300(source) {\n  return source\n    .replace(/varying\\s+/g, 'in ')\n    .replace(/texture2D\\(/g, 'texture(')\n    .replace(/textureCube\\(/g, 'texture(')\n    .replace(/texture2DLodEXT\\(/g, 'textureLod(')\n    .replace(/textureCubeLodEXT\\(/g, 'textureLod(');\n\n  // Deal with fragColor\n  // .replace(/gl_fragColor/g, 'fragColor ');\n}\n\nfunction convertVertexShaderTo100(source) {\n  // /gm - treats each line as a string, so that ^ matches after newlines\n  return source\n    .replace(/^in\\s+/gm, 'attribute ')\n    .replace(/^out\\s+/gm, 'varying ')\n    .replace(/texture\\(/g, 'texture2D(');\n}\n\nfunction convertFragmentShaderTo100(source) {\n  // /gm - treats each line as a string, so that ^ matches after newlines\n  return source.replace(/^in\\s+/gm, 'varying ').replace(/texture\\(/g, 'texture2D(');\n\n  // Deal with fragColor\n  // .replace(/^out\\s+/g, 'varying ')\n}\n"],"file":"transpile-shader.js"}