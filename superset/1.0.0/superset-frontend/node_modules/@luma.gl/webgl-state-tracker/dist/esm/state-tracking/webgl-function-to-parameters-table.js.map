{"version":3,"sources":["../../../src/state-tracking/webgl-function-to-parameters-table.js"],"names":["enable","update","capability","disable","pixelStorei","pname","value","hint","bindFramebuffer","target","framebuffer","blendColor","r","g","b","a","Float32Array","blendEquation","mode","blendEquationSeparate","modeRGB","modeAlpha","blendFunc","src","dst","blendFuncSeparate","srcRGB","dstRGB","srcAlpha","dstAlpha","clearColor","clearDepth","depth","clearStencil","s","colorMask","cullFace","depthFunc","func","depthRange","zNear","zFar","depthMask","mask","frontFace","face","lineWidth","width","polygonOffset","factor","units","sampleCoverage","invert","scissor","x","y","height","Int32Array","stencilMask","stencilMaskSeparate","stencilFunc","ref","stencilFuncSeparate","stencilOp","fail","zfail","zpass","stencilOpSeparate","viewport"],"mappings":"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","sourcesContent":["// Replacements for WebGL state setting functions that call supplied 'update'\n// function setting the individual parameters.\n// i.e. these \"setters\" map functions to gl parameters\n\n// The 'update' function is used to interceptor WEBGL functions that set\n// WebGLRenderingContext state so that state changes can be tracked.\n\n// It also enables checking values against cache and avoid unnecessary WebGL\n// set/get operations.\n\nimport GL from '@luma.gl/constants';\n\nexport default {\n  // GENERIC SETTERS\n\n  enable: (update, capability) =>\n    update({\n      [capability]: true\n    }),\n  disable: (update, capability) =>\n    update({\n      [capability]: false\n    }),\n  pixelStorei: (update, pname, value) =>\n    update({\n      [pname]: value\n    }),\n  hint: (update, pname, hint) =>\n    update({\n      [pname]: hint\n    }),\n\n  // SPECIFIC SETTERS\n\n  bindFramebuffer: (update, target, framebuffer) => {\n    switch (target) {\n      case GL.FRAMEBUFFER:\n        return update({\n          [GL.DRAW_FRAMEBUFFER_BINDING]: framebuffer,\n          [GL.READ_FRAMEBUFFER_BINDING]: framebuffer\n        });\n      case GL.DRAW_FRAMEBUFFER:\n        return update({[GL.DRAW_FRAMEBUFFER_BINDING]: framebuffer});\n      case GL.READ_FRAMEBUFFER:\n        return update({[GL.READ_FRAMEBUFFER_BINDING]: framebuffer});\n      default:\n        return null;\n    }\n  },\n  blendColor: (update, r, g, b, a) =>\n    update({\n      [GL.BLEND_COLOR]: new Float32Array([r, g, b, a])\n    }),\n\n  blendEquation: (update, mode) =>\n    update({\n      [GL.BLEND_EQUATION_RGB]: mode,\n      [GL.BLEND_EQUATION_ALPHA]: mode\n    }),\n\n  blendEquationSeparate: (update, modeRGB, modeAlpha) =>\n    update({\n      [GL.BLEND_EQUATION_RGB]: modeRGB,\n      [GL.BLEND_EQUATION_ALPHA]: modeAlpha\n    }),\n\n  blendFunc: (update, src, dst) =>\n    update({\n      [GL.BLEND_SRC_RGB]: src,\n      [GL.BLEND_DST_RGB]: dst,\n      [GL.BLEND_SRC_ALPHA]: src,\n      [GL.BLEND_DST_ALPHA]: dst\n    }),\n\n  blendFuncSeparate: (update, srcRGB, dstRGB, srcAlpha, dstAlpha) =>\n    update({\n      [GL.BLEND_SRC_RGB]: srcRGB,\n      [GL.BLEND_DST_RGB]: dstRGB,\n      [GL.BLEND_SRC_ALPHA]: srcAlpha,\n      [GL.BLEND_DST_ALPHA]: dstAlpha\n    }),\n\n  clearColor: (update, r, g, b, a) =>\n    update({\n      [GL.COLOR_CLEAR_VALUE]: new Float32Array([r, g, b, a])\n    }),\n\n  clearDepth: (update, depth) =>\n    update({\n      [GL.DEPTH_CLEAR_VALUE]: depth\n    }),\n\n  clearStencil: (update, s) =>\n    update({\n      [GL.STENCIL_CLEAR_VALUE]: s\n    }),\n\n  colorMask: (update, r, g, b, a) =>\n    update({\n      [GL.COLOR_WRITEMASK]: [r, g, b, a]\n    }),\n\n  cullFace: (update, mode) =>\n    update({\n      [GL.CULL_FACE_MODE]: mode\n    }),\n\n  depthFunc: (update, func) =>\n    update({\n      [GL.DEPTH_FUNC]: func\n    }),\n\n  depthRange: (update, zNear, zFar) =>\n    update({\n      [GL.DEPTH_RANGE]: new Float32Array([zNear, zFar])\n    }),\n\n  depthMask: (update, mask) =>\n    update({\n      [GL.DEPTH_WRITEMASK]: mask\n    }),\n\n  frontFace: (update, face) =>\n    update({\n      [GL.FRONT_FACE]: face\n    }),\n\n  lineWidth: (update, width) =>\n    update({\n      [GL.LINE_WIDTH]: width\n    }),\n\n  polygonOffset: (update, factor, units) =>\n    update({\n      [GL.POLYGON_OFFSET_FACTOR]: factor,\n      [GL.POLYGON_OFFSET_UNITS]: units\n    }),\n\n  sampleCoverage: (update, value, invert) =>\n    update({\n      [GL.SAMPLE_COVERAGE_VALUE]: value,\n      [GL.SAMPLE_COVERAGE_INVERT]: invert\n    }),\n\n  scissor: (update, x, y, width, height) =>\n    update({\n      [GL.SCISSOR_BOX]: new Int32Array([x, y, width, height])\n    }),\n\n  stencilMask: (update, mask) =>\n    update({\n      [GL.STENCIL_WRITEMASK]: mask,\n      [GL.STENCIL_BACK_WRITEMASK]: mask\n    }),\n\n  stencilMaskSeparate: (update, face, mask) =>\n    update({\n      [face === GL.FRONT ? GL.STENCIL_WRITEMASK : GL.STENCIL_BACK_WRITEMASK]: mask\n    }),\n\n  stencilFunc: (update, func, ref, mask) =>\n    update({\n      [GL.STENCIL_FUNC]: func,\n      [GL.STENCIL_REF]: ref,\n      [GL.STENCIL_VALUE_MASK]: mask,\n      [GL.STENCIL_BACK_FUNC]: func,\n      [GL.STENCIL_BACK_REF]: ref,\n      [GL.STENCIL_BACK_VALUE_MASK]: mask\n    }),\n\n  stencilFuncSeparate: (update, face, func, ref, mask) =>\n    update({\n      [face === GL.FRONT ? GL.STENCIL_FUNC : GL.STENCIL_BACK_FUNC]: func,\n      [face === GL.FRONT ? GL.STENCIL_REF : GL.STENCIL_BACK_REF]: ref,\n      [face === GL.FRONT ? GL.STENCIL_VALUE_MASK : GL.STENCIL_BACK_VALUE_MASK]: mask\n    }),\n\n  stencilOp: (update, fail, zfail, zpass) =>\n    update({\n      [GL.STENCIL_FAIL]: fail,\n      [GL.STENCIL_PASS_DEPTH_FAIL]: zfail,\n      [GL.STENCIL_PASS_DEPTH_PASS]: zpass,\n      [GL.STENCIL_BACK_FAIL]: fail,\n      [GL.STENCIL_BACK_PASS_DEPTH_FAIL]: zfail,\n      [GL.STENCIL_BACK_PASS_DEPTH_PASS]: zpass\n    }),\n\n  stencilOpSeparate: (update, face, fail, zfail, zpass) =>\n    update({\n      [face === GL.FRONT ? GL.STENCIL_FAIL : GL.STENCIL_BACK_FAIL]: fail,\n      [face === GL.FRONT ? GL.STENCIL_PASS_DEPTH_FAIL : GL.STENCIL_BACK_PASS_DEPTH_FAIL]: zfail,\n      [face === GL.FRONT ? GL.STENCIL_PASS_DEPTH_PASS : GL.STENCIL_BACK_PASS_DEPTH_PASS]: zpass\n    }),\n\n  viewport: (update, x, y, width, height) =>\n    update({\n      [GL.VIEWPORT]: new Int32Array([x, y, width, height])\n    })\n};\n"],"file":"webgl-function-to-parameters-table.js"}