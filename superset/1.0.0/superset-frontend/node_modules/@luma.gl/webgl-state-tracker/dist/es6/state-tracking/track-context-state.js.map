{"version":3,"sources":["../../../src/state-tracking/track-context-state.js"],"names":["GL_STATE_SETTERS","GL_PARAMETER_DEFAULTS","setParameters","getParameters","assert","deepArrayEqual","installGetterOverride","gl","functionName","originalGetterFunc","bind","get","params","pname","state","cache","enable","Object","defineProperty","value","configurable","installSetterSpy","setter","originalSetterFunc","set","valueChanged","oldValue","_updateCache","log","GLState","constructor","copyState","stateStack","assign","seal","push","values","pop","length","oldValues","key","undefined","trackContextState","global_","global","window","polyfillContext","pushContextState","popContextState"],"mappings":"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","sourcesContent":["// Support for listening to context state changes and intercepting state queries\n//\n// NOTE: this system does not handle buffer bindings\nimport GL_STATE_SETTERS from './webgl-function-to-parameters-table';\nimport {GL_PARAMETER_DEFAULTS} from '../unified-parameter-api/webgl-parameter-tables';\nimport {setParameters, getParameters} from '../unified-parameter-api/unified-parameter-api';\nimport {assert, deepArrayEqual} from '../utils';\n\n// HELPER FUNCTIONS - INSTALL GET/SET INTERCEPTORS (SPYS) ON THE CONTEXT\n\n// Overrides a WebGLRenderingContext state \"getter\" function\n// to return values directly from cache\nfunction installGetterOverride(gl, functionName) {\n  // Get the original function from the WebGLRenderingContext\n  const originalGetterFunc = gl[functionName].bind(gl);\n\n  // Wrap it with a spy so that we can update our state cache when it gets called\n  gl[functionName] = function get(...params) {\n    const pname = params[0];\n\n    // WebGL limits are not prepopulated in the cache, we must\n    // query first time. They are all primitive (single value)\n    if (!(pname in gl.state.cache)) {\n      gl.state.cache[pname] = originalGetterFunc(...params);\n    }\n\n    // Optionally call the original function to do a \"hard\" query from the WebGLRenderingContext\n    return gl.state.enable\n      ? // Call the getter the params so that it can e.g. serve from a cache\n        gl.state.cache[pname]\n      : // Optionally call the original function to do a \"hard\" query from the WebGLRenderingContext\n        originalGetterFunc(...params);\n  };\n\n  // Set the name of this anonymous function to help in debugging and profiling\n  Object.defineProperty(gl[functionName], 'name', {\n    value: `${functionName}-from-cache`,\n    configurable: false\n  });\n}\n\n// Overrides a WebGLRenderingContext state \"setter\" function\n// to call a setter spy before the actual setter. Allows us to keep a cache\n// updated with a copy of the WebGL context state.\nfunction installSetterSpy(gl, functionName, setter) {\n  // Get the original function from the WebGLRenderingContext\n  const originalSetterFunc = gl[functionName].bind(gl);\n\n  // Wrap it with a spy so that we can update our state cache when it gets called\n  gl[functionName] = function set(...params) {\n    // Update the value\n    // Call the setter with the state cache and the params so that it can store the parameters\n    const {valueChanged, oldValue} = setter(gl.state._updateCache, ...params);\n\n    // Call the original WebGLRenderingContext func to make sure the context actually gets updated\n    if (valueChanged) {\n      gl.state.log(`gl.${functionName}`, ...params); // eslint-disable-line\n      originalSetterFunc(...params);\n    }\n\n    // Note: if the original function fails to set the value, our state cache will be bad\n    // No solution for this at the moment, but assuming that this is unlikely to be a real problem\n    // We could call the setter after the originalSetterFunc. Concern is that this would\n    // cause different behavior in debug mode, where originalSetterFunc can throw exceptions\n\n    return oldValue;\n  };\n\n  // Set the name of this anonymous function to help in debugging and profiling\n  Object.defineProperty(gl[functionName], 'name', {\n    value: `${functionName}-to-cache`,\n    configurable: false\n  });\n}\n\n// HELPER CLASS - GLState\n\n/* eslint-disable no-shadow */\nclass GLState {\n  constructor(\n    gl,\n    {\n      copyState = false, // Copy cache from params (slow) or initialize from WebGL defaults (fast)\n      log = () => {} // Logging function, called when gl parameter change calls are actually issued\n    } = {}\n  ) {\n    this.gl = gl;\n    this.stateStack = [];\n    this.enable = true;\n    this.cache = copyState ? getParameters(gl) : Object.assign({}, GL_PARAMETER_DEFAULTS);\n    this.log = log;\n\n    this._updateCache = this._updateCache.bind(this);\n    Object.seal(this);\n  }\n\n  push(values = {}) {\n    this.stateStack.push({});\n  }\n\n  pop() {\n    assert(this.stateStack.length > 0);\n    // Use the saved values in the state stack to restore parameters\n    const oldValues = this.stateStack[this.stateStack.length - 1];\n    setParameters(this.gl, oldValues, this.cache);\n    // Don't pop until we have reset parameters (to make sure other \"stack frames\" are not affected)\n    this.stateStack.pop();\n  }\n\n  // interceptor for context set functions - update our cache and our stack\n  // values (Object) - the key values for this setter\n  _updateCache(values) {\n    let valueChanged = false;\n    let oldValue; // = undefined\n\n    const oldValues = this.stateStack.length > 0 && this.stateStack[this.stateStack.length - 1];\n\n    for (const key in values) {\n      assert(key !== undefined);\n      // Check that value hasn't already been shadowed\n      if (!deepArrayEqual(values[key], this.cache[key])) {\n        valueChanged = true;\n        oldValue = this.cache[key];\n\n        // First, save current value being shadowed\n        // If a state stack frame is active, save the current parameter values for pop\n        // but first check that value hasn't already been shadowed and saved\n        if (oldValues && !(key in oldValues)) {\n          oldValues[key] = this.cache[key];\n        }\n\n        // Save current value being shadowed\n        this.cache[key] = values[key];\n      }\n    }\n\n    return {valueChanged, oldValue};\n  }\n}\n\n// PUBLIC API\n\n/**\n * Initialize WebGL state caching on a context\n * can be called multiple times to enable/disable\n * @param {WebGLRenderingContext} - context\n */\n// After calling this function, context state will be cached\n// gl.state.push() and gl.state.pop() will be available for saving,\n// temporarily modifying, and then restoring state.\nexport default function trackContextState(gl, {enable = true, copyState} = {}) {\n  assert(copyState !== undefined);\n  if (!gl.state) {\n    /* global window, global */\n    const global_ = typeof global !== 'undefined' ? global : window;\n    if (global_.polyfillContext) {\n      global_.polyfillContext(gl);\n    }\n\n    // Create a state cache\n    gl.state = new GLState(gl, {copyState, enable});\n\n    // intercept all setter functions in the table\n    for (const key in GL_STATE_SETTERS) {\n      const setter = GL_STATE_SETTERS[key];\n      installSetterSpy(gl, key, setter);\n    }\n\n    // intercept all getter functions in the table\n    installGetterOverride(gl, 'getParameter');\n    installGetterOverride(gl, 'isEnabled');\n  }\n\n  gl.state.enable = enable;\n\n  return gl;\n}\n\nexport function pushContextState(gl) {\n  if (!gl.state) {\n    trackContextState(gl, {copyState: false});\n  }\n  gl.state.push();\n}\n\nexport function popContextState(gl) {\n  assert(gl.state);\n  gl.state.pop();\n}\n"],"file":"track-context-state.js"}