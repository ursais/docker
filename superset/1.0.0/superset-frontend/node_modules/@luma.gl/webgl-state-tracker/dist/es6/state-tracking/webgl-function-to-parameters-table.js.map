{"version":3,"sources":["../../../src/state-tracking/webgl-function-to-parameters-table.js"],"names":["enable","update","capability","disable","pixelStorei","pname","value","hint","bindFramebuffer","target","framebuffer","blendColor","r","g","b","a","Float32Array","blendEquation","mode","blendEquationSeparate","modeRGB","modeAlpha","blendFunc","src","dst","blendFuncSeparate","srcRGB","dstRGB","srcAlpha","dstAlpha","clearColor","clearDepth","depth","clearStencil","s","colorMask","cullFace","depthFunc","func","depthRange","zNear","zFar","depthMask","mask","frontFace","face","lineWidth","width","polygonOffset","factor","units","sampleCoverage","invert","scissor","x","y","height","Int32Array","stencilMask","stencilMaskSeparate","stencilFunc","ref","stencilFuncSeparate","stencilOp","fail","zfail","zpass","stencilOpSeparate","viewport"],"mappings":"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","sourcesContent":["// Replacements for WebGL state setting functions that call supplied 'update'\n// function setting the individual parameters.\n// i.e. these \"setters\" map functions to gl parameters\n\n// The 'update' function is used to interceptor WEBGL functions that set\n// WebGLRenderingContext state so that state changes can be tracked.\n\n// It also enables checking values against cache and avoid unnecessary WebGL\n// set/get operations.\n\nimport GL from '@luma.gl/constants';\n\nexport default {\n  // GENERIC SETTERS\n\n  enable: (update, capability) =>\n    update({\n      [capability]: true\n    }),\n  disable: (update, capability) =>\n    update({\n      [capability]: false\n    }),\n  pixelStorei: (update, pname, value) =>\n    update({\n      [pname]: value\n    }),\n  hint: (update, pname, hint) =>\n    update({\n      [pname]: hint\n    }),\n\n  // SPECIFIC SETTERS\n\n  bindFramebuffer: (update, target, framebuffer) => {\n    switch (target) {\n      case GL.FRAMEBUFFER:\n        return update({\n          [GL.DRAW_FRAMEBUFFER_BINDING]: framebuffer,\n          [GL.READ_FRAMEBUFFER_BINDING]: framebuffer\n        });\n      case GL.DRAW_FRAMEBUFFER:\n        return update({[GL.DRAW_FRAMEBUFFER_BINDING]: framebuffer});\n      case GL.READ_FRAMEBUFFER:\n        return update({[GL.READ_FRAMEBUFFER_BINDING]: framebuffer});\n      default:\n        return null;\n    }\n  },\n  blendColor: (update, r, g, b, a) =>\n    update({\n      [GL.BLEND_COLOR]: new Float32Array([r, g, b, a])\n    }),\n\n  blendEquation: (update, mode) =>\n    update({\n      [GL.BLEND_EQUATION_RGB]: mode,\n      [GL.BLEND_EQUATION_ALPHA]: mode\n    }),\n\n  blendEquationSeparate: (update, modeRGB, modeAlpha) =>\n    update({\n      [GL.BLEND_EQUATION_RGB]: modeRGB,\n      [GL.BLEND_EQUATION_ALPHA]: modeAlpha\n    }),\n\n  blendFunc: (update, src, dst) =>\n    update({\n      [GL.BLEND_SRC_RGB]: src,\n      [GL.BLEND_DST_RGB]: dst,\n      [GL.BLEND_SRC_ALPHA]: src,\n      [GL.BLEND_DST_ALPHA]: dst\n    }),\n\n  blendFuncSeparate: (update, srcRGB, dstRGB, srcAlpha, dstAlpha) =>\n    update({\n      [GL.BLEND_SRC_RGB]: srcRGB,\n      [GL.BLEND_DST_RGB]: dstRGB,\n      [GL.BLEND_SRC_ALPHA]: srcAlpha,\n      [GL.BLEND_DST_ALPHA]: dstAlpha\n    }),\n\n  clearColor: (update, r, g, b, a) =>\n    update({\n      [GL.COLOR_CLEAR_VALUE]: new Float32Array([r, g, b, a])\n    }),\n\n  clearDepth: (update, depth) =>\n    update({\n      [GL.DEPTH_CLEAR_VALUE]: depth\n    }),\n\n  clearStencil: (update, s) =>\n    update({\n      [GL.STENCIL_CLEAR_VALUE]: s\n    }),\n\n  colorMask: (update, r, g, b, a) =>\n    update({\n      [GL.COLOR_WRITEMASK]: [r, g, b, a]\n    }),\n\n  cullFace: (update, mode) =>\n    update({\n      [GL.CULL_FACE_MODE]: mode\n    }),\n\n  depthFunc: (update, func) =>\n    update({\n      [GL.DEPTH_FUNC]: func\n    }),\n\n  depthRange: (update, zNear, zFar) =>\n    update({\n      [GL.DEPTH_RANGE]: new Float32Array([zNear, zFar])\n    }),\n\n  depthMask: (update, mask) =>\n    update({\n      [GL.DEPTH_WRITEMASK]: mask\n    }),\n\n  frontFace: (update, face) =>\n    update({\n      [GL.FRONT_FACE]: face\n    }),\n\n  lineWidth: (update, width) =>\n    update({\n      [GL.LINE_WIDTH]: width\n    }),\n\n  polygonOffset: (update, factor, units) =>\n    update({\n      [GL.POLYGON_OFFSET_FACTOR]: factor,\n      [GL.POLYGON_OFFSET_UNITS]: units\n    }),\n\n  sampleCoverage: (update, value, invert) =>\n    update({\n      [GL.SAMPLE_COVERAGE_VALUE]: value,\n      [GL.SAMPLE_COVERAGE_INVERT]: invert\n    }),\n\n  scissor: (update, x, y, width, height) =>\n    update({\n      [GL.SCISSOR_BOX]: new Int32Array([x, y, width, height])\n    }),\n\n  stencilMask: (update, mask) =>\n    update({\n      [GL.STENCIL_WRITEMASK]: mask,\n      [GL.STENCIL_BACK_WRITEMASK]: mask\n    }),\n\n  stencilMaskSeparate: (update, face, mask) =>\n    update({\n      [face === GL.FRONT ? GL.STENCIL_WRITEMASK : GL.STENCIL_BACK_WRITEMASK]: mask\n    }),\n\n  stencilFunc: (update, func, ref, mask) =>\n    update({\n      [GL.STENCIL_FUNC]: func,\n      [GL.STENCIL_REF]: ref,\n      [GL.STENCIL_VALUE_MASK]: mask,\n      [GL.STENCIL_BACK_FUNC]: func,\n      [GL.STENCIL_BACK_REF]: ref,\n      [GL.STENCIL_BACK_VALUE_MASK]: mask\n    }),\n\n  stencilFuncSeparate: (update, face, func, ref, mask) =>\n    update({\n      [face === GL.FRONT ? GL.STENCIL_FUNC : GL.STENCIL_BACK_FUNC]: func,\n      [face === GL.FRONT ? GL.STENCIL_REF : GL.STENCIL_BACK_REF]: ref,\n      [face === GL.FRONT ? GL.STENCIL_VALUE_MASK : GL.STENCIL_BACK_VALUE_MASK]: mask\n    }),\n\n  stencilOp: (update, fail, zfail, zpass) =>\n    update({\n      [GL.STENCIL_FAIL]: fail,\n      [GL.STENCIL_PASS_DEPTH_FAIL]: zfail,\n      [GL.STENCIL_PASS_DEPTH_PASS]: zpass,\n      [GL.STENCIL_BACK_FAIL]: fail,\n      [GL.STENCIL_BACK_PASS_DEPTH_FAIL]: zfail,\n      [GL.STENCIL_BACK_PASS_DEPTH_PASS]: zpass\n    }),\n\n  stencilOpSeparate: (update, face, fail, zfail, zpass) =>\n    update({\n      [face === GL.FRONT ? GL.STENCIL_FAIL : GL.STENCIL_BACK_FAIL]: fail,\n      [face === GL.FRONT ? GL.STENCIL_PASS_DEPTH_FAIL : GL.STENCIL_BACK_PASS_DEPTH_FAIL]: zfail,\n      [face === GL.FRONT ? GL.STENCIL_PASS_DEPTH_PASS : GL.STENCIL_BACK_PASS_DEPTH_PASS]: zpass\n    }),\n\n  viewport: (update, x, y, width, height) =>\n    update({\n      [GL.VIEWPORT]: new Int32Array([x, y, width, height])\n    })\n};\n"],"file":"webgl-function-to-parameters-table.js"}