{"version":3,"sources":["../../../src/state-tracking/track-context-state.js"],"names":["installGetterOverride","gl","functionName","originalGetterFunc","bind","get","pname","state","cache","enable","Object","defineProperty","value","configurable","installSetterSpy","setter","originalSetterFunc","set","params","_updateCache","valueChanged","oldValue","log","GLState","copyState","stateStack","assign","GL_PARAMETER_DEFAULTS","seal","values","push","length","oldValues","pop","key","undefined","trackContextState","global_","global","window","polyfillContext","GL_STATE_SETTERS","pushContextState","popContextState"],"mappings":"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","sourcesContent":["// Support for listening to context state changes and intercepting state queries\n//\n// NOTE: this system does not handle buffer bindings\nimport GL_STATE_SETTERS from './webgl-function-to-parameters-table';\nimport {GL_PARAMETER_DEFAULTS} from '../unified-parameter-api/webgl-parameter-tables';\nimport {setParameters, getParameters} from '../unified-parameter-api/unified-parameter-api';\nimport {assert, deepArrayEqual} from '../utils';\n\n// HELPER FUNCTIONS - INSTALL GET/SET INTERCEPTORS (SPYS) ON THE CONTEXT\n\n// Overrides a WebGLRenderingContext state \"getter\" function\n// to return values directly from cache\nfunction installGetterOverride(gl, functionName) {\n  // Get the original function from the WebGLRenderingContext\n  const originalGetterFunc = gl[functionName].bind(gl);\n\n  // Wrap it with a spy so that we can update our state cache when it gets called\n  gl[functionName] = function get(...params) {\n    const pname = params[0];\n\n    // WebGL limits are not prepopulated in the cache, we must\n    // query first time. They are all primitive (single value)\n    if (!(pname in gl.state.cache)) {\n      gl.state.cache[pname] = originalGetterFunc(...params);\n    }\n\n    // Optionally call the original function to do a \"hard\" query from the WebGLRenderingContext\n    return gl.state.enable\n      ? // Call the getter the params so that it can e.g. serve from a cache\n        gl.state.cache[pname]\n      : // Optionally call the original function to do a \"hard\" query from the WebGLRenderingContext\n        originalGetterFunc(...params);\n  };\n\n  // Set the name of this anonymous function to help in debugging and profiling\n  Object.defineProperty(gl[functionName], 'name', {\n    value: `${functionName}-from-cache`,\n    configurable: false\n  });\n}\n\n// Overrides a WebGLRenderingContext state \"setter\" function\n// to call a setter spy before the actual setter. Allows us to keep a cache\n// updated with a copy of the WebGL context state.\nfunction installSetterSpy(gl, functionName, setter) {\n  // Get the original function from the WebGLRenderingContext\n  const originalSetterFunc = gl[functionName].bind(gl);\n\n  // Wrap it with a spy so that we can update our state cache when it gets called\n  gl[functionName] = function set(...params) {\n    // Update the value\n    // Call the setter with the state cache and the params so that it can store the parameters\n    const {valueChanged, oldValue} = setter(gl.state._updateCache, ...params);\n\n    // Call the original WebGLRenderingContext func to make sure the context actually gets updated\n    if (valueChanged) {\n      gl.state.log(`gl.${functionName}`, ...params); // eslint-disable-line\n      originalSetterFunc(...params);\n    }\n\n    // Note: if the original function fails to set the value, our state cache will be bad\n    // No solution for this at the moment, but assuming that this is unlikely to be a real problem\n    // We could call the setter after the originalSetterFunc. Concern is that this would\n    // cause different behavior in debug mode, where originalSetterFunc can throw exceptions\n\n    return oldValue;\n  };\n\n  // Set the name of this anonymous function to help in debugging and profiling\n  Object.defineProperty(gl[functionName], 'name', {\n    value: `${functionName}-to-cache`,\n    configurable: false\n  });\n}\n\n// HELPER CLASS - GLState\n\n/* eslint-disable no-shadow */\nclass GLState {\n  constructor(\n    gl,\n    {\n      copyState = false, // Copy cache from params (slow) or initialize from WebGL defaults (fast)\n      log = () => {} // Logging function, called when gl parameter change calls are actually issued\n    } = {}\n  ) {\n    this.gl = gl;\n    this.stateStack = [];\n    this.enable = true;\n    this.cache = copyState ? getParameters(gl) : Object.assign({}, GL_PARAMETER_DEFAULTS);\n    this.log = log;\n\n    this._updateCache = this._updateCache.bind(this);\n    Object.seal(this);\n  }\n\n  push(values = {}) {\n    this.stateStack.push({});\n  }\n\n  pop() {\n    assert(this.stateStack.length > 0);\n    // Use the saved values in the state stack to restore parameters\n    const oldValues = this.stateStack[this.stateStack.length - 1];\n    setParameters(this.gl, oldValues, this.cache);\n    // Don't pop until we have reset parameters (to make sure other \"stack frames\" are not affected)\n    this.stateStack.pop();\n  }\n\n  // interceptor for context set functions - update our cache and our stack\n  // values (Object) - the key values for this setter\n  _updateCache(values) {\n    let valueChanged = false;\n    let oldValue; // = undefined\n\n    const oldValues = this.stateStack.length > 0 && this.stateStack[this.stateStack.length - 1];\n\n    for (const key in values) {\n      assert(key !== undefined);\n      // Check that value hasn't already been shadowed\n      if (!deepArrayEqual(values[key], this.cache[key])) {\n        valueChanged = true;\n        oldValue = this.cache[key];\n\n        // First, save current value being shadowed\n        // If a state stack frame is active, save the current parameter values for pop\n        // but first check that value hasn't already been shadowed and saved\n        if (oldValues && !(key in oldValues)) {\n          oldValues[key] = this.cache[key];\n        }\n\n        // Save current value being shadowed\n        this.cache[key] = values[key];\n      }\n    }\n\n    return {valueChanged, oldValue};\n  }\n}\n\n// PUBLIC API\n\n/**\n * Initialize WebGL state caching on a context\n * can be called multiple times to enable/disable\n * @param {WebGLRenderingContext} - context\n */\n// After calling this function, context state will be cached\n// gl.state.push() and gl.state.pop() will be available for saving,\n// temporarily modifying, and then restoring state.\nexport default function trackContextState(gl, {enable = true, copyState} = {}) {\n  assert(copyState !== undefined);\n  if (!gl.state) {\n    /* global window, global */\n    const global_ = typeof global !== 'undefined' ? global : window;\n    if (global_.polyfillContext) {\n      global_.polyfillContext(gl);\n    }\n\n    // Create a state cache\n    gl.state = new GLState(gl, {copyState, enable});\n\n    // intercept all setter functions in the table\n    for (const key in GL_STATE_SETTERS) {\n      const setter = GL_STATE_SETTERS[key];\n      installSetterSpy(gl, key, setter);\n    }\n\n    // intercept all getter functions in the table\n    installGetterOverride(gl, 'getParameter');\n    installGetterOverride(gl, 'isEnabled');\n  }\n\n  gl.state.enable = enable;\n\n  return gl;\n}\n\nexport function pushContextState(gl) {\n  if (!gl.state) {\n    trackContextState(gl, {copyState: false});\n  }\n  gl.state.push();\n}\n\nexport function popContextState(gl) {\n  assert(gl.state);\n  gl.state.pop();\n}\n"],"file":"track-context-state.js"}