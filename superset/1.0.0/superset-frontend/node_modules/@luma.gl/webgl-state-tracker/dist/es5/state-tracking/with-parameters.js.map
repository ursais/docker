{"version":3,"sources":["../../../src/state-tracking/with-parameters.js"],"names":["withParameters","gl","parameters","func","nocatch","frameBuffer","value"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;AAIO,SAASA,cAAT,CAAwBC,EAAxB,EAA4BC,UAA5B,EAAwCC,IAAxC,EAA8C;AAGnD,MAAI,0BAAcD,UAAd,CAAJ,EAA+B;AAE7B,WAAOC,IAAI,CAACF,EAAD,CAAX;AACD;;AANkD,4BAQ1BC,UAR0B,CAQ5CE,OAR4C;AAAA,MAQ5CA,OAR4C,oCAQlC,IARkC;AAYnD,qBAAO,CAACF,UAAU,CAACG,WAAnB;AAEA,2CAAiBJ,EAAjB;AACA,oCAAcA,EAAd,EAAkBC,UAAlB;AAGA,MAAII,KAAJ;;AAEA,MAAIF,OAAJ,EAAa;AAEXE,IAAAA,KAAK,GAAGH,IAAI,CAACF,EAAD,CAAZ;AACA,4CAAgBA,EAAhB;AACD,GAJD,MAIO;AAEL,QAAI;AACFK,MAAAA,KAAK,GAAGH,IAAI,CAACF,EAAD,CAAZ;AACD,KAFD,SAEU;AACR,8CAAgBA,EAAhB;AACD;AACF;;AAED,SAAOK,KAAP;AACD","sourcesContent":["import {pushContextState, popContextState} from './track-context-state';\nimport {setParameters} from '../unified-parameter-api/set-parameters';\nimport {assert, isObjectEmpty} from '../utils';\n\n// Stores current \"global\" WebGL context settings, changes selected parameters,\n// executes function, restores parameters\nexport function withParameters(gl, parameters, func) {\n  // assertWebGLContext(gl);\n\n  if (isObjectEmpty(parameters)) {\n    // Avoid setting state if no parameters provided. Just call and return\n    return func(gl);\n  }\n\n  const {nocatch = true} = parameters;\n\n  // frameBuffer not supported: use framebuffer API\n  // TODO - is this still true?\n  assert(!parameters.frameBuffer);\n\n  pushContextState(gl);\n  setParameters(gl, parameters);\n\n  // Setup is done, call the function\n  let value;\n\n  if (nocatch) {\n    // Avoid try catch to minimize stack size impact for safe execution paths\n    value = func(gl);\n    popContextState(gl);\n  } else {\n    // Wrap in a try-catch to ensure that parameters are restored on exceptions\n    try {\n      value = func(gl);\n    } finally {\n      popContextState(gl);\n    }\n  }\n\n  return value;\n}\n"],"file":"with-parameters.js"}