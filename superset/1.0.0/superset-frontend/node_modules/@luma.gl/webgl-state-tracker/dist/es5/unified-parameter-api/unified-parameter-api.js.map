{"version":3,"sources":["../../../src/unified-parameter-api/unified-parameter-api.js"],"names":["setParameter","gl","key","value","getter","GL_PARAMETER_GETTERS","prevValue","Number","getParameter","setter","GL_PARAMETER_SETTERS","setParameters","values","compositeSetters","glConstant","cache","state","mergedValues","Object","assign","compositeSetter","GL_COMPOSITE_PARAMETER_SETTERS","getParameters","parameters","GL_PARAMETER_DEFAULTS","parameterKeys","Array","isArray","keys","getDefaultParameters","resetParameters","getModifiedParameters","modified"],"mappings":"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","sourcesContent":["// Provides a unified API for getting and setting any WebGL parameter\n// Also knows default values of all parameters, enabling fast cache initialization\n// Provides base functionality for the state caching.\nimport {\n  GL_PARAMETER_DEFAULTS,\n  GL_PARAMETER_SETTERS,\n  GL_COMPOSITE_PARAMETER_SETTERS,\n  GL_PARAMETER_GETTERS\n} from './webgl-parameter-tables';\n\nimport deepArrayEqual from '../utils/deep-array-equal';\nimport {assert} from '../utils';\n\n// PUBLIC METHODS\n\n// Sets any single GL parameter regardless of function (gl.getParameter/gl.isEnabled...)\n// Returns the previous value\n// Note: limited to parameter values\nexport function setParameter(gl, key, value) {\n  const getter = GL_PARAMETER_GETTERS[key];\n  const prevValue = getter ? getter(gl, Number(key)) : gl.getParameter(Number(key));\n  const setter = GL_PARAMETER_SETTERS[key];\n  assert(typeof setter === 'function');\n  setter(gl, value, Number(key));\n  return prevValue;\n}\n\n// Sets any GL parameter regardless of function (gl.blendMode, ...)\n// Note: requires a `cache` object to be set on the context (gl.state.cache)\n// This object is used to fill in any missing values for composite setter functions\nexport function setParameters(gl, values) {\n  const compositeSetters = {};\n\n  // HANDLE PRIMITIVE SETTERS (and make note of any composite setters)\n\n  for (const key in values) {\n    const glConstant = Number(key);\n    const setter = GL_PARAMETER_SETTERS[key];\n    if (setter) {\n      // Composite setters should only be called once, so save them\n      if (typeof setter === 'string') {\n        compositeSetters[setter] = true;\n      } else {\n        // if (gl[glConstant] !== undefined) {\n        // TODO - added above check since this is being called on WebGL2 values in WebGL1...\n        // TODO - deep equal on values? only call setter if value has changed?\n        // NOTE - the setter will automatically update this.state\n        setter(gl, values[key], glConstant);\n      }\n    }\n  }\n\n  // HANDLE COMPOSITE SETTERS\n\n  // NOTE: any non-provided values needed by composite setters are filled in from state cache\n  // The cache parameter is automatically retrieved from the context\n  // This depends on `trackContextState`, which is technically a \"circular\" dependency.\n  // But it is too inconvenient to always require a cache parameter here.\n  // This is the ONLY external dependency in this module/\n  const cache = gl.state && gl.state.cache;\n  if (cache) {\n    const mergedValues = Object.assign({}, cache, values);\n\n    for (const key in compositeSetters) {\n      // TODO - avoid calling composite setters if values have not changed.\n      const compositeSetter = GL_COMPOSITE_PARAMETER_SETTERS[key];\n      // Note - if `trackContextState` has been called,\n      // the setter will automatically update this.state.cache\n      compositeSetter(gl, mergedValues);\n    }\n  }\n  // Add a log for the else case?\n}\n\n// Queries any single GL parameter regardless of function (gl.getParameter/gl.isEnabled...)\nexport function getParameter(gl, key) {\n  const getter = GL_PARAMETER_GETTERS[key];\n  return getter ? getter(gl, Number(key)) : gl.getParameter(Number(key));\n}\n\n// Copies the state from a context (gl.getParameter should not be overriden)\n// Reads the entire WebGL state from a context\n// Caveat: This generates a huge amount of synchronous driver roundtrips and should be\n// considered a very slow operation, to be used only if/when a context already manipulated\n// by external code needs to be synchronized for the first time\n// @return {Object} - a newly created map, with values keyed by GL parameters\nexport function getParameters(gl, parameters) {\n  // default to querying all parameters\n  parameters = parameters || GL_PARAMETER_DEFAULTS;\n  // support both arrays of parameters and objects (keys represent parameters)\n  const parameterKeys = Array.isArray(parameters) ? parameters : Object.keys(parameters);\n\n  const state = {};\n  for (const key of parameterKeys) {\n    state[key] = getParameter(gl, key);\n  }\n  return state;\n}\n\nexport function getDefaultParameters(gl) {\n  // TODO - Query GL.VIEWPORT and GL.SCISSOR_BOX since these are dynamic\n  return Object.assign({}, GL_PARAMETER_DEFAULTS, {\n    // TODO: For viewport and scissor default values are set at the time of\n    // context creation based on canvas size, we can query them here but it will\n    // not match with what we have in GL_PARAMETER_DEFAULTS table, we should revisit.\n    // [GL.VIEWPORT]: gl.constructor.prototype.getParameter.call(gl, GL.VIEWPORT),\n    // [GL.SCISSOR_BOX]: gl.constructor.prototype.getParameter.call(gl, GL.SCISSOR_BOX)\n  });\n}\n\n// Reset all parameters to a pure context state\nexport function resetParameters(gl) {\n  setParameters(gl, getDefaultParameters(gl));\n}\n\n// Get all parameters that have been modified from a pure context state\nexport function getModifiedParameters(gl) {\n  const values = getParameters(gl, Object.keys(GL_PARAMETER_DEFAULTS));\n  const modified = {};\n  for (const key in GL_PARAMETER_DEFAULTS) {\n    if (!deepArrayEqual(values[key], GL_PARAMETER_DEFAULTS[key])) {\n      modified[key] = values[key];\n    }\n  }\n  return modified;\n}\n"],"file":"unified-parameter-api.js"}