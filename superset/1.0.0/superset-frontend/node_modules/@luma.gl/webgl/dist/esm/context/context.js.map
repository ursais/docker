{"version":3,"sources":["../../../src/context/context.js"],"names":["trackContextState","createHeadlessContext","getCanvas","createBrowserContext","getContextDebugInfo","WebGL2RenderingContext","log","isBrowser","assert","getDevicePixelRatio","global","ERR_CONTEXT","ERR_WEBGL","ERR_WEBGL2","isWebGL","gl","Boolean","Number","isFinite","_version","isWebGL2","assertWebGLContext","assertWebGL2Context","contextDefaults","webgl2","webgl1","throwOnFailure","manageState","canvas","debug","width","height","setGLContextDefaults","options","Object","assign","createGLContext","onError","message","throwOnError","Error","targetCanvas","instrumentGLContext","logInfo","_instrumented","getVersion","luma","canvasSizeInfo","copyState","args","makeDebugContext","warn","priority","Math","max","destroyGLContext","ext","getExtension","destroy","resizeGLContext","devicePixelRatio","useDevicePixels","setDevicePixelRatio","resize","webGL","info","driver","vendor","renderer","clientWidth","clientHeight","cachedSize","clampedPixelRatio","canvasWidth","floor","canvasHeight","drawingBufferWidth","drawingBufferHeight","min"],"mappings":"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","sourcesContent":["/* eslint-disable quotes */\n// WebGLRenderingContext related methods\nimport {trackContextState} from '@luma.gl/webgl-state-tracker';\n\nimport {createHeadlessContext} from './create-headless-context';\nimport {getCanvas} from './create-canvas';\nimport {createBrowserContext} from './create-browser-context';\nimport {getContextDebugInfo} from '../debug/get-context-debug-info';\n\nimport {WebGL2RenderingContext} from '../webgl-utils';\n\nimport {log, isBrowser, assert, getDevicePixelRatio} from '../utils';\nimport {global} from '../utils/globals';\n\nexport const ERR_CONTEXT = 'Invalid WebGLRenderingContext';\nexport const ERR_WEBGL = ERR_CONTEXT;\nexport const ERR_WEBGL2 = 'Requires WebGL2';\n\nexport function isWebGL(gl) {\n  return Boolean(gl && Number.isFinite(gl._version));\n}\n\nexport function isWebGL2(gl) {\n  return Boolean(gl && gl._version === 2);\n}\n\nexport function assertWebGLContext(gl) {\n  // Need to handle debug context\n  assert(isWebGL(gl), ERR_CONTEXT);\n}\n\nexport function assertWebGL2Context(gl) {\n  // Need to handle debug context\n  assert(isWebGL2(gl), ERR_WEBGL2);\n}\n\nconst contextDefaults = {\n  // COMMON CONTEXT PARAMETERS\n  // Attempt to allocate WebGL2 context\n  webgl2: true, // Attempt to create a WebGL2 context (false to force webgl1)\n  webgl1: true, // Attempt to create a WebGL1 context (false to fail if webgl2 not available)\n  throwOnFailure: true,\n  manageState: true,\n  // BROWSER CONTEXT PARAMETERS\n  canvas: null, // A canvas element or a canvas string id\n  debug: false, // Instrument context (at the expense of performance)\n  // HEADLESS CONTEXT PARAMETERS\n  width: 800, // width are height are only used by headless gl\n  height: 600\n  // WEBGL/HEADLESS CONTEXT PARAMETERS\n  // Remaining options are passed through to context creator\n};\n\n/*\n * Change default context creation parameters.\n * Main use case is regression test suite.\n */\nexport function setGLContextDefaults(options = {}) {\n  Object.assign(contextDefaults, {width: 1, height: 1}, options);\n}\n\n/*\n * Creates a context giving access to the WebGL API\n */\n/* eslint-disable complexity, max-statements */\nexport function createGLContext(options = {}) {\n  options = Object.assign({}, contextDefaults, options);\n  const {width, height} = options;\n\n  // Error reporting function, enables exceptions to be disabled\n  function onError(message) {\n    if (options.throwOnError) {\n      throw new Error(message);\n    }\n    return null;\n  }\n\n  let gl;\n  if (isBrowser) {\n    // Get or create a canvas\n    const {canvas} = options;\n    const targetCanvas = getCanvas({canvas, width, height, onError});\n    // Create a WebGL context in the canvas\n    gl = createBrowserContext(targetCanvas, options);\n  } else {\n    // Create a headless-gl context under Node.js\n    gl = createHeadlessContext({...options, width, height, onError});\n  }\n\n  if (!gl) {\n    return null;\n  }\n\n  gl = instrumentGLContext(gl, options);\n\n  // Log some debug info about the newly created context\n  logInfo(gl);\n\n  // Add to seer integration\n  return gl;\n}\n\nexport function instrumentGLContext(gl, options = {}) {\n  // Avoid multiple instrumentations\n  if (gl._instrumented) {\n    return gl;\n  }\n\n  gl._version = gl._version || getVersion(gl);\n\n  // Cache canvas size information to avoid setting it on every frame.\n  gl.luma = gl.luma || {};\n  gl.luma.canvasSizeInfo = gl.luma.canvasSizeInfo || {};\n\n  options = Object.assign({}, contextDefaults, options);\n  const {manageState, debug} = options;\n\n  // Install context state tracking\n  if (manageState) {\n    trackContextState(gl, {\n      copyState: false,\n      log: (...args) => log.log(1, ...args)()\n    });\n  }\n\n  // Add debug instrumentation to the context\n  if (isBrowser && debug) {\n    if (!global.makeDebugContext) {\n      log.warn('WebGL debug mode not activated. import \"@luma.gl/debug\" to enable.')();\n    } else {\n      gl = global.makeDebugContext(gl, options);\n      // Debug forces log level to at least 1\n      log.priority = Math.max(log.priority, 1);\n    }\n  }\n\n  gl._instrumented = true;\n\n  return gl;\n}\n\nexport function destroyGLContext(gl) {\n  // TODO - Remove from seer integration\n\n  // TODO - Unregister any tracking/polyfills\n\n  // There is no way to delete browser based context\n\n  // Destroy headless gl context\n  const ext = gl.getExtension('STACKGL_destroy_context');\n  if (ext) {\n    ext.destroy();\n  }\n}\n\n/**\n * Resize the canvas' drawing buffer.\n *\n * Can match the canvas CSS size, and optionally also consider devicePixelRatio\n * Can be called every frame\n *\n * Regardless of size, the drawing buffer will always be scaled to the viewport, but\n * for best visual results, usually set to either:\n *  canvas CSS width x canvas CSS height\n *  canvas CSS width * devicePixelRatio x canvas CSS height * devicePixelRatio\n * See http://webgl2fundamentals.org/webgl/lessons/webgl-resizing-the-canvas.html\n *\n * resizeGLContext(gl, {width, height, useDevicePixels})\n */\nexport function resizeGLContext(gl, options = {}) {\n  // Resize browser context\n  if (gl.canvas) {\n    const devicePixelRatio = getDevicePixelRatio(options.useDevicePixels);\n    setDevicePixelRatio(gl, devicePixelRatio, options);\n    return;\n  }\n\n  // Resize headless gl context\n  const ext = gl.getExtension('STACKGL_resize_drawingbuffer');\n  if (ext && `width` in options && `height` in options) {\n    ext.resize(options.width, options.height);\n  }\n}\n\n// HELPER METHODS\n\nfunction logInfo(gl) {\n  const webGL = isWebGL2(gl) ? 'WebGL2' : 'WebGL1';\n  const info = getContextDebugInfo(gl);\n  const driver = info ? `(${info.vendor},${info.renderer})` : '';\n  const debug = gl.debug ? ' debug' : '';\n  log.info(1, `${webGL}${debug} context ${driver}`)();\n}\n\nfunction getVersion(gl) {\n  if (typeof WebGL2RenderingContext !== 'undefined' && gl instanceof WebGL2RenderingContext) {\n    // WebGL2 context.\n    return 2;\n  }\n  // Must be a WebGL1 context.\n  return 1;\n}\n\n// use devicePixelRatio to set canvas width and height\nfunction setDevicePixelRatio(gl, devicePixelRatio, options) {\n  // NOTE: if options.width and options.height not used remove in v8\n  const clientWidth =\n    'width' in options ? options.width : gl.canvas.clientWidth || gl.canvas.width || 1;\n  const clientHeight =\n    'height' in options ? options.height : gl.canvas.clientHeight || gl.canvas.height || 1;\n\n  gl.luma = gl.luma || {};\n  gl.luma.canvasSizeInfo = gl.luma.canvasSizeInfo || {};\n  const cachedSize = gl.luma.canvasSizeInfo;\n  // Check if canvas needs to be resized\n  if (\n    cachedSize.clientWidth !== clientWidth ||\n    cachedSize.clientHeight !== clientHeight ||\n    cachedSize.devicePixelRatio !== devicePixelRatio\n  ) {\n    let clampedPixelRatio = devicePixelRatio;\n\n    const canvasWidth = Math.floor(clientWidth * clampedPixelRatio);\n    const canvasHeight = Math.floor(clientHeight * clampedPixelRatio);\n    gl.canvas.width = canvasWidth;\n    gl.canvas.height = canvasHeight;\n\n    // Note: when devicePixelRatio is too high, it is possible we might hit system limit for\n    // drawing buffer width and hight, in those cases they get clamped and resulting aspect ration may not be maintained\n    // for those cases, reduce devicePixelRatio.\n    if (gl.drawingBufferWidth !== canvasWidth || gl.drawingBufferHeight !== canvasHeight) {\n      log.warn(`Device pixel ratio clamped`)();\n      clampedPixelRatio = Math.min(\n        gl.drawingBufferWidth / clientWidth,\n        gl.drawingBufferHeight / clientHeight\n      );\n\n      gl.canvas.width = Math.floor(clientWidth * clampedPixelRatio);\n      gl.canvas.height = Math.floor(clientHeight * clampedPixelRatio);\n    }\n\n    Object.assign(gl.luma.canvasSizeInfo, {clientWidth, clientHeight, devicePixelRatio});\n  }\n}\n"],"file":"context.js"}