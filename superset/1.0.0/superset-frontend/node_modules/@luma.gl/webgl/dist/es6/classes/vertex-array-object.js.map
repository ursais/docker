{"version":3,"sources":["../../../src/classes/vertex-array-object.js"],"names":["Resource","Buffer","isWebGL2","getScratchArray","fillArray","assert","getBrowser","OES_vertex_array_object","ERR_ELEMENTS","VertexArrayObject","isSupported","gl","options","constantAttributeZero","getExtension","getDefaultArray","luma","defaultVertexArray","handle","isDefaultArray","getMaxAttributes","MAX_ATTRIBUTES","getParameter","setConstant","location","array","constructor","Float32Array","_setConstantFloatArray","Int32Array","_setConstantIntArray","Uint32Array","_setConstantUintArray","opts","id","program","Object","assign","hasVertexArrays","buffer","bufferValue","initialize","seal","delete","props","setProps","setElementBuffer","elementBuffer","target","bind","bindBuffer","setBuffer","accessor","size","type","stride","offset","normalized","integer","divisor","Number","vertexAttribIPointer","vertexAttribPointer","enableVertexAttribArray","vertexAttribDivisor","enable","disablingAttributeZero","disableVertexAttribArray","getConstantBuffer","elementCount","value","constantValue","_normalizeConstantArrayValue","byteLength","length","updateNeeded","reallocate","_compareConstantArrayValues","typedArray","source","start","count","subData","arrayValue","Array","isArray","v1","v2","i","vertexAttrib1fv","vertexAttrib2fv","vertexAttrib3fv","vertexAttrib4fv","vertexAttribI1iv","vertexAttribI2iv","vertexAttribI3iv","vertexAttribI4iv","vertexAttribI1uiv","vertexAttribI2uiv","vertexAttribI3uiv","vertexAttribI4uiv","_createHandle","createVertexArray","_deleteHandle","deleteVertexArray","elements","_bindHandle","bindVertexArray","_getParameter","pname","isFinite","getVertexAttribOffset","getVertexAttrib"],"mappings":"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","sourcesContent":["import GL from '@luma.gl/constants';\nimport Resource from './resource';\nimport Buffer from './buffer';\nimport {isWebGL2} from '../webgl-utils';\nimport {getScratchArray, fillArray} from '../utils/array-utils-flat';\nimport {assert} from '../utils';\nimport {getBrowser} from 'probe.gl';\n\n/* eslint-disable camelcase */\nconst OES_vertex_array_object = 'OES_vertex_array_object';\n\nconst ERR_ELEMENTS = 'elements must be GL.ELEMENT_ARRAY_BUFFER';\n\nexport default class VertexArrayObject extends Resource {\n  static isSupported(gl, options = {}) {\n    // Attribute 0 can not be disable on most desktop OpenGL based browsers\n    // and on iOS Safari browser.\n    if (options.constantAttributeZero) {\n      return isWebGL2(gl) || getBrowser() === 'Chrome';\n    }\n\n    // Whether additional objects can be created\n    return isWebGL2(gl) || gl.getExtension(OES_vertex_array_object);\n  }\n\n  // Returns the global (null) vertex array object. Exists even when no extension available\n  static getDefaultArray(gl) {\n    gl.luma = gl.luma || {};\n    if (!gl.luma.defaultVertexArray) {\n      gl.luma.defaultVertexArray = new VertexArrayObject(gl, {handle: null, isDefaultArray: true});\n    }\n    return gl.luma.defaultVertexArray;\n  }\n\n  static getMaxAttributes(gl) {\n    // TODO - should be cached per context\n    VertexArrayObject.MAX_ATTRIBUTES =\n      VertexArrayObject.MAX_ATTRIBUTES || gl.getParameter(gl.MAX_VERTEX_ATTRIBS);\n    return VertexArrayObject.MAX_ATTRIBUTES;\n  }\n\n  // Note: Constants are stored globally on the WebGL context, not the VAO\n  // So they need to be updated before every render\n  // TODO - use known type (in configuration or passed in) to allow non-typed arrays?\n  // TODO - remember/cache values to avoid setting them unnecessarily?\n  static setConstant(gl, location, array) {\n    switch (array.constructor) {\n      case Float32Array:\n        VertexArrayObject._setConstantFloatArray(gl, location, array);\n        break;\n      case Int32Array:\n        VertexArrayObject._setConstantIntArray(gl, location, array);\n        break;\n      case Uint32Array:\n        VertexArrayObject._setConstantUintArray(gl, location, array);\n        break;\n      default:\n        assert(false);\n    }\n  }\n\n  // Create a VertexArray\n  constructor(gl, opts = {}) {\n    // Use program's id if program but no id is supplied\n    const id = opts.id || (opts.program && opts.program.id);\n    super(gl, Object.assign({}, opts, {id}));\n\n    this.hasVertexArrays = VertexArrayObject.isSupported(gl);\n    this.buffer = null;\n    this.bufferValue = null;\n    // this.isDefaultArray = opts.isDefaultArray || false;\n\n    this.initialize(opts);\n\n    Object.seal(this);\n  }\n\n  delete() {\n    super.delete();\n    if (this.buffer) {\n      this.buffer.delete();\n    }\n  }\n\n  get MAX_ATTRIBUTES() {\n    return VertexArrayObject.getMaxAttributes(this.gl);\n  }\n\n  initialize(props = {}) {\n    return this.setProps(props);\n  }\n\n  setProps(props) {\n    // TODO: decide which props should be supported\n    return this;\n  }\n\n  // Set (bind) an elements buffer, for indexed rendering.\n  // Must be a Buffer bound to GL.ELEMENT_ARRAY_BUFFER. Constants not supported\n  setElementBuffer(elementBuffer = null, opts = {}) {\n    assert(!elementBuffer || elementBuffer.target === GL.ELEMENT_ARRAY_BUFFER, ERR_ELEMENTS);\n\n    // The GL.ELEMENT_ARRAY_BUFFER_BINDING is stored on the VertexArrayObject...\n    this.bind(() => {\n      this.gl.bindBuffer(GL.ELEMENT_ARRAY_BUFFER, elementBuffer ? elementBuffer.handle : null);\n    });\n\n    return this;\n  }\n\n  // Set a location in vertex attributes array to a bufferk, enables the location, sets divisor\n  setBuffer(location, buffer, accessor) {\n    // Check target\n    if (buffer.target === GL.ELEMENT_ARRAY_BUFFER) {\n      return this.setElementBuffer(buffer, accessor);\n    }\n\n    const {size, type, stride, offset, normalized, integer, divisor} = accessor;\n\n    const {gl} = this;\n    location = Number(location);\n\n    this.bind(() => {\n      // A non-zero buffer object must be bound to the GL_ARRAY_BUFFER target\n      gl.bindBuffer(gl.ARRAY_BUFFER, buffer.handle);\n\n      // WebGL2 supports *integer* data formats, i.e. GPU will see integer values\n      if (integer) {\n        assert(isWebGL2(gl));\n        gl.vertexAttribIPointer(location, size, type, stride, offset);\n      } else {\n        // Attaches ARRAY_BUFFER with specified buffer format to location\n        gl.vertexAttribPointer(location, size, type, normalized, stride, offset);\n      }\n      gl.enableVertexAttribArray(location);\n      gl.vertexAttribDivisor(location, divisor || 0);\n\n      // NOTE We don't unbind buffer here, typically another buffer will be bound just after\n    });\n\n    return this;\n  }\n\n  // Enabling an attribute location makes it reference the currently bound buffer\n  // Disabling an attribute location makes it reference the global constant value\n  // TODO - handle single values for size 1 attributes?\n  // TODO - convert classic arrays based on known type?\n  enable(location, enable = true) {\n    // Attribute 0 cannot be disabled in most desktop OpenGL based browsers\n    const disablingAttributeZero =\n      !enable &&\n      location === 0 &&\n      !VertexArrayObject.isSupported(this.gl, {constantAttributeZero: true});\n\n    if (!disablingAttributeZero) {\n      location = Number(location);\n      this.bind(\n        () =>\n          enable\n            ? this.gl.enableVertexAttribArray(location)\n            : this.gl.disableVertexAttribArray(location)\n      );\n    }\n    return this;\n  }\n\n  // Provide a means to create a buffer that is equivalent to a constant.\n  // NOTE: Desktop OpenGL cannot disable attribute 0.\n  // https://stackoverflow.com/questions/20305231/webgl-warning-attribute-0-is-disabled-\n  // this-has-significant-performance-penalt\n  getConstantBuffer(elementCount, value, accessor) {\n    // Create buffer only when needed, and reuse it (avoids inflating buffer creation statistics)\n\n    const constantValue = this._normalizeConstantArrayValue(value, accessor);\n\n    const byteLength = constantValue.byteLength * elementCount;\n    const length = constantValue.length * elementCount;\n\n    let updateNeeded = !this.buffer;\n\n    this.buffer = this.buffer || new Buffer(this.gl, byteLength);\n    updateNeeded = updateNeeded || this.buffer.reallocate(byteLength);\n\n    // Reallocate and update contents if needed\n    updateNeeded =\n      updateNeeded || !this._compareConstantArrayValues(constantValue, this.bufferValue);\n\n    if (updateNeeded) {\n      // Create a typed array that is big enough, and fill it with the required data\n      const typedArray = getScratchArray(value.constructor, length);\n      fillArray({target: typedArray, source: constantValue, start: 0, count: length});\n      this.buffer.subData(typedArray);\n      this.bufferValue = value;\n    }\n\n    return this.buffer;\n  }\n\n  // PRIVATE\n\n  // TODO - convert Arrays based on known type? (read type from accessor, don't assume Float32Array)\n  // TODO - handle single values for size 1 attributes?\n  _normalizeConstantArrayValue(arrayValue, accessor) {\n    if (Array.isArray(arrayValue)) {\n      return new Float32Array(arrayValue);\n    }\n    return arrayValue;\n  }\n\n  _compareConstantArrayValues(v1, v2) {\n    if (!v1 || !v2 || v1.length !== v2.length || v1.constructor !== v2.constructor) {\n      return false;\n    }\n    for (let i = 0; i < v1.length; ++i) {\n      if (v1[i] !== v2[i]) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  static _setConstantFloatArray(gl, location, array) {\n    switch (array.length) {\n      case 1:\n        gl.vertexAttrib1fv(location, array);\n        break;\n      case 2:\n        gl.vertexAttrib2fv(location, array);\n        break;\n      case 3:\n        gl.vertexAttrib3fv(location, array);\n        break;\n      case 4:\n        gl.vertexAttrib4fv(location, array);\n        break;\n      default:\n        assert(false);\n    }\n  }\n\n  static _setConstantIntArray(gl, location, array) {\n    assert(isWebGL2(gl));\n    switch (array.length) {\n      case 1:\n        gl.vertexAttribI1iv(location, array);\n        break;\n      case 2:\n        gl.vertexAttribI2iv(location, array);\n        break;\n      case 3:\n        gl.vertexAttribI3iv(location, array);\n        break;\n      case 4:\n        gl.vertexAttribI4iv(location, array);\n        break;\n      default:\n        assert(false);\n    }\n  }\n\n  static _setConstantUintArray(gl, location, array) {\n    assert(isWebGL2(gl));\n    switch (array.length) {\n      case 1:\n        gl.vertexAttribI1uiv(location, array);\n        break;\n      case 2:\n        gl.vertexAttribI2uiv(location, array);\n        break;\n      case 3:\n        gl.vertexAttribI3uiv(location, array);\n        break;\n      case 4:\n        gl.vertexAttribI4uiv(location, array);\n        break;\n      default:\n        assert(false);\n    }\n  }\n\n  // RESOURCE IMPLEMENTATION\n\n  _createHandle() {\n    this.hasVertexArrays = VertexArrayObject.isSupported(this.gl);\n    if (this.hasVertexArrays) {\n      return this.gl.createVertexArray();\n    }\n    return null;\n  }\n\n  _deleteHandle(handle) {\n    if (this.hasVertexArrays) {\n      this.gl.deleteVertexArray(handle);\n    }\n    return [this.elements];\n    // return [this.elements, ...this.buffers];\n  }\n\n  _bindHandle(handle) {\n    if (this.hasVertexArrays) {\n      this.gl.bindVertexArray(handle);\n    }\n  }\n\n  // Generic getter for information about a vertex attribute at a given position\n  _getParameter(pname, {location}) {\n    assert(Number.isFinite(location));\n    return this.bind(() => {\n      switch (pname) {\n        case GL.VERTEX_ATTRIB_ARRAY_POINTER:\n          return this.gl.getVertexAttribOffset(location, pname);\n        default:\n          return this.gl.getVertexAttrib(location, pname);\n      }\n    });\n  }\n\n  // DEPRECATED\n\n  /*\n  setDivisor(location, divisor) {\n    location = Number(location);\n    this.bind(() => this.gl.vertexAttribDivisor(location, divisor));\n    return this;\n  }\n\n  // match assumed WebGL defaults\n  static resetConstants(gl) {\n    const MAX_ATTRIBUTES = VertexArrayObject.getMaxAttributes(gl);\n    for (let i = 0; i < MAX_ATTRIBUTES; i++) {\n      VertexArrayObject.setConstant(gl, i, [0, 0, 0, 1]);\n    }\n  }\n\n  // Resets all attributes (to default valued constants)\n  resetAttributes() {\n    // WebGL offers disabling, but no clear way to set a VertexArray buffer to `null`\n    // But Chrome does not like buffers that are bound to several binding points.\n    // So we just bind all the attributes to the dummy \"attribute zero\" buffer\n    this.buffer = this.buffer || new Buffer(this.gl, {size: 4});\n\n    for (const location in this.values) {\n      if (this.values[location] instanceof Buffer) {\n        this.gl.disableVertexAttribArray(location);\n        this.gl.bindBuffer(GL.ARRAY_BUFFER, this.buffer.handle);\n        this.gl.vertexAttribPointer(location, 1, GL.FLOAT, false, 0, 0);\n      }\n    }\n\n    this.setElementBuffer(null);\n    return this;\n  }\n  */\n}\n"],"file":"vertex-array-object.js"}