{"version":3,"sources":["../../../src/classes/vertex-array.js"],"names":["ERR_ATTRIBUTE_TYPE","MULTI_LOCATION_ATTRIBUTE_REGEXP","DEPRECATIONS_V6","VertexArray","gl","opts","id","program","configuration","elements","elementsAccessor","values","accessors","unused","drawParams","buffer","attributes","vertexArrayObject","VertexArrayObject","isSupported","getDefaultArray","initialize","Object","seal","props","reset","bindOnUse","setProps","MAX_ATTRIBUTES","Array","fill","setAttributes","setElementBuffer","appParameters","_updateDrawParams","assign","bind","locationOrName","value","_setAttribute","bindBuffer","elementBuffer","accessor","clearDrawParams","isDefaultArray","appAccessor","target","_resolveLocationAndAccessor","location","setBuffer","arrayValue","size","length","_normalizeConstantArrayValue","enable","Buffer","disableVertexAttribArray","handle","vertexAttribPointer","vertexCount","instanceCount","func","_setConstantAttributes","hasVertexArrays","bindBuffers","unbindBuffers","valueAccessor","_getAttributeIndex","name","Number","isFinite","log","once","accessInfo","_getAttributeInfo","Accessor","resolve","type","attributeName","getAttributeInfo","multiLocation","exec","locationOffset","getAttributeLocation","isArray","ArrayBuffer","isView","constant","setConstant","Error","elementCount","Math","max","_setConstantAttributeZero","_setConstantAttribute","constantAttributeZero","getConstantBuffer","isIndexed","isInstanced","indexCount","Infinity","_updateDrawParamsForLocation","getElementCount","indexType","indexOffset","offset","divisor","getVertexCount","min","deprecated"],"mappings":"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","sourcesContent":["import GL from '@luma.gl/constants';\nimport Accessor from './accessor';\nimport Buffer from './buffer';\nimport VertexArrayObject from './vertex-array-object';\nimport {log, assert, stubRemovedMethods} from '../utils';\n\nconst ERR_ATTRIBUTE_TYPE =\n  'VertexArray: attributes must be Buffers or constants (i.e. typed array)';\n\n// This is done to support mat type attributes.\n// See section \"Notes about setting mat type attributes\"\n// in vertex-array.md\nconst MULTI_LOCATION_ATTRIBUTE_REGEXP = /^(.+)__LOCATION_([0-9]+)$/;\n\nconst DEPRECATIONS_V6 = [\n  'setBuffers',\n  'setGeneric',\n  'clearBindings',\n  'setLocations',\n  'setGenericValues',\n  'setDivisor',\n  'enable',\n  'disable'\n];\n\nexport default class VertexArray {\n  constructor(gl, opts = {}) {\n    // Use program's id if program is supplied but no id is supplied\n    const id = opts.id || (opts.program && opts.program.id);\n    // super(gl, Object.assign({}, opts, {id}));\n\n    this.id = id;\n    this.gl = gl;\n    this.configuration = null;\n\n    // Extracted information\n    this.elements = null;\n    this.elementsAccessor = null;\n    this.values = null;\n    this.accessors = null;\n    this.unused = null;\n    this.drawParams = null;\n    this.buffer = null; // For attribute 0 on desktops, and created when unbinding buffers\n\n    this.attributes = {};\n\n    this.vertexArrayObject = VertexArrayObject.isSupported(gl)\n      ? new VertexArrayObject(gl)\n      : VertexArrayObject.getDefaultArray(gl);\n\n    // Issue errors when using removed methods\n    stubRemovedMethods(this, 'VertexArray', 'v6.0', DEPRECATIONS_V6);\n\n    this.initialize(opts);\n    Object.seal(this);\n  }\n\n  delete() {\n    if (this.buffer) {\n      this.buffer.delete();\n    }\n  }\n\n  initialize(props = {}) {\n    this.reset();\n    this.configuration = null;\n    this.bindOnUse = false;\n    return this.setProps(props);\n  }\n\n  // Resets all attributes (to default valued constants)\n  reset() {\n    // this.vertexArrayObject.reset();\n\n    this.elements = null;\n    this.elementsAccessor = null;\n    const {MAX_ATTRIBUTES} = this.vertexArrayObject;\n    this.values = new Array(MAX_ATTRIBUTES).fill(null);\n    this.accessors = new Array(MAX_ATTRIBUTES).fill(null);\n    this.unused = {};\n\n    // Auto detects draw params\n    this.drawParams = null;\n\n    return this;\n  }\n\n  setProps(props) {\n    if ('program' in props) {\n      this.configuration = props.program && props.program.configuration;\n    }\n    if ('configuration' in props) {\n      this.configuration = props.configuration;\n    }\n    if ('attributes' in props) {\n      this.setAttributes(props.attributes);\n    }\n    if ('elements' in props) {\n      this.setElementBuffer(props.elements);\n    }\n    if ('bindOnUse' in props) {\n      props = props.bindOnUse;\n    }\n    return this;\n  }\n\n  // Automatically called if buffers changed through VertexArray API\n  clearDrawParams() {\n    this.drawParams = null;\n  }\n\n  getDrawParams(appParameters) {\n    // Auto deduced draw parameters\n    this.drawParams = this.drawParams || this._updateDrawParams();\n\n    // Override with any application supplied draw parameters\n    return Object.assign({}, this.drawParams, appParameters);\n  }\n\n  // Set (bind) an array or map of vertex array buffers, either in numbered or named locations.\n  // For names that are not present in `location`, the supplied buffers will be ignored.\n  // if a single buffer of type GL.ELEMENT_ARRAY_BUFFER is present, it will be set as elements\n  //   Signatures:\n  //     {attributeName: buffer}\n  //     {attributeName: [buffer, accessor]}\n  //     {attributeName: (typed) array} => constant\n  setAttributes(attributes) {\n    Object.assign(this.attributes, attributes);\n    this.vertexArrayObject.bind(() => {\n      for (const locationOrName in attributes) {\n        const value = attributes[locationOrName];\n        this._setAttribute(locationOrName, value);\n      }\n      // Make sure we don't leave any bindings\n      this.gl.bindBuffer(GL.ARRAY_BUFFER, null);\n    });\n\n    return this;\n  }\n\n  // Set (bind) an elements buffer, for indexed rendering.\n  // Must be a Buffer bound to GL.ELEMENT_ARRAY_BUFFER. Constants not supported\n  setElementBuffer(elementBuffer = null, accessor = {}) {\n    this.elements = elementBuffer; // Save value for debugging\n    this.elementsAccessor = accessor;\n    this.clearDrawParams();\n\n    // Update vertexArray immediately if we have our own array\n    if (!this.vertexArrayObject.isDefaultArray) {\n      this.vertexArrayObject.setElementBuffer(elementBuffer, accessor);\n    }\n    return this;\n  }\n\n  // Set a location in vertex attributes array to a buffer\n  setBuffer(locationOrName, buffer, appAccessor = {}) {\n    // Check target\n    if (buffer.target === GL.ELEMENT_ARRAY_BUFFER) {\n      return this.setElementBuffer(buffer, appAccessor);\n    }\n\n    const {location, accessor} = this._resolveLocationAndAccessor(\n      locationOrName,\n      buffer,\n      buffer.accessor,\n      appAccessor\n    );\n\n    if (location >= 0) {\n      this.values[location] = buffer;\n      this.accessors[location] = accessor;\n      this.clearDrawParams();\n\n      // Update vertexArray immediately if we have our own array\n      if (!this.vertexArrayObject.isDefaultArray) {\n        this.vertexArrayObject.setBuffer(location, buffer, accessor);\n      }\n    }\n\n    return this;\n  }\n\n  // Set attribute to constant value (small typed array corresponding to one vertex' worth of data)\n  setConstant(locationOrName, arrayValue, appAccessor = {}) {\n    const {location, accessor} = this._resolveLocationAndAccessor(\n      locationOrName,\n      arrayValue,\n      // Ensure that size isn't taken from program for multi-column\n      // attributes\n      Object.assign({size: arrayValue.length}, appAccessor)\n    );\n\n    if (location >= 0) {\n      arrayValue = this.vertexArrayObject._normalizeConstantArrayValue(arrayValue, accessor);\n\n      this.values[location] = arrayValue;\n      this.accessors[location] = accessor;\n      this.clearDrawParams();\n\n      // Update vertexArray immediately if we have our own array\n      // NOTE: We set the actual constant value later on bind. We can't set the value now since\n      // constants are global and affect all other VertexArrays that have disabled attributes\n      // in the same location.\n      // We do disable the attribute which makes it use the global constant value at that location\n      if (!this.vertexArrayObject.isDefaultArray) {\n        this.vertexArrayObject.enable(location, false);\n      }\n    }\n\n    return this;\n  }\n\n  // Workaround for Chrome TransformFeedback binding issue\n  // If required, unbind temporarily to avoid conflicting with TransformFeedback\n  unbindBuffers() {\n    this.vertexArrayObject.bind(() => {\n      if (this.elements) {\n        // Update vertexArray immediately if we have our own array\n        if (!this.vertexArrayObject.isDefaultArray) {\n          this.vertexArrayObject.setElementBuffer(null);\n        }\n      }\n\n      // Chrome does not like buffers that are bound to several binding points,\n      // so we need to offer and unbind facility\n      // WebGL offers disabling, but no clear way to set a VertexArray buffer to `null`\n      // So we just bind all the attributes to the dummy \"attribute zero\" buffer\n      this.buffer = this.buffer || new Buffer(this.gl, {accessor: {size: 4}});\n\n      for (let location = 0; location < this.vertexArrayObject.MAX_ATTRIBUTES; location++) {\n        if (this.values[location] instanceof Buffer) {\n          this.gl.disableVertexAttribArray(location);\n          this.gl.bindBuffer(GL.ARRAY_BUFFER, this.buffer.handle);\n          this.gl.vertexAttribPointer(location, 1, GL.FLOAT, false, 0, 0);\n        }\n      }\n    });\n    return this;\n  }\n\n  // Workaround for Chrome TransformFeedback binding issue\n  // If required, rebind rebind after temporary unbind\n  bindBuffers() {\n    this.vertexArrayObject.bind(() => {\n      if (this.elements) {\n        this.setElementBuffer(this.elements);\n      }\n\n      for (let location = 0; location < this.vertexArrayObject.MAX_ATTRIBUTES; location++) {\n        const buffer = this.values[location];\n        if (buffer instanceof Buffer) {\n          this.setBuffer(location, buffer);\n        }\n      }\n    });\n    return this;\n  }\n\n  // Bind for use\n  // When a vertex array is about to be used, we must:\n  // - Set constant attributes (since these are stored on the context and reset on bind)\n  // - Check if we need to initialize the buffer\n  bindForDraw(vertexCount, instanceCount, func) {\n    let value;\n\n    this.vertexArrayObject.bind(() => {\n      // Make sure that any constant attributes are updated (stored on the context, not the VAO)\n      // Also handles attribute 0\n      this._setConstantAttributes(vertexCount, instanceCount);\n\n      if (!this.vertexArrayObject.hasVertexArrays) {\n        this.bindBuffers();\n      }\n\n      value = func();\n\n      if (!this.vertexArrayObject.hasVertexArrays) {\n        this.unbindBuffers();\n      }\n    });\n\n    return value;\n  }\n\n  // PRIVATE\n\n  // Resolve locations and accessors\n  _resolveLocationAndAccessor(locationOrName, value, valueAccessor, appAccessor) {\n    const {location, name} = this._getAttributeIndex(locationOrName);\n    if (!Number.isFinite(location) || location < 0) {\n      this.unused[locationOrName] = value;\n      log.once(3, () => `unused value ${locationOrName} in ${this.id}`)();\n      return this;\n    }\n\n    const accessInfo = this._getAttributeInfo(name || location);\n\n    // Attribute location wasn't directly found.\n    // Likely due to multi-location attributes (e.g. matrix)\n    if (!accessInfo) {\n      return {\n        location: -1,\n        accessor: null\n      };\n    }\n\n    // Resolve the partial accessors into a final accessor\n    const accessor = Accessor.resolve(accessInfo.accessor, valueAccessor, appAccessor);\n\n    const {size, type} = accessor;\n    assert(Number.isFinite(size) && Number.isFinite(type));\n\n    return {location, accessor};\n  }\n\n  _getAttributeInfo(attributeName) {\n    return this.configuration && this.configuration.getAttributeInfo(attributeName);\n  }\n\n  _getAttributeIndex(locationOrName) {\n    const location = Number(locationOrName);\n    if (Number.isFinite(location)) {\n      return {location};\n    }\n\n    const multiLocation = MULTI_LOCATION_ATTRIBUTE_REGEXP.exec(locationOrName);\n    const name = multiLocation ? multiLocation[1] : locationOrName;\n    const locationOffset = multiLocation ? Number(multiLocation[2]) : 0;\n\n    if (this.configuration) {\n      return {\n        location: this.configuration.getAttributeLocation(name) + locationOffset,\n        name\n      };\n    }\n\n    return {location: -1};\n  }\n\n  _setAttribute(locationOrName, value) {\n    if (value instanceof Buffer) {\n      //  Signature: {attributeName: Buffer}\n      this.setBuffer(locationOrName, value);\n    } else if (Array.isArray(value) && value.length && value[0] instanceof Buffer) {\n      // Signature: {attributeName: [buffer, accessor]}\n      const buffer = value[0];\n      const accessor = value[1];\n      this.setBuffer(locationOrName, buffer, accessor);\n    } else if (ArrayBuffer.isView(value) || Array.isArray(value)) {\n      // Signature: {attributeName: constant}, constant == short (typed) array\n      const constant = value;\n      this.setConstant(locationOrName, constant);\n    } else if (value.buffer instanceof Buffer) {\n      // luma.gl v7: Support accessor objects with 'buffer' field\n      // for interleaved data\n      // Signature: {attributeName: {...accessor, buffer}}\n      const accessor = value;\n      this.setBuffer(locationOrName, accessor.buffer, accessor);\n    } else {\n      throw new Error(ERR_ATTRIBUTE_TYPE);\n    }\n  }\n\n  // Updates all constant attribute values (constants are used when vertex attributes are disabled).\n  // This needs to be done repeatedly since in contrast to buffer bindings,\n  // constants are stored on the WebGL context, not the VAO\n  _setConstantAttributes(vertexCount, instanceCount) {\n    // TODO - use accessor to determine what length to use\n    const elementCount = Math.max(vertexCount | 0, instanceCount | 0);\n    let constant = this.values[0];\n    if (ArrayBuffer.isView(constant)) {\n      this._setConstantAttributeZero(constant, elementCount);\n    }\n\n    for (let location = 1; location < this.vertexArrayObject.MAX_ATTRIBUTES; location++) {\n      constant = this.values[location];\n      if (ArrayBuffer.isView(constant)) {\n        this._setConstantAttribute(location, constant);\n      }\n    }\n  }\n\n  _setConstantAttributeZero(constant, elementCount) {\n    if (VertexArrayObject.isSupported(this.gl, {constantAttributeZero: true})) {\n      this._setConstantAttribute(0, constant);\n      return;\n    }\n\n    // Get a dummy buffer populated with repeated constants\n    const buffer = this.vertexArrayObject.getConstantBuffer(elementCount, constant);\n\n    // Set the buffer on location 0\n    this.vertexArrayObject.setBuffer(0, buffer, this.accessors[0]);\n  }\n\n  _setConstantAttribute(location, constant) {\n    VertexArrayObject.setConstant(this.gl, location, constant);\n\n    // If we are using the global VertexArrayObject, we need to disable the attribute now\n    if (this.vertexArrayObject.isDefaultArray) {\n      this.vertexArrayObject.enable(location, false);\n    }\n  }\n\n  // Walks the buffers and updates draw parameters\n  _updateDrawParams() {\n    const drawParams = {\n      isIndexed: false,\n      isInstanced: false,\n      indexCount: Infinity,\n      vertexCount: Infinity,\n      instanceCount: Infinity\n    };\n\n    for (let location = 0; location < this.vertexArrayObject.MAX_ATTRIBUTES; location++) {\n      this._updateDrawParamsForLocation(drawParams, location);\n    }\n\n    if (this.elements) {\n      // indexing is autodetected - buffer with target GL.ELEMENT_ARRAY_BUFFER\n      // index type is saved for drawElement calls\n      drawParams.elementCount = this.elements.getElementCount(this.elements.accessor);\n      drawParams.isIndexed = true;\n      drawParams.indexType = this.elementsAccessor.type || this.elements.accessor.type;\n      drawParams.indexOffset = this.elementsAccessor.offset || 0;\n    }\n\n    // Post-calculation checks\n    if (drawParams.indexCount === Infinity) {\n      drawParams.indexCount = 0;\n    }\n    if (drawParams.vertexCount === Infinity) {\n      drawParams.vertexCount = 0;\n    }\n    if (drawParams.instanceCount === Infinity) {\n      drawParams.instanceCount = 0;\n    }\n\n    return drawParams;\n  }\n\n  _updateDrawParamsForLocation(drawParams, location) {\n    const value = this.values[location];\n    const accessor = this.accessors[location];\n\n    if (!value) {\n      return;\n    }\n\n    // Check if instanced (whether buffer or constant)\n    const {divisor} = accessor;\n    const isInstanced = divisor > 0;\n    drawParams.isInstanced = drawParams.isInstanced || isInstanced;\n\n    if (value instanceof Buffer) {\n      const buffer = value;\n\n      if (isInstanced) {\n        // instance attribute\n        const instanceCount = buffer.getVertexCount(accessor);\n        drawParams.instanceCount = Math.min(drawParams.instanceCount, instanceCount);\n      } else {\n        // normal attribute\n        const vertexCount = buffer.getVertexCount(accessor);\n        drawParams.vertexCount = Math.min(drawParams.vertexCount, vertexCount);\n      }\n    }\n  }\n\n  // DEPRECATED in v6.x - but not warnings not properly implemented\n\n  setElements(elementBuffer = null, accessor = {}) {\n    log.deprecated('setElements', 'setElementBuffer')();\n    return this.setElementBuffer(elementBuffer, accessor);\n  }\n}\n"],"file":"vertex-array.js"}