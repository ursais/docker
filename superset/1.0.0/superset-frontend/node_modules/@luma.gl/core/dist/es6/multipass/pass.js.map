{"version":3,"sources":["../../../src/multipass/pass.js"],"names":["Framebuffer","withParameters","Pass","constructor","gl","props","id","enabled","screen","swap","Object","assign","setProps","render","renderState","animationProps","renderParams","outputBuffer","writeBuffer","inputBuffer","readBuffer","swapBuffers","_swapFramebuffers","getDefaultFramebuffer","framebuffer","_renderPass","debug","log","delete"],"mappings":"AAMA,SAAQA,WAAR,EAAqBC,cAArB,QAA0C,gBAA1C;AAEA,eAAe,MAAMC,IAAN,CAAW;AACxBC,EAAAA,WAAW,CAACC,EAAD,EAAKC,KAAK,GAAG,EAAb,EAAiB;AAC1B,UAAM;AAACC,MAAAA,EAAE,GAAG;AAAN,QAAgBD,KAAtB;AACA,SAAKC,EAAL,GAAUA,EAAV;AACA,SAAKF,EAAL,GAAUA,EAAV;AACA,SAAKC,KAAL,GAAa;AAACE,MAAAA,OAAO,EAAE,IAAV;AAAgBC,MAAAA,MAAM,EAAE,KAAxB;AAA+BC,MAAAA,IAAI,EAAE;AAArC,KAAb;AACAC,IAAAA,MAAM,CAACC,MAAP,CAAc,KAAKN,KAAnB,EAA0BA,KAA1B;AACD;;AAEDO,EAAAA,QAAQ,CAACP,KAAD,EAAQ;AACdK,IAAAA,MAAM,CAACC,MAAP,CAAc,KAAKN,KAAnB,EAA0BA,KAA1B;AACD;;AAEDQ,EAAAA,MAAM,CAACC,WAAD,EAAcC,cAAd,EAA8B;AAClC,QAAI,CAAC,KAAKV,KAAL,CAAWE,OAAhB,EAAyB;AACvB;AACD;;AAED,UAAMH,EAAE,GAAG,KAAKA,EAAhB;AAEA,UAAMY,YAAY,GAAG;AACnBZ,MAAAA,EADmB;AAEnBa,MAAAA,YAAY,EAAEH,WAAW,CAACI,WAFP;AAGnBC,MAAAA,WAAW,EAAEL,WAAW,CAACM,UAHN;AAInBL,MAAAA,cAJmB;AAKnBM,MAAAA,WAAW,EAAE,MAAMP,WAAW,CAACQ,iBAAZ;AALA,KAArB;;AAUA,QAAI,KAAKjB,KAAL,CAAWG,MAAf,EAAuB;AACrBQ,MAAAA,YAAY,CAACG,WAAb,GAA2BH,YAAY,CAACC,YAAxC;AACAD,MAAAA,YAAY,CAACC,YAAb,GAA4BjB,WAAW,CAACuB,qBAAZ,CAAkCnB,EAAlC,CAA5B;AACD,KAHD,MAGO,IAAI,KAAKC,KAAL,CAAWI,IAAf,EAAqB;AAC1BO,MAAAA,YAAY,CAACG,WAAb,GAA2BL,WAAW,CAACI,WAAvC;AACAF,MAAAA,YAAY,CAACC,YAAb,GAA4BH,WAAW,CAACM,UAAxC;AACD;;AAEDnB,IAAAA,cAAc,CAACG,EAAD,EAAK;AAACoB,MAAAA,WAAW,EAAER,YAAY,CAACC;AAA3B,KAAL,EAA+C,MAC3D,KAAKQ,WAAL,CAAiBT,YAAjB,CADY,CAAd;;AAIA,QAAI,KAAKX,KAAL,CAAWqB,KAAf,EAAsB;AACpBV,MAAAA,YAAY,CAACC,YAAb,CAA0BU,GAA1B,CAA8B,CAA9B,EAAiC,KAAKrB,EAAtC;AACD;;AAED,QAAI,KAAKD,KAAL,CAAWI,IAAf,EAAqB;AACnBK,MAAAA,WAAW,CAACQ,iBAAZ;AACD;AACF;;AAEDM,EAAAA,MAAM,GAAG,CAER;;AAQDH,EAAAA,WAAW,CAAC;AAACrB,IAAAA,EAAD;AAAKe,IAAAA,WAAL;AAAkBF,IAAAA,YAAlB;AAAgCF,IAAAA;AAAhC,GAAD,EAAkD,CAE5D;;AA/DuB","sourcesContent":["//\n// A base render pass.\n//\n// Attribution: This class and the multipass system were inspired by\n// the THREE.js EffectComposer and *Pass classes\n\nimport {Framebuffer, withParameters} from '@luma.gl/webgl';\n\nexport default class Pass {\n  constructor(gl, props = {}) {\n    const {id = 'pass'} = props;\n    this.id = id; // id of this pass\n    this.gl = gl;\n    this.props = {enabled: true, screen: false, swap: false};\n    Object.assign(this.props, props);\n  }\n\n  setProps(props) {\n    Object.assign(this.props, props);\n  }\n\n  render(renderState, animationProps) {\n    if (!this.props.enabled) {\n      return;\n    }\n\n    const gl = this.gl;\n\n    const renderParams = {\n      gl,\n      outputBuffer: renderState.writeBuffer,\n      inputBuffer: renderState.readBuffer,\n      animationProps,\n      swapBuffers: () => renderState._swapFramebuffers()\n    };\n\n    // TODO: Calirfy/Fix : is `screen` or `swap` must be true at this point\n    // if so comment. We can also remove `enabled` from props and deduce that based on these two flags\n    if (this.props.screen) {\n      renderParams.inputBuffer = renderParams.outputBuffer;\n      renderParams.outputBuffer = Framebuffer.getDefaultFramebuffer(gl);\n    } else if (this.props.swap) {\n      renderParams.inputBuffer = renderState.writeBuffer;\n      renderParams.outputBuffer = renderState.readBuffer;\n    }\n\n    withParameters(gl, {framebuffer: renderParams.outputBuffer}, () =>\n      this._renderPass(renderParams)\n    );\n\n    if (this.props.debug) {\n      renderParams.outputBuffer.log(1, this.id);\n    }\n\n    if (this.props.swap) {\n      renderState._swapFramebuffers();\n    }\n  }\n\n  delete() {\n    // Delete any resources crated\n  }\n\n  /**\n   * Renders the effect.\n   * This is an abstract method that should be overridden.\n   * @param {Framebuffer} inputBuffer - Frame buffer that contains the result of the previous pass\n   * @param {Framebuffer} outputBuffer - Frame buffer that serves as the output render target\n   */\n  _renderPass({gl, inputBuffer, outputBuffer, animationProps}) {\n    // assert(false, 'Draw/render methods not implemented!');\n  }\n}\n"],"file":"pass.js"}