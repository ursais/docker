{"version":3,"sources":["../../../src/lib/model.js"],"names":["TransformFeedback","Buffer","getBuffersFromGeometry","BaseModel","log","isObjectEmpty","uid","assert","ERR_MODEL_PARAMS","Model","constructor","gl","props","id","initialize","drawMode","undefined","vertexCount","geometryBuffers","isInstanced","instanced","_setModelProps","geometry","Number","isFinite","setProps","delete","_deleteGeometryBuffers","getDrawMode","getVertexCount","getInstanceCount","instanceCount","getAttributes","attributes","setDrawMode","setVertexCount","setInstanceCount","setGeometry","vertexArray","setAttributes","normalizedAttributes","name","attribute","getValue","draw","options","drawGeometry","transform","opts","discard","feedbackBuffers","unbindModels","parameters","_setFeedbackBuffers","Object","assign","forEach","model","unbindBuffers","bindBuffers","render","uniforms","warn","setUniforms","_feedbackBuffers","buffer","_setAnimationProps","animationProps","animated","animatedUniforms","_evaluateAnimateUniforms","program","transformFeedback","setBuffers"],"mappings":"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","sourcesContent":["import GL from '@luma.gl/constants';\nimport {TransformFeedback, Buffer} from '@luma.gl/webgl';\nimport {getBuffersFromGeometry} from './model-utils';\nimport BaseModel from './base-model';\nimport {log, isObjectEmpty, uid, assert} from '../utils';\n\nconst ERR_MODEL_PARAMS = 'Model needs drawMode and vertexCount';\n\nexport default class Model extends BaseModel {\n  constructor(gl, props = {}) {\n    // Deduce a helpful id\n    const {id = uid('model')} = props;\n    super(gl, {...props, id});\n  }\n\n  initialize(props) {\n    super.initialize(props);\n\n    this.drawMode = props.drawMode !== undefined ? props.drawMode : GL.TRIANGLES;\n    this.vertexCount = props.vertexCount || 0;\n\n    // Track buffers created by setGeometry\n    this.geometryBuffers = {};\n\n    // geometry might have set drawMode and vertexCount\n    this.isInstanced = props.isInstanced || props.instanced;\n\n    this._setModelProps(props);\n\n    // TODO - just to unbreak deck.gl 7.0-beta, remove as soon as updated\n    this.geometry = {};\n\n    // assert(program || program instanceof Program);\n    assert(this.drawMode !== undefined && Number.isFinite(this.vertexCount), ERR_MODEL_PARAMS);\n  }\n\n  setProps(props) {\n    super.setProps(props);\n    this._setModelProps(props);\n  }\n\n  delete() {\n    super.delete();\n\n    this._deleteGeometryBuffers();\n  }\n\n  // GETTERS\n\n  getDrawMode() {\n    return this.drawMode;\n  }\n\n  getVertexCount() {\n    return this.vertexCount;\n  }\n\n  getInstanceCount() {\n    return this.instanceCount;\n  }\n\n  getAttributes() {\n    return this.attributes;\n  }\n\n  // SETTERS\n\n  setDrawMode(drawMode) {\n    this.drawMode = drawMode;\n    return this;\n  }\n\n  setVertexCount(vertexCount) {\n    assert(Number.isFinite(vertexCount));\n    this.vertexCount = vertexCount;\n    return this;\n  }\n\n  setInstanceCount(instanceCount) {\n    assert(Number.isFinite(instanceCount));\n    this.instanceCount = instanceCount;\n    return this;\n  }\n\n  setGeometry(geometry) {\n    this.drawMode = geometry.drawMode;\n    this.vertexCount = geometry.getVertexCount();\n\n    this._deleteGeometryBuffers();\n\n    this.geometryBuffers = getBuffersFromGeometry(this.gl, geometry);\n    this.vertexArray.setAttributes(this.geometryBuffers);\n    return this;\n  }\n\n  setAttributes(attributes = {}) {\n    // Avoid setting needsRedraw if no attributes\n    if (isObjectEmpty(attributes)) {\n      return this;\n    }\n\n    const normalizedAttributes = {};\n    for (const name in attributes) {\n      const attribute = attributes[name];\n      // The `getValue` call provides support for deck.gl `Attribute` class\n      // TODO - remove once deck refactoring completes\n      normalizedAttributes[name] = attribute.getValue ? attribute.getValue() : attribute;\n    }\n\n    this.vertexArray.setAttributes(normalizedAttributes);\n    return this;\n  }\n\n  // DRAW CALLS\n\n  draw(options = {}) {\n    return this.drawGeometry(options);\n  }\n\n  // Draw call for transform feedback\n  transform(opts = {}) {\n    const {discard = true, feedbackBuffers, unbindModels = []} = opts;\n\n    let {parameters} = opts;\n\n    if (feedbackBuffers) {\n      this._setFeedbackBuffers(feedbackBuffers);\n    }\n\n    if (discard) {\n      parameters = Object.assign({}, parameters, {[GL.RASTERIZER_DISCARD]: discard});\n    }\n\n    unbindModels.forEach(model => model.vertexArray.unbindBuffers());\n    try {\n      this.draw(Object.assign({}, opts, {parameters}));\n    } finally {\n      unbindModels.forEach(model => model.vertexArray.bindBuffers());\n    }\n\n    return this;\n  }\n\n  // DEPRECATED METHODS\n\n  render(uniforms = {}) {\n    log.warn('Model.render() is deprecated. Use Model.setUniforms() and Model.draw()')();\n    return this.setUniforms(uniforms).draw();\n  }\n\n  // PRIVATE METHODS\n\n  _setModelProps(props) {\n    // params\n    // if ('drawMode' in props) {\n    //   this.drawMode = getDrawMode(props.drawMode);\n    // }\n    // if ('vertexCount' in props) {\n    //   this.vertexCount = props.vertexCount;\n    // }\n    if ('instanceCount' in props) {\n      this.instanceCount = props.instanceCount;\n    }\n    if ('geometry' in props) {\n      this.setGeometry(props.geometry);\n    }\n\n    // webgl settings\n    if ('attributes' in props) {\n      this.setAttributes(props.attributes);\n    }\n    if ('_feedbackBuffers' in props) {\n      this._setFeedbackBuffers(props._feedbackBuffers);\n    }\n  }\n\n  _deleteGeometryBuffers() {\n    for (const name in this.geometryBuffers) {\n      // Buffer is raw value (for indices) or first element of [buffer, accessor] pair\n      const buffer = this.geometryBuffers[name][0] || this.geometryBuffers[name];\n      if (buffer instanceof Buffer) {\n        buffer.delete();\n      }\n    }\n  }\n\n  // Updates (evaluates) all function valued uniforms based on a new set of animationProps\n  // experimental\n  _setAnimationProps(animationProps) {\n    if (this.animated) {\n      assert(animationProps, 'Model.draw(): animated uniforms but no animationProps');\n      const animatedUniforms = this._evaluateAnimateUniforms(animationProps);\n      Object.assign(this.uniforms, animatedUniforms);\n    }\n  }\n\n  // Transform Feedback\n\n  _setFeedbackBuffers(feedbackBuffers = {}) {\n    // Avoid setting needsRedraw if no feedbackBuffers\n    if (isObjectEmpty(feedbackBuffers)) {\n      return this;\n    }\n\n    const {gl} = this.program;\n    this.transformFeedback =\n      this.transformFeedback ||\n      new TransformFeedback(gl, {\n        program: this.program\n      });\n\n    this.transformFeedback.setBuffers(feedbackBuffers);\n    return this;\n  }\n}\n"],"file":"model.js"}