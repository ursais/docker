{"version":3,"sources":["../../../src/lib/animation-loop-proxy.js"],"names":["getPageLoadPromise","getCanvas","requestAnimationFrame","cancelAnimationFrame","log","assert","initializeCanvas","_self","canvas","eventHandlers","Map","addEventListener","type","handler","postMessage","command","has","set","get","push","removeEventListener","handlers","splice","indexOf","dispatchEvent","event","forEach","AnimationLoopProxy","createWorker","animationLoop","self","setProps","useDevicePixels","autoResizeDrawingBuffer","onmessage","evt","message","data","opts","start","stop","width","height","constructor","worker","onInitialize","onFinalize","props","Worker","_running","_animationFrameId","_onMessage","bind","_onEvent","_updateFrame","then","_createAndTransferCanvas","devicePixelRatio","window","safeEvent","key","value","valueType","_resizeCanvasDrawingBuffer","screenCanvas","transferControlToOffscreen","error","offscreenCanvas","Object","assign","Math","ceil","clientWidth","clientHeight"],"mappings":"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","sourcesContent":["/* global window, Worker */\nimport {getPageLoadPromise, getCanvas} from '@luma.gl/webgl';\nimport {requestAnimationFrame, cancelAnimationFrame} from '@luma.gl/webgl';\nimport {log, assert} from '../utils';\n\nfunction initializeCanvas(_self, canvas) {\n  const eventHandlers = new Map();\n\n  canvas.addEventListener = (type, handler) => {\n    _self.postMessage({command: 'addEventListener', type});\n    if (!eventHandlers.has(type)) {\n      eventHandlers.set(type, []);\n    }\n    eventHandlers.get(type).push(handler);\n  };\n  canvas.removeEventListener = (type, handler) => {\n    _self.postMessage({command: 'removeEventListener', type});\n    const handlers = eventHandlers.get(type);\n    if (handlers) {\n      handlers.splice(handlers.indexOf(handler), 1);\n    }\n  };\n  canvas.dispatchEvent = (type, event) => {\n    const handlers = eventHandlers.get(type);\n    if (handlers) {\n      handlers.forEach(handler => handler(event));\n    }\n  };\n\n  _self.canvas = canvas;\n}\n\nexport default class AnimationLoopProxy {\n  // Create the script for the rendering worker.\n  // @param opts {object} - options to construct an AnimationLoop instance\n  static createWorker(animationLoop) {\n    return self => {\n      animationLoop.setProps({\n        // Prevent the animation loop from trying to access DOM properties\n        useDevicePixels: false,\n        autoResizeDrawingBuffer: false\n      });\n\n      self.canvas = null;\n      self.onmessage = evt => {\n        const message = evt.data;\n        switch (message.command) {\n          case 'start':\n            initializeCanvas(self, message.opts.canvas);\n            animationLoop.start(message.opts);\n            break;\n\n          case 'stop':\n            animationLoop.stop();\n            break;\n\n          case 'resize':\n            self.canvas.width = message.width;\n            self.canvas.height = message.height;\n            break;\n\n          case 'event':\n            self.canvas.dispatchEvent(message.type, message.event);\n            break;\n\n          default:\n        }\n      };\n    };\n  }\n\n  /*\n   * @param {HTMLCanvasElement} canvas - if provided, width and height will be passed to context\n   */\n  constructor(worker, opts = {}) {\n    const {\n      onInitialize = () => {},\n      onFinalize = () => {},\n      useDevicePixels = true,\n      autoResizeDrawingBuffer = true\n    } = opts;\n\n    this.props = {\n      onInitialize,\n      onFinalize\n    };\n\n    this.setProps({\n      autoResizeDrawingBuffer,\n      useDevicePixels\n    });\n\n    // state\n    assert(worker instanceof Worker);\n    this.worker = worker;\n    this.canvas = null;\n    this.width = null;\n    this.height = null;\n\n    this._running = false;\n    this._animationFrameId = null;\n\n    // bind methods\n    this._onMessage = this._onMessage.bind(this);\n    this._onEvent = this._onEvent.bind(this);\n    this._updateFrame = this._updateFrame.bind(this);\n  }\n\n  setProps(props) {\n    if ('autoResizeDrawingBuffer' in props) {\n      this.autoResizeDrawingBuffer = props.autoResizeDrawingBuffer;\n    }\n    if ('useDevicePixels' in props) {\n      this.useDevicePixels = props.useDevicePixels;\n    }\n    return this;\n  }\n\n  /* Public methods */\n\n  // Starts a render loop if not already running\n  start(opts = {}) {\n    if (this._running) {\n      return this;\n    }\n    this._running = true;\n    // console.debug(`Starting ${this.constructor.name}`);\n    this.worker.onmessage = this._onMessage;\n\n    // Wait for start promise before rendering frame\n    getPageLoadPromise()\n      .then(() => {\n        if (!this._running) {\n          return null;\n        }\n        this._createAndTransferCanvas(opts);\n        return this.props.onInitialize(this);\n      })\n      .then(() => {\n        if (this._running) {\n          this._animationFrameId = requestAnimationFrame(this._updateFrame);\n        }\n      });\n    return this;\n  }\n\n  // Stops a render loop if already running, finalizing\n  stop() {\n    if (this._running) {\n      cancelAnimationFrame(this._animationFrameId);\n      this._animationFrameId = null;\n      this._running = false;\n      this.props.onFinalize(this);\n    }\n    this.worker.postMessage({command: 'stop'});\n    return this;\n  }\n\n  // PRIVATE METHODS\n\n  _onMessage(evt) {\n    switch (evt.data.command) {\n      case 'addEventListener':\n        this.canvas.addEventListener(evt.data.type, this._onEvent);\n        break;\n\n      case 'removeEventListener':\n        this.canvas.removeEventListener(evt.data.type, this._onEvent);\n        break;\n\n      default:\n    }\n  }\n\n  _onEvent(evt) {\n    // TODO: get access to gl context and use 'cssToDevicePixels'\n    const devicePixelRatio = this.useDevicePixels ? window.devicePixelRatio || 1 : 1;\n    const type = evt.type;\n\n    const safeEvent = {};\n    for (const key in evt) {\n      let value = evt[key];\n      const valueType = typeof value;\n      if (key === 'offsetX' || key === 'offsetY') {\n        value *= devicePixelRatio;\n      }\n      if (valueType === 'number' || valueType === 'boolean' || valueType === 'string') {\n        safeEvent[key] = value;\n      }\n    }\n\n    this.worker.postMessage({\n      command: 'event',\n      type,\n      event: safeEvent\n    });\n  }\n\n  _updateFrame() {\n    this._resizeCanvasDrawingBuffer();\n    this._animationFrameId = requestAnimationFrame(this._updateFrame);\n  }\n\n  _createAndTransferCanvas(opts) {\n    // Create a canvas on the main thread\n    const screenCanvas = getCanvas(opts);\n\n    // Create an offscreen canvas controlling the main canvas\n    if (!screenCanvas.transferControlToOffscreen) {\n      log.error('OffscreenCanvas is not available in your browser.')();\n    }\n    const offscreenCanvas = screenCanvas.transferControlToOffscreen();\n\n    // Transfer the offscreen canvas to the worker\n    this.worker.postMessage(\n      {\n        command: 'start',\n        opts: Object.assign({}, opts, {canvas: offscreenCanvas})\n      },\n      [offscreenCanvas]\n    );\n\n    // store the main canvas on the local thread\n    this.canvas = screenCanvas;\n  }\n\n  _resizeCanvasDrawingBuffer() {\n    if (this.autoResizeDrawingBuffer) {\n      // TODO: get access to gl context and use 'cssToDevicePixels'\n      const devicePixelRatio = this.useDevicePixels ? window.devicePixelRatio || 1 : 1;\n      const width = Math.ceil(this.canvas.clientWidth * devicePixelRatio);\n      const height = Math.ceil(this.canvas.clientHeight * devicePixelRatio);\n\n      if (this.width !== width || this.height !== height) {\n        this.width = width;\n        this.height = height;\n        this.worker.postMessage({\n          command: 'resize',\n          width,\n          height\n        });\n      }\n    }\n  }\n}\n"],"file":"animation-loop-proxy.js"}