{"version":3,"sources":["../../../src/lib/base-model.js"],"names":["ProgramManager","isWebGL","Query","Program","VertexArray","clear","MODULAR_SHADERS","getDebugTableForUniforms","getDebugTableForVertexArray","getDebugTableForProgramConfiguration","addModel","removeModel","logModel","getOverrides","log","isObjectEmpty","uid","assert","LOG_DRAW_PRIORITY","LOG_DRAW_TIMEOUT","BaseModel","constructor","gl","props","id","lastLogTime","initialize","shaderCache","warn","programManager","getDefaultProgramManager","_programManagerState","_managedProgram","program","vs","fs","modules","defines","inject","varyings","bufferMode","programProps","vertexArray","_programDirty","userData","needsRedraw","_attributes","attributes","uniforms","animatedUniforms","animated","animationLoop","timerQueryEnabled","timeElapsedQuery","undefined","lastQueryReturned","stats","accumulatedFrameTime","averageFrameTime","profileFrameCount","pickable","_checkProgram","_setBaseModelProps","setUniforms","Object","assign","getModuleUniforms","moduleSettings","setProps","delete","key","release","isAnimated","getProgram","setProgram","getUniforms","_extractAnimatedUniforms","opts","updateModuleSettings","drawGeometry","framebuffer","transformFeedback","parameters","animationProps","setAttributes","_refreshAnimationProps","logPriority","_logDrawCallStart","drawParams","getDrawParams","isInstanced","isIndexed","indexType","indexOffset","instanceCount","noop","onBeforeRender","onAfterRender","_timerQueryStart","didDraw","draw","drawMode","getDrawMode","vertexCount","getVertexCount","offset","_timerQueryEnd","_logDrawCallEnd","isSupported","_setAnimationProps","_animationProps","_animationLoop","needsUpdate","stateHash","get","_evaluateAnimateUniforms","uniformName","valueFunction","foundAnimated","newValue","staticUniforms","beginTimeElapsedQuery","end","isResultAvailable","elapsedTime","getTimerMilliseconds","lastFrameTime","priority","logDrawTimeout","Date","now","group","collapsed","attributeTable","header","table","uniformTable","unusedTable","unusedCount","missingTable","count","missingCount","undefinedOnly","keys","configTable","configuration","message","groupEnd"],"mappings":"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","sourcesContent":["/* eslint-disable complexity */\n// Shared code between Model and MeshModel\nimport ProgramManager from '../resource-management/program-manager';\nimport {isWebGL, Query, Program, VertexArray, clear} from '@luma.gl/webgl';\nimport {MODULAR_SHADERS} from '@luma.gl/shadertools';\nimport {\n  getDebugTableForUniforms,\n  getDebugTableForVertexArray,\n  getDebugTableForProgramConfiguration\n} from '@luma.gl/webgl';\nimport {addModel, removeModel, logModel, getOverrides} from '../debug/seer-integration';\nimport {log, isObjectEmpty, uid, assert} from '../utils';\n\nconst LOG_DRAW_PRIORITY = 2;\nconst LOG_DRAW_TIMEOUT = 10000;\n\n// Model abstract O3D Class\nexport default class BaseModel {\n  constructor(gl, props = {}) {\n    assert(isWebGL(gl));\n    const {id = uid('base-model')} = props;\n    this.id = id;\n    this.gl = gl;\n    this.id = props.id || uid('Model');\n    this.lastLogTime = 0; // TODO - move to probe.gl\n    this.initialize(props);\n  }\n\n  initialize(props) {\n    this.props = {};\n\n    if (props.shaderCache) {\n      log.warn('ShaderCache property is deprecated')();\n    }\n\n    this.programManager = props.programManager || ProgramManager.getDefaultProgramManager(this.gl);\n    this._programManagerState = -1;\n    this._managedProgram = false;\n\n    const {program = null, vs, fs, modules, defines, inject, varyings, bufferMode} = props;\n\n    this.programProps = {program, vs, fs, modules, defines, inject, varyings, bufferMode};\n    this.program = null;\n    this.vertexArray = null;\n    this._programDirty = true;\n\n    // Initialize state\n    this.userData = {};\n    this.needsRedraw = true;\n\n    // Attributes and buffers\n    // Model manages auto Buffer creation from typed arrays\n    this._attributes = {}; // All attributes\n    this.attributes = {}; // User defined attributes\n\n    // Model manages uniform animation\n    this.uniforms = {};\n    this.animatedUniforms = {};\n    this.animated = false;\n    this.animationLoop = null; // if set, used as source for animationProps\n\n    this.timerQueryEnabled = false;\n    this.timeElapsedQuery = undefined;\n    this.lastQueryReturned = true;\n\n    this.stats = {\n      accumulatedFrameTime: 0,\n      averageFrameTime: 0,\n      profileFrameCount: 0\n    };\n\n    // picking options\n    this.pickable = true;\n\n    this._checkProgram();\n\n    this._setBaseModelProps(props);\n\n    this.setUniforms(\n      Object.assign(\n        {},\n        this.getModuleUniforms(props.moduleSettings) // Get unforms for supplied parameters\n      )\n    );\n  }\n\n  setProps(props) {\n    this._setBaseModelProps(props);\n  }\n\n  delete() {\n    // delete all attributes created by this model\n    // TODO - should buffer deletes be handled by vertex array?\n    for (const key in this._attributes) {\n      if (this._attributes[key] !== this.attributes[key]) {\n        this._attributes[key].delete();\n      }\n    }\n\n    if (this._managedProgram) {\n      this.programManager.release(this.program);\n    }\n\n    this.vertexArray.delete();\n\n    removeModel(this.id);\n  }\n\n  // GETTERS\n\n  isAnimated() {\n    return this.animated;\n  }\n\n  getProgram() {\n    return this.program;\n  }\n\n  setProgram(props) {\n    this.programProps = Object.assign({}, props);\n    this._programDirty = true;\n  }\n\n  getUniforms() {\n    return this.uniforms;\n  }\n\n  // SETTERS\n\n  // TODO - should actually set the uniforms\n  setUniforms(uniforms = {}) {\n    // Let Seer override edited uniforms\n    uniforms = Object.assign({}, uniforms);\n    getOverrides(this.id, uniforms);\n\n    // Resolve any animated uniforms so that we have an initial value\n    uniforms = this._extractAnimatedUniforms(uniforms);\n\n    Object.assign(this.uniforms, uniforms);\n\n    return this;\n  }\n\n  getModuleUniforms(opts) {\n    this._checkProgram();\n\n    const getUniforms = this.programManager.getUniforms(this.program);\n\n    if (getUniforms) {\n      return getUniforms(opts);\n    }\n\n    return {};\n  }\n\n  updateModuleSettings(opts) {\n    const uniforms = this.getModuleUniforms(opts || {});\n    return this.setUniforms(uniforms);\n  }\n\n  // DRAW CALLS\n\n  clear(opts) {\n    clear(this.program.gl, opts);\n    return this;\n  }\n\n  /* eslint-disable max-statements  */\n  drawGeometry(opts = {}) {\n    // Lazy update program and vertex array\n    this._checkProgram();\n\n    const {\n      moduleSettings = null,\n      framebuffer,\n      uniforms = {},\n      attributes = {},\n      transformFeedback = this.transformFeedback,\n      parameters = {},\n      vertexArray = this.vertexArray,\n      animationProps\n    } = opts;\n\n    addModel(this);\n\n    // Update model with any just provided attributes, settings or uniforms\n    this.setAttributes(attributes);\n    this.updateModuleSettings(moduleSettings);\n    this.setUniforms(uniforms);\n\n    // Animate any function valued uniforms\n    this._refreshAnimationProps(animationProps);\n\n    const logPriority = this._logDrawCallStart(2);\n\n    const drawParams = this.vertexArray.getDrawParams(this.props);\n    if (drawParams.isInstanced && !this.isInstanced) {\n      log.warn('Found instanced attributes on non-instanced model', this.id)();\n    }\n\n    const {isIndexed, indexType, indexOffset} = drawParams;\n    const {isInstanced, instanceCount} = this;\n\n    const noop = () => {};\n    const {onBeforeRender = noop, onAfterRender = noop} = this.props;\n\n    onBeforeRender();\n\n    this._timerQueryStart();\n\n    this.program.setUniforms(this.uniforms);\n\n    const didDraw = this.program.draw(\n      Object.assign({}, opts, {\n        logPriority,\n        uniforms: null, // Already set (may contain \"function values\" not understood by Program)\n        framebuffer,\n        parameters,\n        drawMode: this.getDrawMode(),\n        vertexCount: this.getVertexCount(),\n        vertexArray,\n        transformFeedback,\n        isIndexed,\n        indexType,\n        isInstanced,\n        instanceCount,\n        offset: isIndexed ? indexOffset : 0\n      })\n    );\n\n    this._timerQueryEnd();\n\n    onAfterRender();\n\n    this._logDrawCallEnd(logPriority, vertexArray, framebuffer);\n\n    return didDraw;\n  }\n  /* eslint-enable max-statements  */\n\n  // PRIVATE METHODS\n\n  // eslint-disable-next-line max-statements, complexity\n  _setBaseModelProps(props) {\n    Object.assign(this.props, props);\n\n    if ('uniforms' in props) {\n      this.setUniforms(props.uniforms);\n    }\n\n    if ('pickable' in props) {\n      this.pickable = props.pickable;\n    }\n\n    // if ('onBeforeRender' in props) {}\n    // if ('onAfterRender' in props) {}\n\n    // Experimental props\n    if ('timerQueryEnabled' in props) {\n      this.timerQueryEnabled = props.timerQueryEnabled && Query.isSupported(this.gl, ['timers']);\n      if (props.timerQueryEnabled && !this.timerQueryEnabled) {\n        log.warn('GPU timer not supported')();\n      }\n    }\n\n    if ('_animationProps' in props) {\n      this._setAnimationProps(props._animationProps);\n    }\n\n    if ('_animationLoop' in props) {\n      this.animationLoop = props._animationLoop;\n    }\n  }\n\n  _checkProgram(shaderCache = null) {\n    const needsUpdate =\n      this._programDirty || this.programManager.stateHash !== this._programManagerState;\n\n    if (!needsUpdate) {\n      return;\n    }\n\n    let {program} = this.programProps;\n\n    if (program) {\n      this._managedProgram = false;\n    } else {\n      const {\n        // TODO(Tarek): Are these actually used anywhere?\n        vs = MODULAR_SHADERS.vs,\n        fs = MODULAR_SHADERS.fs,\n        modules,\n        inject,\n        defines,\n        varyings,\n        bufferMode\n      } = this.programProps;\n      program = this.programManager.get({vs, fs, modules, inject, defines, varyings, bufferMode});\n      if (this.program && this._managedProgram) {\n        this.programManager.release(this.program);\n      }\n      this._programManagerState = this.programManager.stateHash;\n      this._managedProgram = true;\n    }\n\n    assert(program instanceof Program, 'Model needs a program');\n\n    this._programDirty = false;\n\n    if (program === this.program) {\n      return;\n    }\n\n    this.program = program;\n\n    if (this.vertexArray) {\n      this.vertexArray.setProps({program: this.program, attributes: this.vertexArray.attributes});\n    } else {\n      this.vertexArray = new VertexArray(this.gl, {program: this.program});\n    }\n\n    // Make sure we have some reasonable default uniforms in place\n    this.setUniforms(\n      Object.assign(\n        {},\n        this.getModuleUniforms() // Get all default uniforms,\n      )\n    );\n  }\n\n  // Refreshes animated uniforms, attempting to get animated props from animationLoop if registered\n  _refreshAnimationProps(animationProps) {\n    // Try to read animationProps\n    animationProps = animationProps || (this.animationLoop && this.animationLoop.animationProps);\n    if (animationProps) {\n      this._setAnimationProps(animationProps);\n    }\n  }\n\n  // Calculate new values for any function uniforms based on supplied animationProps\n  _evaluateAnimateUniforms(animationProps) {\n    if (!this.animated) {\n      return {};\n    }\n    const animatedUniforms = {};\n    for (const uniformName in this.animatedUniforms) {\n      const valueFunction = this.animatedUniforms[uniformName];\n      animatedUniforms[uniformName] = valueFunction(animationProps);\n    }\n    return animatedUniforms;\n  }\n\n  // Extracts a list of function valued uniforms, so we can update them before each draw call\n  // Also removes such uniforms from the returned list\n  _extractAnimatedUniforms(uniforms) {\n    let foundAnimated = false;\n\n    // Keep our animatedUniforms map up-to-date\n    for (const uniformName in uniforms) {\n      const newValue = uniforms[uniformName];\n      if (typeof newValue === 'function') {\n        this.animatedUniforms[uniformName] = newValue;\n        foundAnimated = true;\n      } else {\n        delete this.animatedUniforms[uniformName];\n      }\n    }\n\n    // Update animated flag: `Model` is animated if any uniforms are animated (i.e. functions)\n    this.animated = !isObjectEmpty(this.animatedUniforms);\n\n    if (!foundAnimated) {\n      return uniforms;\n    }\n\n    // If animated uniforms were found, remove them from ordinary uniform list\n    // `Program` class can't (and shouldn't) handle function valued uniforms\n    const staticUniforms = {};\n    for (const uniformName in uniforms) {\n      if (!this.animatedUniforms[uniformName]) {\n        staticUniforms[uniformName] = uniforms[uniformName];\n      }\n    }\n    return staticUniforms;\n  }\n\n  // Timer Queries\n\n  _timerQueryStart() {\n    if (this.timerQueryEnabled === true) {\n      if (!this.timeElapsedQuery) {\n        this.timeElapsedQuery = new Query(this.gl);\n      }\n      if (this.lastQueryReturned) {\n        this.lastQueryReturned = false;\n        this.timeElapsedQuery.beginTimeElapsedQuery();\n      }\n    }\n  }\n\n  _timerQueryEnd() {\n    if (this.timerQueryEnabled === true) {\n      this.timeElapsedQuery.end();\n      // TODO: Skip results if 'gl.getParameter(this.ext.GPU_DISJOINT_EXT)' returns false\n      // should this be incorporated into Query object?\n      if (this.timeElapsedQuery.isResultAvailable()) {\n        this.lastQueryReturned = true;\n        const elapsedTime = this.timeElapsedQuery.getTimerMilliseconds();\n\n        // Update stats (e.g. for seer)\n        this.stats.lastFrameTime = elapsedTime;\n        this.stats.accumulatedFrameTime += elapsedTime;\n        this.stats.profileFrameCount++;\n        this.stats.averageFrameTime =\n          this.stats.accumulatedFrameTime / this.stats.profileFrameCount;\n\n        // Log stats\n        log.log(\n          LOG_DRAW_PRIORITY,\n          `\\\nGPU time ${this.program.id}: ${this.stats.lastFrameTime}ms \\\naverage ${this.stats.averageFrameTime}ms \\\naccumulated: ${this.stats.accumulatedFrameTime}ms \\\ncount: ${this.stats.profileFrameCount}`\n        )();\n      }\n    }\n  }\n\n  _logDrawCallStart(priority) {\n    const logDrawTimeout = priority > 3 ? 0 : LOG_DRAW_TIMEOUT;\n    if (log.priority < priority || Date.now() - this.lastLogTime < logDrawTimeout) {\n      return undefined;\n    }\n\n    this.lastLogTime = Date.now();\n\n    log.group(LOG_DRAW_PRIORITY, `>>> DRAWING MODEL ${this.id}`, {collapsed: log.priority <= 2})();\n\n    return priority;\n  }\n\n  _logDrawCallEnd(priority, vertexArray, uniforms, framebuffer) {\n    // HACK: priority === undefined means logDrawCallStart didn't run\n    if (priority === undefined) {\n      return;\n    }\n\n    const attributeTable = getDebugTableForVertexArray({\n      vertexArray,\n      header: `${this.id} attributes`,\n      attributes: this._attributes\n    });\n\n    const {table: uniformTable, unusedTable, unusedCount} = getDebugTableForUniforms({\n      header: `${this.id} uniforms`,\n      program: this.program,\n      uniforms: Object.assign({}, this.program.uniforms, uniforms)\n    });\n\n    // log missing uniforms\n    const {table: missingTable, count: missingCount} = getDebugTableForUniforms({\n      header: `${this.id} uniforms`,\n      program: this.program,\n      uniforms: Object.assign({}, this.program.uniforms, uniforms),\n      undefinedOnly: true\n    });\n\n    if (missingCount > 0) {\n      log.log('MISSING UNIFORMS', Object.keys(missingTable))();\n      // log.table(priority, missingTable)();\n    }\n    if (unusedCount > 0) {\n      log.log('UNUSED UNIFORMS', Object.keys(unusedTable))();\n      // log.log(priority, 'Unused uniforms ', unusedTable)();\n    }\n\n    const configTable = getDebugTableForProgramConfiguration(this.vertexArray.configuration);\n\n    log.table(priority, attributeTable)();\n\n    log.table(priority, uniformTable)();\n\n    log.table(priority + 1, configTable)();\n\n    logModel(this, uniforms);\n\n    if (framebuffer) {\n      framebuffer.log({priority: LOG_DRAW_PRIORITY, message: `Rendered to ${framebuffer.id}`});\n    }\n\n    log.groupEnd(LOG_DRAW_PRIORITY, `>>> DRAWING MODEL ${this.id}`)();\n  }\n}\n"],"file":"base-model.js"}