{"version":3,"sources":["../../../src/debug/seer-integration.js"],"names":["seer","window","models","addModel","model","id","listItem","logModel","uniforms","isReady","throttle","attributesObject","geometry","Object","assign","attributes","uniformsObject","multiUpdate","path","data","removeModel","deleteItem","recursiveSet","obj","value","length","slice","overrides","Map","setOverride","valuePath","__SEER_INITIALIZED__","has","set","get","getOverrides","overs","forEach","listenFor","payload","itemKey","type","getUniforms","setUniforms"],"mappings":"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","sourcesContent":["import seer from 'seer';\n\nimport {window} from '../utils';\n\nconst models = {};\n\n/**\n * Add a model to our cache indexed by id\n */\nexport const addModel = model => {\n  if (models[model.id]) {\n    return;\n  }\n  models[model.id] = model;\n\n  seer.listItem('luma.gl', model.id);\n};\n\n/**\n * Log a model uniforms and attributes.\n */\nexport const logModel = (model, uniforms) => {\n  if (!seer.isReady() || seer.throttle(`luma.gl:${model.id}`, 1e3)) {\n    return;\n  }\n\n  const attributesObject = model.geometry\n    ? Object.assign({}, model.geometry.attributes, model.attributes)\n    : model.attributes;\n  const uniformsObject = Object.assign({}, model.uniforms, uniforms);\n\n  seer.multiUpdate('luma.gl', model.id, [\n    {path: 'objects.uniforms', data: uniformsObject},\n    {path: 'objects.attributes', data: attributesObject}\n  ]);\n};\n\n/**\n * Remove a previously set model from the cache\n */\nexport const removeModel = id => {\n  delete models[id];\n  seer.deleteItem('luma.gl', id);\n};\n\n/**\n * Recursively traverse an object given a path of properties and set the given value\n */\nconst recursiveSet = (obj, path, value) => {\n  if (!obj) {\n    return;\n  }\n\n  if (path.length > 1) {\n    recursiveSet(obj[path[0]], path.slice(1), value);\n  } else {\n    obj[path[0]] = value;\n  }\n};\n\nconst overrides = new Map();\n\n/**\n * Create an override on the specify layer, indexed by a valuePath array.\n * Do nothing in case Seer as not been initialized to prevent any preformance drawback.\n */\nexport const setOverride = (id, valuePath, value) => {\n  if (!window.__SEER_INITIALIZED__) {\n    return;\n  }\n\n  if (!overrides.has(id)) {\n    overrides.set(id, new Map());\n  }\n\n  const uniforms = overrides.get(id);\n  uniforms.set(valuePath, value);\n};\n\n/**\n * Apply overrides to a specific model's uniforms\n */\nexport const getOverrides = (id, uniforms) => {\n  if (!window.__SEER_INITIALIZED__ || !id) {\n    return;\n  }\n\n  const overs = overrides.get(id);\n  if (!overs) {\n    return;\n  }\n\n  overs.forEach((value, valuePath) => {\n    recursiveSet(uniforms, valuePath, value);\n  });\n};\n\n/**\n * Listen for luma.gl edit events\n */\nseer.listenFor('luma.gl', payload => {\n  const model = models[payload.itemKey];\n  if (!model || payload.type !== 'edit' || payload.valuePath[0] !== 'uniforms') {\n    return;\n  }\n\n  const valuePath = payload.valuePath.slice(1);\n  setOverride(payload.itemKey, valuePath, payload.value);\n\n  const uniforms = model.getUniforms();\n  recursiveSet(uniforms, valuePath, payload.value);\n  model.setUniforms(uniforms);\n});\n"],"file":"seer-integration.js"}