{"version":3,"sources":["../../../src/multipass/multi-pass-renderer.js"],"names":["CompositePass","RenderState","MultiPassRenderer","gl","props","Array","isArray","passes","Object","assign","id","renderState","animationProps","reset","pass","render"],"mappings":";;;;;;AAMA,OAAOA,aAAP,MAA0B,kBAA1B;AACA,OAAOC,WAAP,MAAwB,gBAAxB;;IAEqBC,iB;;;AACnB,6BAAYC,EAAZ,EAA4B;AAAA;;AAAA,QAAZC,KAAY,uEAAJ,EAAI;;AAAA;;AAC1BA,IAAAA,KAAK,GAAGC,KAAK,CAACC,OAAN,CAAcF,KAAd,IAAuB;AAACG,MAAAA,MAAM,EAAEH;AAAT,KAAvB,GAAyCA,KAAjD;AACA,2FAAMD,EAAN,EAAUK,MAAM,CAACC,MAAP,CAAc;AAACC,MAAAA,EAAE,EAAE;AAAL,KAAd,EAAkCN,KAAlC,CAAV;AACA,UAAKO,WAAL,GAAmB,IAAIV,WAAJ,CAAgBE,EAAhB,EAAoBC,KAApB,CAAnB;AAH0B;AAI3B;;;;2BAGMQ,c,EAAgB;AACrB,WAAKD,WAAL,CAAiBE,KAAjB;AADqB,+BAEC,KAAKT,KAFN,CAEdG,MAFc;AAAA,UAEdA,MAFc,mCAEL,EAFK;AAAA;AAAA;AAAA;;AAAA;AAGrB,6BAAmBA,MAAnB,8HAA2B;AAAA,cAAhBO,IAAgB;AACzBA,UAAAA,IAAI,CAACC,MAAL,CAAY,KAAKJ,WAAjB,EAA8BC,cAA9B;AACD;AALoB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAMrB,aAAO,IAAP;AACD;;;8BAEQ;AACP,WAAKD,WAAL;;AACA;AACD;;;;EApB4CX,a;;SAA1BE,iB","sourcesContent":["//\n// A top-level composite render pass, that manages render state\n//\n// Attribution: This class and the multipass system were inspired by\n// the THREE.js EffectComposer and *Pass classes\n\nimport CompositePass from './composite-pass';\nimport RenderState from './render-state';\n\nexport default class MultiPassRenderer extends CompositePass {\n  constructor(gl, props = {}) {\n    props = Array.isArray(props) ? {passes: props} : props;\n    super(gl, Object.assign({id: 'multi-pass'}, props));\n    this.renderState = new RenderState(gl, props);\n  }\n\n  // Override render() to just forward the call\n  render(animationProps) {\n    this.renderState.reset();\n    const {passes = []} = this.props;\n    for (const pass of passes) {\n      pass.render(this.renderState, animationProps);\n    }\n    return this;\n  }\n\n  delete() {\n    this.renderState.delete();\n    super.delete();\n  }\n}\n"],"file":"multi-pass-renderer.js"}