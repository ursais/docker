{"version":3,"sources":["../../../src/lib/animation-loop-proxy.js"],"names":["initializeCanvas","_self","canvas","eventHandlers","Map","addEventListener","type","handler","postMessage","command","has","set","get","push","removeEventListener","handlers","splice","indexOf","dispatchEvent","event","forEach","AnimationLoopProxy","animationLoop","self","setProps","useDevicePixels","autoResizeDrawingBuffer","onmessage","evt","message","data","opts","start","stop","width","height","worker","onInitialize","onFinalize","props","Worker","_running","_animationFrameId","_onMessage","bind","_onEvent","_updateFrame","then","_createAndTransferCanvas","devicePixelRatio","window","safeEvent","key","value","valueType","_resizeCanvasDrawingBuffer","screenCanvas","transferControlToOffscreen","log","error","offscreenCanvas","Object","assign","Math","ceil","clientWidth","clientHeight"],"mappings":"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","sourcesContent":["/* global window, Worker */\nimport {getPageLoadPromise, getCanvas} from '@luma.gl/webgl';\nimport {requestAnimationFrame, cancelAnimationFrame} from '@luma.gl/webgl';\nimport {log, assert} from '../utils';\n\nfunction initializeCanvas(_self, canvas) {\n  const eventHandlers = new Map();\n\n  canvas.addEventListener = (type, handler) => {\n    _self.postMessage({command: 'addEventListener', type});\n    if (!eventHandlers.has(type)) {\n      eventHandlers.set(type, []);\n    }\n    eventHandlers.get(type).push(handler);\n  };\n  canvas.removeEventListener = (type, handler) => {\n    _self.postMessage({command: 'removeEventListener', type});\n    const handlers = eventHandlers.get(type);\n    if (handlers) {\n      handlers.splice(handlers.indexOf(handler), 1);\n    }\n  };\n  canvas.dispatchEvent = (type, event) => {\n    const handlers = eventHandlers.get(type);\n    if (handlers) {\n      handlers.forEach(handler => handler(event));\n    }\n  };\n\n  _self.canvas = canvas;\n}\n\nexport default class AnimationLoopProxy {\n  // Create the script for the rendering worker.\n  // @param opts {object} - options to construct an AnimationLoop instance\n  static createWorker(animationLoop) {\n    return self => {\n      animationLoop.setProps({\n        // Prevent the animation loop from trying to access DOM properties\n        useDevicePixels: false,\n        autoResizeDrawingBuffer: false\n      });\n\n      self.canvas = null;\n      self.onmessage = evt => {\n        const message = evt.data;\n        switch (message.command) {\n          case 'start':\n            initializeCanvas(self, message.opts.canvas);\n            animationLoop.start(message.opts);\n            break;\n\n          case 'stop':\n            animationLoop.stop();\n            break;\n\n          case 'resize':\n            self.canvas.width = message.width;\n            self.canvas.height = message.height;\n            break;\n\n          case 'event':\n            self.canvas.dispatchEvent(message.type, message.event);\n            break;\n\n          default:\n        }\n      };\n    };\n  }\n\n  /*\n   * @param {HTMLCanvasElement} canvas - if provided, width and height will be passed to context\n   */\n  constructor(worker, opts = {}) {\n    const {\n      onInitialize = () => {},\n      onFinalize = () => {},\n      useDevicePixels = true,\n      autoResizeDrawingBuffer = true\n    } = opts;\n\n    this.props = {\n      onInitialize,\n      onFinalize\n    };\n\n    this.setProps({\n      autoResizeDrawingBuffer,\n      useDevicePixels\n    });\n\n    // state\n    assert(worker instanceof Worker);\n    this.worker = worker;\n    this.canvas = null;\n    this.width = null;\n    this.height = null;\n\n    this._running = false;\n    this._animationFrameId = null;\n\n    // bind methods\n    this._onMessage = this._onMessage.bind(this);\n    this._onEvent = this._onEvent.bind(this);\n    this._updateFrame = this._updateFrame.bind(this);\n  }\n\n  setProps(props) {\n    if ('autoResizeDrawingBuffer' in props) {\n      this.autoResizeDrawingBuffer = props.autoResizeDrawingBuffer;\n    }\n    if ('useDevicePixels' in props) {\n      this.useDevicePixels = props.useDevicePixels;\n    }\n    return this;\n  }\n\n  /* Public methods */\n\n  // Starts a render loop if not already running\n  start(opts = {}) {\n    if (this._running) {\n      return this;\n    }\n    this._running = true;\n    // console.debug(`Starting ${this.constructor.name}`);\n    this.worker.onmessage = this._onMessage;\n\n    // Wait for start promise before rendering frame\n    getPageLoadPromise()\n      .then(() => {\n        if (!this._running) {\n          return null;\n        }\n        this._createAndTransferCanvas(opts);\n        return this.props.onInitialize(this);\n      })\n      .then(() => {\n        if (this._running) {\n          this._animationFrameId = requestAnimationFrame(this._updateFrame);\n        }\n      });\n    return this;\n  }\n\n  // Stops a render loop if already running, finalizing\n  stop() {\n    if (this._running) {\n      cancelAnimationFrame(this._animationFrameId);\n      this._animationFrameId = null;\n      this._running = false;\n      this.props.onFinalize(this);\n    }\n    this.worker.postMessage({command: 'stop'});\n    return this;\n  }\n\n  // PRIVATE METHODS\n\n  _onMessage(evt) {\n    switch (evt.data.command) {\n      case 'addEventListener':\n        this.canvas.addEventListener(evt.data.type, this._onEvent);\n        break;\n\n      case 'removeEventListener':\n        this.canvas.removeEventListener(evt.data.type, this._onEvent);\n        break;\n\n      default:\n    }\n  }\n\n  _onEvent(evt) {\n    // TODO: get access to gl context and use 'cssToDevicePixels'\n    const devicePixelRatio = this.useDevicePixels ? window.devicePixelRatio || 1 : 1;\n    const type = evt.type;\n\n    const safeEvent = {};\n    for (const key in evt) {\n      let value = evt[key];\n      const valueType = typeof value;\n      if (key === 'offsetX' || key === 'offsetY') {\n        value *= devicePixelRatio;\n      }\n      if (valueType === 'number' || valueType === 'boolean' || valueType === 'string') {\n        safeEvent[key] = value;\n      }\n    }\n\n    this.worker.postMessage({\n      command: 'event',\n      type,\n      event: safeEvent\n    });\n  }\n\n  _updateFrame() {\n    this._resizeCanvasDrawingBuffer();\n    this._animationFrameId = requestAnimationFrame(this._updateFrame);\n  }\n\n  _createAndTransferCanvas(opts) {\n    // Create a canvas on the main thread\n    const screenCanvas = getCanvas(opts);\n\n    // Create an offscreen canvas controlling the main canvas\n    if (!screenCanvas.transferControlToOffscreen) {\n      log.error('OffscreenCanvas is not available in your browser.')();\n    }\n    const offscreenCanvas = screenCanvas.transferControlToOffscreen();\n\n    // Transfer the offscreen canvas to the worker\n    this.worker.postMessage(\n      {\n        command: 'start',\n        opts: Object.assign({}, opts, {canvas: offscreenCanvas})\n      },\n      [offscreenCanvas]\n    );\n\n    // store the main canvas on the local thread\n    this.canvas = screenCanvas;\n  }\n\n  _resizeCanvasDrawingBuffer() {\n    if (this.autoResizeDrawingBuffer) {\n      // TODO: get access to gl context and use 'cssToDevicePixels'\n      const devicePixelRatio = this.useDevicePixels ? window.devicePixelRatio || 1 : 1;\n      const width = Math.ceil(this.canvas.clientWidth * devicePixelRatio);\n      const height = Math.ceil(this.canvas.clientHeight * devicePixelRatio);\n\n      if (this.width !== width || this.height !== height) {\n        this.width = width;\n        this.height = height;\n        this.worker.postMessage({\n          command: 'resize',\n          width,\n          height\n        });\n      }\n    }\n  }\n}\n"],"file":"animation-loop-proxy.js"}