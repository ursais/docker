{"version":3,"sources":["../../../src/debug/seer-integration.js"],"names":["models","addModel","model","id","seer","listItem","logModel","uniforms","isReady","throttle","attributesObject","geometry","Object","assign","attributes","uniformsObject","multiUpdate","path","data","removeModel","deleteItem","recursiveSet","obj","value","length","slice","overrides","Map","setOverride","valuePath","window","__SEER_INITIALIZED__","has","set","get","getOverrides","overs","forEach","listenFor","payload","itemKey","type","getUniforms","setUniforms"],"mappings":"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","sourcesContent":["import seer from 'seer';\n\nimport {window} from '../utils';\n\nconst models = {};\n\n/**\n * Add a model to our cache indexed by id\n */\nexport const addModel = model => {\n  if (models[model.id]) {\n    return;\n  }\n  models[model.id] = model;\n\n  seer.listItem('luma.gl', model.id);\n};\n\n/**\n * Log a model uniforms and attributes.\n */\nexport const logModel = (model, uniforms) => {\n  if (!seer.isReady() || seer.throttle(`luma.gl:${model.id}`, 1e3)) {\n    return;\n  }\n\n  const attributesObject = model.geometry\n    ? Object.assign({}, model.geometry.attributes, model.attributes)\n    : model.attributes;\n  const uniformsObject = Object.assign({}, model.uniforms, uniforms);\n\n  seer.multiUpdate('luma.gl', model.id, [\n    {path: 'objects.uniforms', data: uniformsObject},\n    {path: 'objects.attributes', data: attributesObject}\n  ]);\n};\n\n/**\n * Remove a previously set model from the cache\n */\nexport const removeModel = id => {\n  delete models[id];\n  seer.deleteItem('luma.gl', id);\n};\n\n/**\n * Recursively traverse an object given a path of properties and set the given value\n */\nconst recursiveSet = (obj, path, value) => {\n  if (!obj) {\n    return;\n  }\n\n  if (path.length > 1) {\n    recursiveSet(obj[path[0]], path.slice(1), value);\n  } else {\n    obj[path[0]] = value;\n  }\n};\n\nconst overrides = new Map();\n\n/**\n * Create an override on the specify layer, indexed by a valuePath array.\n * Do nothing in case Seer as not been initialized to prevent any preformance drawback.\n */\nexport const setOverride = (id, valuePath, value) => {\n  if (!window.__SEER_INITIALIZED__) {\n    return;\n  }\n\n  if (!overrides.has(id)) {\n    overrides.set(id, new Map());\n  }\n\n  const uniforms = overrides.get(id);\n  uniforms.set(valuePath, value);\n};\n\n/**\n * Apply overrides to a specific model's uniforms\n */\nexport const getOverrides = (id, uniforms) => {\n  if (!window.__SEER_INITIALIZED__ || !id) {\n    return;\n  }\n\n  const overs = overrides.get(id);\n  if (!overs) {\n    return;\n  }\n\n  overs.forEach((value, valuePath) => {\n    recursiveSet(uniforms, valuePath, value);\n  });\n};\n\n/**\n * Listen for luma.gl edit events\n */\nseer.listenFor('luma.gl', payload => {\n  const model = models[payload.itemKey];\n  if (!model || payload.type !== 'edit' || payload.valuePath[0] !== 'uniforms') {\n    return;\n  }\n\n  const valuePath = payload.valuePath.slice(1);\n  setOverride(payload.itemKey, valuePath, payload.value);\n\n  const uniforms = model.getUniforms();\n  recursiveSet(uniforms, valuePath, payload.value);\n  model.setUniforms(uniforms);\n});\n"],"file":"seer-integration.js"}