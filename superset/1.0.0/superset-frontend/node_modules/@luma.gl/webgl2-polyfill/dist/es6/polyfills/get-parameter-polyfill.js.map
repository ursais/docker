{"version":3,"sources":["../../../src/polyfills/get-parameter-polyfill.js"],"names":["OES_element_index","WEBGL_draw_buffers","EXT_disjoint_timer_query","EXT_disjoint_timer_query_webgl2","EXT_texture_filter_anisotropic","WEBGL_debug_renderer_info","GL_FRAGMENT_SHADER_DERIVATIVE_HINT","GL_DONT_CARE","GL_GPU_DISJOINT_EXT","GL_MAX_TEXTURE_MAX_ANISOTROPY_EXT","GL_UNMASKED_VENDOR_WEBGL","GL_UNMASKED_RENDERER_WEBGL","getWebGL2ValueOrZero","gl","isWebGL2","undefined","WEBGL_PARAMETERS","getParameter","ext","getExtension","GPU_DISJOINT_EXT","UNMASKED_VENDOR_WEBGL","UNMASKED_RENDERER_WEBGL","luma","extensions","MAX_TEXTURE_MAX_ANISOTROPY_EXT","MAX_COLOR_ATTACHMENTS_WEBGL","MAX_DRAW_BUFFERS_WEBGL","Boolean","_version","getParameterPolyfill","originalGetParameter","pname","limit","value","result"],"mappings":"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","sourcesContent":["/* eslint-disable no-inline-comments, max-len, camelcase */\nimport GL from '@luma.gl/constants';\n\nconst OES_element_index = 'OES_element_index';\nconst WEBGL_draw_buffers = 'WEBGL_draw_buffers';\nconst EXT_disjoint_timer_query = 'EXT_disjoint_timer_query';\nconst EXT_disjoint_timer_query_webgl2 = 'EXT_disjoint_timer_query_webgl2';\nconst EXT_texture_filter_anisotropic = 'EXT_texture_filter_anisotropic';\nconst WEBGL_debug_renderer_info = 'WEBGL_debug_renderer_info';\n\nconst GL_FRAGMENT_SHADER_DERIVATIVE_HINT = 0x8b8b;\nconst GL_DONT_CARE = 0x1100;\nconst GL_GPU_DISJOINT_EXT = 0x8fbb;\nconst GL_MAX_TEXTURE_MAX_ANISOTROPY_EXT = 0x84ff;\nconst GL_UNMASKED_VENDOR_WEBGL = 0x9245; // vendor string of the graphics driver.\nconst GL_UNMASKED_RENDERER_WEBGL = 0x9246; // renderer string of the graphics driver.\n\nconst getWebGL2ValueOrZero = gl => (!isWebGL2(gl) ? 0 : undefined);\n\n// if a function returns undefined in this table,\n// the original getParameter will be called, defeating the override\nconst WEBGL_PARAMETERS = {\n  [GL.READ_BUFFER]: gl => (!isWebGL2(gl) ? GL.COLOR_ATTACHMENT0 : undefined),\n\n  // WebGL2 context parameters\n  [GL_FRAGMENT_SHADER_DERIVATIVE_HINT]: gl => (!isWebGL2(gl) ? GL_DONT_CARE : undefined),\n\n  [GL.RASTERIZER_DISCARD]: getWebGL2ValueOrZero,\n\n  [GL.SAMPLES]: getWebGL2ValueOrZero,\n\n  // WebGL2 extension context parameters\n  [GL_GPU_DISJOINT_EXT]: (gl, getParameter) => {\n    const ext = isWebGL2(gl)\n      ? gl.getExtension(EXT_disjoint_timer_query_webgl2)\n      : gl.getExtension(EXT_disjoint_timer_query);\n    return ext && ext.GPU_DISJOINT_EXT ? getParameter(ext.GPU_DISJOINT_EXT) : 0;\n  },\n\n  // Extension fixed values\n  [GL_UNMASKED_VENDOR_WEBGL]: (gl, getParameter) => {\n    const ext = gl.getExtension(WEBGL_debug_renderer_info);\n    return getParameter((ext && ext.UNMASKED_VENDOR_WEBGL) || GL.VENDOR);\n  },\n\n  [GL_UNMASKED_RENDERER_WEBGL]: (gl, getParameter) => {\n    const ext = gl.getExtension(WEBGL_debug_renderer_info);\n    return getParameter((ext && ext.UNMASKED_RENDERER_WEBGL) || GL.RENDERER);\n  },\n\n  // Extension LIMITS\n  [GL_MAX_TEXTURE_MAX_ANISOTROPY_EXT]: (gl, getParameter) => {\n    const ext = gl.luma.extensions[EXT_texture_filter_anisotropic];\n    return ext ? getParameter(ext.MAX_TEXTURE_MAX_ANISOTROPY_EXT) : 1.0;\n  },\n\n  // WebGL2 Limits\n  [GL.MAX_3D_TEXTURE_SIZE]: getWebGL2ValueOrZero,\n  [GL.MAX_ARRAY_TEXTURE_LAYERS]: getWebGL2ValueOrZero,\n  [GL.MAX_CLIENT_WAIT_TIMEOUT_WEBGL]: getWebGL2ValueOrZero,\n  [GL.MAX_COLOR_ATTACHMENTS]: (gl, getParameter) => {\n    if (!isWebGL2(gl)) {\n      const ext = gl.getExtension(WEBGL_draw_buffers);\n      return ext ? getParameter(ext.MAX_COLOR_ATTACHMENTS_WEBGL) : 0;\n    }\n    return undefined;\n  },\n  [GL.MAX_COMBINED_FRAGMENT_UNIFORM_COMPONENTS]: getWebGL2ValueOrZero,\n  [GL.MAX_COMBINED_UNIFORM_BLOCKS]: getWebGL2ValueOrZero,\n  [GL.MAX_COMBINED_VERTEX_UNIFORM_COMPONENTS]: getWebGL2ValueOrZero,\n  [GL.MAX_DRAW_BUFFERS]: gl => {\n    if (!isWebGL2(gl)) {\n      const ext = gl.getExtension(WEBGL_draw_buffers);\n      return ext ? ext.MAX_DRAW_BUFFERS_WEBGL : 0;\n    }\n    return undefined;\n  },\n  [GL.MAX_ELEMENT_INDEX]:\n    // Guess: per webglstats.com 99.6% of webgl2 supports 2147483647\n    gl => (gl.getExtension(OES_element_index) ? 2147483647 : 65535),\n  [GL.MAX_ELEMENTS_INDICES]:\n    // Guess: \"Reasonably safe\" per webglstats.com - could be higher/lower (on some mobile devices)\n    gl => (gl.getExtension(OES_element_index) ? 16777216 : 65535),\n  [GL.MAX_ELEMENTS_VERTICES]:\n    // Guess: \"Reasonably safe\" per webglstats.com - could be higher/lower (on some mobile devices)\n    gl => 16777216,\n  [GL.MAX_FRAGMENT_INPUT_COMPONENTS]: getWebGL2ValueOrZero,\n  [GL.MAX_FRAGMENT_UNIFORM_BLOCKS]: getWebGL2ValueOrZero,\n  [GL.MAX_FRAGMENT_UNIFORM_COMPONENTS]: getWebGL2ValueOrZero,\n  [GL.MAX_SAMPLES]: getWebGL2ValueOrZero,\n  [GL.MAX_SERVER_WAIT_TIMEOUT]: getWebGL2ValueOrZero,\n  [GL.MAX_TEXTURE_LOD_BIAS]: getWebGL2ValueOrZero,\n  [GL.MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS]: getWebGL2ValueOrZero,\n  [GL.MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS]: getWebGL2ValueOrZero,\n  [GL.MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS]: getWebGL2ValueOrZero,\n  [GL.MAX_UNIFORM_BLOCK_SIZE]: getWebGL2ValueOrZero,\n  [GL.MAX_UNIFORM_BUFFER_BINDINGS]: getWebGL2ValueOrZero,\n  [GL.MAX_VARYING_COMPONENTS]: getWebGL2ValueOrZero,\n  [GL.MAX_VERTEX_OUTPUT_COMPONENTS]: getWebGL2ValueOrZero,\n  [GL.MAX_VERTEX_UNIFORM_BLOCKS]: getWebGL2ValueOrZero,\n  [GL.MAX_VERTEX_UNIFORM_COMPONENTS]: getWebGL2ValueOrZero,\n  [GL.MIN_PROGRAM_TEXEL_OFFSET]: getWebGL2ValueOrZero,\n  [GL.MAX_PROGRAM_TEXEL_OFFSET]: getWebGL2ValueOrZero,\n  [GL.UNIFORM_BUFFER_OFFSET_ALIGNMENT]: getWebGL2ValueOrZero\n};\n\n// Return true if WebGL2 context\nfunction isWebGL2(gl) {\n  return Boolean(gl && gl._version === 2);\n}\n\n// A \"replacement\" gl.getParameter that accepts \"enums\" from extensions and WebGL2\n// and returns reasonably safe defaults\nexport function getParameterPolyfill(gl, originalGetParameter, pname) {\n  // Return mock limits (usually 0) for WebGL2 constants to ensure these\n  // can be queries without error\n  const limit = WEBGL_PARAMETERS[pname];\n  const value = typeof limit === 'function' ? limit(gl, originalGetParameter, pname) : limit;\n  const result = value !== undefined ? value : originalGetParameter(pname);\n  return result;\n}\n"],"file":"get-parameter-polyfill.js"}