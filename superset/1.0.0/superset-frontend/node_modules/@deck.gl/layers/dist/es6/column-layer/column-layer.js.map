{"version":3,"sources":["../../../src/column-layer/column-layer.js"],"names":["Layer","createIterable","Model","fp64","PhongMaterial","ColumnGeometry","fp64LowPart","defaultMaterial","vs","fs","DEFAULT_COLOR","defaultProps","diskResolution","type","min","value","vertices","radius","angle","offset","coverage","max","elevationScale","lineWidthUnits","lineWidthScale","lineWidthMinPixels","lineWidthMaxPixels","Number","MAX_SAFE_INTEGER","extruded","wireframe","filled","stroked","getPosition","x","position","getFillColor","getLineColor","getLineWidth","getElevation","material","getColor","deprecatedFor","ColumnLayer","getShaders","projectModule","use64bitProjection","modules","initializeState","attributeManager","getAttributeManager","addInstanced","instancePositions","size","transition","accessor","instanceElevations","instancePositions64xyLow","update","calculateInstancePositions64xyLow","instanceFillColors","defaultValue","instanceLineColors","instanceStrokeWidths","updateState","props","oldProps","changeFlags","regenerateModels","gl","context","state","model","delete","setState","_getModel","invalidateAll","_updateGeometry","getGeometry","geometry","height","nradial","meanVertexDistance","i","p","d","Math","sqrt","edgeDistance","cos","PI","Object","assign","id","isInstanced","shaderCache","fillVertexCount","attributes","POSITION","length","wireframeVertexCount","indices","setProps","draw","uniforms","viewport","widthMultiplier","distanceScales","metersPerPixel","setUniforms","widthScale","widthMinPixels","widthMaxPixels","isIndexed","setVertexCount","setDrawMode","isStroke","attribute","startRow","endRow","isFP64","use64bitPositions","constant","Float32Array","data","iterable","objectInfo","object","index","layerName"],"mappings":"AAoBA,SAAQA,KAAR,EAAeC,cAAf,QAAoC,eAApC;AAEA,SAAQC,KAAR,EAAeC,IAAf,EAAqBC,aAArB,QAAyC,eAAzC;AACA,OAAOC,cAAP,MAA2B,mBAA3B;MACOC,W,GAAeH,I,CAAfG,W;AACP,MAAMC,eAAe,GAAG,IAAIH,aAAJ,EAAxB;AAEA,OAAOI,EAAP,MAAe,4BAAf;AACA,OAAOC,EAAP,MAAe,8BAAf;AAEA,MAAMC,aAAa,GAAG,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,GAAV,CAAtB;AAEA,MAAMC,YAAY,GAAG;AACnBC,EAAAA,cAAc,EAAE;AAACC,IAAAA,IAAI,EAAE,QAAP;AAAiBC,IAAAA,GAAG,EAAE,CAAtB;AAAyBC,IAAAA,KAAK,EAAE;AAAhC,GADG;AAEnBC,EAAAA,QAAQ,EAAE,IAFS;AAGnBC,EAAAA,MAAM,EAAE;AAACJ,IAAAA,IAAI,EAAE,QAAP;AAAiBC,IAAAA,GAAG,EAAE,CAAtB;AAAyBC,IAAAA,KAAK,EAAE;AAAhC,GAHW;AAInBG,EAAAA,KAAK,EAAE;AAACL,IAAAA,IAAI,EAAE,QAAP;AAAiBE,IAAAA,KAAK,EAAE;AAAxB,GAJY;AAKnBI,EAAAA,MAAM,EAAE;AAACN,IAAAA,IAAI,EAAE,OAAP;AAAgBE,IAAAA,KAAK,EAAE,CAAC,CAAD,EAAI,CAAJ;AAAvB,GALW;AAMnBK,EAAAA,QAAQ,EAAE;AAACP,IAAAA,IAAI,EAAE,QAAP;AAAiBC,IAAAA,GAAG,EAAE,CAAtB;AAAyBO,IAAAA,GAAG,EAAE,CAA9B;AAAiCN,IAAAA,KAAK,EAAE;AAAxC,GANS;AAOnBO,EAAAA,cAAc,EAAE;AAACT,IAAAA,IAAI,EAAE,QAAP;AAAiBC,IAAAA,GAAG,EAAE,CAAtB;AAAyBC,IAAAA,KAAK,EAAE;AAAhC,GAPG;AASnBQ,EAAAA,cAAc,EAAE,QATG;AAUnBC,EAAAA,cAAc,EAAE,CAVG;AAWnBC,EAAAA,kBAAkB,EAAE,CAXD;AAYnBC,EAAAA,kBAAkB,EAAEC,MAAM,CAACC,gBAZR;AAcnBC,EAAAA,QAAQ,EAAE,IAdS;AAenB1B,EAAAA,IAAI,EAAE,KAfa;AAgBnB2B,EAAAA,SAAS,EAAE,KAhBQ;AAiBnBC,EAAAA,MAAM,EAAE,IAjBW;AAkBnBC,EAAAA,OAAO,EAAE,KAlBU;AAoBnBC,EAAAA,WAAW,EAAE;AAACpB,IAAAA,IAAI,EAAE,UAAP;AAAmBE,IAAAA,KAAK,EAAEmB,CAAC,IAAIA,CAAC,CAACC;AAAjC,GApBM;AAqBnBC,EAAAA,YAAY,EAAE;AAACvB,IAAAA,IAAI,EAAE,UAAP;AAAmBE,IAAAA,KAAK,EAAEL;AAA1B,GArBK;AAsBnB2B,EAAAA,YAAY,EAAE;AAACxB,IAAAA,IAAI,EAAE,UAAP;AAAmBE,IAAAA,KAAK,EAAEL;AAA1B,GAtBK;AAuBnB4B,EAAAA,YAAY,EAAE;AAACzB,IAAAA,IAAI,EAAE,UAAP;AAAmBE,IAAAA,KAAK,EAAE;AAA1B,GAvBK;AAwBnBwB,EAAAA,YAAY,EAAE;AAAC1B,IAAAA,IAAI,EAAE,UAAP;AAAmBE,IAAAA,KAAK,EAAE;AAA1B,GAxBK;AAyBnByB,EAAAA,QAAQ,EAAEjC,eAzBS;AA0BnBkC,EAAAA,QAAQ,EAAE;AAACC,IAAAA,aAAa,EAAE,CAAC,cAAD,EAAiB,cAAjB;AAAhB;AA1BS,CAArB;AA6BA,eAAe,MAAMC,WAAN,SAA0B3C,KAA1B,CAAgC;AAC7C4C,EAAAA,UAAU,GAAG;AACX,UAAMC,aAAa,GAAG,KAAKC,kBAAL,KAA4B,WAA5B,GAA0C,WAAhE;AACA,WAAO;AAACtC,MAAAA,EAAD;AAAKC,MAAAA,EAAL;AAASsC,MAAAA,OAAO,EAAE,CAACF,aAAD,EAAgB,kBAAhB,EAAoC,SAApC;AAAlB,KAAP;AACD;;AAMDG,EAAAA,eAAe,GAAG;AAChB,UAAMC,gBAAgB,GAAG,KAAKC,mBAAL,EAAzB;AAEAD,IAAAA,gBAAgB,CAACE,YAAjB,CAA8B;AAC5BC,MAAAA,iBAAiB,EAAE;AACjBC,QAAAA,IAAI,EAAE,CADW;AAEjBC,QAAAA,UAAU,EAAE,IAFK;AAGjBC,QAAAA,QAAQ,EAAE;AAHO,OADS;AAM5BC,MAAAA,kBAAkB,EAAE;AAClBH,QAAAA,IAAI,EAAE,CADY;AAElBC,QAAAA,UAAU,EAAE,IAFM;AAGlBC,QAAAA,QAAQ,EAAE;AAHQ,OANQ;AAW5BE,MAAAA,wBAAwB,EAAE;AACxBJ,QAAAA,IAAI,EAAE,CADkB;AAExBE,QAAAA,QAAQ,EAAE,aAFc;AAGxBG,QAAAA,MAAM,EAAE,KAAKC;AAHW,OAXE;AAgB5BC,MAAAA,kBAAkB,EAAE;AAClBP,QAAAA,IAAI,EAAE,CADY;AAElBxC,QAAAA,IAAI,MAFc;AAGlByC,QAAAA,UAAU,EAAE,IAHM;AAIlBC,QAAAA,QAAQ,EAAE,cAJQ;AAKlBM,QAAAA,YAAY,EAAEnD;AALI,OAhBQ;AAuB5BoD,MAAAA,kBAAkB,EAAE;AAClBT,QAAAA,IAAI,EAAE,CADY;AAElBxC,QAAAA,IAAI,MAFc;AAGlByC,QAAAA,UAAU,EAAE,IAHM;AAIlBC,QAAAA,QAAQ,EAAE,cAJQ;AAKlBM,QAAAA,YAAY,EAAEnD;AALI,OAvBQ;AA8B5BqD,MAAAA,oBAAoB,EAAE;AACpBV,QAAAA,IAAI,EAAE,CADc;AAEpBE,QAAAA,QAAQ,EAAE,cAFU;AAGpBD,QAAAA,UAAU,EAAE;AAHQ;AA9BM,KAA9B;AAqCD;;AAEDU,EAAAA,WAAW,OAAiC;AAAA,QAA/BC,KAA+B,QAA/BA,KAA+B;AAAA,QAAxBC,QAAwB,QAAxBA,QAAwB;AAAA,QAAdC,WAAc,QAAdA,WAAc;AAC1C,UAAMH,WAAN,CAAkB;AAACC,MAAAA,KAAD;AAAQC,MAAAA,QAAR;AAAkBC,MAAAA;AAAlB,KAAlB;AAEA,UAAMC,gBAAgB,GAAGH,KAAK,CAAC9D,IAAN,KAAe+D,QAAQ,CAAC/D,IAAjD;;AAEA,QAAIiE,gBAAJ,EAAsB;AAAA,YACbC,EADa,GACP,KAAKC,OADE,CACbD,EADa;;AAEpB,UAAI,KAAKE,KAAL,CAAWC,KAAf,EAAsB;AACpB,aAAKD,KAAL,CAAWC,KAAX,CAAiBC,MAAjB;AACD;;AACD,WAAKC,QAAL,CAAc;AAACF,QAAAA,KAAK,EAAE,KAAKG,SAAL,CAAeN,EAAf;AAAR,OAAd;AACA,WAAKnB,mBAAL,GAA2B0B,aAA3B;AACD;;AAED,QACER,gBAAgB,IAChBH,KAAK,CAACrD,cAAN,KAAyBsD,QAAQ,CAACtD,cADlC,IAEAqD,KAAK,CAACjD,QAAN,KAAmBkD,QAAQ,CAAClD,QAH9B,EAIE;AACA,WAAK6D,eAAL,CAAqBZ,KAArB;AACD;AACF;;AAEDa,EAAAA,WAAW,CAAClE,cAAD,EAAiBI,QAAjB,EAA2B;AACpC,UAAM+D,QAAQ,GAAG,IAAI1E,cAAJ,CAAmB;AAClCY,MAAAA,MAAM,EAAE,CAD0B;AAElC+D,MAAAA,MAAM,EAAE,CAF0B;AAGlChE,MAAAA,QAHkC;AAIlCiE,MAAAA,OAAO,EAAErE;AAJyB,KAAnB,CAAjB;AAOA,QAAIsE,kBAAkB,GAAG,CAAzB;;AACA,QAAIlE,QAAJ,EAAc;AACZ,WAAK,IAAImE,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGvE,cAApB,EAAoCuE,CAAC,EAArC,EAAyC;AACvC,cAAMC,CAAC,GAAGpE,QAAQ,CAACmE,CAAD,CAAlB;AACA,cAAME,CAAC,GAAGC,IAAI,CAACC,IAAL,CAAUH,CAAC,CAAC,CAAD,CAAD,GAAOA,CAAC,CAAC,CAAD,CAAR,GAAcA,CAAC,CAAC,CAAD,CAAD,GAAOA,CAAC,CAAC,CAAD,CAAhC,CAAV;AACAF,QAAAA,kBAAkB,IAAIG,CAAC,GAAGzE,cAA1B;AACD;AACF,KAND,MAMO;AACLsE,MAAAA,kBAAkB,GAAG,CAArB;AACD;;AACD,SAAKR,QAAL,CAAc;AACZc,MAAAA,YAAY,EAAEF,IAAI,CAACG,GAAL,CAASH,IAAI,CAACI,EAAL,GAAU9E,cAAnB,IAAqCsE;AADvC,KAAd;AAIA,WAAOH,QAAP;AACD;;AAEDJ,EAAAA,SAAS,CAACN,EAAD,EAAK;AACZ,WAAO,IAAInE,KAAJ,CACLmE,EADK,EAELsB,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkB,KAAKhD,UAAL,EAAlB,EAAqC;AACnCiD,MAAAA,EAAE,EAAE,KAAK5B,KAAL,CAAW4B,EADoB;AAEnCC,MAAAA,WAAW,EAAE,IAFsB;AAGnCC,MAAAA,WAAW,EAAE,KAAKzB,OAAL,CAAayB;AAHS,KAArC,CAFK,CAAP;AAQD;;AAEDlB,EAAAA,eAAe,QAA6B;AAAA,QAA3BjE,cAA2B,SAA3BA,cAA2B;AAAA,QAAXI,QAAW,SAAXA,QAAW;AAC1C,UAAM+D,QAAQ,GAAG,KAAKD,WAAL,CAAiBlE,cAAjB,EAAiCI,QAAjC,CAAjB;AAEA,SAAK0D,QAAL,CAAc;AACZsB,MAAAA,eAAe,EAAEjB,QAAQ,CAACkB,UAAT,CAAoBC,QAApB,CAA6BnF,KAA7B,CAAmCoF,MAAnC,GAA4C,CADjD;AAEZC,MAAAA,oBAAoB,EAAErB,QAAQ,CAACsB,OAAT,CAAiBtF,KAAjB,CAAuBoF;AAFjC,KAAd;AAKA,SAAK5B,KAAL,CAAWC,KAAX,CAAiB8B,QAAjB,CAA0B;AAACvB,MAAAA;AAAD,KAA1B;AACD;;AAEDwB,EAAAA,IAAI,QAAa;AAAA,QAAXC,QAAW,SAAXA,QAAW;AAAA,UACRC,QADQ,GACI,KAAKnC,OADT,CACRmC,QADQ;AAAA,wBAiBX,KAAKxC,KAjBM;AAAA,UAGb1C,cAHa,eAGbA,cAHa;AAAA,UAIbC,cAJa,eAIbA,cAJa;AAAA,UAKbC,kBALa,eAKbA,kBALa;AAAA,UAMbC,kBANa,eAMbA,kBANa;AAAA,UAQbJ,cARa,eAQbA,cARa;AAAA,UASbO,QATa,eASbA,QATa;AAAA,UAUbE,MAVa,eAUbA,MAVa;AAAA,UAWbC,OAXa,eAWbA,OAXa;AAAA,UAYbF,SAZa,eAYbA,SAZa;AAAA,UAabX,MAba,eAabA,MAba;AAAA,UAcbC,QAda,eAcbA,QAda;AAAA,UAebH,MAfa,eAebA,MAfa;AAAA,UAgBbC,KAhBa,eAgBbA,KAhBa;AAAA,wBAkBsD,KAAKqD,KAlB3D;AAAA,UAkBRC,KAlBQ,eAkBRA,KAlBQ;AAAA,UAkBDwB,eAlBC,eAkBDA,eAlBC;AAAA,UAkBgBI,oBAlBhB,eAkBgBA,oBAlBhB;AAAA,UAkBsCZ,YAlBtC,eAkBsCA,YAlBtC;AAoBf,UAAMkB,eAAe,GACnBnF,cAAc,KAAK,QAAnB,GAA8BkF,QAAQ,CAACE,cAAT,CAAwBC,cAAxB,CAAuC,CAAvC,CAA9B,GAA0E,CAD5E;AAGApC,IAAAA,KAAK,CAACqC,WAAN,CACElB,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBY,QAAlB,EAA4B;AAC1BvF,MAAAA,MAD0B;AAE1BC,MAAAA,KAAK,EAAGA,KAAK,GAAG,GAAT,GAAgBoE,IAAI,CAACI,EAFF;AAG1BvE,MAAAA,MAH0B;AAI1BU,MAAAA,QAJ0B;AAK1BT,MAAAA,QAL0B;AAM1BE,MAAAA,cAN0B;AAO1BkE,MAAAA,YAP0B;AAQ1BsB,MAAAA,UAAU,EAAEtF,cAAc,GAAGkF,eARH;AAS1BK,MAAAA,cAAc,EAAEtF,kBATU;AAU1BuF,MAAAA,cAAc,EAAEtF;AAVU,KAA5B,CADF;;AAgBA,QAAIG,QAAQ,IAAIC,SAAhB,EAA2B;AACzB0C,MAAAA,KAAK,CAAC8B,QAAN,CAAe;AAACW,QAAAA,SAAS,EAAE;AAAZ,OAAf;AACAzC,MAAAA,KAAK,CACF0C,cADH,CACkBd,oBADlB,EAEGe,WAFH,IAGGN,WAHH,CAGe;AAACO,QAAAA,QAAQ,EAAE;AAAX,OAHf,EAIGb,IAJH;AAKD;;AACD,QAAIxE,MAAJ,EAAY;AACVyC,MAAAA,KAAK,CAAC8B,QAAN,CAAe;AAACW,QAAAA,SAAS,EAAE;AAAZ,OAAf;AACAzC,MAAAA,KAAK,CACF0C,cADH,CACkBlB,eADlB,EAEGmB,WAFH,IAGGN,WAHH,CAGe;AAACO,QAAAA,QAAQ,EAAE;AAAX,OAHf,EAIGb,IAJH;AAKD;;AAED,QAAI,CAAC1E,QAAD,IAAaG,OAAjB,EAA0B;AACxBwC,MAAAA,KAAK,CAAC8B,QAAN,CAAe;AAACW,QAAAA,SAAS,EAAE;AAAZ,OAAf;AAGAzC,MAAAA,KAAK,CACF0C,cADH,CACmBlB,eAAe,GAAG,CAAnB,GAAwB,CAD1C,EAEGmB,WAFH,IAGGN,WAHH,CAGe;AAACO,QAAAA,QAAQ,EAAE;AAAX,OAHf,EAIGb,IAJH;AAKD;AACF;;AAED5C,EAAAA,iCAAiC,CAAC0D,SAAD,SAAgC;AAAA,QAAnBC,QAAmB,SAAnBA,QAAmB;AAAA,QAATC,MAAS,SAATA,MAAS;AAC/D,UAAMC,MAAM,GAAG,KAAKC,iBAAL,EAAf;AACAJ,IAAAA,SAAS,CAACK,QAAV,GAAqB,CAACF,MAAtB;;AAEA,QAAI,CAACA,MAAL,EAAa;AACXH,MAAAA,SAAS,CAACtG,KAAV,GAAkB,IAAI4G,YAAJ,CAAiB,CAAjB,CAAlB;AACA;AACD;;AAP8D,yBASnC,KAAK1D,KAT8B;AAAA,UASxD2D,IATwD,gBASxDA,IATwD;AAAA,UASlD3F,WATkD,gBASlDA,WATkD;AAAA,UAUxDlB,KAVwD,GAUzCsG,SAVyC,CAUxDtG,KAVwD;AAAA,UAUjDsC,IAViD,GAUzCgE,SAVyC,CAUjDhE,IAViD;AAW/D,QAAI8B,CAAC,GAAGmC,QAAQ,GAAGjE,IAAnB;;AAX+D,4BAYhCpD,cAAc,CAAC2H,IAAD,EAAON,QAAP,EAAiBC,MAAjB,CAZkB;AAAA,UAYxDM,QAZwD,mBAYxDA,QAZwD;AAAA,UAY9CC,UAZ8C,mBAY9CA,UAZ8C;;AAa/D,SAAK,MAAMC,MAAX,IAAqBF,QAArB,EAA+B;AAC7BC,MAAAA,UAAU,CAACE,KAAX;AACA,YAAM7F,QAAQ,GAAGF,WAAW,CAAC8F,MAAD,EAASD,UAAT,CAA5B;AACA/G,MAAAA,KAAK,CAACoE,CAAC,EAAF,CAAL,GAAa7E,WAAW,CAAC6B,QAAQ,CAAC,CAAD,CAAT,CAAxB;AACApB,MAAAA,KAAK,CAACoE,CAAC,EAAF,CAAL,GAAa7E,WAAW,CAAC6B,QAAQ,CAAC,CAAD,CAAT,CAAxB;AACD;AACF;;AAjN4C;AAoN/CQ,WAAW,CAACsF,SAAZ,GAAwB,aAAxB;AACAtF,WAAW,CAAChC,YAAZ,GAA2BA,YAA3B","sourcesContent":["// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nimport {Layer, createIterable} from '@deck.gl/core';\nimport GL from '@luma.gl/constants';\nimport {Model, fp64, PhongMaterial} from '@luma.gl/core';\nimport ColumnGeometry from './column-geometry';\nconst {fp64LowPart} = fp64;\nconst defaultMaterial = new PhongMaterial();\n\nimport vs from './column-layer-vertex.glsl';\nimport fs from './column-layer-fragment.glsl';\n\nconst DEFAULT_COLOR = [0, 0, 0, 255];\n\nconst defaultProps = {\n  diskResolution: {type: 'number', min: 4, value: 20},\n  vertices: null,\n  radius: {type: 'number', min: 0, value: 1000},\n  angle: {type: 'number', value: 0},\n  offset: {type: 'array', value: [0, 0]},\n  coverage: {type: 'number', min: 0, max: 1, value: 1},\n  elevationScale: {type: 'number', min: 0, value: 1},\n\n  lineWidthUnits: 'meters',\n  lineWidthScale: 1,\n  lineWidthMinPixels: 0,\n  lineWidthMaxPixels: Number.MAX_SAFE_INTEGER,\n\n  extruded: true,\n  fp64: false,\n  wireframe: false,\n  filled: true,\n  stroked: false,\n\n  getPosition: {type: 'accessor', value: x => x.position},\n  getFillColor: {type: 'accessor', value: DEFAULT_COLOR},\n  getLineColor: {type: 'accessor', value: DEFAULT_COLOR},\n  getLineWidth: {type: 'accessor', value: 1},\n  getElevation: {type: 'accessor', value: 1000},\n  material: defaultMaterial,\n  getColor: {deprecatedFor: ['getFillColor', 'getLineColor']}\n};\n\nexport default class ColumnLayer extends Layer {\n  getShaders() {\n    const projectModule = this.use64bitProjection() ? 'project64' : 'project32';\n    return {vs, fs, modules: [projectModule, 'gouraud-lighting', 'picking']};\n  }\n\n  /**\n   * DeckGL calls initializeState when GL context is available\n   * Essentially a deferred constructor\n   */\n  initializeState() {\n    const attributeManager = this.getAttributeManager();\n    /* eslint-disable max-len */\n    attributeManager.addInstanced({\n      instancePositions: {\n        size: 3,\n        transition: true,\n        accessor: 'getPosition'\n      },\n      instanceElevations: {\n        size: 1,\n        transition: true,\n        accessor: 'getElevation'\n      },\n      instancePositions64xyLow: {\n        size: 2,\n        accessor: 'getPosition',\n        update: this.calculateInstancePositions64xyLow\n      },\n      instanceFillColors: {\n        size: 4,\n        type: GL.UNSIGNED_BYTE,\n        transition: true,\n        accessor: 'getFillColor',\n        defaultValue: DEFAULT_COLOR\n      },\n      instanceLineColors: {\n        size: 4,\n        type: GL.UNSIGNED_BYTE,\n        transition: true,\n        accessor: 'getLineColor',\n        defaultValue: DEFAULT_COLOR\n      },\n      instanceStrokeWidths: {\n        size: 1,\n        accessor: 'getLineWidth',\n        transition: true\n      }\n    });\n    /* eslint-enable max-len */\n  }\n\n  updateState({props, oldProps, changeFlags}) {\n    super.updateState({props, oldProps, changeFlags});\n\n    const regenerateModels = props.fp64 !== oldProps.fp64;\n\n    if (regenerateModels) {\n      const {gl} = this.context;\n      if (this.state.model) {\n        this.state.model.delete();\n      }\n      this.setState({model: this._getModel(gl)});\n      this.getAttributeManager().invalidateAll();\n    }\n\n    if (\n      regenerateModels ||\n      props.diskResolution !== oldProps.diskResolution ||\n      props.vertices !== oldProps.vertices\n    ) {\n      this._updateGeometry(props);\n    }\n  }\n\n  getGeometry(diskResolution, vertices) {\n    const geometry = new ColumnGeometry({\n      radius: 1,\n      height: 2,\n      vertices,\n      nradial: diskResolution\n    });\n\n    let meanVertexDistance = 0;\n    if (vertices) {\n      for (let i = 0; i < diskResolution; i++) {\n        const p = vertices[i];\n        const d = Math.sqrt(p[0] * p[0] + p[1] * p[1]);\n        meanVertexDistance += d / diskResolution;\n      }\n    } else {\n      meanVertexDistance = 1;\n    }\n    this.setState({\n      edgeDistance: Math.cos(Math.PI / diskResolution) * meanVertexDistance\n    });\n\n    return geometry;\n  }\n\n  _getModel(gl) {\n    return new Model(\n      gl,\n      Object.assign({}, this.getShaders(), {\n        id: this.props.id,\n        isInstanced: true,\n        shaderCache: this.context.shaderCache\n      })\n    );\n  }\n\n  _updateGeometry({diskResolution, vertices}) {\n    const geometry = this.getGeometry(diskResolution, vertices);\n\n    this.setState({\n      fillVertexCount: geometry.attributes.POSITION.value.length / 3,\n      wireframeVertexCount: geometry.indices.value.length\n    });\n\n    this.state.model.setProps({geometry});\n  }\n\n  draw({uniforms}) {\n    const {viewport} = this.context;\n    const {\n      lineWidthUnits,\n      lineWidthScale,\n      lineWidthMinPixels,\n      lineWidthMaxPixels,\n\n      elevationScale,\n      extruded,\n      filled,\n      stroked,\n      wireframe,\n      offset,\n      coverage,\n      radius,\n      angle\n    } = this.props;\n    const {model, fillVertexCount, wireframeVertexCount, edgeDistance} = this.state;\n\n    const widthMultiplier =\n      lineWidthUnits === 'pixels' ? viewport.distanceScales.metersPerPixel[2] : 1;\n\n    model.setUniforms(\n      Object.assign({}, uniforms, {\n        radius,\n        angle: (angle / 180) * Math.PI,\n        offset,\n        extruded,\n        coverage,\n        elevationScale,\n        edgeDistance,\n        widthScale: lineWidthScale * widthMultiplier,\n        widthMinPixels: lineWidthMinPixels,\n        widthMaxPixels: lineWidthMaxPixels\n      })\n    );\n\n    // When drawing 3d: draw wireframe first so it doesn't get occluded by depth test\n    if (extruded && wireframe) {\n      model.setProps({isIndexed: true});\n      model\n        .setVertexCount(wireframeVertexCount)\n        .setDrawMode(GL.LINES)\n        .setUniforms({isStroke: true})\n        .draw();\n    }\n    if (filled) {\n      model.setProps({isIndexed: false});\n      model\n        .setVertexCount(fillVertexCount)\n        .setDrawMode(GL.TRIANGLE_STRIP)\n        .setUniforms({isStroke: false})\n        .draw();\n    }\n    // When drawing 2d: draw fill before stroke so that the outline is always on top\n    if (!extruded && stroked) {\n      model.setProps({isIndexed: false});\n      // The width of the stroke is achieved by flattening the side of the cylinder.\n      // Skip the last 1/3 of the vertices which is the top.\n      model\n        .setVertexCount((fillVertexCount * 2) / 3)\n        .setDrawMode(GL.TRIANGLE_STRIP)\n        .setUniforms({isStroke: true})\n        .draw();\n    }\n  }\n\n  calculateInstancePositions64xyLow(attribute, {startRow, endRow}) {\n    const isFP64 = this.use64bitPositions();\n    attribute.constant = !isFP64;\n\n    if (!isFP64) {\n      attribute.value = new Float32Array(2);\n      return;\n    }\n\n    const {data, getPosition} = this.props;\n    const {value, size} = attribute;\n    let i = startRow * size;\n    const {iterable, objectInfo} = createIterable(data, startRow, endRow);\n    for (const object of iterable) {\n      objectInfo.index++;\n      const position = getPosition(object, objectInfo);\n      value[i++] = fp64LowPart(position[0]);\n      value[i++] = fp64LowPart(position[1]);\n    }\n  }\n}\n\nColumnLayer.layerName = 'ColumnLayer';\nColumnLayer.defaultProps = defaultProps;\n"],"file":"column-layer.js"}