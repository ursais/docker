{"version":3,"sources":["../../../src/solid-polygon-layer/polygon-tesselator.js"],"names":["Polygon","experimental","Tesselator","fp64","fp64Module","fp64LowPart","PolygonTesselator","data","getGeometry","positionFormat","IndexType","Uint32Array","attributes","positions","size","positions64xyLow","fp64Only","vertexValid","type","Uint8ClampedArray","indices","attributeName","subarray","vertexCount","polygon","getVertexCount","positionSize","context","normalize","geometrySize","_updateIndices","_updatePositions","geometryIndex","offset","vertexStart","indexStart","indexLayout","typedArrayManager","target","currentLength","length","i","getSurfaceIndices","allocate","constructor","copy","j","polygonPositions","holeIndices","x","y","z"],"mappings":"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","sourcesContent":["// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\n// Handles tesselation of polygons with holes\n// - 2D surfaces\n// - 2D outlines\n// - 3D surfaces (top and sides only)\n// - 3D wireframes (not yet)\nimport * as Polygon from './polygon';\nimport {experimental} from '@deck.gl/core';\nconst {Tesselator} = experimental;\nimport {fp64 as fp64Module} from '@luma.gl/core';\nconst {fp64LowPart} = fp64Module;\n\n// This class is set up to allow querying one attribute at a time\n// the way the AttributeManager expects it\nexport default class PolygonTesselator extends Tesselator {\n  constructor({data, getGeometry, fp64, positionFormat, IndexType = Uint32Array}) {\n    super({\n      data,\n      getGeometry,\n      fp64,\n      positionFormat,\n      attributes: {\n        positions: {size: 3},\n        positions64xyLow: {size: 2, fp64Only: true},\n        vertexValid: {type: Uint8ClampedArray, size: 1},\n        indices: {type: IndexType, size: 1}\n      }\n    });\n  }\n\n  /* Getters */\n  get(attributeName) {\n    if (attributeName === 'indices') {\n      return this.attributes.indices.subarray(0, this.vertexCount);\n    }\n\n    return this.attributes[attributeName];\n  }\n\n  /* Implement base Tesselator interface */\n  getGeometrySize(polygon) {\n    return Polygon.getVertexCount(polygon, this.positionSize);\n  }\n\n  updateGeometryAttributes(polygon, context) {\n    polygon = Polygon.normalize(polygon, this.positionSize, context.geometrySize);\n\n    this._updateIndices(polygon, context);\n    this._updatePositions(polygon, context);\n  }\n\n  // Flatten the indices array\n  _updateIndices(polygon, {geometryIndex, vertexStart: offset, indexStart}) {\n    const {attributes, indexLayout, typedArrayManager} = this;\n\n    let target = attributes.indices;\n    let currentLength = target.length;\n    let i = indexStart;\n\n    // 1. get triangulated indices for the internal areas\n    const indices = Polygon.getSurfaceIndices(polygon, this.positionSize);\n\n    // make sure the buffer is large enough\n    if (currentLength < i + indices.length) {\n      currentLength = (i + indices.length) * 2;\n      target = typedArrayManager.allocate(target, currentLength, {\n        type: target.constructor,\n        size: 1,\n        copy: true\n      });\n    }\n\n    // 2. offset each index by the number of indices in previous polygons\n    for (let j = 0; j < indices.length; j++) {\n      target[i++] = indices[j] + offset;\n    }\n\n    indexLayout[geometryIndex] = indices.length;\n    attributes.indices = target;\n  }\n\n  // Flatten out all the vertices of all the sub subPolygons\n  _updatePositions(polygon, {vertexStart, geometrySize}) {\n    const {\n      attributes: {positions, positions64xyLow, vertexValid},\n      fp64,\n      positionSize\n    } = this;\n\n    let i = vertexStart;\n    const {positions: polygonPositions, holeIndices} = polygon;\n\n    for (let j = 0; j < geometrySize; j++) {\n      const x = polygonPositions[j * positionSize];\n      const y = polygonPositions[j * positionSize + 1];\n      const z = positionSize > 2 ? polygonPositions[j * positionSize + 2] : 0;\n\n      positions[i * 3] = x;\n      positions[i * 3 + 1] = y;\n      positions[i * 3 + 2] = z;\n      if (fp64) {\n        positions64xyLow[i * 2] = fp64LowPart(x);\n        positions64xyLow[i * 2 + 1] = fp64LowPart(y);\n      }\n      vertexValid[i] = 1;\n      i++;\n    }\n\n    /* We are reusing the some buffer for `nextPositions` by offseting one vertex\n     * to the left. As a result,\n     * the last vertex of each ring overlaps with the first vertex of the next ring.\n     * `vertexValid` is used to mark the end of each ring so we don't draw these\n     * segments:\n      positions      A0 A1 A2 A3 A4 B0 B1 B2 C0 ...\n      nextPositions  A1 A2 A3 A4 B0 B1 B2 C0 C1 ...\n      vertexValid    1  1  1  1  0  1  1  0  1 ...\n     */\n    if (holeIndices) {\n      for (let j = 0; j < holeIndices.length; j++) {\n        vertexValid[vertexStart + holeIndices[j] / positionSize - 1] = 0;\n      }\n    }\n    vertexValid[vertexStart + geometrySize - 1] = 0;\n  }\n}\n"],"file":"polygon-tesselator.js"}