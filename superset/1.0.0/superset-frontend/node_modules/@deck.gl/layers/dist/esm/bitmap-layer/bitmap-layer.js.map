{"version":3,"sources":["../../../src/bitmap-layer/bitmap-layer.js"],"names":["Layer","Model","Geometry","Texture2D","fp64","loadImage","fp64LowPart","vs","fs","DEFAULT_TEXTURE_PARAMETERS","defaultProps","image","bounds","type","value","compare","desaturate","min","max","transparentColor","tintColor","BitmapLayer","projectModule","use64bitProjection","modules","attributeManager","getAttributeManager","add","positions","size","update","calculatePositions","Float32Array","positions64xyLow","calculatePositions64xyLow","setState","numInstances","props","oldProps","changeFlags","gl","context","state","model","delete","_getModel","invalidateAll","loadTexture","_getPositionsFromBounds","invalidate","bitmapTexture","Array","Number","isFinite","i","length","Object","assign","getShaders","id","shaderCache","geometry","drawMode","vertexCount","attributes","texCoords","isInstanced","uniforms","setUniforms","draw","Promise","then","data","Image","HTMLCanvasElement","parameters","set","attribute","isFP64","use64bitPositions","constant","map","layerName"],"mappings":";;;;;;;;;;AAsBA,SAAQA,KAAR,QAAoB,eAApB;AACA,SAAQC,KAAR,EAAeC,QAAf,EAAyBC,SAAzB,EAAoCC,IAApC,QAA+C,eAA/C;AACA,SAAQC,SAAR,QAAwB,oBAAxB;IAEOC,W,GAAeF,I,CAAfE,W;AAEP,OAAOC,EAAP,MAAe,uBAAf;AACA,OAAOC,EAAP,MAAe,yBAAf;AAEA,IAAMC,0BAA0B,4QAAhC;AAQA,IAAMC,YAAY,GAAG;AACnBC,EAAAA,KAAK,EAAE,IADY;AAEnBC,EAAAA,MAAM,EAAE;AAACC,IAAAA,IAAI,EAAE,OAAP;AAAgBC,IAAAA,KAAK,EAAE,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,CAAV,CAAvB;AAAqCC,IAAAA,OAAO,EAAE;AAA9C,GAFW;AAGnBX,EAAAA,IAAI,EAAE,KAHa;AAKnBY,EAAAA,UAAU,EAAE;AAACH,IAAAA,IAAI,EAAE,QAAP;AAAiBI,IAAAA,GAAG,EAAE,CAAtB;AAAyBC,IAAAA,GAAG,EAAE,CAA9B;AAAiCJ,IAAAA,KAAK,EAAE;AAAxC,GALO;AASnBK,EAAAA,gBAAgB,EAAE;AAACN,IAAAA,IAAI,EAAE,OAAP;AAAgBC,IAAAA,KAAK,EAAE,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,CAAV;AAAvB,GATC;AAUnBM,EAAAA,SAAS,EAAE;AAACP,IAAAA,IAAI,EAAE,OAAP;AAAgBC,IAAAA,KAAK,EAAE,CAAC,GAAD,EAAM,GAAN,EAAW,GAAX;AAAvB;AAVQ,CAArB;;IAmBqBO,W;;;;;;;;;;;iCACN;AACX,UAAMC,aAAa,GAAG,KAAKC,kBAAL,KAA4B,WAA5B,GAA0C,WAAhE;AACA,aAAO;AAAChB,QAAAA,EAAE,EAAFA,EAAD;AAAKC,QAAAA,EAAE,EAAFA,EAAL;AAASgB,QAAAA,OAAO,EAAE,CAACF,aAAD,EAAgB,SAAhB;AAAlB,OAAP;AACD;;;sCAEiB;AAChB,UAAMG,gBAAgB,GAAG,KAAKC,mBAAL,EAAzB;AAEAD,MAAAA,gBAAgB,CAACE,GAAjB,CAAqB;AACnBC,QAAAA,SAAS,EAAE;AACTC,UAAAA,IAAI,EAAE,CADG;AAETC,UAAAA,MAAM,EAAE,KAAKC,kBAFJ;AAGTjB,UAAAA,KAAK,EAAE,IAAIkB,YAAJ,CAAiB,EAAjB;AAHE,SADQ;AAMnBC,QAAAA,gBAAgB,EAAE;AAChBJ,UAAAA,IAAI,EAAE,CADU;AAEhBC,UAAAA,MAAM,EAAE,KAAKI,yBAFG;AAGhBpB,UAAAA,KAAK,EAAE,IAAIkB,YAAJ,CAAiB,EAAjB;AAHS;AANC,OAArB;AAaA,WAAKG,QAAL,CAAc;AAACC,QAAAA,YAAY,EAAE;AAAf,OAAd;AACD;;;sCAE2C;AAAA,UAA/BC,KAA+B,QAA/BA,KAA+B;AAAA,UAAxBC,QAAwB,QAAxBA,QAAwB;AAAA,UAAdC,WAAc,QAAdA,WAAc;;AAE1C,UAAIF,KAAK,CAACjC,IAAN,KAAekC,QAAQ,CAAClC,IAA5B,EAAkC;AAAA,YACzBoC,EADyB,GACnB,KAAKC,OADc,CACzBD,EADyB;;AAEhC,YAAI,KAAKE,KAAL,CAAWC,KAAf,EAAsB;AACpB,eAAKD,KAAL,CAAWC,KAAX,CAAiBC,MAAjB;AACD;;AACD,aAAKT,QAAL,CAAc;AAACQ,UAAAA,KAAK,EAAE,KAAKE,SAAL,CAAeL,EAAf;AAAR,SAAd;AACA,aAAKd,mBAAL,GAA2BoB,aAA3B;AACD;;AAED,UAAIT,KAAK,CAAC1B,KAAN,KAAgB2B,QAAQ,CAAC3B,KAA7B,EAAoC;AAClC,aAAKoC,WAAL,CAAiBV,KAAK,CAAC1B,KAAvB;AACD;;AAED,UAAMc,gBAAgB,GAAG,KAAKC,mBAAL,EAAzB;;AAEA,UAAIW,KAAK,CAACzB,MAAN,KAAiB0B,QAAQ,CAAC1B,MAA9B,EAAsC;AACpC,aAAKuB,QAAL,CAAc;AACZP,UAAAA,SAAS,EAAE,KAAKoB,uBAAL,CAA6BX,KAAK,CAACzB,MAAnC;AADC,SAAd;AAGAa,QAAAA,gBAAgB,CAACwB,UAAjB,CAA4B,WAA5B;AACAxB,QAAAA,gBAAgB,CAACwB,UAAjB,CAA4B,kBAA5B;AACD;AACF;;;oCAEe;AACd;;AAEA,UAAI,KAAKP,KAAL,CAAWQ,aAAf,EAA8B;AAC5B,aAAKR,KAAL,CAAWQ,aAAX,CAAyBN,MAAzB;AACD;AACF;;;4CAEuBhC,M,EAAQ;AAC9B,UAAMgB,SAAS,GAAG,IAAIuB,KAAJ,CAAU,EAAV,CAAlB;;AAEA,UAAIC,MAAM,CAACC,QAAP,CAAgBzC,MAAM,CAAC,CAAD,CAAtB,CAAJ,EAAgC;AAQ9BgB,QAAAA,SAAS,CAAC,CAAD,CAAT,GAAehB,MAAM,CAAC,CAAD,CAArB;AACAgB,QAAAA,SAAS,CAAC,CAAD,CAAT,GAAehB,MAAM,CAAC,CAAD,CAArB;AACAgB,QAAAA,SAAS,CAAC,CAAD,CAAT,GAAe,CAAf;AAEAA,QAAAA,SAAS,CAAC,CAAD,CAAT,GAAehB,MAAM,CAAC,CAAD,CAArB;AACAgB,QAAAA,SAAS,CAAC,CAAD,CAAT,GAAehB,MAAM,CAAC,CAAD,CAArB;AACAgB,QAAAA,SAAS,CAAC,CAAD,CAAT,GAAe,CAAf;AAEAA,QAAAA,SAAS,CAAC,CAAD,CAAT,GAAehB,MAAM,CAAC,CAAD,CAArB;AACAgB,QAAAA,SAAS,CAAC,CAAD,CAAT,GAAehB,MAAM,CAAC,CAAD,CAArB;AACAgB,QAAAA,SAAS,CAAC,CAAD,CAAT,GAAe,CAAf;AAEAA,QAAAA,SAAS,CAAC,CAAD,CAAT,GAAehB,MAAM,CAAC,CAAD,CAArB;AACAgB,QAAAA,SAAS,CAAC,EAAD,CAAT,GAAgBhB,MAAM,CAAC,CAAD,CAAtB;AACAgB,QAAAA,SAAS,CAAC,EAAD,CAAT,GAAgB,CAAhB;AACD,OAvBD,MAuBO;AAEL,aAAK,IAAI0B,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG1C,MAAM,CAAC2C,MAA3B,EAAmCD,CAAC,EAApC,EAAwC;AACtC1B,UAAAA,SAAS,CAAC0B,CAAC,GAAG,CAAJ,GAAQ,CAAT,CAAT,GAAuB1C,MAAM,CAAC0C,CAAD,CAAN,CAAU,CAAV,CAAvB;AACA1B,UAAAA,SAAS,CAAC0B,CAAC,GAAG,CAAJ,GAAQ,CAAT,CAAT,GAAuB1C,MAAM,CAAC0C,CAAD,CAAN,CAAU,CAAV,CAAvB;AACA1B,UAAAA,SAAS,CAAC0B,CAAC,GAAG,CAAJ,GAAQ,CAAT,CAAT,GAAuB1C,MAAM,CAAC0C,CAAD,CAAN,CAAU,CAAV,KAAgB,CAAvC;AACD;AACF;;AAED,aAAO1B,SAAP;AACD;;;8BAESY,E,EAAI;AACZ,UAAI,CAACA,EAAL,EAAS;AACP,eAAO,IAAP;AACD;;AAOD,aAAO,IAAIvC,KAAJ,CACLuC,EADK,EAELgB,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkB,KAAKC,UAAL,EAAlB,EAAqC;AACnCC,QAAAA,EAAE,EAAE,KAAKtB,KAAL,CAAWsB,EADoB;AAEnCC,QAAAA,WAAW,EAAE,KAAKnB,OAAL,CAAamB,WAFS;AAGnCC,QAAAA,QAAQ,EAAE,IAAI3D,QAAJ,CAAa;AACrB4D,UAAAA,QAAQ,GADa;AAErBC,UAAAA,WAAW,EAAE,CAFQ;AAGrBC,UAAAA,UAAU,EAAE;AACVC,YAAAA,SAAS,EAAE,IAAIjC,YAAJ,CAAiB,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,CAAV,EAAa,CAAb,EAAgB,CAAhB,EAAmB,CAAnB,EAAsB,CAAtB,CAAjB;AADD;AAHS,SAAb,CAHyB;AAUnCkC,QAAAA,WAAW,EAAE;AAVsB,OAArC,CAFK,CAAP;AAeD;;;gCAEgB;AAAA,UAAXC,QAAW,SAAXA,QAAW;AAAA,wBACgB,KAAKzB,KADrB;AAAA,UACRQ,aADQ,eACRA,aADQ;AAAA,UACOP,KADP,eACOA,KADP;AAAA,wBAEmC,KAAKN,KAFxC;AAAA,UAERrB,UAFQ,eAERA,UAFQ;AAAA,UAEIG,gBAFJ,eAEIA,gBAFJ;AAAA,UAEsBC,SAFtB,eAEsBA,SAFtB;;AAMf,UAAI8B,aAAa,IAAIP,KAArB,EAA4B;AAC1BA,QAAAA,KAAK,CACFyB,WADH,CAEIZ,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBU,QAAlB,EAA4B;AAC1BjB,UAAAA,aAAa,EAAbA,aAD0B;AAE1BlC,UAAAA,UAAU,EAAVA,UAF0B;AAG1BG,UAAAA,gBAAgB,EAAhBA,gBAH0B;AAI1BC,UAAAA,SAAS,EAATA;AAJ0B,SAA5B,CAFJ,EASGiD,IATH;AAUD;AACF;;;gCAEW1D,K,EAAO;AAAA;;AACjB,UAAI,OAAOA,KAAP,KAAiB,QAArB,EAA+B;AAC7BA,QAAAA,KAAK,GAAGN,SAAS,CAACM,KAAD,CAAjB;AACD;;AACD,UAAIA,KAAK,YAAY2D,OAArB,EAA8B;AAC5B3D,QAAAA,KAAK,CAAC4D,IAAN,CAAW,UAAAC,IAAI;AAAA,iBAAI,KAAI,CAACzB,WAAL,CAAiByB,IAAjB,CAAJ;AAAA,SAAf;AACA;AACD;;AAPgB,UASVhC,EATU,GASJ,KAAKC,OATD,CASVD,EATU;;AAWjB,UAAI,KAAKE,KAAL,CAAWQ,aAAf,EAA8B;AAC5B,aAAKR,KAAL,CAAWQ,aAAX,CAAyBN,MAAzB;AACD;;AAED,UAAIjC,KAAK,YAAYR,SAArB,EAAgC;AAC9B,aAAKgC,QAAL,CAAc;AAACe,UAAAA,aAAa,EAAEvC;AAAhB,SAAd;AACD,OAFD,MAEO,IAELA,KAAK,YAAY8D,KAAjB,IACA9D,KAAK,YAAY+D,iBAHZ,EAIL;AACA,aAAKvC,QAAL,CAAc;AACZe,UAAAA,aAAa,EAAE,IAAI/C,SAAJ,CAAcqC,EAAd,EAAkB;AAC/BgC,YAAAA,IAAI,EAAE7D,KADyB;AAE/BgE,YAAAA,UAAU,EAAElE;AAFmB,WAAlB;AADH,SAAd;AAMD;AACF;;;8CAE2B;AAAA,UAARK,KAAQ,SAARA,KAAQ;AAAA,UACnBc,SADmB,GACN,KAAKc,KADC,CACnBd,SADmB;AAE1Bd,MAAAA,KAAK,CAAC8D,GAAN,CAAUhD,SAAV;AACD;;;8CAEyBiD,S,EAAW;AACnC,UAAMC,MAAM,GAAG,KAAKC,iBAAL,EAAf;AACAF,MAAAA,SAAS,CAACG,QAAV,GAAqB,CAACF,MAAtB;;AAEA,UAAI,CAACA,MAAL,EAAa;AACXD,QAAAA,SAAS,CAAC/D,KAAV,GAAkB,IAAIkB,YAAJ,CAAiB,CAAjB,CAAlB;AACA;AACD;;AAPkC,UAS5BlB,KAT4B,GASnB+D,SATmB,CAS5B/D,KAT4B;AAUnCA,MAAAA,KAAK,CAAC8D,GAAN,CAAU,KAAKlC,KAAL,CAAWd,SAAX,CAAqBqD,GAArB,CAAyB3E,WAAzB,CAAV;AACD;;;;EA/LsCN,K;;SAApBqB,W;AAkMrBA,WAAW,CAAC6D,SAAZ,GAAwB,aAAxB;AACA7D,WAAW,CAACX,YAAZ,GAA2BA,YAA3B","sourcesContent":["// Copyright (c) 2015 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\n/* global Image, HTMLCanvasElement */\nimport GL from '@luma.gl/constants';\nimport {Layer} from '@deck.gl/core';\nimport {Model, Geometry, Texture2D, fp64} from '@luma.gl/core';\nimport {loadImage} from '@loaders.gl/images';\n\nconst {fp64LowPart} = fp64;\n\nimport vs from './bitmap-layer-vertex';\nimport fs from './bitmap-layer-fragment';\n\nconst DEFAULT_TEXTURE_PARAMETERS = {\n  [GL.TEXTURE_MIN_FILTER]: GL.LINEAR_MIPMAP_LINEAR,\n  // GL.LINEAR is the default value but explicitly set it here\n  [GL.TEXTURE_MAG_FILTER]: GL.LINEAR,\n  [GL.TEXTURE_WRAP_S]: GL.CLAMP_TO_EDGE,\n  [GL.TEXTURE_WRAP_T]: GL.CLAMP_TO_EDGE\n};\n\nconst defaultProps = {\n  image: null,\n  bounds: {type: 'array', value: [1, 0, 0, 1], compare: true},\n  fp64: false,\n\n  desaturate: {type: 'number', min: 0, max: 1, value: 0},\n  // More context: because of the blending mode we're using for ground imagery,\n  // alpha is not effective when blending the bitmap layers with the base map.\n  // Instead we need to manually dim/blend rgb values with a background color.\n  transparentColor: {type: 'color', value: [0, 0, 0, 0]},\n  tintColor: {type: 'color', value: [255, 255, 255]}\n};\n\n/*\n * @class\n * @param {object} props\n * @param {number} props.transparentColor - color to interpret transparency to\n * @param {number} props.tintColor - color bias\n */\nexport default class BitmapLayer extends Layer {\n  getShaders() {\n    const projectModule = this.use64bitProjection() ? 'project64' : 'project32';\n    return {vs, fs, modules: [projectModule, 'picking']};\n  }\n\n  initializeState() {\n    const attributeManager = this.getAttributeManager();\n\n    attributeManager.add({\n      positions: {\n        size: 3,\n        update: this.calculatePositions,\n        value: new Float32Array(12)\n      },\n      positions64xyLow: {\n        size: 3,\n        update: this.calculatePositions64xyLow,\n        value: new Float32Array(12)\n      }\n    });\n\n    this.setState({numInstances: 4}); // 4 corners\n  }\n\n  updateState({props, oldProps, changeFlags}) {\n    // setup model first\n    if (props.fp64 !== oldProps.fp64) {\n      const {gl} = this.context;\n      if (this.state.model) {\n        this.state.model.delete();\n      }\n      this.setState({model: this._getModel(gl)});\n      this.getAttributeManager().invalidateAll();\n    }\n\n    if (props.image !== oldProps.image) {\n      this.loadTexture(props.image);\n    }\n\n    const attributeManager = this.getAttributeManager();\n\n    if (props.bounds !== oldProps.bounds) {\n      this.setState({\n        positions: this._getPositionsFromBounds(props.bounds)\n      });\n      attributeManager.invalidate('positions');\n      attributeManager.invalidate('positions64xyLow');\n    }\n  }\n\n  finalizeState() {\n    super.finalizeState();\n\n    if (this.state.bitmapTexture) {\n      this.state.bitmapTexture.delete();\n    }\n  }\n\n  _getPositionsFromBounds(bounds) {\n    const positions = new Array(12);\n    // bounds as [minX, minY, maxX, maxY]\n    if (Number.isFinite(bounds[0])) {\n      /*\n        (minX0, maxY3) ---- (maxX2, maxY3)\n               |                  |\n               |                  |\n               |                  |\n        (minX0, minY1) ---- (maxX2, minY1)\n     */\n      positions[0] = bounds[0];\n      positions[1] = bounds[1];\n      positions[2] = 0;\n\n      positions[3] = bounds[0];\n      positions[4] = bounds[3];\n      positions[5] = 0;\n\n      positions[6] = bounds[2];\n      positions[7] = bounds[3];\n      positions[8] = 0;\n\n      positions[9] = bounds[2];\n      positions[10] = bounds[1];\n      positions[11] = 0;\n    } else {\n      // [[minX, minY], [minX, maxY], [maxX, maxY], [maxX, minY]]\n      for (let i = 0; i < bounds.length; i++) {\n        positions[i * 3 + 0] = bounds[i][0];\n        positions[i * 3 + 1] = bounds[i][1];\n        positions[i * 3 + 2] = bounds[i][2] || 0;\n      }\n    }\n\n    return positions;\n  }\n\n  _getModel(gl) {\n    if (!gl) {\n      return null;\n    }\n\n    /*\n      0,1 --- 1,1\n       |       |\n      0,0 --- 1,0\n    */\n    return new Model(\n      gl,\n      Object.assign({}, this.getShaders(), {\n        id: this.props.id,\n        shaderCache: this.context.shaderCache,\n        geometry: new Geometry({\n          drawMode: GL.TRIANGLE_FAN,\n          vertexCount: 4,\n          attributes: {\n            texCoords: new Float32Array([0, 0, 0, 1, 1, 1, 1, 0])\n          }\n        }),\n        isInstanced: false\n      })\n    );\n  }\n\n  draw({uniforms}) {\n    const {bitmapTexture, model} = this.state;\n    const {desaturate, transparentColor, tintColor} = this.props;\n\n    // // TODO fix zFighting\n    // Render the image\n    if (bitmapTexture && model) {\n      model\n        .setUniforms(\n          Object.assign({}, uniforms, {\n            bitmapTexture,\n            desaturate,\n            transparentColor,\n            tintColor\n          })\n        )\n        .draw();\n    }\n  }\n\n  loadTexture(image) {\n    if (typeof image === 'string') {\n      image = loadImage(image);\n    }\n    if (image instanceof Promise) {\n      image.then(data => this.loadTexture(data));\n      return;\n    }\n\n    const {gl} = this.context;\n\n    if (this.state.bitmapTexture) {\n      this.state.bitmapTexture.delete();\n    }\n\n    if (image instanceof Texture2D) {\n      this.setState({bitmapTexture: image});\n    } else if (\n      // browser object\n      image instanceof Image ||\n      image instanceof HTMLCanvasElement\n    ) {\n      this.setState({\n        bitmapTexture: new Texture2D(gl, {\n          data: image,\n          parameters: DEFAULT_TEXTURE_PARAMETERS\n        })\n      });\n    }\n  }\n\n  calculatePositions({value}) {\n    const {positions} = this.state;\n    value.set(positions);\n  }\n\n  calculatePositions64xyLow(attribute) {\n    const isFP64 = this.use64bitPositions();\n    attribute.constant = !isFP64;\n\n    if (!isFP64) {\n      attribute.value = new Float32Array(4);\n      return;\n    }\n\n    const {value} = attribute;\n    value.set(this.state.positions.map(fp64LowPart));\n  }\n}\n\nBitmapLayer.layerName = 'BitmapLayer';\nBitmapLayer.defaultProps = defaultProps;\n"],"file":"bitmap-layer.js"}