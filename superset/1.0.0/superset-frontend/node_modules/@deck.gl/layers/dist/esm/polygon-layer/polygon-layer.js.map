{"version":3,"sources":["../../../src/polygon-layer/polygon-layer.js"],"names":["PhongMaterial","CompositeLayer","createIterable","SolidPolygonLayer","PathLayer","Polygon","defaultLineColor","defaultFillColor","defaultMaterial","defaultProps","stroked","filled","extruded","elevationScale","wireframe","lineWidthUnits","lineWidthScale","lineWidthMinPixels","lineWidthMaxPixels","Number","MAX_SAFE_INTEGER","lineJointRounded","lineMiterLimit","lineDashJustified","fp64","getPolygon","type","value","f","polygon","getFillColor","getLineColor","getLineWidth","getLineDashArray","getElevation","material","PolygonLayer","state","paths","oldProps","props","changeFlags","geometryChanged","dataChanged","updateTriggersChanged","all","_getPaths","info","Object","assign","object","data","positionFormat","positionSize","iterable","objectInfo","index","normalize","positions","holeIndices","i","length","path","subarray","push","accessor","x","transitions","updateTriggers","FillLayer","getSubLayerClass","StrokeLayer","polygonLayer","shouldRenderSubLayer","getSubLayerProps","id","polygonLineLayer","widthUnits","widthScale","widthMinPixels","widthMaxPixels","rounded","miterLimit","dashJustified","getWidth","getColor","getPath","_getAccessor","getDashArray","layerName"],"mappings":";;;;;AAoBA,SAAQA,aAAR,QAA4B,eAA5B;AACA,SAAQC,cAAR,EAAwBC,cAAxB,QAA6C,eAA7C;AACA,OAAOC,iBAAP,MAA8B,4CAA9B;AACA,OAAOC,SAAP,MAAsB,0BAAtB;AACA,OAAO,KAAKC,OAAZ,MAAyB,gCAAzB;AAEA,IAAMC,gBAAgB,GAAG,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,GAAV,CAAzB;AACA,IAAMC,gBAAgB,GAAG,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,GAAV,CAAzB;AACA,IAAMC,eAAe,GAAG,IAAIR,aAAJ,EAAxB;AAEA,IAAMS,YAAY,GAAG;AACnBC,EAAAA,OAAO,EAAE,IADU;AAEnBC,EAAAA,MAAM,EAAE,IAFW;AAGnBC,EAAAA,QAAQ,EAAE,KAHS;AAInBC,EAAAA,cAAc,EAAE,CAJG;AAKnBC,EAAAA,SAAS,EAAE,KALQ;AAOnBC,EAAAA,cAAc,EAAE,QAPG;AAQnBC,EAAAA,cAAc,EAAE,CARG;AASnBC,EAAAA,kBAAkB,EAAE,CATD;AAUnBC,EAAAA,kBAAkB,EAAEC,MAAM,CAACC,gBAVR;AAWnBC,EAAAA,gBAAgB,EAAE,KAXC;AAYnBC,EAAAA,cAAc,EAAE,CAZG;AAanBC,EAAAA,iBAAiB,EAAE,KAbA;AAcnBC,EAAAA,IAAI,EAAE,KAda;AAgBnBC,EAAAA,UAAU,EAAE;AAACC,IAAAA,IAAI,EAAE,UAAP;AAAmBC,IAAAA,KAAK,EAAE,eAAAC,CAAC;AAAA,aAAIA,CAAC,CAACC,OAAN;AAAA;AAA3B,GAhBO;AAkBnBC,EAAAA,YAAY,EAAE;AAACJ,IAAAA,IAAI,EAAE,UAAP;AAAmBC,IAAAA,KAAK,EAAEpB;AAA1B,GAlBK;AAoBnBwB,EAAAA,YAAY,EAAE;AAACL,IAAAA,IAAI,EAAE,UAAP;AAAmBC,IAAAA,KAAK,EAAErB;AAA1B,GApBK;AAsBnB0B,EAAAA,YAAY,EAAE;AAACN,IAAAA,IAAI,EAAE,UAAP;AAAmBC,IAAAA,KAAK,EAAE;AAA1B,GAtBK;AAwBnBM,EAAAA,gBAAgB,EAAE;AAACP,IAAAA,IAAI,EAAE,UAAP;AAAmBC,IAAAA,KAAK,EAAE,CAAC,CAAD,EAAI,CAAJ;AAA1B,GAxBC;AA0BnBO,EAAAA,YAAY,EAAE;AAACR,IAAAA,IAAI,EAAE,UAAP;AAAmBC,IAAAA,KAAK,EAAE;AAA1B,GA1BK;AA6BnBQ,EAAAA,QAAQ,EAAE3B;AA7BS,CAArB;;IAgCqB4B,Y;;;;;;;;;;;sCACD;AAChB,WAAKC,KAAL,GAAa;AACXC,QAAAA,KAAK,EAAE;AADI,OAAb;AAGD;;;sCAE2C;AAAA,UAA/BC,QAA+B,QAA/BA,QAA+B;AAAA,UAArBC,KAAqB,QAArBA,KAAqB;AAAA,UAAdC,WAAc,QAAdA,WAAc;AAC1C,UAAMC,eAAe,GACnBD,WAAW,CAACE,WAAZ,IACCF,WAAW,CAACG,qBAAZ,KACEH,WAAW,CAACG,qBAAZ,CAAkCC,GAAlC,IAAyCJ,WAAW,CAACG,qBAAZ,CAAkCnB,UAD7E,CAFH;;AAKA,UAAIiB,eAAJ,EAAqB;AACnB,aAAKL,KAAL,CAAWC,KAAX,GAAmB,KAAKQ,SAAL,CAAeN,KAAf,CAAnB;AACD;AACF;;;0CAEsB;AAAA,UAAPO,IAAO,SAAPA,IAAO;AACrB,aAAOC,MAAM,CAACC,MAAP,CAAcF,IAAd,EAAoB;AAEzBG,QAAAA,MAAM,EAAGH,IAAI,CAACG,MAAL,IAAeH,IAAI,CAACG,MAAL,CAAYA,MAA5B,IAAuCH,IAAI,CAACG;AAF3B,OAApB,CAAP;AAID;;;qCAE6C;AAAA,UAAnCC,IAAmC,SAAnCA,IAAmC;AAAA,UAA7B1B,UAA6B,SAA7BA,UAA6B;AAAA,UAAjB2B,cAAiB,SAAjBA,cAAiB;AAC5C,UAAMd,KAAK,GAAG,EAAd;AACA,UAAMe,YAAY,GAAGD,cAAc,KAAK,IAAnB,GAA0B,CAA1B,GAA8B,CAAnD;;AAF4C,4BAIblD,cAAc,CAACiD,IAAD,CAJD;AAAA,UAIrCG,QAJqC,mBAIrCA,QAJqC;AAAA,UAI3BC,UAJ2B,mBAI3BA,UAJ2B;;AAAA;AAAA;AAAA;;AAAA;AAK5C,6BAAqBD,QAArB,8HAA+B;AAAA,cAApBJ,MAAoB;AAC7BK,UAAAA,UAAU,CAACC,KAAX;;AAD6B,mCAEInD,OAAO,CAACoD,SAAR,CAC/BhC,UAAU,CAACyB,MAAD,EAASK,UAAT,CADqB,EAE/BF,YAF+B,CAFJ;AAAA,cAEtBK,SAFsB,sBAEtBA,SAFsB;AAAA,cAEXC,WAFW,sBAEXA,WAFW;;AAO7B,cAAIA,WAAJ,EAAiB;AAIf,iBAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,IAAID,WAAW,CAACE,MAAjC,EAAyCD,CAAC,EAA1C,EAA8C;AAC5C,kBAAME,IAAI,GAAGJ,SAAS,CAACK,QAAV,CACXJ,WAAW,CAACC,CAAC,GAAG,CAAL,CAAX,IAAsB,CADX,EAEXD,WAAW,CAACC,CAAD,CAAX,IAAkBF,SAAS,CAACG,MAFjB,CAAb;AAIAvB,cAAAA,KAAK,CAAC0B,IAAN,CAAW;AAACF,gBAAAA,IAAI,EAAJA,IAAD;AAAOZ,gBAAAA,MAAM,EAANA;AAAP,eAAX;AACD;AACF,WAXD,MAWO;AACLZ,YAAAA,KAAK,CAAC0B,IAAN,CAAW;AAACF,cAAAA,IAAI,EAAEJ,SAAP;AAAkBR,cAAAA,MAAM,EAANA;AAAlB,aAAX;AACD;AACF;AA1B2C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AA2B5C,aAAOZ,KAAP;AACD;;;iCAEY2B,Q,EAAU;AACrB,UAAI,OAAOA,QAAP,KAAoB,UAAxB,EAAoC;AAClC,eAAO,UAAAC,CAAC;AAAA,iBAAID,QAAQ,CAACC,CAAC,CAAChB,MAAH,CAAZ;AAAA,SAAR;AACD;;AACD,aAAOe,QAAP;AACD;;;mCAGc;AAAA,wBAEqE,KAAKzB,KAF1E;AAAA,UAENW,IAFM,eAENA,IAFM;AAAA,UAEAzC,OAFA,eAEAA,OAFA;AAAA,UAESC,MAFT,eAESA,MAFT;AAAA,UAEiBC,QAFjB,eAEiBA,QAFjB;AAAA,UAE2BE,SAF3B,eAE2BA,SAF3B;AAAA,UAEsCD,cAFtC,eAEsCA,cAFtC;AAAA,UAEsDsD,WAFtD,eAEsDA,WAFtD;AAAA,yBAcT,KAAK3B,KAdI;AAAA,UAMXzB,cANW,gBAMXA,cANW;AAAA,UAOXC,cAPW,gBAOXA,cAPW;AAAA,UAQXC,kBARW,gBAQXA,kBARW;AAAA,UASXC,kBATW,gBASXA,kBATW;AAAA,UAUXG,gBAVW,gBAUXA,gBAVW;AAAA,UAWXC,cAXW,gBAWXA,cAXW;AAAA,UAYXC,iBAZW,gBAYXA,iBAZW;AAAA,UAaXC,IAbW,gBAaXA,IAbW;AAAA,yBA0BT,KAAKgB,KA1BI;AAAA,UAkBXV,YAlBW,gBAkBXA,YAlBW;AAAA,UAmBXC,YAnBW,gBAmBXA,YAnBW;AAAA,UAoBXC,YApBW,gBAoBXA,YApBW;AAAA,UAqBXC,gBArBW,gBAqBXA,gBArBW;AAAA,UAsBXC,YAtBW,gBAsBXA,YAtBW;AAAA,UAuBXT,UAvBW,gBAuBXA,UAvBW;AAAA,UAwBX2C,cAxBW,gBAwBXA,cAxBW;AAAA,UAyBXjC,QAzBW,gBAyBXA,QAzBW;AAAA,UA4BNG,KA5BM,GA4BG,KAAKD,KA5BR,CA4BNC,KA5BM;AA8Bb,UAAM+B,SAAS,GAAG,KAAKC,gBAAL,CAAsB,MAAtB,EAA8BnE,iBAA9B,CAAlB;AACA,UAAMoE,WAAW,GAAG,KAAKD,gBAAL,CAAsB,QAAtB,EAAgClE,SAAhC,CAApB;AAGA,UAAMoE,YAAY,GAChB,KAAKC,oBAAL,CAA0B,MAA1B,EAAkCnC,KAAlC,KACA,IAAI+B,SAAJ,CACE;AACEzD,QAAAA,QAAQ,EAARA,QADF;AAEEC,QAAAA,cAAc,EAAdA,cAFF;AAIEW,QAAAA,IAAI,EAAJA,IAJF;AAKEb,QAAAA,MAAM,EAANA,MALF;AAMEG,QAAAA,SAAS,EAATA,SANF;AAQEoB,QAAAA,YAAY,EAAZA,YARF;AASEJ,QAAAA,YAAY,EAAZA,YATF;AAUEC,QAAAA,YAAY,EAAZA,YAVF;AAYEI,QAAAA,QAAQ,EAARA,QAZF;AAaEgC,QAAAA,WAAW,EAAXA;AAbF,OADF,EAgBE,KAAKO,gBAAL,CAAsB;AACpBC,QAAAA,EAAE,EAAE,MADgB;AAEpBP,QAAAA,cAAc,EAAE;AACd3C,UAAAA,UAAU,EAAE2C,cAAc,CAAC3C,UADb;AAEdS,UAAAA,YAAY,EAAEkC,cAAc,CAAClC,YAFf;AAGdJ,UAAAA,YAAY,EAAEsC,cAAc,CAACtC,YAHf;AAIdC,UAAAA,YAAY,EAAEqC,cAAc,CAACrC;AAJf;AAFI,OAAtB,CAhBF,EAyBE;AACEoB,QAAAA,IAAI,EAAJA,IADF;AAEE1B,QAAAA,UAAU,EAAVA;AAFF,OAzBF,CAFF;AAkCA,UAAMmD,gBAAgB,GACpB,CAAChE,QAAD,IACAF,OADA,IAEA,KAAK+D,oBAAL,CAA0B,QAA1B,EAAoCnC,KAApC,CAFA,IAGA,IAAIiC,WAAJ,CACE;AACE/C,QAAAA,IAAI,EAAJA,IADF;AAEEqD,QAAAA,UAAU,EAAE9D,cAFd;AAGE+D,QAAAA,UAAU,EAAE9D,cAHd;AAIE+D,QAAAA,cAAc,EAAE9D,kBAJlB;AAKE+D,QAAAA,cAAc,EAAE9D,kBALlB;AAME+D,QAAAA,OAAO,EAAE5D,gBANX;AAOE6D,QAAAA,UAAU,EAAE5D,cAPd;AAQE6D,QAAAA,aAAa,EAAE5D,iBARjB;AAUE4C,QAAAA,WAAW,EAAEA,WAAW,IAAI;AAC1BiB,UAAAA,QAAQ,EAAEjB,WAAW,CAACnC,YADI;AAE1BqD,UAAAA,QAAQ,EAAElB,WAAW,CAACpC,YAFI;AAG1BuD,UAAAA,OAAO,EAAEnB,WAAW,CAAC1C;AAHK,SAV9B;AAgBE4D,QAAAA,QAAQ,EAAE,KAAKE,YAAL,CAAkBxD,YAAlB,CAhBZ;AAiBEqD,QAAAA,QAAQ,EAAE,KAAKG,YAAL,CAAkBvD,YAAlB,CAjBZ;AAkBEwD,QAAAA,YAAY,EAAE,KAAKD,YAAL,CAAkBtD,gBAAlB;AAlBhB,OADF,EAqBE,KAAKyC,gBAAL,CAAsB;AACpBC,QAAAA,EAAE,EAAE,QADgB;AAEpBP,QAAAA,cAAc,EAAE;AACdgB,UAAAA,QAAQ,EAAEhB,cAAc,CAACpC,YADX;AAEdqD,UAAAA,QAAQ,EAAEjB,cAAc,CAACrC,YAFX;AAGdyD,UAAAA,YAAY,EAAEpB,cAAc,CAACnC;AAHf;AAFI,OAAtB,CArBF,EA6BE;AACEkB,QAAAA,IAAI,EAAEb,KADR;AAEEgD,QAAAA,OAAO,EAAE,iBAAApB,CAAC;AAAA,iBAAIA,CAAC,CAACJ,IAAN;AAAA;AAFZ,OA7BF,CAJF;AAuCA,aAAO,CAEL,CAAClD,QAAD,IAAa4D,YAFR,EAGLI,gBAHK,EAKLhE,QAAQ,IAAI4D,YALP,CAAP;AAOD;;;;EAjLuCvE,c;;SAArBmC,Y;AAqLrBA,YAAY,CAACqD,SAAb,GAAyB,cAAzB;AACArD,YAAY,CAAC3B,YAAb,GAA4BA,YAA5B","sourcesContent":["// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nimport {PhongMaterial} from '@luma.gl/core';\nimport {CompositeLayer, createIterable} from '@deck.gl/core';\nimport SolidPolygonLayer from '../solid-polygon-layer/solid-polygon-layer';\nimport PathLayer from '../path-layer/path-layer';\nimport * as Polygon from '../solid-polygon-layer/polygon';\n\nconst defaultLineColor = [0, 0, 0, 255];\nconst defaultFillColor = [0, 0, 0, 255];\nconst defaultMaterial = new PhongMaterial();\n\nconst defaultProps = {\n  stroked: true,\n  filled: true,\n  extruded: false,\n  elevationScale: 1,\n  wireframe: false,\n\n  lineWidthUnits: 'meters',\n  lineWidthScale: 1,\n  lineWidthMinPixels: 0,\n  lineWidthMaxPixels: Number.MAX_SAFE_INTEGER,\n  lineJointRounded: false,\n  lineMiterLimit: 4,\n  lineDashJustified: false,\n  fp64: false,\n\n  getPolygon: {type: 'accessor', value: f => f.polygon},\n  // Polygon fill color\n  getFillColor: {type: 'accessor', value: defaultFillColor},\n  // Point, line and polygon outline color\n  getLineColor: {type: 'accessor', value: defaultLineColor},\n  // Line and polygon outline accessors\n  getLineWidth: {type: 'accessor', value: 1},\n  // Line dash array accessor\n  getLineDashArray: {type: 'accessor', value: [0, 0]},\n  // Polygon extrusion accessor\n  getElevation: {type: 'accessor', value: 1000},\n\n  // Optional material for 'lighting' shader module\n  material: defaultMaterial\n};\n\nexport default class PolygonLayer extends CompositeLayer {\n  initializeState() {\n    this.state = {\n      paths: []\n    };\n  }\n\n  updateState({oldProps, props, changeFlags}) {\n    const geometryChanged =\n      changeFlags.dataChanged ||\n      (changeFlags.updateTriggersChanged &&\n        (changeFlags.updateTriggersChanged.all || changeFlags.updateTriggersChanged.getPolygon));\n\n    if (geometryChanged) {\n      this.state.paths = this._getPaths(props);\n    }\n  }\n\n  getPickingInfo({info}) {\n    return Object.assign(info, {\n      // override object with picked data\n      object: (info.object && info.object.object) || info.object\n    });\n  }\n\n  _getPaths({data, getPolygon, positionFormat}) {\n    const paths = [];\n    const positionSize = positionFormat === 'XY' ? 2 : 3;\n\n    const {iterable, objectInfo} = createIterable(data);\n    for (const object of iterable) {\n      objectInfo.index++;\n      const {positions, holeIndices} = Polygon.normalize(\n        getPolygon(object, objectInfo),\n        positionSize\n      );\n\n      if (holeIndices) {\n        // split the positions array into `holeIndices.length + 1` rings\n        // holeIndices[-1] falls back to 0\n        // holeIndices[holeIndices.length] falls back to positions.length\n        for (let i = 0; i <= holeIndices.length; i++) {\n          const path = positions.subarray(\n            holeIndices[i - 1] || 0,\n            holeIndices[i] || positions.length\n          );\n          paths.push({path, object});\n        }\n      } else {\n        paths.push({path: positions, object});\n      }\n    }\n    return paths;\n  }\n\n  _getAccessor(accessor) {\n    if (typeof accessor === 'function') {\n      return x => accessor(x.object);\n    }\n    return accessor;\n  }\n\n  /* eslint-disable complexity */\n  renderLayers() {\n    // Layer composition props\n    const {data, stroked, filled, extruded, wireframe, elevationScale, transitions} = this.props;\n\n    // Rendering props underlying layer\n    const {\n      lineWidthUnits,\n      lineWidthScale,\n      lineWidthMinPixels,\n      lineWidthMaxPixels,\n      lineJointRounded,\n      lineMiterLimit,\n      lineDashJustified,\n      fp64\n    } = this.props;\n\n    // Accessor props for underlying layers\n    const {\n      getFillColor,\n      getLineColor,\n      getLineWidth,\n      getLineDashArray,\n      getElevation,\n      getPolygon,\n      updateTriggers,\n      material\n    } = this.props;\n\n    const {paths} = this.state;\n\n    const FillLayer = this.getSubLayerClass('fill', SolidPolygonLayer);\n    const StrokeLayer = this.getSubLayerClass('stroke', PathLayer);\n\n    // Filled Polygon Layer\n    const polygonLayer =\n      this.shouldRenderSubLayer('fill', paths) &&\n      new FillLayer(\n        {\n          extruded,\n          elevationScale,\n\n          fp64,\n          filled,\n          wireframe,\n\n          getElevation,\n          getFillColor,\n          getLineColor,\n\n          material,\n          transitions\n        },\n        this.getSubLayerProps({\n          id: 'fill',\n          updateTriggers: {\n            getPolygon: updateTriggers.getPolygon,\n            getElevation: updateTriggers.getElevation,\n            getFillColor: updateTriggers.getFillColor,\n            getLineColor: updateTriggers.getLineColor\n          }\n        }),\n        {\n          data,\n          getPolygon\n        }\n      );\n\n    // Polygon line layer\n    const polygonLineLayer =\n      !extruded &&\n      stroked &&\n      this.shouldRenderSubLayer('stroke', paths) &&\n      new StrokeLayer(\n        {\n          fp64,\n          widthUnits: lineWidthUnits,\n          widthScale: lineWidthScale,\n          widthMinPixels: lineWidthMinPixels,\n          widthMaxPixels: lineWidthMaxPixels,\n          rounded: lineJointRounded,\n          miterLimit: lineMiterLimit,\n          dashJustified: lineDashJustified,\n\n          transitions: transitions && {\n            getWidth: transitions.getLineWidth,\n            getColor: transitions.getLineColor,\n            getPath: transitions.getPolygon\n          },\n\n          getColor: this._getAccessor(getLineColor),\n          getWidth: this._getAccessor(getLineWidth),\n          getDashArray: this._getAccessor(getLineDashArray)\n        },\n        this.getSubLayerProps({\n          id: 'stroke',\n          updateTriggers: {\n            getWidth: updateTriggers.getLineWidth,\n            getColor: updateTriggers.getLineColor,\n            getDashArray: updateTriggers.getLineDashArray\n          }\n        }),\n        {\n          data: paths,\n          getPath: x => x.path\n        }\n      );\n\n    return [\n      // If not extruded: flat fill layer is drawn below outlines\n      !extruded && polygonLayer,\n      polygonLineLayer,\n      // If extruded: draw fill layer last for correct blending behavior\n      extruded && polygonLayer\n    ];\n  }\n  /* eslint-enable complexity */\n}\n\nPolygonLayer.layerName = 'PolygonLayer';\nPolygonLayer.defaultProps = defaultProps;\n"],"file":"polygon-layer.js"}