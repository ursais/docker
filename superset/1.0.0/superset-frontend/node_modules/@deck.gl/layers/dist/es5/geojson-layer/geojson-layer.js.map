{"version":3,"sources":["../../../src/geojson-layer/geojson-layer.js"],"names":["defaultLineColor","defaultFillColor","defaultMaterial","PhongMaterial","defaultProps","stroked","filled","extruded","wireframe","lineWidthUnits","lineWidthScale","lineWidthMinPixels","lineWidthMaxPixels","Number","MAX_SAFE_INTEGER","lineJointRounded","lineMiterLimit","elevationScale","pointRadiusScale","pointRadiusMinPixels","pointRadiusMaxPixels","lineDashJustified","fp64","getLineColor","type","value","getFillColor","getRadius","getLineWidth","getLineDashArray","getElevation","material","getCoordinates","f","geometry","coordinates","unwrappingAccessor","accessor","feature","GeoJsonLayer","state","features","oldProps","props","changeFlags","dataChanged","data","info","sourceLayer","Object","assign","object","index","pointFeatures","lineFeatures","polygonFeatures","polygonOutlineFeatures","transitions","updateTriggers","PolygonFillLayer","getSubLayerClass","SolidPolygonLayer","PolygonStrokeLayer","PathLayer","LineStringsLayer","PointsLayer","ScatterplotLayer","polygonFillLayer","shouldRenderSubLayer","getPolygon","getSubLayerProps","id","polygonLineLayer","widthUnits","widthScale","widthMinPixels","widthMaxPixels","rounded","miterLimit","dashJustified","getColor","getWidth","getDashArray","getPath","pathLayer","pointLayer","radiusScale","radiusMinPixels","radiusMaxPixels","getPosition","CompositeLayer","layerName"],"mappings":"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","sourcesContent":["// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nimport {CompositeLayer} from '@deck.gl/core';\nimport ScatterplotLayer from '../scatterplot-layer/scatterplot-layer';\nimport PathLayer from '../path-layer/path-layer';\nimport {PhongMaterial} from '@luma.gl/core';\n// Use primitive layer to avoid \"Composite Composite\" layers for now\nimport SolidPolygonLayer from '../solid-polygon-layer/solid-polygon-layer';\n\nimport {\n  getGeojsonFeatures,\n  separateGeojsonFeatures,\n  unwrapSourceFeature,\n  unwrapSourceFeatureIndex\n} from './geojson';\n\nconst defaultLineColor = [0, 0, 0, 255];\nconst defaultFillColor = [0, 0, 0, 255];\nconst defaultMaterial = new PhongMaterial();\n\nconst defaultProps = {\n  stroked: true,\n  filled: true,\n  extruded: false,\n  wireframe: false,\n\n  lineWidthUnits: 'meters',\n  lineWidthScale: 1,\n  lineWidthMinPixels: 0,\n  lineWidthMaxPixels: Number.MAX_SAFE_INTEGER,\n  lineJointRounded: false,\n  lineMiterLimit: 4,\n\n  elevationScale: 1,\n\n  pointRadiusScale: 1,\n  pointRadiusMinPixels: 0, //  min point radius in pixels\n  pointRadiusMaxPixels: Number.MAX_SAFE_INTEGER, // max point radius in pixels\n\n  lineDashJustified: false,\n  fp64: false,\n\n  // Line and polygon outline color\n  getLineColor: {type: 'accessor', value: defaultLineColor},\n  // Point and polygon fill color\n  getFillColor: {type: 'accessor', value: defaultFillColor},\n  // Point radius\n  getRadius: {type: 'accessor', value: 1},\n  // Line and polygon outline accessors\n  getLineWidth: {type: 'accessor', value: 1},\n  // Line dash array accessor\n  getLineDashArray: {type: 'accessor', value: [0, 0]},\n  // Polygon extrusion accessor\n  getElevation: {type: 'accessor', value: 1000},\n  // Optional material for 'lighting' shader module\n  material: defaultMaterial\n};\n\nfunction getCoordinates(f) {\n  return f.geometry.coordinates;\n}\n\n/**\n * Unwraps the real source feature passed into props and passes as the argument to `accessor`.\n */\nfunction unwrappingAccessor(accessor) {\n  if (typeof accessor !== 'function') return accessor;\n\n  return feature => accessor(unwrapSourceFeature(feature));\n}\n\nexport default class GeoJsonLayer extends CompositeLayer {\n  initializeState() {\n    this.state = {\n      features: {}\n    };\n  }\n\n  updateState({oldProps, props, changeFlags}) {\n    if (changeFlags.dataChanged) {\n      const {data} = props;\n      const features = getGeojsonFeatures(data);\n      this.state.features = separateGeojsonFeatures(features);\n    }\n  }\n\n  getPickingInfo({info, sourceLayer}) {\n    // `info.index` is the index within the particular sub-layer\n    // We want to expose the index of the feature the user provided\n\n    return Object.assign(info, {\n      // override object with picked feature\n      object: info.object ? unwrapSourceFeature(info.object) : info.object,\n      index: info.object ? unwrapSourceFeatureIndex(info.object) : info.index\n    });\n  }\n\n  /* eslint-disable complexity */\n  renderLayers() {\n    const {features} = this.state;\n    const {pointFeatures, lineFeatures, polygonFeatures, polygonOutlineFeatures} = features;\n\n    // Layer composition props\n    const {stroked, filled, extruded, wireframe, material, transitions} = this.props;\n\n    // Rendering props underlying layer\n    const {\n      lineWidthUnits,\n      lineWidthScale,\n      lineWidthMinPixels,\n      lineWidthMaxPixels,\n      lineJointRounded,\n      lineMiterLimit,\n      pointRadiusScale,\n      pointRadiusMinPixels,\n      pointRadiusMaxPixels,\n      elevationScale,\n      lineDashJustified,\n      fp64\n    } = this.props;\n\n    // Accessor props for underlying layers\n    const {\n      getLineColor,\n      getFillColor,\n      getRadius,\n      getLineWidth,\n      getLineDashArray,\n      getElevation,\n      updateTriggers\n    } = this.props;\n\n    const PolygonFillLayer = this.getSubLayerClass('polygons-fill', SolidPolygonLayer);\n    const PolygonStrokeLayer = this.getSubLayerClass('polygons-stroke', PathLayer);\n    const LineStringsLayer = this.getSubLayerClass('line-strings', PathLayer);\n    const PointsLayer = this.getSubLayerClass('points', ScatterplotLayer);\n\n    // Filled Polygon Layer\n    const polygonFillLayer =\n      this.shouldRenderSubLayer('polygons-fill', polygonFeatures) &&\n      new PolygonFillLayer(\n        {\n          fp64,\n          extruded,\n          elevationScale,\n          filled,\n          wireframe,\n          material,\n          getElevation: unwrappingAccessor(getElevation),\n          getFillColor: unwrappingAccessor(getFillColor),\n          getLineColor: unwrappingAccessor(getLineColor),\n\n          transitions: transitions && {\n            getPolygon: transitions.geometry,\n            getElevation: transitions.getElevation,\n            getFillColor: transitions.getFillColor,\n            getLineColor: transitions.getLineColor\n          }\n        },\n        this.getSubLayerProps({\n          id: 'polygons-fill',\n          updateTriggers: {\n            getElevation: updateTriggers.getElevation,\n            getFillColor: updateTriggers.getFillColor,\n            getLineColor: updateTriggers.getLineColor\n          }\n        }),\n        {\n          data: polygonFeatures,\n          getPolygon: getCoordinates\n        }\n      );\n\n    const polygonLineLayer =\n      !extruded &&\n      stroked &&\n      this.shouldRenderSubLayer('polygons-stroke', polygonOutlineFeatures) &&\n      new PolygonStrokeLayer(\n        {\n          fp64,\n          widthUnits: lineWidthUnits,\n          widthScale: lineWidthScale,\n          widthMinPixels: lineWidthMinPixels,\n          widthMaxPixels: lineWidthMaxPixels,\n          rounded: lineJointRounded,\n          miterLimit: lineMiterLimit,\n          dashJustified: lineDashJustified,\n\n          getColor: unwrappingAccessor(getLineColor),\n          getWidth: unwrappingAccessor(getLineWidth),\n          getDashArray: unwrappingAccessor(getLineDashArray),\n\n          transitions: transitions && {\n            getPath: transitions.geometry,\n            getColor: transitions.getLineColor,\n            getWidth: transitions.getLineWidth\n          }\n        },\n        this.getSubLayerProps({\n          id: 'polygons-stroke',\n          updateTriggers: {\n            getColor: updateTriggers.getLineColor,\n            getWidth: updateTriggers.getLineWidth,\n            getDashArray: updateTriggers.getLineDashArray\n          }\n        }),\n        {\n          data: polygonOutlineFeatures,\n          getPath: getCoordinates\n        }\n      );\n\n    const pathLayer =\n      this.shouldRenderSubLayer('linestrings', lineFeatures) &&\n      new LineStringsLayer(\n        {\n          fp64,\n          widthUnits: lineWidthUnits,\n          widthScale: lineWidthScale,\n          widthMinPixels: lineWidthMinPixels,\n          widthMaxPixels: lineWidthMaxPixels,\n          rounded: lineJointRounded,\n          miterLimit: lineMiterLimit,\n          dashJustified: lineDashJustified,\n\n          getColor: unwrappingAccessor(getLineColor),\n          getWidth: unwrappingAccessor(getLineWidth),\n          getDashArray: unwrappingAccessor(getLineDashArray),\n\n          transitions: transitions && {\n            getPath: transitions.geometry,\n            getColor: transitions.getLineColor,\n            getWidth: transitions.getLineWidth\n          }\n        },\n        this.getSubLayerProps({\n          id: 'line-strings',\n          updateTriggers: {\n            getColor: updateTriggers.getLineColor,\n            getWidth: updateTriggers.getLineWidth,\n            getDashArray: updateTriggers.getLineDashArray\n          }\n        }),\n        {\n          data: lineFeatures,\n          getPath: getCoordinates\n        }\n      );\n\n    const pointLayer =\n      this.shouldRenderSubLayer('points', pointFeatures) &&\n      new PointsLayer(\n        {\n          fp64,\n          stroked,\n          filled,\n          radiusScale: pointRadiusScale,\n          radiusMinPixels: pointRadiusMinPixels,\n          radiusMaxPixels: pointRadiusMaxPixels,\n          lineWidthUnits,\n          lineWidthScale,\n          lineWidthMinPixels,\n          lineWidthMaxPixels,\n\n          getFillColor: unwrappingAccessor(getFillColor),\n          getLineColor: unwrappingAccessor(getLineColor),\n          getRadius: unwrappingAccessor(getRadius),\n          getLineWidth: unwrappingAccessor(getLineWidth),\n\n          transitions: transitions && {\n            getPosition: transitions.geometry,\n            getFillColor: transitions.getFillColor,\n            getLineColor: transitions.getLineColor,\n            getRadius: transitions.getRadius,\n            getLineWidth: transitions.getLineWidth\n          }\n        },\n        this.getSubLayerProps({\n          id: 'points',\n          updateTriggers: {\n            getFillColor: updateTriggers.getFillColor,\n            getLineColor: updateTriggers.getLineColor,\n            getRadius: updateTriggers.getRadius,\n            getLineWidth: updateTriggers.getLineWidth\n          }\n        }),\n        {\n          data: pointFeatures,\n          getPosition: getCoordinates\n        }\n      );\n\n    return [\n      // If not extruded: flat fill layer is drawn below outlines\n      !extruded && polygonFillLayer,\n      polygonLineLayer,\n      pathLayer,\n      pointLayer,\n      // If extruded: draw fill layer last for correct blending behavior\n      extruded && polygonFillLayer\n    ];\n  }\n  /* eslint-enable complexity */\n}\n\nGeoJsonLayer.layerName = 'GeoJsonLayer';\nGeoJsonLayer.defaultProps = defaultProps;\n"],"file":"geojson-layer.js"}