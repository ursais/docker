{"version":3,"sources":["../../../src/icon-layer/icon-manager.js"],"names":["DEFAULT_CANVAS_WIDTH","DEFAULT_BUFFER","noop","DEFAULT_TEXTURE_PARAMETERS","nextPowOfTwo","number","Math","pow","ceil","log2","resizeImage","ctx","imageData","width","height","naturalWidth","naturalHeight","canvas","clearRect","drawImage","getIconId","icon","id","url","buildRowMapping","mapping","columns","yOffset","i","length","xOffset","Object","assign","x","y","resizeTexture","texture","oldWidth","oldHeight","oldPixels","resize","setSubImageData","data","parameters","generateMipmap","delete","buildMapping","icons","buffer","canvasWidth","rowHeight","push","max","canvasHeight","getDiffIcons","getIcon","cachedIcons","iterable","objectInfo","object","index","Error","IconManager","gl","onUpdate","_getIcon","_texture","_externalTexture","_mapping","_autoPacking","_xOffset","_yOffset","_buffer","_canvasWidth","_canvasHeight","_canvas","autoPacking","iconAtlas","iconMapping","undefined","_updateIconAtlas","document","createElement","_updateAutoPacking","Texture2D","setParameters","then","values","_loadIcons","getContext"],"mappings":";;;;;;;;;;;;;;;;;AAEA;;AACA;;AACA;;;;AAEA,IAAMA,oBAAoB,GAAG,IAA7B;AACA,IAAMC,cAAc,GAAG,CAAvB;;AAEA,IAAMC,IAAI,GAAG,SAAPA,IAAO,GAAM,CAAE,CAArB;;AAEA,IAAMC,0BAA0B,4LAAhC;;AAMA,SAASC,YAAT,CAAsBC,MAAtB,EAA8B;AAC5B,SAAOC,IAAI,CAACC,GAAL,CAAS,CAAT,EAAYD,IAAI,CAACE,IAAL,CAAUF,IAAI,CAACG,IAAL,CAAUJ,MAAV,CAAV,CAAZ,CAAP;AACD;;AAGD,SAASK,WAAT,CAAqBC,GAArB,EAA0BC,SAA1B,EAAqCC,KAArC,EAA4CC,MAA5C,EAAoD;AAAA,MAC3CC,YAD2C,GACZH,SADY,CAC3CG,YAD2C;AAAA,MAC7BC,aAD6B,GACZJ,SADY,CAC7BI,aAD6B;;AAElD,MAAIH,KAAK,KAAKE,YAAV,IAA0BD,MAAM,KAAKE,aAAzC,EAAwD;AACtD,WAAOJ,SAAP;AACD;;AAEDD,EAAAA,GAAG,CAACM,MAAJ,CAAWH,MAAX,GAAoBA,MAApB;AACAH,EAAAA,GAAG,CAACM,MAAJ,CAAWJ,KAAX,GAAmBA,KAAnB;AAEAF,EAAAA,GAAG,CAACO,SAAJ,CAAc,CAAd,EAAiB,CAAjB,EAAoBP,GAAG,CAACM,MAAJ,CAAWJ,KAA/B,EAAsCF,GAAG,CAACM,MAAJ,CAAWH,MAAjD;AAGAH,EAAAA,GAAG,CAACQ,SAAJ,CAAcP,SAAd,EAAyB,CAAzB,EAA4B,CAA5B,EAA+BG,YAA/B,EAA6CC,aAA7C,EAA4D,CAA5D,EAA+D,CAA/D,EAAkEH,KAAlE,EAAyEC,MAAzE;AAEA,SAAOH,GAAG,CAACM,MAAX;AACD;;AAED,SAASG,SAAT,CAAmBC,IAAnB,EAAyB;AACvB,SAAOA,IAAI,KAAKA,IAAI,CAACC,EAAL,IAAWD,IAAI,CAACE,GAArB,CAAX;AACD;;AAID,SAASC,eAAT,CAAyBC,OAAzB,EAAkCC,OAAlC,EAA2CC,OAA3C,EAAoD;AAClD,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGF,OAAO,CAACG,MAA5B,EAAoCD,CAAC,EAArC,EAAyC;AAAA,qBACfF,OAAO,CAACE,CAAD,CADQ;AAAA,QAChCP,IADgC,cAChCA,IADgC;AAAA,QAC1BS,OAD0B,cAC1BA,OAD0B;AAEvC,QAAMR,EAAE,GAAGF,SAAS,CAACC,IAAD,CAApB;AACAI,IAAAA,OAAO,CAACH,EAAD,CAAP,GAAcS,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBX,IAAlB,EAAwB;AACpCY,MAAAA,CAAC,EAAEH,OADiC;AAEpCI,MAAAA,CAAC,EAAEP;AAFiC,KAAxB,CAAd;AAID;AACF;;AAGD,SAASQ,aAAT,CAAuBC,OAAvB,EAAgCvB,KAAhC,EAAuCC,MAAvC,EAA+C;AAC7C,MAAMuB,QAAQ,GAAGD,OAAO,CAACvB,KAAzB;AACA,MAAMyB,SAAS,GAAGF,OAAO,CAACtB,MAA1B;AACA,MAAMyB,SAAS,GAAG,8BAAmBH,OAAnB,EAA4B,EAA5B,CAAlB;AAEAA,EAAAA,OAAO,CAACI,MAAR,CAAe;AAAC3B,IAAAA,KAAK,EAALA,KAAD;AAAQC,IAAAA,MAAM,EAANA;AAAR,GAAf;AAEAsB,EAAAA,OAAO,CAACK,eAAR,CAAwB;AACtBC,IAAAA,IAAI,EAAEH,SADgB;AAEtBN,IAAAA,CAAC,EAAE,CAFmB;AAGtBC,IAAAA,CAAC,EAAEpB,MAAM,GAAGwB,SAHU;AAItBzB,IAAAA,KAAK,EAAEwB,QAJe;AAKtBvB,IAAAA,MAAM,EAAEwB,SALc;AAMtBK,IAAAA,UAAU,EAAExC;AANU,GAAxB;AASAiC,EAAAA,OAAO,CAACQ,cAAR;AAEAL,EAAAA,SAAS,CAACM,MAAV;AACA,SAAOT,OAAP;AACD;;AAYM,SAASU,YAAT,OAA4F;AAAA,MAArEC,KAAqE,QAArEA,KAAqE;AAAA,MAA9DC,MAA8D,QAA9DA,MAA8D;AAAA,0BAAtDvB,OAAsD;AAAA,MAAtDA,OAAsD,6BAA5C,EAA4C;AAAA,0BAAxCK,OAAwC;AAAA,MAAxCA,OAAwC,6BAA9B,CAA8B;AAAA,0BAA3BH,OAA2B;AAAA,MAA3BA,OAA2B,6BAAjB,CAAiB;AAAA,MAAdsB,WAAc,QAAdA,WAAc;AAEjG,MAAIC,SAAS,GAAG,CAAhB;AAEA,MAAIxB,OAAO,GAAG,EAAd;;AAQA,OAAK,IAAIE,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGmB,KAAK,CAAClB,MAA1B,EAAkCD,CAAC,EAAnC,EAAuC;AACrC,QAAMP,IAAI,GAAG0B,KAAK,CAACnB,CAAD,CAAlB;AACA,QAAMN,EAAE,GAAGF,SAAS,CAACC,IAAD,CAApB;;AAEA,QAAI,CAACI,OAAO,CAACH,EAAD,CAAZ,EAAkB;AAAA,UACTR,MADS,GACQO,IADR,CACTP,MADS;AAAA,UACDD,KADC,GACQQ,IADR,CACDR,KADC;;AAIhB,UAAIiB,OAAO,GAAGjB,KAAV,GAAkBmC,MAAlB,GAA2BC,WAA/B,EAA4C;AAC1CzB,QAAAA,eAAe,CAACC,OAAD,EAAUC,OAAV,EAAmBC,OAAnB,CAAf;AAEAG,QAAAA,OAAO,GAAG,CAAV;AACAH,QAAAA,OAAO,GAAGuB,SAAS,GAAGvB,OAAZ,GAAsBqB,MAAhC;AACAE,QAAAA,SAAS,GAAG,CAAZ;AACAxB,QAAAA,OAAO,GAAG,EAAV;AACD;;AAEDA,MAAAA,OAAO,CAACyB,IAAR,CAAa;AACX9B,QAAAA,IAAI,EAAJA,IADW;AAEXS,QAAAA,OAAO,EAAPA;AAFW,OAAb;AAKAA,MAAAA,OAAO,GAAGA,OAAO,GAAGjB,KAAV,GAAkBmC,MAA5B;AACAE,MAAAA,SAAS,GAAG5C,IAAI,CAAC8C,GAAL,CAASF,SAAT,EAAoBpC,MAApB,CAAZ;AACD;AACF;;AAED,MAAIY,OAAO,CAACG,MAAR,GAAiB,CAArB,EAAwB;AACtBL,IAAAA,eAAe,CAACC,OAAD,EAAUC,OAAV,EAAmBC,OAAnB,CAAf;AACD;;AAED,SAAO;AACLF,IAAAA,OAAO,EAAPA,OADK;AAELK,IAAAA,OAAO,EAAPA,OAFK;AAGLH,IAAAA,OAAO,EAAPA,OAHK;AAILsB,IAAAA,WAAW,EAAXA,WAJK;AAKLI,IAAAA,YAAY,EAAEjD,YAAY,CAAC8C,SAAS,GAAGvB,OAAZ,GAAsBqB,MAAvB;AALrB,GAAP;AAOD;;AAIM,SAASM,YAAT,CAAsBZ,IAAtB,EAA4Ba,OAA5B,EAAqCC,WAArC,EAAkD;AACvD,MAAI,CAACd,IAAD,IAAS,CAACa,OAAd,EAAuB;AACrB,WAAO,IAAP;AACD;;AAEDC,EAAAA,WAAW,GAAGA,WAAW,IAAI,EAA7B;AACA,MAAMT,KAAK,GAAG,EAAd;;AANuD,wBAOxB,2BAAeL,IAAf,CAPwB;AAAA,MAOhDe,QAPgD,mBAOhDA,QAPgD;AAAA,MAOtCC,UAPsC,mBAOtCA,UAPsC;;AAAA;AAAA;AAAA;;AAAA;AAQvD,yBAAqBD,QAArB,8HAA+B;AAAA,UAApBE,MAAoB;AAC7BD,MAAAA,UAAU,CAACE,KAAX;AACA,UAAMvC,IAAI,GAAGkC,OAAO,CAACI,MAAD,EAASD,UAAT,CAApB;AACA,UAAMpC,EAAE,GAAGF,SAAS,CAACC,IAAD,CAApB;;AAEA,UAAI,CAACA,IAAL,EAAW;AACT,cAAM,IAAIwC,KAAJ,CAAU,kBAAV,CAAN;AACD;;AAED,UAAI,CAACxC,IAAI,CAACE,GAAV,EAAe;AACb,cAAM,IAAIsC,KAAJ,CAAU,sBAAV,CAAN;AACD;;AAED,UAAI,CAACd,KAAK,CAACzB,EAAD,CAAN,KAAe,CAACkC,WAAW,CAAClC,EAAD,CAAZ,IAAoBD,IAAI,CAACE,GAAL,KAAaiC,WAAW,CAAClC,EAAD,CAAX,CAAgBC,GAAhE,CAAJ,EAA0E;AACxEwB,QAAAA,KAAK,CAACzB,EAAD,CAAL,GAAYD,IAAZ;AACD;AACF;AAxBsD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAyBvD,SAAO0B,KAAP;AACD;;IAEoBe,W;AACnB,uBACEC,EADF,SAKE;AAAA,+BAFEC,QAEF;AAAA,QAFEA,QAEF,+BAFa9D,IAEb;AAAA;AACA,SAAK6D,EAAL,GAAUA,EAAV;AACA,SAAKC,QAAL,GAAgBA,QAAhB;AAEA,SAAKC,QAAL,GAAgB,IAAhB;AAEA,SAAKC,QAAL,GAAgB,IAAhB;AACA,SAAKC,gBAAL,GAAwB,IAAxB;AACA,SAAKC,QAAL,GAAgB,EAAhB;AAEA,SAAKC,YAAL,GAAoB,KAApB;AAIA,SAAKC,QAAL,GAAgB,CAAhB;AAEA,SAAKC,QAAL,GAAgB,CAAhB;AACA,SAAKC,OAAL,GAAevE,cAAf;AACA,SAAKwE,YAAL,GAAoBzE,oBAApB;AACA,SAAK0E,aAAL,GAAqB,CAArB;AACA,SAAKC,OAAL,GAAe,IAAf;AACD;;;;+BAEU;AACT,UAAI,KAAKT,QAAT,EAAmB;AACjB,aAAKA,QAAL,CAAcrB,MAAd;AACD;AACF;;;iCAEY;AACX,aAAO,KAAKqB,QAAL,IAAiB,KAAKC,gBAA7B;AACD;;;mCAEcR,M,EAAQD,U,EAAY;AACjC,UAAMrC,IAAI,GAAG,KAAK4C,QAAL,CAAcN,MAAd,EAAsBD,UAAtB,CAAb;;AACA,UAAMpC,EAAE,GAAG,KAAK+C,YAAL,GAAoBjD,SAAS,CAACC,IAAD,CAA7B,GAAsCA,IAAjD;AACA,aAAO,KAAK+C,QAAL,CAAc9C,EAAd,KAAqB,EAA5B;AACD;;;oCAE8D;AAAA,UAArDsD,WAAqD,SAArDA,WAAqD;AAAA,UAAxCC,SAAwC,SAAxCA,SAAwC;AAAA,UAA7BC,WAA6B,SAA7BA,WAA6B;AAAA,UAAhBpC,IAAgB,SAAhBA,IAAgB;AAAA,UAAVa,OAAU,SAAVA,OAAU;;AAC7D,UAAIqB,WAAW,KAAKG,SAApB,EAA+B;AAC7B,aAAKV,YAAL,GAAoBO,WAApB;AACD;;AAED,UAAIrB,OAAJ,EAAa;AACX,aAAKU,QAAL,GAAgBV,OAAhB;AACD;;AAED,UAAIuB,WAAJ,EAAiB;AACf,aAAKV,QAAL,GAAgBU,WAAhB;AACD;;AAED,UAAID,SAAJ,EAAe;AACb,aAAKG,gBAAL,CAAsBH,SAAtB;AACD;;AAED,UAAI,KAAKR,YAAL,KAAsB3B,IAAI,IAAIa,OAA9B,KAA0C,OAAO0B,QAAP,KAAoB,WAAlE,EAA+E;AAC7E,aAAKN,OAAL,GAAe,KAAKA,OAAL,IAAgBM,QAAQ,CAACC,aAAT,CAAuB,QAAvB,CAA/B;;AAEA,aAAKC,kBAAL,CAAwBzC,IAAxB;AACD;AACF;;;qCAEgBmC,S,EAAW;AAAA;;AAC1B,UAAI,KAAKX,QAAT,EAAmB;AACjB,aAAKA,QAAL,CAAcrB,MAAd;;AACA,aAAKqB,QAAL,GAAgB,IAAhB;AACD;;AACD,UAAIW,SAAS,YAAYO,eAAzB,EAAoC;AAClCP,QAAAA,SAAS,CAACQ,aAAV,CAAwBlF,0BAAxB;AAEA,aAAKgE,gBAAL,GAAwBU,SAAxB;AACA,aAAKb,QAAL;AACD,OALD,MAKO,IAAI,OAAOa,SAAP,KAAqB,QAAzB,EAAmC;AACxC,+BAAUA,SAAV,EAAqBS,IAArB,CAA0B,UAAA5C,IAAI,EAAI;AAChC,UAAA,KAAI,CAACwB,QAAL,GAAgB,IAAIkB,eAAJ,CAAc,KAAI,CAACrB,EAAnB,EAAuB;AACrCrB,YAAAA,IAAI,EAAJA,IADqC;AAErCC,YAAAA,UAAU,EAAExC;AAFyB,WAAvB,CAAhB;;AAIA,UAAA,KAAI,CAAC6D,QAAL;AACD,SAND;AAOD;AACF;;;uCAEkBtB,I,EAAM;AACvB,UAAMK,KAAK,GAAGhB,MAAM,CAACwD,MAAP,CAAcjC,YAAY,CAACZ,IAAD,EAAO,KAAKuB,QAAZ,EAAsB,KAAKG,QAA3B,CAAZ,IAAoD,EAAlE,CAAd;;AAEA,UAAIrB,KAAK,CAAClB,MAAN,GAAe,CAAnB,EAAsB;AAAA,4BAE8BiB,YAAY,CAAC;AAC7DC,UAAAA,KAAK,EAALA,KAD6D;AAE7DC,UAAAA,MAAM,EAAE,KAAKwB,OAFgD;AAG7DvB,UAAAA,WAAW,EAAE,KAAKwB,YAH2C;AAI7DhD,UAAAA,OAAO,EAAE,KAAK2C,QAJ+C;AAK7DtC,UAAAA,OAAO,EAAE,KAAKwC,QAL+C;AAM7D3C,UAAAA,OAAO,EAAE,KAAK4C;AAN+C,SAAD,CAF1C;AAAA,YAEb9C,OAFa,iBAEbA,OAFa;AAAA,YAEJK,OAFI,iBAEJA,OAFI;AAAA,YAEKH,OAFL,iBAEKA,OAFL;AAAA,YAEc0B,YAFd,iBAEcA,YAFd;;AAWpB,aAAKe,QAAL,GAAgB3C,OAAhB;AACA,aAAK6C,QAAL,GAAgBxC,OAAhB;AACA,aAAKyC,QAAL,GAAgB5C,OAAhB;AACA,aAAK+C,aAAL,GAAqBrB,YAArB;;AAGA,YAAI,CAAC,KAAKa,QAAV,EAAoB;AAClB,eAAKA,QAAL,GAAgB,IAAIkB,eAAJ,CAAc,KAAKrB,EAAnB,EAAuB;AACrClD,YAAAA,KAAK,EAAE,KAAK4D,YADyB;AAErC3D,YAAAA,MAAM,EAAE,KAAK4D,aAFwB;AAGrC/B,YAAAA,UAAU,EAAExC;AAHyB,WAAvB,CAAhB;AAKD;;AAED,YAAI,KAAK+D,QAAL,CAAcpD,MAAd,KAAyB,KAAK4D,aAAlC,EAAiD;AAC/CvC,UAAAA,aAAa,CAAC,KAAK+B,QAAN,EAAgB,KAAKO,YAArB,EAAmC,KAAKC,aAAxC,CAAb;AACD;;AAED,aAAKV,QAAL;;AAGA,aAAKwB,UAAL,CAAgBzC,KAAhB;AACD;AACF;;;+BAEUA,K,EAAO;AAAA;;AAChB,UAAMpC,GAAG,GAAG,KAAKgE,OAAL,CAAac,UAAb,CAAwB,IAAxB,CAAZ;;AACA,UAAMpC,YAAY,GAAG,KAAKa,QAAL,CAAcpD,MAAnC;AAFgB;AAAA;AAAA;;AAAA;AAAA;AAAA,cAILO,IAJK;AAKd,iCAAUA,IAAI,CAACE,GAAf,EAAoB+D,IAApB,CAAyB,UAAA1E,SAAS,EAAI;AACpC,gBAAMU,EAAE,GAAGF,SAAS,CAACC,IAAD,CAApB;AADoC,qCAEN,MAAI,CAAC+C,QAAL,CAAc9C,EAAd,CAFM;AAAA,gBAE7BW,CAF6B,sBAE7BA,CAF6B;AAAA,gBAE1BC,CAF0B,sBAE1BA,CAF0B;AAAA,gBAEvBrB,KAFuB,sBAEvBA,KAFuB;AAAA,gBAEhBC,MAFgB,sBAEhBA,MAFgB;AAIpC,gBAAM4B,IAAI,GAAGhC,WAAW,CAACC,GAAD,EAAMC,SAAN,EAAiBC,KAAjB,EAAwBC,MAAxB,CAAxB;;AAEA,YAAA,MAAI,CAACoD,QAAL,CAAczB,eAAd,CAA8B;AAC5BC,cAAAA,IAAI,EAAJA,IAD4B;AAE5BT,cAAAA,CAAC,EAADA,CAF4B;AAG5BC,cAAAA,CAAC,EAAEmB,YAAY,GAAGnB,CAAf,GAAmBpB,MAHM;AAI5BD,cAAAA,KAAK,EAALA,KAJ4B;AAK5BC,cAAAA,MAAM,EAANA,MAL4B;AAM5B6B,cAAAA,UAAU,EAAEZ,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkB7B,0BAAlB,2CACgB,IADhB;AANgB,aAA9B;;AAYA,YAAA,MAAI,CAAC+D,QAAL,CAActB,cAAd;;AAEA,YAAA,MAAI,CAACoB,QAAL;AACD,WArBD;AALc;;AAIhB,8BAAmBjB,KAAnB,mIAA0B;AAAA;AAuBzB;AA3Be;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AA4BjB","sourcesContent":["/* global document */\nimport GL from '@luma.gl/constants';\nimport {Texture2D, readPixelsToBuffer} from '@luma.gl/core';\nimport {loadImage} from '@loaders.gl/images';\nimport {createIterable} from '@deck.gl/core';\n\nconst DEFAULT_CANVAS_WIDTH = 1024;\nconst DEFAULT_BUFFER = 4;\n\nconst noop = () => {};\n\nconst DEFAULT_TEXTURE_PARAMETERS = {\n  [GL.TEXTURE_MIN_FILTER]: GL.LINEAR_MIPMAP_LINEAR,\n  // GL.LINEAR is the default value but explicitly set it here\n  [GL.TEXTURE_MAG_FILTER]: GL.LINEAR\n};\n\nfunction nextPowOfTwo(number) {\n  return Math.pow(2, Math.ceil(Math.log2(number)));\n}\n\n// resize image to given width and height\nfunction resizeImage(ctx, imageData, width, height) {\n  const {naturalWidth, naturalHeight} = imageData;\n  if (width === naturalWidth && height === naturalHeight) {\n    return imageData;\n  }\n\n  ctx.canvas.height = height;\n  ctx.canvas.width = width;\n\n  ctx.clearRect(0, 0, ctx.canvas.width, ctx.canvas.height);\n\n  // image, sx, sy, sWidth, sHeight, dx, dy, dWidth, dHeight\n  ctx.drawImage(imageData, 0, 0, naturalWidth, naturalHeight, 0, 0, width, height);\n\n  return ctx.canvas;\n}\n\nfunction getIconId(icon) {\n  return icon && (icon.id || icon.url);\n}\n\n// traverse icons in a row of icon atlas\n// extend each icon with left-top coordinates\nfunction buildRowMapping(mapping, columns, yOffset) {\n  for (let i = 0; i < columns.length; i++) {\n    const {icon, xOffset} = columns[i];\n    const id = getIconId(icon);\n    mapping[id] = Object.assign({}, icon, {\n      x: xOffset,\n      y: yOffset\n    });\n  }\n}\n\n// resize texture without losing original data\nfunction resizeTexture(texture, width, height) {\n  const oldWidth = texture.width;\n  const oldHeight = texture.height;\n  const oldPixels = readPixelsToBuffer(texture, {});\n\n  texture.resize({width, height});\n\n  texture.setSubImageData({\n    data: oldPixels,\n    x: 0,\n    y: height - oldHeight,\n    width: oldWidth,\n    height: oldHeight,\n    parameters: DEFAULT_TEXTURE_PARAMETERS\n  });\n\n  texture.generateMipmap();\n\n  oldPixels.delete();\n  return texture;\n}\n\n/**\n * Generate coordinate mapping to retrieve icon left-top position from an icon atlas\n * @param icons {Array<Object>} list of icons, each icon requires url, width, height\n * @param buffer {Number} add buffer to the right and bottom side of the image\n * @param xOffset {Number} right position of last icon in old mapping\n * @param yOffset {Number} top position in last icon in old mapping\n * @param canvasWidth {Number} max width of canvas\n * @param mapping {object} old mapping\n * @returns {{mapping: {'/icon/1': {url, width, height, ...}},, canvasHeight: {Number}}}\n */\nexport function buildMapping({icons, buffer, mapping = {}, xOffset = 0, yOffset = 0, canvasWidth}) {\n  // height of current row\n  let rowHeight = 0;\n\n  let columns = [];\n  // Strategy to layout all the icons into a texture:\n  // traverse the icons sequentially, layout the icons from left to right, top to bottom\n  // when the sum of the icons width is equal or larger than canvasWidth,\n  // move to next row starting from total height so far plus max height of the icons in previous row\n  // row width is equal to canvasWidth\n  // row height is decided by the max height of the icons in that row\n  // mapping coordinates of each icon is its left-top position in the texture\n  for (let i = 0; i < icons.length; i++) {\n    const icon = icons[i];\n    const id = getIconId(icon);\n\n    if (!mapping[id]) {\n      const {height, width} = icon;\n\n      // fill one row\n      if (xOffset + width + buffer > canvasWidth) {\n        buildRowMapping(mapping, columns, yOffset);\n\n        xOffset = 0;\n        yOffset = rowHeight + yOffset + buffer;\n        rowHeight = 0;\n        columns = [];\n      }\n\n      columns.push({\n        icon,\n        xOffset\n      });\n\n      xOffset = xOffset + width + buffer;\n      rowHeight = Math.max(rowHeight, height);\n    }\n  }\n\n  if (columns.length > 0) {\n    buildRowMapping(mapping, columns, yOffset);\n  }\n\n  return {\n    mapping,\n    xOffset,\n    yOffset,\n    canvasWidth,\n    canvasHeight: nextPowOfTwo(rowHeight + yOffset + buffer)\n  };\n}\n\n// extract icons from data\n// return icons should be unique, and not cached or cached but url changed\nexport function getDiffIcons(data, getIcon, cachedIcons) {\n  if (!data || !getIcon) {\n    return null;\n  }\n\n  cachedIcons = cachedIcons || {};\n  const icons = {};\n  const {iterable, objectInfo} = createIterable(data);\n  for (const object of iterable) {\n    objectInfo.index++;\n    const icon = getIcon(object, objectInfo);\n    const id = getIconId(icon);\n\n    if (!icon) {\n      throw new Error('Icon is missing.');\n    }\n\n    if (!icon.url) {\n      throw new Error('Icon url is missing.');\n    }\n\n    if (!icons[id] && (!cachedIcons[id] || icon.url !== cachedIcons[id].url)) {\n      icons[id] = icon;\n    }\n  }\n  return icons;\n}\n\nexport default class IconManager {\n  constructor(\n    gl,\n    {\n      onUpdate = noop // notify IconLayer when icon texture update\n    }\n  ) {\n    this.gl = gl;\n    this.onUpdate = onUpdate;\n\n    this._getIcon = null;\n\n    this._texture = null;\n    this._externalTexture = null;\n    this._mapping = {};\n\n    this._autoPacking = false;\n\n    // internal props used when autoPacking applied\n    // right position of last icon\n    this._xOffset = 0;\n    // top position of last icon\n    this._yOffset = 0;\n    this._buffer = DEFAULT_BUFFER;\n    this._canvasWidth = DEFAULT_CANVAS_WIDTH;\n    this._canvasHeight = 0;\n    this._canvas = null;\n  }\n\n  finalize() {\n    if (this._texture) {\n      this._texture.delete();\n    }\n  }\n\n  getTexture() {\n    return this._texture || this._externalTexture;\n  }\n\n  getIconMapping(object, objectInfo) {\n    const icon = this._getIcon(object, objectInfo);\n    const id = this._autoPacking ? getIconId(icon) : icon;\n    return this._mapping[id] || {};\n  }\n\n  setProps({autoPacking, iconAtlas, iconMapping, data, getIcon}) {\n    if (autoPacking !== undefined) {\n      this._autoPacking = autoPacking;\n    }\n\n    if (getIcon) {\n      this._getIcon = getIcon;\n    }\n\n    if (iconMapping) {\n      this._mapping = iconMapping;\n    }\n\n    if (iconAtlas) {\n      this._updateIconAtlas(iconAtlas);\n    }\n\n    if (this._autoPacking && (data || getIcon) && typeof document !== 'undefined') {\n      this._canvas = this._canvas || document.createElement('canvas');\n\n      this._updateAutoPacking(data);\n    }\n  }\n\n  _updateIconAtlas(iconAtlas) {\n    if (this._texture) {\n      this._texture.delete();\n      this._texture = null;\n    }\n    if (iconAtlas instanceof Texture2D) {\n      iconAtlas.setParameters(DEFAULT_TEXTURE_PARAMETERS);\n\n      this._externalTexture = iconAtlas;\n      this.onUpdate();\n    } else if (typeof iconAtlas === 'string') {\n      loadImage(iconAtlas).then(data => {\n        this._texture = new Texture2D(this.gl, {\n          data,\n          parameters: DEFAULT_TEXTURE_PARAMETERS\n        });\n        this.onUpdate();\n      });\n    }\n  }\n\n  _updateAutoPacking(data) {\n    const icons = Object.values(getDiffIcons(data, this._getIcon, this._mapping) || {});\n\n    if (icons.length > 0) {\n      // generate icon mapping\n      const {mapping, xOffset, yOffset, canvasHeight} = buildMapping({\n        icons,\n        buffer: this._buffer,\n        canvasWidth: this._canvasWidth,\n        mapping: this._mapping,\n        xOffset: this._xOffset,\n        yOffset: this._yOffset\n      });\n\n      this._mapping = mapping;\n      this._xOffset = xOffset;\n      this._yOffset = yOffset;\n      this._canvasHeight = canvasHeight;\n\n      // create new texture\n      if (!this._texture) {\n        this._texture = new Texture2D(this.gl, {\n          width: this._canvasWidth,\n          height: this._canvasHeight,\n          parameters: DEFAULT_TEXTURE_PARAMETERS\n        });\n      }\n\n      if (this._texture.height !== this._canvasHeight) {\n        resizeTexture(this._texture, this._canvasWidth, this._canvasHeight);\n      }\n\n      this.onUpdate();\n\n      // load images\n      this._loadIcons(icons);\n    }\n  }\n\n  _loadIcons(icons) {\n    const ctx = this._canvas.getContext('2d');\n    const canvasHeight = this._texture.height;\n\n    for (const icon of icons) {\n      loadImage(icon.url).then(imageData => {\n        const id = getIconId(icon);\n        const {x, y, width, height} = this._mapping[id];\n\n        const data = resizeImage(ctx, imageData, width, height);\n\n        this._texture.setSubImageData({\n          data,\n          x,\n          y: canvasHeight - y - height, // flip Y as texture stored as reversed Y\n          width,\n          height,\n          parameters: Object.assign({}, DEFAULT_TEXTURE_PARAMETERS, {\n            [GL.UNPACK_FLIP_Y_WEBGL]: true\n          })\n        });\n\n        // Call to regenerate mipmaps after modifying texture(s)\n        this._texture.generateMipmap();\n\n        this.onUpdate();\n      });\n    }\n  }\n}\n"],"file":"icon-manager.js"}