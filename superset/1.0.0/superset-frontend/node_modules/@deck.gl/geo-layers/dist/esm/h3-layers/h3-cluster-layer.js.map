{"version":3,"sources":["../../../src/h3-layers/h3-cluster-layer.js"],"names":["h3SetToMultiPolygon","CompositeLayer","createIterable","PolygonLayer","defaultProps","Object","assign","getHexagons","type","value","d","hexagons","H3ClusterLayer","props","oldProps","changeFlags","dataChanged","updateTriggers","data","polygons","iterable","objectInfo","object","index","multiPolygon","polygon","push","_obj","_idx","setState","info","accessor","elevationScale","extruded","wireframe","filled","stroked","lineWidthScale","lineWidthMinPixels","lineWidthMaxPixels","lineJointRounded","lineMiterLimit","lineDashJustified","fp64","material","getFillColor","getLineColor","getLineWidth","getLineDashArray","getElevation","SubLayerClass","getSubLayerClass","getSubLayerAccessor","getSubLayerProps","id","state","getPolygon","layerName"],"mappings":"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","sourcesContent":["import {h3SetToMultiPolygon} from 'h3-js';\n\nimport {CompositeLayer, createIterable} from '@deck.gl/core';\nimport {PolygonLayer} from '@deck.gl/layers';\n\nconst defaultProps = Object.assign(\n  {\n    getHexagons: {type: 'accessor', value: d => d.hexagons}\n  },\n  PolygonLayer.defaultProps\n);\n\nexport default class H3ClusterLayer extends CompositeLayer {\n  updateState({props, oldProps, changeFlags}) {\n    if (\n      changeFlags.dataChanged ||\n      (changeFlags.updateTriggers && changeFlags.updateTriggers.getHexagons)\n    ) {\n      const {data, getHexagons} = props;\n      const polygons = [];\n\n      const {iterable, objectInfo} = createIterable(data);\n      for (const object of iterable) {\n        objectInfo.index++;\n        const hexagons = getHexagons(object, objectInfo);\n        const multiPolygon = h3SetToMultiPolygon(hexagons, true);\n\n        for (const polygon of multiPolygon) {\n          polygons.push({polygon, _obj: object, _idx: objectInfo.index});\n        }\n      }\n\n      this.setState({polygons});\n    }\n  }\n\n  getPickingInfo({info}) {\n    return Object.assign(info, {\n      object: info.object && info.object._obj,\n      index: info.object && info.object._idx\n    });\n  }\n\n  getSubLayerAccessor(accessor) {\n    if (typeof accessor !== 'function') return accessor;\n\n    return (object, objectInfo) => {\n      return accessor(object._obj, objectInfo);\n    };\n  }\n\n  renderLayers() {\n    const {\n      elevationScale,\n      extruded,\n      wireframe,\n      filled,\n      stroked,\n      lineWidthScale,\n      lineWidthMinPixels,\n      lineWidthMaxPixels,\n      lineJointRounded,\n      lineMiterLimit,\n      lineDashJustified,\n      fp64,\n      material,\n\n      getFillColor,\n      getLineColor,\n      getLineWidth,\n      getLineDashArray,\n      getElevation,\n      updateTriggers\n    } = this.props;\n\n    const SubLayerClass = this.getSubLayerClass('cluster-region', PolygonLayer);\n\n    return new SubLayerClass(\n      {\n        fp64,\n        filled,\n        wireframe,\n\n        extruded,\n        elevationScale,\n\n        stroked,\n        lineWidthScale,\n        lineWidthMinPixels,\n        lineWidthMaxPixels,\n        lineJointRounded,\n        lineMiterLimit,\n        lineDashJustified,\n\n        material,\n\n        getFillColor: this.getSubLayerAccessor(getFillColor),\n        getLineColor: this.getSubLayerAccessor(getLineColor),\n        getLineWidth: this.getSubLayerAccessor(getLineWidth),\n        getLineDashArray: this.getSubLayerAccessor(getLineDashArray),\n        getElevation: this.getSubLayerAccessor(getElevation)\n      },\n      this.getSubLayerProps({\n        id: 'cluster-region',\n        updateTriggers\n      }),\n      {\n        data: this.state.polygons,\n        getPolygon: d => d.polygon\n      }\n    );\n  }\n}\n\nH3ClusterLayer.defaultProps = defaultProps;\nH3ClusterLayer.layerName = 'H3ClusterLayer';\n"],"file":"h3-cluster-layer.js"}