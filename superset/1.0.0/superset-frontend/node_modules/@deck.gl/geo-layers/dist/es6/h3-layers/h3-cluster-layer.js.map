{"version":3,"sources":["../../../src/h3-layers/h3-cluster-layer.js"],"names":["h3SetToMultiPolygon","CompositeLayer","createIterable","PolygonLayer","defaultProps","Object","assign","getHexagons","type","value","d","hexagons","H3ClusterLayer","updateState","props","oldProps","changeFlags","dataChanged","updateTriggers","data","polygons","iterable","objectInfo","object","index","multiPolygon","polygon","push","_obj","_idx","setState","getPickingInfo","info","getSubLayerAccessor","accessor","renderLayers","elevationScale","extruded","wireframe","filled","stroked","lineWidthScale","lineWidthMinPixels","lineWidthMaxPixels","lineJointRounded","lineMiterLimit","lineDashJustified","fp64","material","getFillColor","getLineColor","getLineWidth","getLineDashArray","getElevation","SubLayerClass","getSubLayerClass","getSubLayerProps","id","state","getPolygon","layerName"],"mappings":"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","sourcesContent":["import {h3SetToMultiPolygon} from 'h3-js';\n\nimport {CompositeLayer, createIterable} from '@deck.gl/core';\nimport {PolygonLayer} from '@deck.gl/layers';\n\nconst defaultProps = Object.assign(\n  {\n    getHexagons: {type: 'accessor', value: d => d.hexagons}\n  },\n  PolygonLayer.defaultProps\n);\n\nexport default class H3ClusterLayer extends CompositeLayer {\n  updateState({props, oldProps, changeFlags}) {\n    if (\n      changeFlags.dataChanged ||\n      (changeFlags.updateTriggers && changeFlags.updateTriggers.getHexagons)\n    ) {\n      const {data, getHexagons} = props;\n      const polygons = [];\n\n      const {iterable, objectInfo} = createIterable(data);\n      for (const object of iterable) {\n        objectInfo.index++;\n        const hexagons = getHexagons(object, objectInfo);\n        const multiPolygon = h3SetToMultiPolygon(hexagons, true);\n\n        for (const polygon of multiPolygon) {\n          polygons.push({polygon, _obj: object, _idx: objectInfo.index});\n        }\n      }\n\n      this.setState({polygons});\n    }\n  }\n\n  getPickingInfo({info}) {\n    return Object.assign(info, {\n      object: info.object && info.object._obj,\n      index: info.object && info.object._idx\n    });\n  }\n\n  getSubLayerAccessor(accessor) {\n    if (typeof accessor !== 'function') return accessor;\n\n    return (object, objectInfo) => {\n      return accessor(object._obj, objectInfo);\n    };\n  }\n\n  renderLayers() {\n    const {\n      elevationScale,\n      extruded,\n      wireframe,\n      filled,\n      stroked,\n      lineWidthScale,\n      lineWidthMinPixels,\n      lineWidthMaxPixels,\n      lineJointRounded,\n      lineMiterLimit,\n      lineDashJustified,\n      fp64,\n      material,\n\n      getFillColor,\n      getLineColor,\n      getLineWidth,\n      getLineDashArray,\n      getElevation,\n      updateTriggers\n    } = this.props;\n\n    const SubLayerClass = this.getSubLayerClass('cluster-region', PolygonLayer);\n\n    return new SubLayerClass(\n      {\n        fp64,\n        filled,\n        wireframe,\n\n        extruded,\n        elevationScale,\n\n        stroked,\n        lineWidthScale,\n        lineWidthMinPixels,\n        lineWidthMaxPixels,\n        lineJointRounded,\n        lineMiterLimit,\n        lineDashJustified,\n\n        material,\n\n        getFillColor: this.getSubLayerAccessor(getFillColor),\n        getLineColor: this.getSubLayerAccessor(getLineColor),\n        getLineWidth: this.getSubLayerAccessor(getLineWidth),\n        getLineDashArray: this.getSubLayerAccessor(getLineDashArray),\n        getElevation: this.getSubLayerAccessor(getElevation)\n      },\n      this.getSubLayerProps({\n        id: 'cluster-region',\n        updateTriggers\n      }),\n      {\n        data: this.state.polygons,\n        getPolygon: d => d.polygon\n      }\n    );\n  }\n}\n\nH3ClusterLayer.defaultProps = defaultProps;\nH3ClusterLayer.layerName = 'H3ClusterLayer';\n"],"file":"h3-cluster-layer.js"}