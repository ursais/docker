{"version":3,"sources":["../../../../src/tile-layer/utils/viewport-util.js"],"names":["lngLatToWorld","TILE_SIZE","getBoundingBox","viewport","corners","unproject","width","height","reduce","minLng","p","minLat","maxLng","maxLat","pixelsToTileIndex","a","getTileIndices","maxZoom","minZoom","z","Math","floor","zoom","constructor","Object","assign","bbox","scale","map","minX","minY","maxX","maxY","max","min","ceil","indices","x","y","push","getAdjustedTileIndex","adjustedZ","m","pow"],"mappings":"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","sourcesContent":["import {lngLatToWorld} from 'viewport-mercator-project';\n\nconst TILE_SIZE = 512;\n\nfunction getBoundingBox(viewport) {\n  const corners = [\n    viewport.unproject([0, 0]),\n    viewport.unproject([viewport.width, 0]),\n    viewport.unproject([0, viewport.height]),\n    viewport.unproject([viewport.width, viewport.height])\n  ];\n\n  return [\n    corners.reduce((minLng, p) => (minLng < p[0] ? minLng : p[0]), 180),\n    corners.reduce((minLat, p) => (minLat < p[1] ? minLat : p[1]), 90),\n    corners.reduce((maxLng, p) => (maxLng > p[0] ? maxLng : p[0]), -180),\n    corners.reduce((maxLat, p) => (maxLat > p[1] ? maxLat : p[1]), -90)\n  ];\n}\n\nfunction pixelsToTileIndex(a) {\n  return a / TILE_SIZE;\n}\n\n/**\n * Returns all tile indices in the current viewport. If the current zoom level is smaller\n * than minZoom, return an empty array. If the current zoom level is greater than maxZoom,\n * return tiles that are on maxZoom.\n */\nexport function getTileIndices(viewport, maxZoom, minZoom) {\n  const z = Math.floor(viewport.zoom);\n  if (minZoom && z < minZoom) {\n    return [];\n  }\n\n  viewport = new viewport.constructor(\n    Object.assign({}, viewport, {\n      zoom: z\n    })\n  );\n\n  const bbox = getBoundingBox(viewport);\n\n  let [minX, minY] = lngLatToWorld([bbox[0], bbox[3]], viewport.scale).map(pixelsToTileIndex);\n  let [maxX, maxY] = lngLatToWorld([bbox[2], bbox[1]], viewport.scale).map(pixelsToTileIndex);\n\n  /*\n      |  TILE  |  TILE  |  TILE  |\n        |(minPixel)           |(maxPixel)\n      |(minIndex)                |(maxIndex)  \n   */\n  minX = Math.max(0, Math.floor(minX));\n  maxX = Math.min(viewport.scale, Math.ceil(maxX));\n  minY = Math.max(0, Math.floor(minY));\n  maxY = Math.min(viewport.scale, Math.ceil(maxY));\n\n  const indices = [];\n\n  for (let x = minX; x < maxX; x++) {\n    for (let y = minY; y < maxY; y++) {\n      if (maxZoom && z > maxZoom) {\n        indices.push(getAdjustedTileIndex({x, y, z}, maxZoom));\n      } else {\n        indices.push({x, y, z});\n      }\n    }\n  }\n  return indices;\n}\n\n/**\n * Calculates and returns a new tile index {x, y, z}, with z being the given adjustedZ.\n */\nfunction getAdjustedTileIndex({x, y, z}, adjustedZ) {\n  const m = Math.pow(2, z - adjustedZ);\n  return {\n    x: Math.floor(x / m),\n    y: Math.floor(y / m),\n    z: adjustedZ\n  };\n}\n"],"file":"viewport-util.js"}