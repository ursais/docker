{"version":3,"sources":["../../../src/trips-layer/trips-layer.js"],"names":["defaultProps","trailLength","type","value","min","currentTime","getTimestamps","TripsLayer","shaders","inject","params","attributeManager","getAttributeManager","addInstanced","instanceTimestamps","size","update","calculateInstanceTimestamps","props","uniforms","Object","assign","isPath3D","Boolean","attribute","startRow","endRow","data","constant","Float32Array","state","pathTesselator","bufferLayout","instanceCount","iterable","objectInfo","i","objectIndex","object","index","geometrySize","timestamps","j","PathLayer","layerName"],"mappings":"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","sourcesContent":["// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nimport {PathLayer} from '@deck.gl/layers';\nimport {createIterable} from '@deck.gl/core';\n\nconst defaultProps = {\n  trailLength: {type: 'number', value: 120, min: 0},\n  currentTime: {type: 'number', value: 0, min: 0},\n  getTimestamps: {type: 'accessor', value: null}\n};\n\nexport default class TripsLayer extends PathLayer {\n  getShaders() {\n    const shaders = super.getShaders();\n    shaders.inject = {\n      // Timestamp of the vertex\n      'vs:#decl': `\\\nuniform float trailLength;\nuniform bool isPath3D;\nattribute vec2 instanceTimestamps;\nvarying float vTime;\n`,\n      // Remove the z component (timestamp) from position\n      // TODO - Legacy use case, remove in v8\n      'vec3 nextPosition = mix(instanceEndPositions, instanceRightPositions, isEnd);': `\\\nvec2 timestamps = instanceTimestamps;\nif (!isPath3D) {\n  prevPosition.z = 0.0;\n  currPosition.z = 0.0;\n  nextPosition.z = 0.0;\n  timestamps.x = instanceStartPositions.z;\n  timestamps.y = instanceEndPositions.z;\n}\n`,\n      // Apply a small shift to battle z-fighting\n      'vs:#main-end': `\\\nfloat shiftZ = sin(timestamps.x) * 1e-4;\ngl_Position.z += shiftZ;\nvTime = timestamps.x + (timestamps.y - timestamps.x) * vPathPosition.y / vPathLength;\n`,\n      'fs:#decl': `\\\nuniform float trailLength;\nuniform float currentTime;\nvarying float vTime;\n`,\n      // Drop the segments outside of the time window\n      'fs:#main-start': `\\\nif(vTime > currentTime || vTime < currentTime - trailLength) {\n  discard;\n}\n`,\n      // Fade the color (currentTime - 100%, end of trail - 0%)\n      'gl_FragColor = vColor;': 'gl_FragColor.a *= 1.0 - (currentTime - vTime) / trailLength;'\n    };\n    return shaders;\n  }\n\n  initializeState(params) {\n    super.initializeState(params);\n\n    const attributeManager = this.getAttributeManager();\n    attributeManager.addInstanced({\n      instanceTimestamps: {\n        size: 2,\n        update: this.calculateInstanceTimestamps\n      }\n    });\n  }\n\n  draw(params) {\n    const {trailLength, currentTime, getTimestamps} = this.props;\n\n    params.uniforms = Object.assign({}, params.uniforms, {\n      trailLength,\n      currentTime,\n      // TODO - remove in v8\n      isPath3D: Boolean(getTimestamps)\n    });\n\n    super.draw(params);\n  }\n\n  calculateInstanceTimestamps(attribute, {startRow, endRow}) {\n    const {data, getTimestamps} = this.props;\n\n    if (!getTimestamps) {\n      // TODO - Legacy use case, remove in v8\n      attribute.constant = true;\n      attribute.value = new Float32Array(2);\n      return;\n    }\n\n    const {\n      pathTesselator: {bufferLayout, instanceCount}\n    } = this.state;\n    const value = new Float32Array(instanceCount * 2);\n\n    const {iterable, objectInfo} = createIterable(data, startRow, endRow);\n    let i = 0;\n\n    for (let objectIndex = 0; objectIndex < startRow; objectIndex++) {\n      i += bufferLayout[objectIndex] * 2;\n    }\n\n    for (const object of iterable) {\n      objectInfo.index++;\n\n      const geometrySize = bufferLayout[objectInfo.index];\n      const timestamps = getTimestamps(object, objectInfo);\n      // For each line segment, we have [startTimestamp, endTimestamp]\n      for (let j = 0; j < geometrySize; j++) {\n        value[i++] = timestamps[j];\n        value[i++] = timestamps[j + 1];\n      }\n    }\n    attribute.constant = false;\n    attribute.value = value;\n  }\n}\n\nTripsLayer.layerName = 'TripsLayer';\nTripsLayer.defaultProps = defaultProps;\n"],"file":"trips-layer.js"}