{"version":3,"sources":["../../../src/h3-layers/h3-hexagon-layer.js"],"names":["UPDATE_THRESHOLD_KM","normalizeLongitudes","vertices","refLng","undefined","pt","deltaLng","scalePolygon","hexId","factor","lat","lng","actualCount","length","vertexCount","i","getHexagonCentroid","getHexagon","object","objectInfo","hexagonId","h3ToPolygon","coverage","mergeTriggers","trigger","Object","assign","defaultProps","PolygonLayer","highPrecision","type","min","max","value","x","hexagon","extruded","getColor","H3HexagonLayer","changeFlags","_shouldUseHighPrecision","propsOrDataChanged","somethingChanged","props","oldProps","dataChanged","updateTriggers","resolution","hasPentagon","data","iterable","index","setState","edgeLengthKM","UNITS","km","_updateVertices","context","viewport","state","centerHex","hex","latitude","longitude","pixelsPerMeter","distanceScales","centerLat","centerLng","projectFlat","centerX","centerY","map","p","worldPosition","_renderPolygonLayer","_renderColumnLayer","elevationScale","fp64","material","wireframe","stroked","filled","lineWidthUnits","lineWidthScale","lineWidthMinPixels","lineWidthMaxPixels","getFillColor","getElevation","getLineColor","getLineWidth","SubLayerClass","getSubLayerClass","forwardProps","_getForwardProps","getPolygon","getSubLayerProps","id","ColumnLayer","getPosition","diskResolution","radius","bind","CompositeLayer","layerName"],"mappings":"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","sourcesContent":["import {\n  h3ToGeoBoundary,\n  h3GetResolution,\n  h3ToGeo,\n  geoToH3,\n  h3IsPentagon,\n  h3Distance,\n  edgeLength,\n  UNITS\n} from 'h3-js';\nimport {lerp} from 'math.gl';\nimport {CompositeLayer, createIterable} from '@deck.gl/core';\nimport {ColumnLayer, PolygonLayer} from '@deck.gl/layers';\n\n// There is a cost to updating the instanced geometries when using highPrecision: false\n// This constant defines the distance between two hexagons that leads to \"significant\n// distortion.\" Smaller value makes the column layer more sensitive to viewport change.\nconst UPDATE_THRESHOLD_KM = 10;\n\n// normalize longitudes w.r.t center (refLng), when not provided first vertex\nexport function normalizeLongitudes(vertices, refLng) {\n  refLng = refLng === undefined ? vertices[0][0] : refLng;\n  for (const pt of vertices) {\n    const deltaLng = pt[0] - refLng;\n    if (deltaLng > 180) {\n      pt[0] -= 360;\n    } else if (deltaLng < -180) {\n      pt[0] += 360;\n    }\n  }\n}\n\n// scale polygon vertices w.r.t center (hexId)\nexport function scalePolygon(hexId, vertices, factor) {\n  const [lat, lng] = h3ToGeo(hexId);\n  const actualCount = vertices.length;\n\n  // normalize with respect to center\n  normalizeLongitudes(vertices, lng);\n\n  // `h3ToGeoBoundary` returns same array object for first and last vertex (closed polygon),\n  // if so skip scaling the last vertex\n  const vertexCount = vertices[0] === vertices[actualCount - 1] ? actualCount - 1 : actualCount;\n  for (let i = 0; i < vertexCount; i++) {\n    vertices[i][0] = lerp(lng, vertices[i][0], factor);\n    vertices[i][1] = lerp(lat, vertices[i][1], factor);\n  }\n}\n\nfunction getHexagonCentroid(getHexagon, object, objectInfo) {\n  const hexagonId = getHexagon(object, objectInfo);\n  const [lat, lng] = h3ToGeo(hexagonId);\n  return [lng, lat];\n}\n\nfunction h3ToPolygon(hexId, coverage = 1) {\n  const vertices = h3ToGeoBoundary(hexId, true);\n\n  if (coverage !== 1) {\n    // scale and normalize vertices w.r.t to center\n    scalePolygon(hexId, vertices, coverage);\n  } else {\n    // normalize w.r.t to start vertex\n    normalizeLongitudes(vertices);\n  }\n\n  return vertices;\n}\n\nfunction mergeTriggers(getHexagon, coverage) {\n  let trigger;\n  if (getHexagon === undefined || getHexagon === null) {\n    trigger = coverage;\n  } else if (typeof getHexagon === 'object') {\n    trigger = Object.assign({}, getHexagon, {coverage});\n  } else {\n    trigger = {getHexagon, coverage};\n  }\n  return trigger;\n}\n\nconst defaultProps = Object.assign({}, PolygonLayer.defaultProps, {\n  highPrecision: false,\n  coverage: {type: 'number', min: 0, max: 1, value: 1},\n  getHexagon: {type: 'accessor', value: x => x.hexagon},\n  extruded: true,\n  getColor: null\n});\n\n/**\n * A subclass of HexagonLayer that uses H3 hexagonIds in data objects\n * rather than centroid lat/longs. The shape of each hexagon is determined\n * based on a single \"center\" hexagon, which can be selected by passing in\n * a center lat/lon pair. If not provided, the map center will be used.\n *\n * Also sets the `hexagonId` field in the onHover/onClick callback's info\n * objects. Since this is calculated using math, hexagonId will be present\n * even when no corresponding hexagon is in the data set. You can check\n * index !== -1 to see if picking matches an actual object.\n */\nexport default class H3HexagonLayer extends CompositeLayer {\n  shouldUpdateState({changeFlags}) {\n    return this._shouldUseHighPrecision()\n      ? changeFlags.propsOrDataChanged\n      : changeFlags.somethingChanged;\n  }\n\n  updateState({props, oldProps, changeFlags}) {\n    if (\n      changeFlags.dataChanged ||\n      (changeFlags.updateTriggers && changeFlags.updateTriggers.getHexagon)\n    ) {\n      let resolution = -1;\n      let hasPentagon = false;\n      const {iterable, objectInfo} = createIterable(props.data);\n      for (const object of iterable) {\n        objectInfo.index++;\n        const hexId = props.getHexagon(object, objectInfo);\n        // Take the resolution of the first hex\n        resolution = resolution < 0 ? h3GetResolution(hexId) : resolution;\n        if (h3IsPentagon(hexId)) {\n          hasPentagon = true;\n          break;\n        }\n      }\n      this.setState({\n        resolution,\n        edgeLengthKM: resolution >= 0 ? edgeLength(resolution, UNITS.km) : 0,\n        hasPentagon\n      });\n    }\n\n    this._updateVertices(this.context.viewport);\n  }\n\n  _shouldUseHighPrecision() {\n    const {resolution, hasPentagon} = this.state;\n    return this.props.highPrecision || hasPentagon || (resolution >= 0 && resolution <= 5);\n  }\n\n  _updateVertices(viewport) {\n    if (this._shouldUseHighPrecision()) {\n      return;\n    }\n    const {resolution, edgeLengthKM, centerHex} = this.state;\n    if (resolution < 0) {\n      return;\n    }\n    const hex = geoToH3(viewport.latitude, viewport.longitude, resolution);\n    if (\n      centerHex === hex ||\n      (centerHex && h3Distance(centerHex, hex) * edgeLengthKM < UPDATE_THRESHOLD_KM)\n    ) {\n      return;\n    }\n\n    const {pixelsPerMeter} = viewport.distanceScales;\n\n    let vertices = h3ToPolygon(hex);\n    const [centerLat, centerLng] = h3ToGeo(hex);\n\n    const [centerX, centerY] = viewport.projectFlat([centerLng, centerLat]);\n    vertices = vertices.map(p => {\n      const worldPosition = viewport.projectFlat(p);\n      worldPosition[0] = (worldPosition[0] - centerX) / pixelsPerMeter[0];\n      worldPosition[1] = (worldPosition[1] - centerY) / pixelsPerMeter[1];\n      return worldPosition;\n    });\n\n    this.setState({centerHex: hex, vertices});\n  }\n\n  renderLayers() {\n    return this._shouldUseHighPrecision() ? this._renderPolygonLayer() : this._renderColumnLayer();\n  }\n\n  _getForwardProps() {\n    const {\n      elevationScale,\n      fp64,\n      material,\n      coverage,\n      extruded,\n      wireframe,\n      stroked,\n      filled,\n      lineWidthUnits,\n      lineWidthScale,\n      lineWidthMinPixels,\n      lineWidthMaxPixels,\n      // TODO - Deprecate getColor Prop in v8.0\n      getColor,\n      getFillColor,\n      getElevation,\n      getLineColor,\n      getLineWidth,\n      updateTriggers\n    } = this.props;\n\n    return {\n      elevationScale,\n      fp64,\n      extruded,\n      coverage,\n      wireframe,\n      stroked,\n      filled,\n      lineWidthUnits,\n      lineWidthScale,\n      lineWidthMinPixels,\n      lineWidthMaxPixels,\n      material,\n      getElevation,\n      getFillColor: getColor || getFillColor,\n      getLineColor,\n      getLineWidth,\n      updateTriggers: {\n        getFillColor: updateTriggers.getColor || updateTriggers.getFillColor,\n        getElevation: updateTriggers.getElevation,\n        getLineColor: updateTriggers.getLineColor,\n        getLineWidth: updateTriggers.getLineWidth\n      }\n    };\n  }\n\n  _renderPolygonLayer() {\n    const {data, getHexagon, updateTriggers, coverage} = this.props;\n\n    const SubLayerClass = this.getSubLayerClass('hexagon-cell-hifi', PolygonLayer);\n    const forwardProps = this._getForwardProps();\n\n    forwardProps.updateTriggers.getPolygon = mergeTriggers(updateTriggers.getHexagon, coverage);\n\n    return new SubLayerClass(\n      forwardProps,\n      this.getSubLayerProps({\n        id: 'hexagon-cell-hifi',\n        updateTriggers: forwardProps.updateTriggers\n      }),\n      {\n        data,\n        getPolygon: (object, objectInfo) => {\n          const hexagonId = getHexagon(object, objectInfo);\n          return h3ToPolygon(hexagonId, coverage);\n        }\n      }\n    );\n  }\n\n  _renderColumnLayer() {\n    const {data, getHexagon, updateTriggers} = this.props;\n\n    const SubLayerClass = this.getSubLayerClass('hexagon-cell', ColumnLayer);\n    const forwardProps = this._getForwardProps();\n    forwardProps.updateTriggers.getPosition = updateTriggers.getHexagon;\n\n    return new SubLayerClass(\n      forwardProps,\n      this.getSubLayerProps({\n        id: 'hexagon-cell',\n        updateTriggers: forwardProps.updateTriggers\n      }),\n      {\n        data,\n        diskResolution: 6, // generate an extruded hexagon as the base geometry\n        radius: 1,\n        vertices: this.state.vertices,\n        getPosition: getHexagonCentroid.bind(null, getHexagon)\n      }\n    );\n  }\n}\n\nH3HexagonLayer.defaultProps = defaultProps;\nH3HexagonLayer.layerName = 'H3HexagonLayer';\n"],"file":"h3-hexagon-layer.js"}