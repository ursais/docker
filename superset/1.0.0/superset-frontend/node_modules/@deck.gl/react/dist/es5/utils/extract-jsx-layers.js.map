{"version":3,"sources":["../../../src/utils/extract-jsx-layers.js"],"names":["wrapInView","node","View","Array","isArray","map","type","extractJSXLayers","children","layers","views","reactChildren","jsxLayers","jsxViews","React","Children","forEach","reactElement","ElementType","Layer","layer","createLayer","props","push","id","view","Object","keys","length","values","LayerType","reactProps","defaultProps","key"],"mappings":"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","sourcesContent":["import React, {createElement} from 'react';\nimport {inheritsFrom} from './inherits-from';\nimport {Layer, View} from '@deck.gl/core';\n\n// recursively wrap render callbacks in `View`\nfunction wrapInView(node) {\n  if (!node) {\n    return node;\n  }\n  if (typeof node === 'function') {\n    // React.Children does not traverse functions.\n    // All render callbacks must be protected under a <View>\n    return createElement(View, {}, node);\n  }\n  if (Array.isArray(node)) {\n    return node.map(wrapInView);\n  }\n  if (inheritsFrom(node.type, View)) {\n    return node;\n  }\n  return node;\n}\n\n// extracts any deck.gl layers masquerading as react elements from props.children\nexport default function extractJSXLayers({children, layers, views}) {\n  const reactChildren = []; // extract real react elements (i.e. not deck.gl layers)\n  const jsxLayers = []; // extracted layer from react children, will add to deck.gl layer array\n  const jsxViews = {};\n\n  // React.children\n  React.Children.forEach(wrapInView(children), reactElement => {\n    if (reactElement) {\n      // For some reason Children.forEach doesn't filter out `null`s\n      const ElementType = reactElement.type;\n      if (inheritsFrom(ElementType, Layer)) {\n        const layer = createLayer(ElementType, reactElement.props);\n        jsxLayers.push(layer);\n      } else {\n        reactChildren.push(reactElement);\n      }\n\n      // empty id => default view\n      if (ElementType !== View && inheritsFrom(ElementType, View) && reactElement.props.id) {\n        const view = new ElementType(reactElement.props);\n        jsxViews[view.id] = view;\n      }\n    }\n  });\n\n  // Avoid modifying views if no JSX views were found\n  if (Object.keys(jsxViews).length > 0) {\n    // If a view is specified in both views prop and JSX, use the one in views\n    if (Array.isArray(views)) {\n      views.forEach(view => {\n        jsxViews[view.id] = view;\n      });\n    } else if (views) {\n      jsxViews[views.id] = views;\n    }\n    views = Object.values(jsxViews);\n  }\n\n  // Avoid modifying layers array if no JSX layers were found\n  layers = jsxLayers.length > 0 ? [...jsxLayers, ...layers] : layers;\n\n  return {layers, children: reactChildren, views};\n}\n\nfunction createLayer(LayerType, reactProps) {\n  const props = {};\n  // Layer.defaultProps is treated as ReactElement.defaultProps and merged into react props\n  // Remove them\n  const defaultProps = LayerType.defaultProps || {};\n  for (const key in reactProps) {\n    if (defaultProps[key] !== reactProps[key]) {\n      props[key] = reactProps[key];\n    }\n  }\n  return new LayerType(props);\n}\n"],"file":"extract-jsx-layers.js"}