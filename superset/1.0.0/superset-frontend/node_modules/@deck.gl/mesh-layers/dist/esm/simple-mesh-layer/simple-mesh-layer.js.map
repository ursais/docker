{"version":3,"sources":["../../../src/simple-mesh-layer/simple-mesh-layer.js"],"names":["Layer","createIterable","Model","Geometry","Texture2D","fp64","PhongMaterial","isWebGL2","load","loadImage","fp64LowPart","MATRIX_ATTRIBUTES","vs1","fs1","vs3","fs3","assert","condition","message","Error","getTexture","gl","src","opts","then","data","getTextureFromData","catch","error","Promise","resolve","Object","assign","validateGeometryAttributes","attributes","positions","POSITION","getGeometry","DEFAULT_COLOR","defaultMaterial","defaultProps","fetch","url","propName","response","json","mesh","value","type","async","texture","sizeScale","min","parameters","depthTest","depthFunc","wireframe","material","getPosition","x","position","getColor","getOrientation","getScale","getTranslation","getTransformMatrix","SimpleMeshLayer","projectModule","use64bitProjection","gl2","context","vs","fs","modules","attributeManager","getAttributeManager","addInstanced","instancePositions","transition","size","accessor","instancePositions64xy","update","calculateInstancePositions64xyLow","instanceColors","defaultValue","instanceModelMatrix","setState","emptyTexture","Uint8Array","width","height","props","oldProps","changeFlags","state","model","delete","getModel","hasNormals","Boolean","NORMAL","normals","invalidateAll","setTexture","setDrawMode","uniforms","draw","flatShade","getShaders","id","geometry","isInstanced","shaderCache","setUniforms","sampler","hasTexture","attribute","startRow","endRow","isFP64","use64bitPositions","constant","Float32Array","i","iterable","objectInfo","object","index","layerName"],"mappings":"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","sourcesContent":["// Note: This file will either be moved back to deck.gl or reformatted to web-monorepo standards\n// Disabling lint temporarily to facilitate copying code in and out of this repo\n/* eslint-disable */\n\n// Copyright (c) 2015 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nimport {Layer, createIterable} from '@deck.gl/core';\nimport GL from '@luma.gl/constants';\nimport {Model, Geometry, Texture2D, fp64, PhongMaterial, isWebGL2} from '@luma.gl/core';\nimport {load} from '@loaders.gl/core';\nimport {loadImage} from '@loaders.gl/images';\nconst {fp64LowPart} = fp64;\n\nimport {MATRIX_ATTRIBUTES} from '../utils/matrix';\n\n// NOTE(Tarek): Should eventually phase out the glsl1 versions.\nimport vs1 from './simple-mesh-layer-vertex.glsl1';\nimport fs1 from './simple-mesh-layer-fragment.glsl1';\nimport vs3 from './simple-mesh-layer-vertex.glsl';\nimport fs3 from './simple-mesh-layer-fragment.glsl';\n\n// Replacement for the external assert method to reduce bundle size\nfunction assert(condition, message) {\n  if (!condition) {\n    throw new Error(`deck.gl: ${message}`);\n  }\n}\n\n/*\n * Load image data into luma.gl Texture2D objects\n * @param {WebGLContext} gl\n * @param {String|Texture2D|HTMLImageElement|Uint8ClampedArray} src - source of image data\n *   can be url string, Texture2D object, HTMLImageElement or pixel array\n * @returns {Promise} resolves to an object with name -> texture mapping\n */\nfunction getTexture(gl, src, opts) {\n  if (typeof src === 'string') {\n    // Url, load the image\n    return loadImage(src)\n      .then(data => getTextureFromData(gl, data, opts))\n      .catch(error => {\n        throw new Error(`Could not load texture from ${src}: ${error}`);\n      });\n  }\n  return new Promise(resolve => resolve(getTextureFromData(gl, src, opts)));\n}\n\n/*\n * Convert image data into texture\n * @returns {Texture2D} texture\n */\nfunction getTextureFromData(gl, data, opts) {\n  if (data instanceof Texture2D) {\n    return data;\n  }\n  return new Texture2D(gl, Object.assign({data}, opts));\n}\n\nfunction validateGeometryAttributes(attributes) {\n  assert(\n    attributes.positions || attributes.POSITION,\n    'SimpleMeshLayer requires \"postions\" or \"POSITION\" attribute in mesh property.'\n  );\n}\n\n/*\n * Convert mesh data into geometry\n * @returns {Geometry} geometry\n */\nfunction getGeometry(data) {\n  if (data.attributes) {\n    validateGeometryAttributes(data.attributes);\n    if (data instanceof Geometry) {\n      return data;\n    } else {\n      return new Geometry(data);\n    }\n  } else if (data.positions || data.POSITION) {\n    validateGeometryAttributes(data);\n    return new Geometry({\n      attributes: data\n    });\n  }\n  throw Error('Invalid mesh');\n}\n\nconst DEFAULT_COLOR = [0, 0, 0, 255];\nconst defaultMaterial = new PhongMaterial();\n\nconst defaultProps = {\n  fetch: (url, {propName}) => {\n    if (propName === 'mesh') {\n      return load(url);\n    }\n\n    return fetch(url).then(response => response.json());\n  },\n  mesh: {value: null, type: 'object', async: true},\n  texture: null,\n  sizeScale: {type: 'number', value: 1, min: 0},\n  // TODO - parameters should be merged, not completely overridden\n  parameters: {\n    depthTest: true,\n    depthFunc: GL.LEQUAL\n  },\n  fp64: false,\n  // NOTE(Tarek): Quick and dirty wireframe. Just draws\n  // the same mesh with LINE_STRIPS. Won't follow edges\n  // of the original mesh.\n  wireframe: false,\n  // Optional material for 'lighting' shader module\n  material: defaultMaterial,\n  getPosition: {type: 'accessor', value: x => x.position},\n  getColor: {type: 'accessor', value: DEFAULT_COLOR},\n\n  // yaw, pitch and roll are in degrees\n  // https://en.wikipedia.org/wiki/Euler_angles\n  // [pitch, yaw, roll]\n  getOrientation: {type: 'accessor', value: [0, 0, 0]},\n  getScale: {type: 'accessor', value: [1, 1, 1]},\n  getTranslation: {type: 'accessor', value: [0, 0, 0]},\n  // 4x4 matrix\n  getTransformMatrix: {type: 'accessor', value: []}\n};\n\nexport default class SimpleMeshLayer extends Layer {\n  getShaders() {\n    const projectModule = this.use64bitProjection() ? 'project64' : 'project32';\n    const gl2 = isWebGL2(this.context.gl);\n    const vs = gl2 ? vs3 : vs1;\n    const fs = gl2 ? fs3 : fs1;\n\n    return {vs, fs, modules: [projectModule, 'phong-lighting', 'picking']};\n  }\n\n  initializeState() {\n    const attributeManager = this.getAttributeManager();\n\n    attributeManager.addInstanced({\n      instancePositions: {\n        transition: true,\n        size: 3,\n        accessor: 'getPosition'\n      },\n      instancePositions64xy: {\n        size: 2,\n        accessor: 'getPosition',\n        update: this.calculateInstancePositions64xyLow\n      },\n      instanceColors: {\n        transition: true,\n        size: 4,\n        accessor: 'getColor',\n        defaultValue: [0, 0, 0, 255]\n      },\n      instanceModelMatrix: MATRIX_ATTRIBUTES\n    });\n\n    this.setState({\n      // Avoid luma.gl's missing uniform warning\n      // TODO - add feature to luma.gl to specify ignored uniforms?\n      emptyTexture: new Texture2D(this.context.gl, {\n        data: new Uint8Array(4),\n        width: 1,\n        height: 1\n      })\n    });\n  }\n\n  updateState({props, oldProps, changeFlags}) {\n    super.updateState({props, oldProps, changeFlags});\n\n    if (props.mesh !== oldProps.mesh || props.fp64 !== oldProps.fp64) {\n      if (this.state.model) {\n        this.state.model.delete();\n      }\n      if (props.mesh) {\n        this.setState({model: this.getModel(props.mesh)});\n\n        const attributes = props.mesh.attributes || props.mesh;\n        this.setState({\n          hasNormals: Boolean(attributes.NORMAL || attributes.normals)\n        });\n      }\n      this.getAttributeManager().invalidateAll();\n    }\n\n    if (props.texture !== oldProps.texture) {\n      this.setTexture(props.texture);\n    }\n\n    if (this.state.model) {\n      this.state.model.setDrawMode(this.props.wireframe ? GL.LINE_STRIP : GL.TRIANGLES);\n    }\n  }\n\n  finalizeState() {\n    super.finalizeState();\n\n    this.state.emptyTexture.delete();\n    if (this.state.texture) {\n      this.state.texture.delete();\n    }\n  }\n\n  draw({uniforms}) {\n    if (!this.state.model) {\n      return;\n    }\n\n    const {sizeScale} = this.props;\n\n    this.state.model.draw({\n      uniforms: Object.assign({}, uniforms, {\n        sizeScale,\n        flatShade: !this.state.hasNormals\n      })\n    });\n  }\n\n  getModel(mesh) {\n    const model = new Model(\n      this.context.gl,\n      Object.assign({}, this.getShaders(), {\n        id: this.props.id,\n        geometry: getGeometry(mesh),\n        isInstanced: true,\n        shaderCache: this.context.shaderCache\n      })\n    );\n\n    if (this.state.texture) {\n      model.setUniforms({sampler: this.state.texture, hasTexture: 1});\n    } else {\n      model.setUniforms({sampler: this.state.emptyTexture, hasTexture: 0});\n    }\n\n    return model;\n  }\n\n  setTexture(src) {\n    const {gl} = this.context;\n    const {emptyTexture} = this.state;\n\n    if (this.state.texture) {\n      this.state.texture.delete();\n    }\n\n    if (src) {\n      getTexture(gl, src).then(texture => {\n        this.setState({texture});\n        if (this.state.model) {\n          this.state.model.setUniforms({sampler: this.state.texture, hasTexture: 1});\n        }\n      });\n    } else {\n      // reset\n      this.setState({texture: null});\n      if (this.state.model) {\n        this.state.model.setUniforms({sampler: emptyTexture, hasTexture: 0});\n      }\n    }\n  }\n\n  calculateInstancePositions64xyLow(attribute, {startRow, endRow}) {\n    const isFP64 = this.use64bitPositions();\n    attribute.constant = !isFP64;\n\n    if (!isFP64) {\n      attribute.value = new Float32Array(2);\n      return;\n    }\n\n    const {data, getPosition} = this.props;\n    const {value, size} = attribute;\n    let i = startRow * size;\n    const {iterable, objectInfo} = createIterable(data, startRow, endRow);\n    for (const object of iterable) {\n      objectInfo.index++;\n      const position = getPosition(object, objectInfo);\n      value[i++] = fp64LowPart(position[0]);\n      value[i++] = fp64LowPart(position[1]);\n    }\n  }\n}\n\nSimpleMeshLayer.layerName = 'SimpleMeshLayer';\nSimpleMeshLayer.defaultProps = defaultProps;\n"],"file":"simple-mesh-layer.js"}