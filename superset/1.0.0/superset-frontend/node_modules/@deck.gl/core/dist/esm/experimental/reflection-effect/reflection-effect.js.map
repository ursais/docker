{"version":3,"sources":["../../../../src/experimental/reflection-effect/reflection-effect.js"],"names":["Framebuffer","Model","Geometry","Effect","WebMercatorViewport","reflectionVertex","reflectionFragment","ReflectionEffect","reflectivity","blur","framebuffer","setNeedsRedraw","vs","fs","modules","shaderCache","context","gl","layerManager","unitQuad","Object","assign","getShaders","id","geometry","drawMode","vertices","Float32Array","depth","viewport","dpi","window","devicePixelRatio","resize","width","height","pitch","bind","setViewport","clear","drawLayers","pass","unbind","render","reflectionTexture","texture","reflectionTextureWidth","reflectionTextureHeight"],"mappings":"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","sourcesContent":["// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\n/* global window */\nimport GL from '@luma.gl/constants';\nimport {Framebuffer, Model, Geometry} from '@luma.gl/core';\nimport Effect from '../../lib/effect';\nimport WebMercatorViewport from '../../viewports/web-mercator-viewport';\n\nimport reflectionVertex from './reflection-effect-vertex.glsl';\nimport reflectionFragment from './reflection-effect-fragment.glsl';\n\nexport default class ReflectionEffect extends Effect {\n  /**\n   * @classdesc\n   * ReflectionEffect\n   *\n   * @class\n   * @param reflectivity How visible reflections should be over the map, between 0 and 1\n   * @param blur how blurry the reflection should be, between 0 and 1\n   */\n\n  constructor(reflectivity = 0.5, blur = 0.5) {\n    super();\n    this.reflectivity = reflectivity;\n    this.blur = blur;\n    this.framebuffer = null;\n    this.setNeedsRedraw();\n  }\n\n  getShaders() {\n    return {\n      vs: reflectionVertex,\n      fs: reflectionFragment,\n      modules: [],\n      shaderCache: this.context.shaderCache\n    };\n  }\n\n  initialize({gl, layerManager}) {\n    this.unitQuad = new Model(\n      gl,\n      Object.assign({}, this.getShaders(), {\n        id: 'reflection-effect',\n        geometry: new Geometry({\n          drawMode: GL.TRIANGLE_FAN,\n          vertices: new Float32Array([0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0])\n        })\n      })\n    );\n    this.framebuffer = new Framebuffer(gl, {depth: true});\n  }\n\n  preDraw({gl, layerManager}) {\n    const {viewport} = layerManager.context;\n    /*\n     * the renderer already has a reference to this, but we don't have a reference to the renderer.\n     * when we refactor the camera code, we should make sure we get a reference to the renderer so\n     * that we can keep this in one place.\n     */\n    const dpi = (typeof window !== 'undefined' && window.devicePixelRatio) || 1;\n    this.framebuffer.resize({width: dpi * viewport.width, height: dpi * viewport.height});\n    const pitch = viewport.pitch;\n    this.framebuffer.bind();\n    /* this is a huge hack around the existing viewport class.\n     * TODO in the future, once we implement bona-fide cameras, we really need to fix this.\n     */\n    layerManager.setViewport(\n      new WebMercatorViewport(Object.assign({}, viewport, {pitch: -180 - pitch}))\n    );\n    gl.clear(GL.COLOR_BUFFER_BIT | GL.DEPTH_BUFFER_BIT);\n\n    layerManager.drawLayers({pass: 'reflection'});\n    layerManager.setViewport(viewport);\n    this.framebuffer.unbind();\n  }\n\n  draw({gl, layerManager}) {\n    /*\n     * Render our unit quad.\n     * This will cover the entire screen, but will lie behind all other geometry.\n     * This quad will sample the previously generated reflection texture\n     * in order to create the reflection effect\n     */\n    this.unitQuad.render({\n      reflectionTexture: this.framebuffer.texture,\n      reflectionTextureWidth: this.framebuffer.width,\n      reflectionTextureHeight: this.framebuffer.height,\n      reflectivity: this.reflectivity,\n      blur: this.blur\n    });\n  }\n\n  finalize({gl, layerManager}) {\n    /* TODO: Free resources? */\n  }\n}\n"],"file":"reflection-effect.js"}