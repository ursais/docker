{"version":3,"sources":["../../../src/lib/effect-manager.js"],"names":["deepEqual","default","LightingEffect","EffectManager","effects","_needsRedraw","defaultLightingEffect","needApplyDefaultLighting","props","length","setEffects","checkLightingEffect","opts","clearRedrawFlags","redraw","slice","push","cleanup","effect","hasEffect"],"mappings":";;AAAA,SAAQA,SAAR,QAAwB,qBAAxB;AACA,SAAQC,OAAO,IAAIC,cAAnB,QAAwC,qCAAxC;;IAEqBC,a;AACnB,2BAAc;AAAA;;AACZ,SAAKC,OAAL,GAAe,EAAf;AACA,SAAKC,YAAL,GAAoB,gBAApB;AACA,SAAKC,qBAAL,GAA6B,IAAIJ,cAAJ,EAA7B;AACA,SAAKK,wBAAL,GAAgC,KAAhC;AACD;;;;6BAEQC,K,EAAO;AACd,UAAI,aAAaA,KAAjB,EAAwB;AACtB,YAAIA,KAAK,CAACJ,OAAN,CAAcK,MAAd,KAAyB,KAAKL,OAAL,CAAaK,MAAtC,IAAgD,CAACT,SAAS,CAACQ,KAAK,CAACJ,OAAP,EAAgB,KAAKA,OAArB,CAA9D,EAA6F;AAC3F,eAAKM,UAAL,CAAgBF,KAAK,CAACJ,OAAtB;AACA,eAAKC,YAAL,GAAoB,iBAApB;AACD;AACF;;AACD,WAAKM,mBAAL;AACD;;;kCAE6C;AAAA,UAAlCC,IAAkC,uEAA3B;AAACC,QAAAA,gBAAgB,EAAE;AAAnB,OAA2B;AAC5C,UAAMC,MAAM,GAAG,KAAKT,YAApB;;AACA,UAAIO,IAAI,CAACC,gBAAT,EAA2B;AACzB,aAAKR,YAAL,GAAoB,KAApB;AACD;;AACD,aAAOS,MAAP;AACD;;;iCAEY;AACX,UAAIV,OAAO,GAAG,KAAKA,OAAnB;;AACA,UAAI,KAAKG,wBAAT,EAAmC;AACjCH,QAAAA,OAAO,GAAG,KAAKA,OAAL,CAAaW,KAAb,EAAV;AACAX,QAAAA,OAAO,CAACY,IAAR,CAAa,KAAKV,qBAAlB;AACD;;AACD,aAAOF,OAAP;AACD;;;+BAEU;AACT,WAAKa,OAAL;AACD;;;iCAGwB;AAAA,UAAdb,OAAc,uEAAJ,EAAI;AACvB,WAAKa,OAAL;AACA,WAAKb,OAAL,GAAeA,OAAf;AACD;;;8BAES;AAAA;AAAA;AAAA;;AAAA;AACR,6BAAqB,KAAKA,OAA1B,8HAAmC;AAAA,cAAxBc,MAAwB;AACjCA,UAAAA,MAAM,CAACD,OAAP;AACD;AAHO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAIR,WAAKb,OAAL,CAAaK,MAAb,GAAsB,CAAtB;AACD;;;0CAEqB;AACpB,UAAIU,SAAS,GAAG,KAAhB;AADoB;AAAA;AAAA;;AAAA;AAEpB,8BAAqB,KAAKf,OAA1B,mIAAmC;AAAA,cAAxBc,MAAwB;;AACjC,cAAIA,MAAM,YAAYhB,cAAtB,EAAsC;AACpCiB,YAAAA,SAAS,GAAG,IAAZ;AACA;AACD;AACF;AAPmB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAQpB,WAAKZ,wBAAL,GAAgC,CAACY,SAAjC;AACD;;;;;;SA7DkBhB,a","sourcesContent":["import {deepEqual} from '../utils/deep-equal';\nimport {default as LightingEffect} from '../effects/lighting/lighting-effect';\n\nexport default class EffectManager {\n  constructor() {\n    this.effects = [];\n    this._needsRedraw = 'Initial render';\n    this.defaultLightingEffect = new LightingEffect();\n    this.needApplyDefaultLighting = false;\n  }\n\n  setProps(props) {\n    if ('effects' in props) {\n      if (props.effects.length !== this.effects.length || !deepEqual(props.effects, this.effects)) {\n        this.setEffects(props.effects);\n        this._needsRedraw = 'effects changed';\n      }\n    }\n    this.checkLightingEffect();\n  }\n\n  needsRedraw(opts = {clearRedrawFlags: false}) {\n    const redraw = this._needsRedraw;\n    if (opts.clearRedrawFlags) {\n      this._needsRedraw = false;\n    }\n    return redraw;\n  }\n\n  getEffects() {\n    let effects = this.effects;\n    if (this.needApplyDefaultLighting) {\n      effects = this.effects.slice();\n      effects.push(this.defaultLightingEffect);\n    }\n    return effects;\n  }\n\n  finalize() {\n    this.cleanup();\n  }\n\n  // Private\n  setEffects(effects = []) {\n    this.cleanup();\n    this.effects = effects;\n  }\n\n  cleanup() {\n    for (const effect of this.effects) {\n      effect.cleanup();\n    }\n    this.effects.length = 0;\n  }\n\n  checkLightingEffect() {\n    let hasEffect = false;\n    for (const effect of this.effects) {\n      if (effect instanceof LightingEffect) {\n        hasEffect = true;\n        break;\n      }\n    }\n    this.needApplyDefaultLighting = !hasEffect;\n  }\n}\n"],"file":"effect-manager.js"}