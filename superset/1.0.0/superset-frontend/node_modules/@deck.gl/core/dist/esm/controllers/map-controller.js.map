{"version":3,"sources":["../../../src/controllers/map-controller.js"],"names":["clamp","Controller","ViewState","WebMercatorViewport","normalizeViewportProps","assert","LinearInterpolator","TRANSITION_EVENTS","PITCH_MOUSE_THRESHOLD","PITCH_ACCEL","LINEAR_TRANSITION_PROPS","transitionDuration","transitionEasing","t","transitionInterpolator","transitionInterruption","BREAK","NO_TRANSITION_PROPS","MAPBOX_LIMITS","minZoom","maxZoom","minPitch","maxPitch","DEFAULT_STATE","pitch","bearing","altitude","MapState","width","height","latitude","longitude","zoom","startPanLngLat","startZoomLngLat","startBearing","startPitch","startZoom","Number","isFinite","_interactiveState","_viewportProps","pos","_getUpdatedState","_unproject","startPos","_calculateNewLngLat","deltaScaleX","deltaScaleY","_calculateNewPitchAndBearing","scale","_calculateNewZoom","zoomedViewport","Object","assign","getLocationAtPoint","lngLat","_zoomFromCenter","_panFromCenter","viewState","fromProps","getViewportProps","props","Math","abs","offset","pan","newProps","viewport","unproject","getMapCenterByLngLatPosition","log2","MapController","invertPan","event","dragRotate","deltaX","deltaY","getCenter","centerY","startY","controllerState","min","max","newControllerState","rotate","updateViewport","isDragging","testExports"],"mappings":"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","sourcesContent":["import {clamp} from 'math.gl';\nimport Controller from './controller';\nimport ViewState from './view-state';\nimport WebMercatorViewport, {normalizeViewportProps} from 'viewport-mercator-project';\nimport assert from '../utils/assert';\nimport LinearInterpolator from '../transitions/linear-interpolator';\nimport {TRANSITION_EVENTS} from './transition-manager';\n\nconst PITCH_MOUSE_THRESHOLD = 5;\nconst PITCH_ACCEL = 1.2;\n\nconst LINEAR_TRANSITION_PROPS = {\n  transitionDuration: 300,\n  transitionEasing: t => t,\n  transitionInterpolator: new LinearInterpolator(),\n  transitionInterruption: TRANSITION_EVENTS.BREAK\n};\n\nconst NO_TRANSITION_PROPS = {\n  transitionDuration: 0\n};\n\n// MAPBOX LIMITS\nexport const MAPBOX_LIMITS = {\n  minZoom: 0,\n  maxZoom: 20,\n  minPitch: 0,\n  maxPitch: 60\n};\n\nconst DEFAULT_STATE = {\n  pitch: 0,\n  bearing: 0,\n  altitude: 1.5\n};\n\n/* Utils */\n\nclass MapState extends ViewState {\n  constructor({\n    /** Mapbox viewport properties */\n    /** The width of the viewport */\n    width,\n    /** The height of the viewport */\n    height,\n    /** The latitude at the center of the viewport */\n    latitude,\n    /** The longitude at the center of the viewport */\n    longitude,\n    /** The tile zoom level of the map. */\n    zoom,\n    /** The bearing of the viewport in degrees */\n    bearing = DEFAULT_STATE.bearing,\n    /** The pitch of the viewport in degrees */\n    pitch = DEFAULT_STATE.pitch,\n    /**\n     * Specify the altitude of the viewport camera\n     * Unit: map heights, default 1.5\n     * Non-public API, see https://github.com/mapbox/mapbox-gl-js/issues/1137\n     */\n    altitude = DEFAULT_STATE.altitude,\n\n    /** Viewport constraints */\n    maxZoom = MAPBOX_LIMITS.maxZoom,\n    minZoom = MAPBOX_LIMITS.minZoom,\n    maxPitch = MAPBOX_LIMITS.maxPitch,\n    minPitch = MAPBOX_LIMITS.minPitch,\n\n    /** Interaction states, required to calculate change during transform */\n    /* The point on map being grabbed when the operation first started */\n    startPanLngLat,\n    /* Center of the zoom when the operation first started */\n    startZoomLngLat,\n    /** Bearing when current perspective rotate operation started */\n    startBearing,\n    /** Pitch when current perspective rotate operation started */\n    startPitch,\n    /** Zoom when current zoom operation started */\n    startZoom\n  } = {}) {\n    assert(Number.isFinite(longitude), '`longitude` must be supplied');\n    assert(Number.isFinite(latitude), '`latitude` must be supplied');\n    assert(Number.isFinite(zoom), '`zoom` must be supplied');\n\n    super({\n      width,\n      height,\n      latitude,\n      longitude,\n      zoom,\n      bearing,\n      pitch,\n      altitude,\n      maxZoom,\n      minZoom,\n      maxPitch,\n      minPitch\n    });\n\n    this._interactiveState = {\n      startPanLngLat,\n      startZoomLngLat,\n      startBearing,\n      startPitch,\n      startZoom\n    };\n  }\n\n  /* Public API */\n\n  getViewportProps() {\n    return this._viewportProps;\n  }\n\n  getInteractiveState() {\n    return this._interactiveState;\n  }\n\n  /**\n   * Start panning\n   * @param {[Number, Number]} pos - position on screen where the pointer grabs\n   */\n  panStart({pos}) {\n    return this._getUpdatedState({\n      startPanLngLat: this._unproject(pos)\n    });\n  }\n\n  /**\n   * Pan\n   * @param {[Number, Number]} pos - position on screen where the pointer is\n   * @param {[Number, Number], optional} startPos - where the pointer grabbed at\n   *   the start of the operation. Must be supplied of `panStart()` was not called\n   */\n  pan({pos, startPos}) {\n    const startPanLngLat = this._interactiveState.startPanLngLat || this._unproject(startPos);\n\n    if (!startPanLngLat) {\n      return this;\n    }\n\n    const [longitude, latitude] = this._calculateNewLngLat({startPanLngLat, pos});\n\n    return this._getUpdatedState({\n      longitude,\n      latitude\n    });\n  }\n\n  /**\n   * End panning\n   * Must call if `panStart()` was called\n   */\n  panEnd() {\n    return this._getUpdatedState({\n      startPanLngLat: null\n    });\n  }\n\n  /**\n   * Start rotating\n   * @param {[Number, Number]} pos - position on screen where the center is\n   */\n  rotateStart({pos}) {\n    return this._getUpdatedState({\n      startBearing: this._viewportProps.bearing,\n      startPitch: this._viewportProps.pitch\n    });\n  }\n\n  /**\n   * Rotate\n   * @param {Number} deltaScaleX - a number between [-1, 1] specifying the\n   *   change to bearing.\n   * @param {Number} deltaScaleY - a number between [-1, 1] specifying the\n   *   change to pitch. -1 sets to minPitch and 1 sets to maxPitch.\n   */\n  rotate({deltaScaleX = 0, deltaScaleY = 0}) {\n    const {startBearing, startPitch} = this._interactiveState;\n\n    if (!Number.isFinite(startBearing) || !Number.isFinite(startPitch)) {\n      return this;\n    }\n\n    const {pitch, bearing} = this._calculateNewPitchAndBearing({\n      deltaScaleX,\n      deltaScaleY,\n      startBearing,\n      startPitch\n    });\n\n    return this._getUpdatedState({\n      bearing,\n      pitch\n    });\n  }\n\n  /**\n   * End rotating\n   * Must call if `rotateStart()` was called\n   */\n  rotateEnd() {\n    return this._getUpdatedState({\n      startBearing: null,\n      startPitch: null\n    });\n  }\n\n  /**\n   * Start zooming\n   * @param {[Number, Number]} pos - position on screen where the center is\n   */\n  zoomStart({pos}) {\n    return this._getUpdatedState({\n      startZoomLngLat: this._unproject(pos),\n      startZoom: this._viewportProps.zoom\n    });\n  }\n\n  /**\n   * Zoom\n   * @param {[Number, Number]} pos - position on screen where the current center is\n   * @param {[Number, Number]} startPos - the center position at\n   *   the start of the operation. Must be supplied of `zoomStart()` was not called\n   * @param {Number} scale - a number between [0, 1] specifying the accumulated\n   *   relative scale.\n   */\n  zoom({pos, startPos, scale}) {\n    assert(scale > 0, '`scale` must be a positive number');\n\n    // Make sure we zoom around the current mouse position rather than map center\n    let {startZoom, startZoomLngLat} = this._interactiveState;\n\n    if (!Number.isFinite(startZoom)) {\n      // We have two modes of zoom:\n      // scroll zoom that are discrete events (transform from the current zoom level),\n      // and pinch zoom that are continuous events (transform from the zoom level when\n      // pinch started).\n      // If startZoom state is defined, then use the startZoom state;\n      // otherwise assume discrete zooming\n      startZoom = this._viewportProps.zoom;\n      startZoomLngLat = this._unproject(startPos) || this._unproject(pos);\n    }\n\n    // take the start lnglat and put it where the mouse is down.\n    assert(\n      startZoomLngLat,\n      '`startZoomLngLat` prop is required ' +\n        'for zoom behavior to calculate where to position the map.'\n    );\n\n    const zoom = this._calculateNewZoom({scale, startZoom});\n\n    const zoomedViewport = new WebMercatorViewport(Object.assign({}, this._viewportProps, {zoom}));\n    const [longitude, latitude] = zoomedViewport.getLocationAtPoint({lngLat: startZoomLngLat, pos});\n\n    return this._getUpdatedState({\n      zoom,\n      longitude,\n      latitude\n    });\n  }\n\n  /**\n   * End zooming\n   * Must call if `zoomStart()` was called\n   */\n  zoomEnd() {\n    return this._getUpdatedState({\n      startZoomLngLat: null,\n      startZoom: null\n    });\n  }\n\n  zoomIn() {\n    return this._zoomFromCenter(2);\n  }\n\n  zoomOut() {\n    return this._zoomFromCenter(0.5);\n  }\n\n  moveLeft() {\n    return this._panFromCenter([100, 0]);\n  }\n\n  moveRight() {\n    return this._panFromCenter([-100, 0]);\n  }\n\n  moveUp() {\n    return this._panFromCenter([0, 100]);\n  }\n\n  moveDown() {\n    return this._panFromCenter([0, -100]);\n  }\n\n  rotateLeft() {\n    return this._getUpdatedState({\n      bearing: this._viewportProps.bearing - 15\n    });\n  }\n\n  rotateRight() {\n    return this._getUpdatedState({\n      bearing: this._viewportProps.bearing + 15\n    });\n  }\n\n  rotateUp() {\n    return this._getUpdatedState({\n      pitch: this._viewportProps.pitch + 10\n    });\n  }\n\n  rotateDown() {\n    return this._getUpdatedState({\n      pitch: this._viewportProps.pitch - 10\n    });\n  }\n\n  shortestPathFrom(viewState) {\n    // const endViewStateProps = new this.ControllerState(endProps).shortestPathFrom(startViewstate);\n    const fromProps = viewState.getViewportProps();\n    const props = Object.assign({}, this._viewportProps);\n    const {bearing, longitude} = props;\n\n    if (Math.abs(bearing - fromProps.bearing) > 180) {\n      props.bearing = bearing < 0 ? bearing + 360 : bearing - 360;\n    }\n    if (Math.abs(longitude - fromProps.longitude) > 180) {\n      props.longitude = longitude < 0 ? longitude + 360 : longitude - 360;\n    }\n    return props;\n  }\n\n  /* Private methods */\n\n  _zoomFromCenter(scale) {\n    const {width, height} = this._viewportProps;\n    return this.zoom({\n      pos: [width / 2, height / 2],\n      scale\n    });\n  }\n\n  _panFromCenter(offset) {\n    const {width, height} = this._viewportProps;\n    return this.pan({\n      startPos: [width / 2, height / 2],\n      pos: [width / 2 + offset[0], height / 2 + offset[1]]\n    });\n  }\n\n  _getUpdatedState(newProps) {\n    // Update _viewportProps\n    return new MapState(Object.assign({}, this._viewportProps, this._interactiveState, newProps));\n  }\n\n  // Apply any constraints (mathematical or defined by _viewportProps) to map state\n  _applyConstraints(props) {\n    // Ensure zoom is within specified range\n    const {maxZoom, minZoom, zoom} = props;\n    props.zoom = clamp(zoom, minZoom, maxZoom);\n\n    // Ensure pitch is within specified range\n    const {maxPitch, minPitch, pitch} = props;\n    props.pitch = clamp(pitch, minPitch, maxPitch);\n\n    Object.assign(props, normalizeViewportProps(props));\n\n    return props;\n  }\n\n  _unproject(pos) {\n    const viewport = new WebMercatorViewport(this._viewportProps);\n    return pos && viewport.unproject(pos);\n  }\n\n  // Calculate a new lnglat based on pixel dragging position\n  _calculateNewLngLat({startPanLngLat, pos}) {\n    const viewport = new WebMercatorViewport(this._viewportProps);\n    return viewport.getMapCenterByLngLatPosition({lngLat: startPanLngLat, pos});\n  }\n\n  // Calculates new zoom\n  _calculateNewZoom({scale, startZoom}) {\n    const {maxZoom, minZoom} = this._viewportProps;\n    const zoom = startZoom + Math.log2(scale);\n    return clamp(zoom, minZoom, maxZoom);\n  }\n\n  // Calculates a new pitch and bearing from a position (coming from an event)\n  _calculateNewPitchAndBearing({deltaScaleX, deltaScaleY, startBearing, startPitch}) {\n    // clamp deltaScaleY to [-1, 1] so that rotation is constrained between minPitch and maxPitch.\n    // deltaScaleX does not need to be clamped as bearing does not have constraints.\n    deltaScaleY = clamp(deltaScaleY, -1, 1);\n\n    const {minPitch, maxPitch} = this._viewportProps;\n\n    const bearing = startBearing + 180 * deltaScaleX;\n    let pitch = startPitch;\n    if (deltaScaleY > 0) {\n      // Gradually increase pitch\n      pitch = startPitch + deltaScaleY * (maxPitch - startPitch);\n    } else if (deltaScaleY < 0) {\n      // Gradually decrease pitch\n      pitch = startPitch - deltaScaleY * (minPitch - startPitch);\n    }\n\n    return {\n      pitch,\n      bearing\n    };\n  }\n}\n\nexport default class MapController extends Controller {\n  constructor(props) {\n    super(MapState, props);\n    this.invertPan = true;\n  }\n\n  _getTransitionProps() {\n    // Enables Transitions on double-tap and key-down events.\n    return LINEAR_TRANSITION_PROPS;\n  }\n\n  _onPanRotate(event) {\n    if (!this.dragRotate) {\n      return false;\n    }\n\n    const {deltaX, deltaY} = event;\n    const [, centerY] = this.getCenter(event);\n    const startY = centerY - deltaY;\n    const {width, height} = this.controllerState.getViewportProps();\n\n    const deltaScaleX = deltaX / width;\n    let deltaScaleY = 0;\n\n    if (deltaY > 0) {\n      if (Math.abs(height - startY) > PITCH_MOUSE_THRESHOLD) {\n        // Move from 0 to -1 as we drag upwards\n        deltaScaleY = (deltaY / (startY - height)) * PITCH_ACCEL;\n      }\n    } else if (deltaY < 0) {\n      if (startY > PITCH_MOUSE_THRESHOLD) {\n        // Move from 0 to 1 as we drag upwards\n        deltaScaleY = 1 - centerY / startY;\n      }\n    }\n    deltaScaleY = Math.min(1, Math.max(-1, deltaScaleY));\n\n    const newControllerState = this.controllerState.rotate({deltaScaleX, deltaScaleY});\n    return this.updateViewport(newControllerState, NO_TRANSITION_PROPS, {isDragging: true});\n  }\n}\n\nexport const testExports = {MapState};\n"],"file":"map-controller.js"}