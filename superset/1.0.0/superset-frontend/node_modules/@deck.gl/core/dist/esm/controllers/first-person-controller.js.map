{"version":3,"sources":["../../../src/controllers/first-person-controller.js"],"names":["Controller","ViewState","Vector3","clamp","MOVEMENT_SPEED","ROTATION_STEP_DEGREES","ensureFinite","value","fallbackValue","Number","isFinite","FirstPersonState","width","height","position","bearing","pitch","longitude","latitude","zoom","syncBearing","bounds","startPanEventPosition","startPanPosition","startRotateCenter","startRotateViewport","startZoomPos","startZoom","_interactiveState","pos","_viewportProps","translationX","translationY","_getUpdatedState","startPos","deltaX","deltaY","startPanPos","deltaScaleX","deltaScaleY","scale","minZoom","maxZoom","newZoom","cx","cy","newTranslationX","newTranslationY","moveBackward","moveForward","newBearing","direction","getDirection","delta","normalize","add","newProps","Object","assign","FirstPersonController","props"],"mappings":"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","sourcesContent":["import Controller from './controller';\nimport ViewState from './view-state';\n\nimport {Vector3, clamp} from 'math.gl';\n\nconst MOVEMENT_SPEED = 1; // 1 meter per keyboard click\nconst ROTATION_STEP_DEGREES = 2;\n\n/* Helpers */\n\nfunction ensureFinite(value, fallbackValue) {\n  return Number.isFinite(value) ? value : fallbackValue;\n}\n\nclass FirstPersonState extends ViewState {\n  constructor({\n    /* Viewport arguments */\n    width, // Width of viewport\n    height, // Height of viewport\n\n    // Position and orientation\n    position, // typically in meters from anchor point\n\n    bearing, // Rotation around y axis\n    pitch, // Rotation around x axis\n\n    // Geospatial anchor\n    longitude,\n    latitude,\n    zoom,\n\n    syncBearing = true, // Whether to lock bearing to direction\n\n    // Constraints - simple movement limit\n    // Bounding box of the world, in the shape of {minX, maxX, minY, maxY, minZ, maxZ}\n    bounds,\n\n    /** Interaction states, required to calculate change during transform */\n    // Model state when the pan operation first started\n    startPanEventPosition,\n    startPanPosition,\n\n    // Model state when the rotate operation first started\n    startRotateCenter,\n    startRotateViewport,\n\n    // Model state when the zoom operation first started\n    startZoomPos,\n    startZoom\n  }) {\n    super({\n      width,\n      height,\n      position,\n      bearing,\n      pitch,\n      longitude,\n      latitude,\n      zoom\n    });\n\n    this._interactiveState = {\n      startPanEventPosition,\n      startPanPosition,\n      startRotateCenter,\n      startRotateViewport,\n      startZoomPos,\n      startZoom\n    };\n  }\n\n  /* Public API */\n\n  getInteractiveState() {\n    return this._interactiveState;\n  }\n\n  /**\n   * Start panning\n   * @param {[Number, Number]} pos - position on screen where the pointer grabs\n   */\n  panStart({pos}) {\n    const {translationX, translationY} = this._viewportProps;\n\n    return this._getUpdatedState({\n      startPanPosition: [translationX, translationY],\n      startPanEventPosition: pos\n    });\n  }\n\n  /**\n   * Pan\n   * @param {[Number, Number]} pos - position on screen where the pointer is\n   */\n  pan({pos, startPos}) {\n    const startPanEventPosition = this._interactiveState.startPanEventPosition || startPos;\n\n    // when the mouse starts dragging outside of this viewport, then drags over it.\n    // TODO - use interactionState flag instead\n    if (!startPanEventPosition) {\n      return this;\n    }\n\n    let [translationX, translationY] = this._interactiveState.startPanPosition || [];\n    translationX = ensureFinite(translationX, this._viewportProps.translationX);\n    translationY = ensureFinite(translationY, this._viewportProps.translationY);\n\n    const deltaX = pos[0] - startPanEventPosition[0];\n    const deltaY = pos[1] - startPanEventPosition[1];\n\n    return this._getUpdatedState({\n      translationX: translationX + deltaX,\n      translationY: translationY - deltaY\n    });\n  }\n\n  /**\n   * End panning\n   * Must call if `panStart()` was called\n   */\n  panEnd() {\n    return this._getUpdatedState({\n      startPanPosition: null,\n      startPanPos: null\n    });\n  }\n\n  /**\n   * Start rotating\n   * @param {[Number, Number]} pos - position on screen where the pointer grabs\n   */\n  rotateStart({pos}) {\n    return this._getUpdatedState({\n      startRotateCenter: this._viewportProps.position,\n      startRotateViewport: this._viewportProps\n    });\n  }\n\n  /**\n   * Rotate\n   * @param {[Number, Number]} pos - position on screen where the pointer is\n   */\n  rotate({deltaScaleX, deltaScaleY}) {\n    // when the mouse starts dragging outside of this viewport, then drags over it.\n    // TODO - use interactionState flag instead\n    if (!this._interactiveState.startRotateCenter) {\n      return this;\n    }\n\n    const {bearing, pitch} = this._viewportProps;\n\n    return this._getUpdatedState({\n      bearing: bearing + deltaScaleX * 10,\n      pitch: pitch - deltaScaleY * 10\n    });\n  }\n\n  /**\n   * End rotating\n   * Must call if `rotateStart()` was called\n   */\n  rotateEnd() {\n    return this._getUpdatedState({\n      startRotateCenter: null,\n      startRotateViewport: null\n    });\n  }\n\n  /**\n   * Start zooming\n   * @param {[Number, Number]} pos - position on screen where the pointer grabs\n   */\n  zoomStart({pos}) {\n    return this._getUpdatedState({\n      startZoomPos: pos,\n      startZoom: this._viewportProps.zoom\n    });\n  }\n\n  /**\n   * Zoom\n   * @param {[Number, Number]} pos - position on screen where the current center is\n   * @param {[Number, Number]} startPos - the center position at\n   *   the start of the operation. Must be supplied of `zoomStart()` was not called\n   * @param {Number} scale - a number between [0, 1] specifying the accumulated\n   *   relative scale.\n   */\n  zoom({pos, startPos, scale}) {\n    const {zoom, minZoom, maxZoom, width, height, translationX, translationY} = this._viewportProps;\n\n    const startZoomPos = this._interactiveState.startZoomPos || startPos || pos;\n\n    const newZoom = clamp(zoom * scale, minZoom, maxZoom);\n    const deltaX = pos[0] - startZoomPos[0];\n    const deltaY = pos[1] - startZoomPos[1];\n\n    // Zoom around the center position\n    const cx = startZoomPos[0] - width / 2;\n    const cy = height / 2 - startZoomPos[1];\n    /* eslint-disable no-unused-vars */\n    const newTranslationX = cx - ((cx - translationX) * newZoom) / zoom + deltaX;\n    const newTranslationY = cy - ((cy - translationY) * newZoom) / zoom - deltaY;\n    /* eslint-enable no-unused-vars */\n\n    // return this._getUpdatedState({\n    //   position\n    //   translationX: newTranslationX,\n    //   translationY: newTranslationY\n    // });\n\n    // TODO HACK\n    return newZoom / zoom < 1 ? this.moveBackward() : this.moveForward();\n  }\n\n  /**\n   * End zooming\n   * Must call if `zoomStart()` was called\n   */\n  zoomEnd() {\n    return this._getUpdatedState({\n      startZoomPos: null,\n      startZoom: null\n    });\n  }\n\n  moveLeft() {\n    const {bearing} = this._viewportProps;\n    const newBearing = bearing - ROTATION_STEP_DEGREES;\n    return this._getUpdatedState({\n      bearing: newBearing\n    });\n  }\n\n  moveRight() {\n    const {bearing} = this._viewportProps;\n    const newBearing = bearing + ROTATION_STEP_DEGREES;\n    return this._getUpdatedState({\n      bearing: newBearing\n    });\n  }\n\n  moveForward() {\n    const {position} = this._viewportProps;\n    const direction = this.getDirection();\n    const delta = new Vector3(direction).normalize().scale(MOVEMENT_SPEED);\n    return this._getUpdatedState({\n      position: new Vector3(position).add(delta)\n    });\n  }\n\n  moveBackward() {\n    const {position} = this._viewportProps;\n    const direction = this.getDirection();\n    const delta = new Vector3(direction).normalize().scale(-MOVEMENT_SPEED);\n    return this._getUpdatedState({\n      position: new Vector3(position).add(delta)\n    });\n  }\n\n  moveUp() {\n    const {position} = this._viewportProps;\n    const delta = [0, 0, 1];\n    return this._getUpdatedState({\n      position: new Vector3(position).add(delta)\n    });\n  }\n\n  moveDown() {\n    const {position} = this._viewportProps;\n    const delta = position[2] >= 1 ? [0, 0, -1] : [0, 0, 0];\n    return this._getUpdatedState({\n      position: new Vector3(position).add(delta)\n    });\n  }\n\n  zoomIn() {\n    return this._getUpdatedState({\n      zoom: this._viewportProps.zoom + 0.2\n    });\n  }\n\n  zoomOut() {\n    return this._getUpdatedState({\n      zoom: this._viewportProps.zoom - 0.2\n    });\n  }\n\n  /* Private methods */\n\n  _getUpdatedState(newProps) {\n    // Update _viewportProps\n    return new FirstPersonState(\n      Object.assign({}, this._viewportProps, this._interactiveState, newProps)\n    );\n  }\n}\n\nexport default class FirstPersonController extends Controller {\n  constructor(props) {\n    super(FirstPersonState, props);\n  }\n}\n"],"file":"first-person-controller.js"}