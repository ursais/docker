{"version":3,"sources":["../../../src/controllers/transition-manager.js"],"names":["LinearInterpolator","Transition","assert","noop","TRANSITION_EVENTS","BREAK","SNAP_TO_END","IGNORE","DEFAULT_PROPS","transitionDuration","transitionEasing","t","transitionInterpolator","transitionInterruption","onTransitionStart","onTransitionInterrupt","onTransitionEnd","TransitionManager","ControllerState","props","Object","assign","propsInTransition","time","transition","onViewStateChange","_onTransitionUpdate","bind","nextProps","transitionTriggered","currentProps","_shouldIgnoreViewportChange","_isTransitionEnabled","startProps","interruption","endProps","_triggerTransition","cancel","timestamp","_updateTransition","inProgress","interpolator","arePropsEqual","_isUpdateDueToCurrentTransition","startViewstate","endViewStateProps","shortestPathFrom","initialProps","initializeProps","start","duration","easing","end","onStart","onUpdate","onInterrupt","_onTransitionEnd","onEnd","update","callback","viewport","interpolateProps","getViewportProps","viewState","interactionState","inTransition","defaultProps"],"mappings":";;AAAA,OAAOA,kBAAP,MAA+B,oCAA/B;AACA,OAAOC,UAAP,MAAuB,2BAAvB;AACA,OAAOC,MAAP,MAAmB,iBAAnB;;AAEA,IAAMC,IAAI,GAAG,SAAPA,IAAO,GAAM,CAAE,CAArB;;AAEA,OAAO,IAAMC,iBAAiB,GAAG;AAC/BC,EAAAA,KAAK,EAAE,CADwB;AAE/BC,EAAAA,WAAW,EAAE,CAFkB;AAG/BC,EAAAA,MAAM,EAAE;AAHuB,CAA1B;AAMP,IAAMC,aAAa,GAAG;AACpBC,EAAAA,kBAAkB,EAAE,CADA;AAEpBC,EAAAA,gBAAgB,EAAE,0BAAAC,CAAC;AAAA,WAAIA,CAAJ;AAAA,GAFC;AAGpBC,EAAAA,sBAAsB,EAAE,IAAIZ,kBAAJ,EAHJ;AAIpBa,EAAAA,sBAAsB,EAAET,iBAAiB,CAACC,KAJtB;AAKpBS,EAAAA,iBAAiB,EAAEX,IALC;AAMpBY,EAAAA,qBAAqB,EAAEZ,IANH;AAOpBa,EAAAA,eAAe,EAAEb;AAPG,CAAtB;;IAUqBc,iB;AACnB,6BAAYC,eAAZ,EAAyC;AAAA,QAAZC,KAAY,uEAAJ,EAAI;;AAAA;;AACvCjB,IAAAA,MAAM,CAACgB,eAAD,CAAN;AACA,SAAKA,eAAL,GAAuBA,eAAvB;AACA,SAAKC,KAAL,GAAaC,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBb,aAAlB,EAAiCW,KAAjC,CAAb;AACA,SAAKG,iBAAL,GAAyB,IAAzB;AACA,SAAKC,IAAL,GAAY,CAAZ;AACA,SAAKC,UAAL,GAAkB,IAAIvB,UAAJ,EAAlB;AAEA,SAAKwB,iBAAL,GAAyBN,KAAK,CAACM,iBAA/B;AAEA,SAAKC,mBAAL,GAA2B,KAAKA,mBAAL,CAAyBC,IAAzB,CAA8B,IAA9B,CAA3B;AACD;;;;+BAEU,CAAE;;;8CAGa;AACxB,aAAO,KAAKL,iBAAZ;AACD;;;2CAIsBM,S,EAAW;AAChC,UAAIC,mBAAmB,GAAG,KAA1B;AACA,UAAMC,YAAY,GAAG,KAAKX,KAA1B;AAEAS,MAAAA,SAAS,GAAGR,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBb,aAAlB,EAAiCoB,SAAjC,CAAZ;AACA,WAAKT,KAAL,GAAaS,SAAb;;AAGA,UAAI,KAAKG,2BAAL,CAAiCD,YAAjC,EAA+CF,SAA/C,CAAJ,EAA+D;AAC7D,eAAOC,mBAAP;AACD;;AAED,UAAI,KAAKG,oBAAL,CAA0BJ,SAA1B,CAAJ,EAA0C;AACxC,YAAMK,UAAU,GAAGb,MAAM,CAACC,MAAP,CACjB,EADiB,EAEjBS,YAFiB,EAGjB,KAAKN,UAAL,CAAgBU,YAAhB,KAAiC9B,iBAAiB,CAACE,WAAnD,GACI,KAAKkB,UAAL,CAAgBW,QADpB,GAEI,KAAKb,iBAAL,IAA0BQ,YALb,CAAnB;;AAQA,aAAKM,kBAAL,CAAwBH,UAAxB,EAAoCL,SAApC;;AAEAC,QAAAA,mBAAmB,GAAG,IAAtB;AACD,OAZD,MAYO;AACL,aAAKL,UAAL,CAAgBa,MAAhB;AACD;;AAED,aAAOR,mBAAP;AACD;;;qCAEgBS,S,EAAW;AAC1B,WAAKf,IAAL,GAAYe,SAAZ;;AACA,WAAKC,iBAAL;AACD;;;yCAIoBpB,K,EAAO;AAC1B,aAAOA,KAAK,CAACV,kBAAN,GAA2B,CAA3B,IAAgCU,KAAK,CAACP,sBAA7C;AACD;;;oDAE+BO,K,EAAO;AACrC,UAAI,KAAKK,UAAL,CAAgBgB,UAApB,EAAgC;AAC9B,eAAO,KAAKhB,UAAL,CAAgBiB,YAAhB,CAA6BC,aAA7B,CAA2CvB,KAA3C,EAAkD,KAAKG,iBAAvD,CAAP;AACD;;AACD,aAAO,KAAP;AACD;;;gDAE2BQ,Y,EAAcF,S,EAAW;AACnD,UAAI,KAAKJ,UAAL,CAAgBgB,UAApB,EAAgC;AAE9B,eACE,KAAKhB,UAAL,CAAgBU,YAAhB,KAAiC9B,iBAAiB,CAACG,MAAnD,IAEA,KAAKoC,+BAAL,CAAqCf,SAArC,CAHF;AAKD,OAPD,MAOO,IAAI,KAAKI,oBAAL,CAA0BJ,SAA1B,CAAJ,EAA0C;AAE/C,eAAOA,SAAS,CAAChB,sBAAV,CAAiC8B,aAAjC,CAA+CZ,YAA/C,EAA6DF,SAA7D,CAAP;AACD;;AACD,aAAO,IAAP;AACD;;;uCAEkBK,U,EAAYE,Q,EAAU;AACvCjC,MAAAA,MAAM,CAAC,KAAK8B,oBAAL,CAA0BG,QAA1B,CAAD,EAAsC,2BAAtC,CAAN;AAEA,UAAMS,cAAc,GAAG,IAAI,KAAK1B,eAAT,CAAyBe,UAAzB,CAAvB;AACA,UAAMY,iBAAiB,GAAG,IAAI,KAAK3B,eAAT,CAAyBiB,QAAzB,EAAmCW,gBAAnC,CAAoDF,cAApD,CAA1B;AAEA,UAAMG,YAAY,GAAGZ,QAAQ,CAACvB,sBAAT,CAAgCoC,eAAhC,CACnBf,UADmB,EAEnBY,iBAFmB,CAArB;AAKA,WAAKvB,iBAAL,GAAyB,EAAzB;AACA,WAAKE,UAAL,CAAgByB,KAAhB,CAAsB;AACpBC,QAAAA,QAAQ,EAAEf,QAAQ,CAAC1B,kBADC;AAEpB0C,QAAAA,MAAM,EAAEhB,QAAQ,CAACzB,gBAFG;AAGpB+B,QAAAA,YAAY,EAAEN,QAAQ,CAACvB,sBAHH;AAIpBsB,QAAAA,YAAY,EAAEC,QAAQ,CAACtB,sBAJH;AAMpBoB,QAAAA,UAAU,EAAEc,YAAY,CAACE,KANL;AAOpBd,QAAAA,QAAQ,EAAEY,YAAY,CAACK,GAPH;AASpBC,QAAAA,OAAO,EAAElB,QAAQ,CAACrB,iBATE;AAUpBwC,QAAAA,QAAQ,EAAE,KAAK5B,mBAVK;AAWpB6B,QAAAA,WAAW,EAAE,KAAKC,gBAAL,CAAsBrB,QAAQ,CAACpB,qBAA/B,CAXO;AAYpB0C,QAAAA,KAAK,EAAE,KAAKD,gBAAL,CAAsBrB,QAAQ,CAACnB,eAA/B;AAZa,OAAtB;;AAcA,WAAKuB,iBAAL;AACD;;;wCAEmB;AAClB,WAAKf,UAAL,CAAgBkC,MAAhB,CAAuB,KAAKnC,IAA5B;AACD;;;qCAEgBoC,Q,EAAU;AAAA;;AACzB,aAAO,UAAAnC,UAAU,EAAI;AACnB,QAAA,KAAI,CAACF,iBAAL,GAAyB,IAAzB;AACAqC,QAAAA,QAAQ,CAACnC,UAAD,CAAR;AACD,OAHD;AAID;;;wCAEmBA,U,EAAY;AAAA,UAEvBiB,YAFuB,GAEqBjB,UAFrB,CAEvBiB,YAFuB;AAAA,UAETR,UAFS,GAEqBT,UAFrB,CAETS,UAFS;AAAA,UAEGE,QAFH,GAEqBX,UAFrB,CAEGW,QAFH;AAAA,UAEaZ,IAFb,GAEqBC,UAFrB,CAEaD,IAFb;AAI9B,UAAMqC,QAAQ,GAAGnB,YAAY,CAACoB,gBAAb,CAA8B5B,UAA9B,EAA0CE,QAA1C,EAAoDZ,IAApD,CAAjB;AAIA,WAAKD,iBAAL,GAAyB,IAAI,KAAKJ,eAAT,CACvBE,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkB,KAAKF,KAAvB,EAA8ByC,QAA9B,CADuB,EAEvBE,gBAFuB,EAAzB;;AAIA,UAAI,KAAKrC,iBAAT,EAA4B;AAC1B,aAAKA,iBAAL,CAAuB;AACrBsC,UAAAA,SAAS,EAAE,KAAKzC,iBADK;AAErB0C,UAAAA,gBAAgB,EAAE;AAACC,YAAAA,YAAY,EAAE;AAAf;AAFG,SAAvB;AAID;AACF;;;;;;SAjJkBhD,iB;AAoJrBA,iBAAiB,CAACiD,YAAlB,GAAiC1D,aAAjC","sourcesContent":["import LinearInterpolator from '../transitions/linear-interpolator';\nimport Transition from '../transitions/transition';\nimport assert from '../utils/assert';\n\nconst noop = () => {};\n\nexport const TRANSITION_EVENTS = {\n  BREAK: 1,\n  SNAP_TO_END: 2,\n  IGNORE: 3\n};\n\nconst DEFAULT_PROPS = {\n  transitionDuration: 0,\n  transitionEasing: t => t,\n  transitionInterpolator: new LinearInterpolator(),\n  transitionInterruption: TRANSITION_EVENTS.BREAK,\n  onTransitionStart: noop,\n  onTransitionInterrupt: noop,\n  onTransitionEnd: noop\n};\n\nexport default class TransitionManager {\n  constructor(ControllerState, props = {}) {\n    assert(ControllerState);\n    this.ControllerState = ControllerState;\n    this.props = Object.assign({}, DEFAULT_PROPS, props);\n    this.propsInTransition = null;\n    this.time = 0;\n    this.transition = new Transition();\n\n    this.onViewStateChange = props.onViewStateChange;\n\n    this._onTransitionUpdate = this._onTransitionUpdate.bind(this);\n  }\n\n  finalize() {}\n\n  // Returns current transitioned viewport.\n  getViewportInTransition() {\n    return this.propsInTransition;\n  }\n\n  // Process the vewiport change, either ignore or trigger a new transition.\n  // Return true if a new transition is triggered, false otherwise.\n  processViewStateChange(nextProps) {\n    let transitionTriggered = false;\n    const currentProps = this.props;\n    // Set this.props here as '_triggerTransition' calls '_updateViewport' that uses this.props.\n    nextProps = Object.assign({}, DEFAULT_PROPS, nextProps);\n    this.props = nextProps;\n\n    // NOTE: Be cautious re-ordering statements in this function.\n    if (this._shouldIgnoreViewportChange(currentProps, nextProps)) {\n      return transitionTriggered;\n    }\n\n    if (this._isTransitionEnabled(nextProps)) {\n      const startProps = Object.assign(\n        {},\n        currentProps,\n        this.transition.interruption === TRANSITION_EVENTS.SNAP_TO_END\n          ? this.transition.endProps\n          : this.propsInTransition || currentProps\n      );\n\n      this._triggerTransition(startProps, nextProps);\n\n      transitionTriggered = true;\n    } else {\n      this.transition.cancel();\n    }\n\n    return transitionTriggered;\n  }\n\n  updateTransition(timestamp) {\n    this.time = timestamp;\n    this._updateTransition();\n  }\n\n  // Helper methods\n\n  _isTransitionEnabled(props) {\n    return props.transitionDuration > 0 && props.transitionInterpolator;\n  }\n\n  _isUpdateDueToCurrentTransition(props) {\n    if (this.transition.inProgress) {\n      return this.transition.interpolator.arePropsEqual(props, this.propsInTransition);\n    }\n    return false;\n  }\n\n  _shouldIgnoreViewportChange(currentProps, nextProps) {\n    if (this.transition.inProgress) {\n      // Ignore update if it is requested to be ignored\n      return (\n        this.transition.interruption === TRANSITION_EVENTS.IGNORE ||\n        // Ignore update if it is due to current active transition.\n        this._isUpdateDueToCurrentTransition(nextProps)\n      );\n    } else if (this._isTransitionEnabled(nextProps)) {\n      // Ignore if none of the viewport props changed.\n      return nextProps.transitionInterpolator.arePropsEqual(currentProps, nextProps);\n    }\n    return true;\n  }\n\n  _triggerTransition(startProps, endProps) {\n    assert(this._isTransitionEnabled(endProps), 'Transition is not enabled');\n\n    const startViewstate = new this.ControllerState(startProps);\n    const endViewStateProps = new this.ControllerState(endProps).shortestPathFrom(startViewstate);\n\n    const initialProps = endProps.transitionInterpolator.initializeProps(\n      startProps,\n      endViewStateProps\n    );\n\n    this.propsInTransition = {};\n    this.transition.start({\n      duration: endProps.transitionDuration,\n      easing: endProps.transitionEasing,\n      interpolator: endProps.transitionInterpolator,\n      interruption: endProps.transitionInterruption,\n\n      startProps: initialProps.start,\n      endProps: initialProps.end,\n\n      onStart: endProps.onTransitionStart,\n      onUpdate: this._onTransitionUpdate,\n      onInterrupt: this._onTransitionEnd(endProps.onTransitionInterrupt),\n      onEnd: this._onTransitionEnd(endProps.onTransitionEnd)\n    });\n    this._updateTransition();\n  }\n\n  _updateTransition() {\n    this.transition.update(this.time);\n  }\n\n  _onTransitionEnd(callback) {\n    return transition => {\n      this.propsInTransition = null;\n      callback(transition);\n    };\n  }\n\n  _onTransitionUpdate(transition) {\n    // NOTE: Be cautious re-ordering statements in this function.\n    const {interpolator, startProps, endProps, time} = transition;\n\n    const viewport = interpolator.interpolateProps(startProps, endProps, time);\n\n    // This gurantees all props (e.g. bearing, longitude) are normalized\n    // So when viewports are compared they are in same range.\n    this.propsInTransition = new this.ControllerState(\n      Object.assign({}, this.props, viewport)\n    ).getViewportProps();\n\n    if (this.onViewStateChange) {\n      this.onViewStateChange({\n        viewState: this.propsInTransition,\n        interactionState: {inTransition: true}\n      });\n    }\n  }\n}\n\nTransitionManager.defaultProps = DEFAULT_PROPS;\n"],"file":"transition-manager.js"}