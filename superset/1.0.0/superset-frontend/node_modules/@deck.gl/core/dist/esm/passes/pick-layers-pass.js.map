{"version":3,"sources":["../../../src/passes/pick-layers-pass.js"],"names":["LayersPass","withParameters","PickLayersPass","props","pickingFBO","drawPickingBuffer","layers","viewports","onViewportActive","effectProps","deviceRect","x","y","width","height","redrawReason","gl","framebuffer","scissorTest","scissor","clearColor","drawLayers","pass","parameters","blend","blendFunc","blendEquation","blendColor","depthMask","depthTest","depthRange","colorMask","layer","viewport","layerFilter","shouldDrawLayer","isComposite","visible","pickable","isPicking","effects","moduleParameters","Object","assign","create","context","pickingActive","devicePixelRatio","pixelRatio","layerIndex","glViewport","layerParameters"],"mappings":"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","sourcesContent":["import LayersPass from './layers-pass';\nimport {withParameters} from '@luma.gl/core';\n\nexport default class PickLayersPass extends LayersPass {\n  render(props) {\n    if (props.pickingFBO) {\n      this.drawPickingBuffer(props);\n    } else {\n      super.render(props);\n    }\n  }\n\n  // Private\n  // Draws list of layers and viewports into the picking buffer\n  // Note: does not sample the buffer, that has to be done by the caller\n  drawPickingBuffer({\n    layers,\n    viewports,\n    onViewportActive,\n    pickingFBO,\n    effectProps,\n    deviceRect: {x, y, width, height},\n    redrawReason = ''\n  }) {\n    const gl = this.gl;\n    // Make sure we clear scissor test and fbo bindings in case of exceptions\n    // We are only interested in one pixel, no need to render anything else\n    // Note that the callback here is called synchronously.\n    // Set blend mode for picking\n    // always overwrite existing pixel with [r,g,b,layerIndex]\n    return withParameters(\n      gl,\n      {\n        framebuffer: pickingFBO,\n        scissorTest: true,\n        scissor: [x, y, width, height],\n        clearColor: [0, 0, 0, 0]\n      },\n      () => {\n        this.drawLayers({\n          layers,\n          viewports,\n          onViewportActive,\n          pass: 'picking',\n          redrawReason,\n          effectProps,\n          parameters: {\n            blend: true,\n            blendFunc: [gl.ONE, gl.ZERO, gl.CONSTANT_ALPHA, gl.ZERO],\n            blendEquation: gl.FUNC_ADD,\n            blendColor: [0, 0, 0, 0],\n\n            // When used as Mapbox custom layer, the context state may be dirty\n            // TODO - Remove when mapbox fixes this issue\n            // https://github.com/mapbox/mapbox-gl-js/issues/7801\n            depthMask: true,\n            depthTest: true,\n            depthRange: [0, 1],\n            colorMask: [true, true, true, true]\n          }\n        });\n      }\n    );\n  }\n\n  // PRIVATE\n  shouldDrawLayer(layer, viewport) {\n    const layerFilter = this.props.layerFilter;\n    let shouldDrawLayer = !layer.isComposite && layer.props.visible && layer.props.pickable;\n\n    if (shouldDrawLayer && layerFilter) {\n      shouldDrawLayer = layerFilter({layer, viewport, isPicking: true});\n    }\n    return shouldDrawLayer;\n  }\n\n  getModuleParameters(layer, effects, effectProps) {\n    const moduleParameters = Object.assign(Object.create(layer.props), {\n      viewport: layer.context.viewport,\n      pickingActive: 1,\n      devicePixelRatio: this.props.pixelRatio\n    });\n\n    Object.assign(moduleParameters, effectProps);\n    return moduleParameters;\n  }\n\n  getLayerParameters(layer, layerIndex, glViewport, parameters) {\n    // All parameter resolving is done here instead of the layer\n    // Blend parameters must not be overridden\n    const layerParameters = Object.assign({}, layer.props.parameters || {}, parameters);\n\n    Object.assign(layerParameters, {\n      viewport: glViewport,\n      blendColor: [0, 0, 0, (layerIndex + 1) / 255]\n    });\n\n    return layerParameters;\n  }\n}\n"],"file":"pick-layers-pass.js"}