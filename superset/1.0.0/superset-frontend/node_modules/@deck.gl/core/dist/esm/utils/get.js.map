{"version":3,"sources":["../../../src/utils/get.js"],"names":["get","container","compositeKey","keyList","getKeys","value","key","isObject","undefined","getter","getGetter","squareBracketGetter","getMethodGetter","obj","keyMap","prototype","Object","getPrototypeOf","split","Array","isArray"],"mappings":";AA8BA,OAAO,SAASA,GAAT,CAAaC,SAAb,EAAwBC,YAAxB,EAAsC;AAE3C,MAAMC,OAAO,GAAGC,OAAO,CAACF,YAAD,CAAvB;AAEA,MAAIG,KAAK,GAAGJ,SAAZ;AAJ2C;AAAA;AAAA;;AAAA;AAK3C,yBAAkBE,OAAlB,8HAA2B;AAAA,UAAhBG,GAAgB;;AAEzB,UAAI,CAACC,QAAQ,CAACF,KAAD,CAAb,EAAsB;AACpB,eAAOG,SAAP;AACD;;AAED,UAAMC,MAAM,GAAGC,SAAS,CAACL,KAAD,CAAxB;AAEAA,MAAAA,KAAK,GAAGI,MAAM,CAACJ,KAAD,EAAQC,GAAR,CAAd;AACD;AAd0C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAe3C,SAAOD,KAAP;AACD;;AAOD,SAASE,QAAT,CAAkBF,KAAlB,EAAyB;AACvB,SAAOA,KAAK,KAAK,IAAV,IAAkB,QAAOA,KAAP,MAAiB,QAA1C;AACD;;AAGD,IAAMM,mBAAmB,GAAG,SAAtBA,mBAAsB,CAACV,SAAD,EAAYK,GAAZ;AAAA,SAAoBL,SAAS,CAACK,GAAD,CAA7B;AAAA,CAA5B;;AACA,IAAMM,eAAe,GAAG,SAAlBA,eAAkB,CAACC,GAAD,EAAMP,GAAN;AAAA,SAAcO,GAAG,CAACb,GAAJ,CAAQM,GAAR,CAAd;AAAA,CAAxB;;AAEA,IAAMQ,MAAM,GAAG,EAAf;;AAMA,SAASJ,SAAT,CAAmBT,SAAnB,EAA8B;AAE5B,MAAMc,SAAS,GAAGC,MAAM,CAACC,cAAP,CAAsBhB,SAAtB,CAAlB;AACA,SAAOc,SAAS,CAACf,GAAV,GAAgBY,eAAhB,GAAkCD,mBAAzC;AACD;;AAKD,SAASP,OAAT,CAAiBF,YAAjB,EAA+B;AAC7B,MAAI,OAAOA,YAAP,KAAwB,QAA5B,EAAsC;AAEpC,QAAIC,OAAO,GAAGW,MAAM,CAACZ,YAAD,CAApB;;AACA,QAAI,CAACC,OAAL,EAAc;AACZA,MAAAA,OAAO,GAAGD,YAAY,CAACgB,KAAb,CAAmB,GAAnB,CAAV;AACAJ,MAAAA,MAAM,CAACZ,YAAD,CAAN,GAAuBC,OAAvB;AACD;;AACD,WAAOA,OAAP;AACD;;AAED,SAAOgB,KAAK,CAACC,OAAN,CAAclB,YAAd,IAA8BA,YAA9B,GAA6C,CAACA,YAAD,CAApD;AACD","sourcesContent":["// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\n/**\n * Access properties of nested containers using dot-path notation\n * - Supports plain objects and arrays, as well as classes with `get` methods\n *   such as ES6 Maps, Immutable.js objects etc\n * - Returns undefined if any container is not valid, instead of throwing\n *\n * @param {Object} container - container that supports get\n * @param {String|*} compositeKey - key to access, can be '.'-separated string\n * @return {*} - value in the final key of the nested container\n */\nexport function get(container, compositeKey) {\n  // Split the key into subkeys\n  const keyList = getKeys(compositeKey);\n  // Recursively get the value of each key;\n  let value = container;\n  for (const key of keyList) {\n    // If any intermediate subfield is not a container, return undefined\n    if (!isObject(value)) {\n      return undefined;\n    }\n    // Get the `getter` for this container\n    const getter = getGetter(value);\n    // Use the getter to get the value for the key\n    value = getter(value, key);\n  }\n  return value;\n}\n\n/**\n * Checks if argument is an indexable object (not a primitive value, nor null)\n * @param {*} value - JavaScript value to be tested\n * @return {Boolean} - true if argument is a JavaScript object\n */\nfunction isObject(value) {\n  return value !== null && typeof value === 'object';\n}\n\n// Default getter is container indexing\nconst squareBracketGetter = (container, key) => container[key];\nconst getMethodGetter = (obj, key) => obj.get(key);\n// Cache key to key arrays for speed\nconst keyMap = {};\n\n// Looks for a `get` function on the prototype\n// TODO - follow prototype chain?\n// @private\n// @return {Function} - get function: (container, key) => value\nfunction getGetter(container) {\n  // Check if container has a special get method\n  const prototype = Object.getPrototypeOf(container);\n  return prototype.get ? getMethodGetter : squareBracketGetter;\n}\n\n// Takes a string of '.' separated keys and returns an array of keys\n// E.g. 'feature.geometry.type' => 'feature', 'geometry', 'type'\n// @private\nfunction getKeys(compositeKey) {\n  if (typeof compositeKey === 'string') {\n    // else assume string and split around dots\n    let keyList = keyMap[compositeKey];\n    if (!keyList) {\n      keyList = compositeKey.split('.');\n      keyMap[compositeKey] = keyList;\n    }\n    return keyList;\n  }\n  // Wrap in array if needed\n  return Array.isArray(compositeKey) ? compositeKey : [compositeKey];\n}\n"],"file":"get.js"}