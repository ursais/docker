{"version":3,"sources":["../../../src/lifecycle/component-state.js"],"names":["log","assert","EMPTY_PROPS","Object","freeze","ComponentState","component","asyncProps","onAsyncPropUpdated","oldProps","oldAsyncProps","props","propName","asyncProp","resolvedValue","Boolean","pendingLoadCount","resolvedLoadCount","resolvedValues","_asyncPropResolvedValues","originalValues","_asyncPropOriginalValues","defaultValues","_asyncPropDefaultValues","value","_createAsyncPropData","_updateAsyncProp","_didAsyncInputValueChange","fetch","layer","url","Promise","_watchPromise","_setPropValue","lastValue","loadCount","undefined","freezeAsyncOldProps","_postProcessValue","promise","then","data","_setAsyncPropValue","catch","error","dataTransform","defaultValue"],"mappings":"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","sourcesContent":["// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nimport log from '../utils/log';\nimport assert from '../utils/assert';\n\nconst EMPTY_PROPS = Object.freeze({});\n\nexport default class ComponentState {\n  constructor(component = null) {\n    this.component = component;\n    this.asyncProps = {}; // Prop values that the layer sees\n    this.onAsyncPropUpdated = () => {};\n    this.oldProps = EMPTY_PROPS; // Last props before update\n    this.oldAsyncProps = null; // Last props before update, with async values copied.\n  }\n\n  getOldProps() {\n    return this.oldAsyncProps || this.oldProps;\n  }\n\n  resetOldProps() {\n    this.oldAsyncProps = null;\n    this.oldProps = this.component.props;\n  }\n\n  // Whenever async props are changing, we need to make a copy of oldProps\n  // otherwise the prop rewriting will affect the value both in props and oldProps.\n  // While the copy is relatively expensive, this only happens on load completion.\n  freezeAsyncOldProps() {\n    if (!this.oldAsyncProps) {\n      // Make sure oldProps is set\n      this.oldProps = this.oldProps || this.component.props;\n\n      // Deep copy props (Object.assign only handles shallow props)\n      // TODO - Alternatively, just reconfigure the async prop descriptors to fixed values?\n      this.oldAsyncProps = {};\n      for (const propName in this.oldProps) {\n        this.oldAsyncProps[propName] = this.oldProps[propName];\n      }\n    }\n  }\n\n  // ASYNC PROP HANDLING\n  //\n\n  // Checks if a prop is overridden\n  hasAsyncProp(propName) {\n    return propName in this.asyncProps;\n  }\n\n  // Returns value of an overriden prop\n  getAsyncProp(propName) {\n    const asyncProp = this.asyncProps[propName];\n    return asyncProp && asyncProp.resolvedValue;\n  }\n\n  isAsyncPropLoading(propName) {\n    const asyncProp = this.asyncProps[propName];\n    return Boolean(\n      asyncProp &&\n        asyncProp.pendingLoadCount > 0 &&\n        asyncProp.pendingLoadCount !== asyncProp.resolvedLoadCount\n    );\n  }\n\n  // Updates all async/overridden props (when new props come in)\n  // Checks if urls have changed, starts loading, or removes override\n  setAsyncProps(props) {\n    // NOTE: prop param and default values are only support for testing\n    const resolvedValues = props._asyncPropResolvedValues || {};\n    const originalValues = props._asyncPropOriginalValues || props;\n    const defaultValues = props._asyncPropDefaultValues || {};\n\n    // TODO - use async props from the layer's prop types\n    for (const propName in resolvedValues) {\n      const value = resolvedValues[propName];\n      this._createAsyncPropData(propName, value, defaultValues[propName]);\n      this._updateAsyncProp(propName, value);\n    }\n\n    for (const propName in originalValues) {\n      const value = originalValues[propName];\n      // Makes sure a record exists for this prop\n      this._createAsyncPropData(propName, value, defaultValues[propName]);\n      this._updateAsyncProp(propName, value);\n    }\n  }\n\n  // Intercept strings (URLs) and Promises and activates loading and prop rewriting\n  _updateAsyncProp(propName, value) {\n    if (!this._didAsyncInputValueChange(propName, value)) {\n      return;\n    }\n\n    // interpret value string as url and start a new load tracked by a promise\n    if (typeof value === 'string') {\n      const {fetch} = this.layer.props;\n      const url = value;\n      value = fetch(url, {propName, layer: this.layer});\n    }\n\n    // interprets promise and track the \"loading\"\n    if (value instanceof Promise) {\n      this._watchPromise(propName, value);\n      return;\n    }\n\n    // else, normal, non-async value. Just store value for now\n    this._setPropValue(propName, value);\n  }\n\n  // Checks if an input value actually changed (to avoid reloading/rewatching promises/urls)\n  _didAsyncInputValueChange(propName, value) {\n    const asyncProp = this.asyncProps[propName];\n    if (value === asyncProp.lastValue) {\n      return false;\n    }\n    asyncProp.lastValue = value;\n    return true;\n  }\n\n  // Set normal, non-async value\n  _setPropValue(propName, value) {\n    const asyncProp = this.asyncProps[propName];\n    asyncProp.value = value;\n    asyncProp.resolvedValue = value;\n    asyncProp.pendingLoadCount++;\n    asyncProp.resolvedLoadCount = asyncProp.pendingLoadCount;\n  }\n\n  // Set a just resolved async value, calling onAsyncPropUpdates if value changes asynchronously\n  _setAsyncPropValue(propName, value, loadCount) {\n    // Only update if loadCount is larger or equal to resolvedLoadCount\n    // otherwise a more recent load has already completed\n    const asyncProp = this.asyncProps[propName];\n    if (asyncProp && loadCount >= asyncProp.resolvedLoadCount) {\n      assert(value !== undefined);\n\n      // A chance to copy old props before updating\n      this.freezeAsyncOldProps();\n\n      value = this._postProcessValue(propName, value);\n      asyncProp.resolvedValue = value;\n      asyncProp.resolvedLoadCount = loadCount;\n\n      // Call callback to inform listener\n      this.onAsyncPropUpdated(propName, value);\n    }\n  }\n\n  // Tracks a promise, sets the prop when loaded, handles load count\n  _watchPromise(propName, promise) {\n    const asyncProp = this.asyncProps[propName];\n    asyncProp.pendingLoadCount++;\n    const loadCount = asyncProp.pendingLoadCount;\n    promise\n      .then(data => this._setAsyncPropValue(propName, data, loadCount))\n      .catch(error => log.error(error)());\n  }\n\n  // Give the app a chance to post process the loaded data\n  _postProcessValue(propName, value) {\n    const {dataTransform} = this.component ? this.component.props : {};\n    if (propName === 'data' && dataTransform) {\n      value = dataTransform(value);\n    }\n    return value;\n  }\n\n  // Creating an asyncProp record if needed\n  _createAsyncPropData(propName, value, defaultValue) {\n    const asyncProp = this.asyncProps[propName];\n    if (!asyncProp) {\n      // assert(defaultValue !== undefined);\n      this.asyncProps[propName] = {\n        lastValue: null, // Supplied prop value (can be url/promise, not visible to layer)\n        resolvedValue: defaultValue, // Resolved prop value (valid data, can be \"shown\" to layer)\n        pendingLoadCount: 0, // How many loads have been issued\n        resolvedLoadCount: 0 // Latest resolved load, (earlier loads will be ignored)\n      };\n    }\n  }\n}\n"],"file":"component-state.js"}