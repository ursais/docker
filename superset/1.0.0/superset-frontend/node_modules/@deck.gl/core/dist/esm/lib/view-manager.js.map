{"version":3,"sources":["../../../src/lib/view-manager.js"],"names":["assert","deepEqual","View","Viewport","log","flatten","ViewManager","props","views","width","height","viewState","controllers","_viewports","_viewportMap","_isUpdating","_needsRedraw","_needsUpdate","_eventManager","eventManager","_eventCallbacks","onViewStateChange","onInteractiveStateChange","Object","seal","setProps","key","finalize","opts","clearRedrawFlags","redraw","reason","animationProps","viewId","controller","updateTransition","time","rect","filter","viewport","containsPixel","viewMap","forEach","view","id","viewOrViewId","find","getView","getViewStateId","filterViewState","xyz","topLeft","viewports","getViewports","i","length","contains","project","unproject","_setViews","_setViewState","_setSize","_update","_rebuildViewports","Number","isFinite","setNeedsUpdate","Boolean","map","viewportInstance","viewsChanged","_diffViews","viewStateChanged","warn","event","Controller","type","assign","_onViewStateChange","bind","onStateChange","controllerProps","x","y","_createController","oldControllers","getViewState","makeViewport","_updateController","unshift","_buildViewportMap","newViews","oldViews","some","_","equals"],"mappings":"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","sourcesContent":["// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nimport assert from '../utils/assert';\nimport {deepEqual} from '../utils/deep-equal';\nimport View from '../views/view';\nimport Viewport from '../viewports/viewport';\nimport log from '../utils/log';\nimport {flatten} from '../utils/flatten';\n\nexport default class ViewManager {\n  constructor(props = {}) {\n    // List of view descriptors, gets re-evaluated when width/height changes\n    this.views = [];\n    this.width = 100;\n    this.height = 100;\n    this.viewState = {};\n    this.controllers = {};\n\n    this._viewports = []; // Generated viewports\n    this._viewportMap = {};\n    this._isUpdating = false;\n    this._needsRedraw = 'Initial render';\n    this._needsUpdate = true;\n\n    this._eventManager = props.eventManager;\n    this._eventCallbacks = {\n      onViewStateChange: props.onViewStateChange,\n      onInteractiveStateChange: props.onInteractiveStateChange\n    };\n\n    Object.seal(this);\n\n    // Init with default map viewport\n    this.setProps(props);\n  }\n\n  finalize() {\n    for (const key in this.controllers) {\n      if (this.controllers[key]) {\n        this.controllers[key].finalize();\n      }\n    }\n    this.controllers = {};\n  }\n\n  // Check if a redraw is needed\n  needsRedraw(opts = {clearRedrawFlags: false}) {\n    const redraw = this._needsRedraw;\n    if (opts.clearRedrawFlags) {\n      this._needsRedraw = false;\n    }\n    return redraw;\n  }\n\n  // Layers will be updated deeply (in next animation frame)\n  // Potentially regenerating attributes and sub layers\n  setNeedsUpdate(reason) {\n    this._needsUpdate = this._needsUpdate || reason;\n    this._needsRedraw = this._needsRedraw || reason;\n  }\n\n  // Checks each viewport for transition updates\n  updateViewStates(animationProps = {}) {\n    if ('time' in animationProps) {\n      for (const viewId in this.controllers) {\n        const controller = this.controllers[viewId];\n        if (controller) {\n          controller.updateTransition(animationProps.time);\n        }\n      }\n    }\n  }\n\n  /** Get a set of viewports for a given width and height\n   * TODO - Intention is for deck.gl to autodeduce width and height and drop the need for props\n   * @param rect (object, optional) - filter the viewports\n   *   + not provided - return all viewports\n   *   + {x, y} - only return viewports that contain this pixel\n   *   + {x, y, width, height} - only return viewports that overlap with this rectangle\n   */\n  getViewports(rect) {\n    if (rect) {\n      return this._viewports.filter(viewport => viewport.containsPixel(rect));\n    }\n    return this._viewports;\n  }\n\n  getViews() {\n    const viewMap = {};\n    this.views.forEach(view => {\n      viewMap[view.id] = view;\n    });\n    return viewMap;\n  }\n\n  // Resolves a viewId string to a View, if already a View returns it.\n  getView(viewOrViewId) {\n    return typeof viewOrViewId === 'string'\n      ? this.views.find(view => view.id === viewOrViewId)\n      : viewOrViewId;\n  }\n\n  // Returns the viewState for a specific viewId. Matches the viewState by\n  // 1. view.viewStateId\n  // 2. view.id\n  // 3. root viewState\n  // then applies the view's filter if any\n  getViewState(viewId) {\n    const view = this.getView(viewId);\n    // Backward compatibility: view state for single view\n    const viewState = (view && this.viewState[view.getViewStateId()]) || this.viewState;\n    return view ? view.filterViewState(viewState) : viewState;\n  }\n\n  getViewport(viewId) {\n    return this._viewportMap[viewId];\n  }\n\n  /**\n   * Projects xyz (possibly latitude and longitude) to pixel coordinates in window\n   * using viewport projection parameters\n   * - [longitude, latitude] to [x, y]\n   * - [longitude, latitude, Z] => [x, y, z]\n   * Note: By default, returns top-left coordinates for canvas/SVG type render\n   *\n   * @param {Array} lngLatZ - [lng, lat] or [lng, lat, Z]\n   * @param {Object} opts - options\n   * @param {Object} opts.topLeft=true - Whether projected coords are top left\n   * @return {Array} - [x, y] or [x, y, z] in top left coords\n   */\n  project(xyz, opts = {topLeft: true}) {\n    const viewports = this.getViewports();\n    for (let i = viewports.length - 1; i >= 0; --i) {\n      const viewport = viewports[i];\n      if (viewport.contains(xyz, opts)) {\n        return viewport.project(xyz, opts);\n      }\n    }\n    return null;\n  }\n\n  /**\n   * Unproject pixel coordinates on screen onto world coordinates,\n   * (possibly [lon, lat]) on map.\n   * - [x, y] => [lng, lat]\n   * - [x, y, z] => [lng, lat, Z]\n   * @param {Array} xyz -\n   * @param {Object} opts - options\n   * @param {Object} opts.topLeft=true - Whether origin is top left\n   * @return {Array|null} - [lng, lat, Z] or [X, Y, Z]\n   */\n  unproject(xyz, opts) {\n    const viewports = this.getViewports();\n    for (let i = viewports.length - 1; i >= 0; --i) {\n      const viewport = viewports[i];\n      if (viewport.containsPixel(xyz, opts)) {\n        return viewport.unproject(xyz);\n      }\n    }\n    return null;\n  }\n\n  setProps(props) {\n    if ('views' in props) {\n      this._setViews(props.views);\n    }\n\n    // TODO - support multiple view states\n    if ('viewState' in props) {\n      this._setViewState(props.viewState);\n    }\n\n    if ('width' in props || 'height' in props) {\n      this._setSize(props.width, props.height);\n    }\n\n    // Important: avoid invoking _update() inside itself\n    // Nested updates result in unexpected side effects inside _rebuildViewports()\n    // when using auto control in pure-js\n    if (!this._isUpdating) {\n      this._update();\n    }\n  }\n\n  _update() {\n    this._isUpdating = true;\n\n    // Only rebuild viewports if the update flag is set\n    if (this._needsUpdate) {\n      this._needsUpdate = false;\n      this._rebuildViewports();\n    }\n\n    // If viewport transition(s) are triggered during viewports update, controller(s)\n    // will immediately call `onViewStateChange` which calls `viewManager.setProps` again.\n    if (this._needsUpdate) {\n      this._needsUpdate = false;\n      this._rebuildViewports();\n    }\n\n    this._isUpdating = false;\n  }\n\n  _setSize(width, height) {\n    assert(Number.isFinite(width) && Number.isFinite(height));\n    if (width !== this.width || height !== this.height) {\n      this.width = width;\n      this.height = height;\n      this.setNeedsUpdate('Size changed');\n    }\n  }\n\n  // Update the view descriptor list and set change flag if needed\n  // Does not actually rebuild the `Viewport`s until `getViewports` is called\n  _setViews(views) {\n    // DEPRECATED: Ensure any \"naked\" Viewports are wrapped in View instances\n    views = flatten(views, {filter: Boolean}).map(\n      view => (view instanceof Viewport ? new View({viewportInstance: view}) : view)\n    );\n\n    const viewsChanged = this._diffViews(views, this.views);\n    if (viewsChanged) {\n      this.setNeedsUpdate('views changed');\n    }\n\n    this.views = views;\n  }\n\n  _setViewState(viewState) {\n    if (viewState) {\n      const viewStateChanged = !deepEqual(viewState, this.viewState);\n\n      if (viewStateChanged) {\n        this.setNeedsUpdate('viewState changed');\n      }\n\n      this.viewState = viewState;\n    } else {\n      log.warn('setting null viewState')();\n    }\n  }\n\n  //\n  // PRIVATE METHODS\n  //\n\n  _onViewStateChange(viewId, event) {\n    event.viewId = viewId;\n    this._eventCallbacks.onViewStateChange(event);\n  }\n\n  _createController(props) {\n    const Controller = props.type;\n\n    const controller = new Controller(\n      Object.assign(\n        {\n          eventManager: this._eventManager,\n          // Set an internal callback that calls the prop callback if provided\n          onViewStateChange: this._onViewStateChange.bind(this, props.id),\n          onStateChange: this._eventCallbacks.onInteractiveStateChange\n        },\n        props\n      )\n    );\n\n    return controller;\n  }\n\n  _updateController(view, viewState, viewport, controller) {\n    if (view.controller) {\n      const controllerProps = Object.assign({}, view.controller, viewState, {\n        id: view.id,\n        x: viewport.x,\n        y: viewport.y,\n        width: viewport.width,\n        height: viewport.height\n      });\n\n      // TODO - check if view / controller type has changed, and replace the controller\n      if (controller) {\n        controller.setProps(controllerProps);\n      } else {\n        controller = this._createController(controllerProps);\n      }\n      return controller;\n    }\n    return null;\n  }\n\n  // Rebuilds viewports from descriptors towards a certain window size\n  _rebuildViewports() {\n    const {width, height, views} = this;\n\n    const oldControllers = this.controllers;\n    this._viewports = [];\n    this.controllers = {};\n\n    // Create controllers in reverse order, so that views on top receive events first\n    for (let i = views.length; i--; ) {\n      const view = views[i];\n      const viewState = this.getViewState(view);\n      const viewport = view.makeViewport({width, height, viewState});\n\n      // Update the controller\n      this.controllers[view.id] = this._updateController(\n        view,\n        viewState,\n        viewport,\n        oldControllers[view.id]\n      );\n\n      this._viewports.unshift(viewport);\n    }\n\n    // Remove unused controllers\n    for (const id in oldControllers) {\n      if (oldControllers[id] && !this.controllers[id]) {\n        oldControllers[id].finalize();\n      }\n    }\n\n    this._buildViewportMap();\n  }\n\n  _buildViewportMap() {\n    // Build a view id to view index\n    this._viewportMap = {};\n    this._viewports.forEach(viewport => {\n      if (viewport.id) {\n        // TODO - issue warning if multiple viewports use same id\n        this._viewportMap[viewport.id] = this._viewportMap[viewport.id] || viewport;\n      }\n    });\n  }\n\n  // Check if viewport array has changed, returns true if any change\n  // Note that descriptors can be the same\n  _diffViews(newViews, oldViews) {\n    if (newViews.length !== oldViews.length) {\n      return true;\n    }\n\n    return newViews.some((_, i) => !newViews[i].equals(oldViews[i]));\n  }\n}\n"],"file":"view-manager.js"}