{"version":3,"sources":["../../../src/controllers/transition-manager.js"],"names":["LinearInterpolator","Transition","assert","noop","TRANSITION_EVENTS","BREAK","SNAP_TO_END","IGNORE","DEFAULT_PROPS","transitionDuration","transitionEasing","t","transitionInterpolator","transitionInterruption","onTransitionStart","onTransitionInterrupt","onTransitionEnd","TransitionManager","constructor","ControllerState","props","Object","assign","propsInTransition","time","transition","onViewStateChange","_onTransitionUpdate","bind","finalize","getViewportInTransition","processViewStateChange","nextProps","transitionTriggered","currentProps","_shouldIgnoreViewportChange","_isTransitionEnabled","startProps","interruption","endProps","_triggerTransition","cancel","updateTransition","timestamp","_updateTransition","_isUpdateDueToCurrentTransition","inProgress","interpolator","arePropsEqual","startViewstate","endViewStateProps","shortestPathFrom","initialProps","initializeProps","start","duration","easing","end","onStart","onUpdate","onInterrupt","_onTransitionEnd","onEnd","update","callback","viewport","interpolateProps","getViewportProps","viewState","interactionState","inTransition","defaultProps"],"mappings":"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","sourcesContent":["import LinearInterpolator from '../transitions/linear-interpolator';\nimport Transition from '../transitions/transition';\nimport assert from '../utils/assert';\n\nconst noop = () => {};\n\nexport const TRANSITION_EVENTS = {\n  BREAK: 1,\n  SNAP_TO_END: 2,\n  IGNORE: 3\n};\n\nconst DEFAULT_PROPS = {\n  transitionDuration: 0,\n  transitionEasing: t => t,\n  transitionInterpolator: new LinearInterpolator(),\n  transitionInterruption: TRANSITION_EVENTS.BREAK,\n  onTransitionStart: noop,\n  onTransitionInterrupt: noop,\n  onTransitionEnd: noop\n};\n\nexport default class TransitionManager {\n  constructor(ControllerState, props = {}) {\n    assert(ControllerState);\n    this.ControllerState = ControllerState;\n    this.props = Object.assign({}, DEFAULT_PROPS, props);\n    this.propsInTransition = null;\n    this.time = 0;\n    this.transition = new Transition();\n\n    this.onViewStateChange = props.onViewStateChange;\n\n    this._onTransitionUpdate = this._onTransitionUpdate.bind(this);\n  }\n\n  finalize() {}\n\n  // Returns current transitioned viewport.\n  getViewportInTransition() {\n    return this.propsInTransition;\n  }\n\n  // Process the vewiport change, either ignore or trigger a new transition.\n  // Return true if a new transition is triggered, false otherwise.\n  processViewStateChange(nextProps) {\n    let transitionTriggered = false;\n    const currentProps = this.props;\n    // Set this.props here as '_triggerTransition' calls '_updateViewport' that uses this.props.\n    nextProps = Object.assign({}, DEFAULT_PROPS, nextProps);\n    this.props = nextProps;\n\n    // NOTE: Be cautious re-ordering statements in this function.\n    if (this._shouldIgnoreViewportChange(currentProps, nextProps)) {\n      return transitionTriggered;\n    }\n\n    if (this._isTransitionEnabled(nextProps)) {\n      const startProps = Object.assign(\n        {},\n        currentProps,\n        this.transition.interruption === TRANSITION_EVENTS.SNAP_TO_END\n          ? this.transition.endProps\n          : this.propsInTransition || currentProps\n      );\n\n      this._triggerTransition(startProps, nextProps);\n\n      transitionTriggered = true;\n    } else {\n      this.transition.cancel();\n    }\n\n    return transitionTriggered;\n  }\n\n  updateTransition(timestamp) {\n    this.time = timestamp;\n    this._updateTransition();\n  }\n\n  // Helper methods\n\n  _isTransitionEnabled(props) {\n    return props.transitionDuration > 0 && props.transitionInterpolator;\n  }\n\n  _isUpdateDueToCurrentTransition(props) {\n    if (this.transition.inProgress) {\n      return this.transition.interpolator.arePropsEqual(props, this.propsInTransition);\n    }\n    return false;\n  }\n\n  _shouldIgnoreViewportChange(currentProps, nextProps) {\n    if (this.transition.inProgress) {\n      // Ignore update if it is requested to be ignored\n      return (\n        this.transition.interruption === TRANSITION_EVENTS.IGNORE ||\n        // Ignore update if it is due to current active transition.\n        this._isUpdateDueToCurrentTransition(nextProps)\n      );\n    } else if (this._isTransitionEnabled(nextProps)) {\n      // Ignore if none of the viewport props changed.\n      return nextProps.transitionInterpolator.arePropsEqual(currentProps, nextProps);\n    }\n    return true;\n  }\n\n  _triggerTransition(startProps, endProps) {\n    assert(this._isTransitionEnabled(endProps), 'Transition is not enabled');\n\n    const startViewstate = new this.ControllerState(startProps);\n    const endViewStateProps = new this.ControllerState(endProps).shortestPathFrom(startViewstate);\n\n    const initialProps = endProps.transitionInterpolator.initializeProps(\n      startProps,\n      endViewStateProps\n    );\n\n    this.propsInTransition = {};\n    this.transition.start({\n      duration: endProps.transitionDuration,\n      easing: endProps.transitionEasing,\n      interpolator: endProps.transitionInterpolator,\n      interruption: endProps.transitionInterruption,\n\n      startProps: initialProps.start,\n      endProps: initialProps.end,\n\n      onStart: endProps.onTransitionStart,\n      onUpdate: this._onTransitionUpdate,\n      onInterrupt: this._onTransitionEnd(endProps.onTransitionInterrupt),\n      onEnd: this._onTransitionEnd(endProps.onTransitionEnd)\n    });\n    this._updateTransition();\n  }\n\n  _updateTransition() {\n    this.transition.update(this.time);\n  }\n\n  _onTransitionEnd(callback) {\n    return transition => {\n      this.propsInTransition = null;\n      callback(transition);\n    };\n  }\n\n  _onTransitionUpdate(transition) {\n    // NOTE: Be cautious re-ordering statements in this function.\n    const {interpolator, startProps, endProps, time} = transition;\n\n    const viewport = interpolator.interpolateProps(startProps, endProps, time);\n\n    // This gurantees all props (e.g. bearing, longitude) are normalized\n    // So when viewports are compared they are in same range.\n    this.propsInTransition = new this.ControllerState(\n      Object.assign({}, this.props, viewport)\n    ).getViewportProps();\n\n    if (this.onViewStateChange) {\n      this.onViewStateChange({\n        viewState: this.propsInTransition,\n        interactionState: {inTransition: true}\n      });\n    }\n  }\n}\n\nTransitionManager.defaultProps = DEFAULT_PROPS;\n"],"file":"transition-manager.js"}