{"version":3,"sources":["../../../src/transitions/viewport-fly-to-interpolator.js"],"names":["TransitionInterpolator","lerp","flyToViewport","LINEARLY_INTERPOLATED_PROPS","FlyToInterpolator","constructor","compare","extract","required","interpolateProps","startProps","endProps","t","viewport","key"],"mappings":"AAAA,OAAOA,sBAAP,MAAmC,2BAAnC;AACA,SAAQC,IAAR,QAAmB,SAAnB;AAEA,SAAQC,aAAR,QAA4B,2BAA5B;AAEA,MAAMC,2BAA2B,GAAG,CAAC,SAAD,EAAY,OAAZ,CAApC;AASA,eAAe,MAAMC,iBAAN,SAAgCJ,sBAAhC,CAAuD;AACpEK,EAAAA,WAAW,GAAG;AACZ,UAAM;AACJC,MAAAA,OAAO,EAAE,CAAC,WAAD,EAAc,UAAd,EAA0B,MAA1B,EAAkC,SAAlC,EAA6C,OAA7C,CADL;AAEJC,MAAAA,OAAO,EAAE,CAAC,OAAD,EAAU,QAAV,EAAoB,WAApB,EAAiC,UAAjC,EAA6C,MAA7C,EAAqD,SAArD,EAAgE,OAAhE,CAFL;AAGJC,MAAAA,QAAQ,EAAE,CAAC,OAAD,EAAU,QAAV,EAAoB,UAApB,EAAgC,WAAhC,EAA6C,MAA7C;AAHN,KAAN;AAKD;;AAEDC,EAAAA,gBAAgB,CAACC,UAAD,EAAaC,QAAb,EAAuBC,CAAvB,EAA0B;AACxC,UAAMC,QAAQ,GAAGX,aAAa,CAACQ,UAAD,EAAaC,QAAb,EAAuBC,CAAvB,CAA9B;;AAOA,SAAK,MAAME,GAAX,IAAkBX,2BAAlB,EAA+C;AAC7CU,MAAAA,QAAQ,CAACC,GAAD,CAAR,GAAgBb,IAAI,CAACS,UAAU,CAACI,GAAD,CAAV,IAAmB,CAApB,EAAuBH,QAAQ,CAACG,GAAD,CAAR,IAAiB,CAAxC,EAA2CF,CAA3C,CAApB;AACD;;AAED,WAAOC,QAAP;AACD;;AAtBmE","sourcesContent":["import TransitionInterpolator from './transition-interpolator';\nimport {lerp} from 'math.gl';\n\nimport {flyToViewport} from 'viewport-mercator-project';\n\nconst LINEARLY_INTERPOLATED_PROPS = ['bearing', 'pitch'];\n\n/**\n * This class adapts mapbox-gl-js Map#flyTo animation so it can be used in\n * react/redux architecture.\n * mapbox-gl-js flyTo : https://www.mapbox.com/mapbox-gl-js/api/#map#flyto.\n * It implements “Smooth and efficient zooming and panning.” algorithm by\n * \"Jarke J. van Wijk and Wim A.A. Nuij\"\n */\nexport default class FlyToInterpolator extends TransitionInterpolator {\n  constructor() {\n    super({\n      compare: ['longitude', 'latitude', 'zoom', 'bearing', 'pitch'],\n      extract: ['width', 'height', 'longitude', 'latitude', 'zoom', 'bearing', 'pitch'],\n      required: ['width', 'height', 'latitude', 'longitude', 'zoom']\n    });\n  }\n\n  interpolateProps(startProps, endProps, t) {\n    const viewport = flyToViewport(startProps, endProps, t);\n\n    // Linearly interpolate 'bearing' and 'pitch'.\n    // If pitch/bearing are not supplied, they are interpreted as zeros in viewport calculation\n    // (fallback defined in WebMercatorViewport)\n    // Because there is no guarantee that the current controller's ViewState normalizes\n    // these props, safe guard is needed to avoid generating NaNs\n    for (const key of LINEARLY_INTERPOLATED_PROPS) {\n      viewport[key] = lerp(startProps[key] || 0, endProps[key] || 0, t);\n    }\n\n    return viewport;\n  }\n}\n"],"file":"viewport-fly-to-interpolator.js"}