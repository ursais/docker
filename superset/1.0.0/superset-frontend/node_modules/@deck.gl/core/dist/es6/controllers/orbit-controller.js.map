{"version":3,"sources":["../../../src/controllers/orbit-controller.js"],"names":["clamp","Vector2","Controller","ViewState","LinearInterpolator","TRANSITION_EVENTS","MOVEMENT_SPEED","DEFAULT_STATE","orbitAxis","rotationX","rotationOrbit","fovy","zoom","target","minZoom","Infinity","maxZoom","LINEAR_TRANSITION_PROPS","transitionDuration","transitionEasing","t","transitionInterpolator","transitionInterruption","BREAK","zoom2Scale","Math","pow","OrbitState","constructor","ViewportType","width","height","startPanPosition","startTarget","startRotationX","startRotationOrbit","startZoomPosition","startZoom","_interactiveState","getViewportProps","_viewportProps","getInteractiveState","panStart","pos","_getUpdatedState","pan","startPos","delta","subtract","_calculateNewTarget","pixelOffset","panEnd","rotateStart","rotate","deltaScaleX","deltaScaleY","Number","isFinite","newRotationX","newRotationOrbit","isRotating","rotateEnd","shortestPathFrom","viewState","props","Object","assign","zoomStart","scale","newZoom","_calculateNewZoom","startScale","newScale","dX","dY","zoomEnd","zoomIn","zoomOut","moveLeft","moveRight","moveUp","moveDown","rotateLeft","rotateRight","rotateUp","rotateDown","log2","viewportProps","viewport","center","project","unproject","newProps","_applyConstraints","OrbitController","_getTransitionProps"],"mappings":"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","sourcesContent":["import {clamp, Vector2} from 'math.gl';\nimport Controller from './controller';\nimport ViewState from './view-state';\nimport LinearInterpolator from '../transitions/linear-interpolator';\nimport {TRANSITION_EVENTS} from './transition-manager';\n\nconst MOVEMENT_SPEED = 50; // per keyboard click\n\nconst DEFAULT_STATE = {\n  orbitAxis: 'Z',\n  rotationX: 0,\n  rotationOrbit: 0,\n  fovy: 50,\n  zoom: 0,\n  target: [0, 0, 0],\n  minZoom: -Infinity,\n  maxZoom: Infinity\n};\n\nconst LINEAR_TRANSITION_PROPS = {\n  transitionDuration: 300,\n  transitionEasing: t => t,\n  transitionInterpolator: new LinearInterpolator(['target', 'zoom', 'rotationX', 'rotationOrbit']),\n  transitionInterruption: TRANSITION_EVENTS.BREAK\n};\n\n/* Helpers */\n\nconst zoom2Scale = zoom => Math.pow(2, zoom);\n\nexport class OrbitState extends ViewState {\n  constructor({\n    ViewportType,\n\n    /* Viewport arguments */\n    width, // Width of viewport\n    height, // Height of viewport\n    orbitAxis = DEFAULT_STATE.orbitAxis,\n    rotationX = DEFAULT_STATE.rotationX, // Rotation around x axis\n    rotationOrbit = DEFAULT_STATE.rotationOrbit, // Rotation around orbit axis\n    target = DEFAULT_STATE.target,\n    zoom = DEFAULT_STATE.zoom,\n    fovy = DEFAULT_STATE.fovy,\n\n    /* Viewport constraints */\n    minZoom = DEFAULT_STATE.minZoom,\n    maxZoom = DEFAULT_STATE.maxZoom,\n\n    /** Interaction states, required to calculate change during transform */\n    // Model state when the pan operation first started\n    startPanPosition,\n    startTarget,\n    // Model state when the rotate operation first started\n    startRotationX,\n    startRotationOrbit,\n    // Model state when the zoom operation first started\n    startZoomPosition,\n    startZoom\n  }) {\n    super({\n      width,\n      height,\n      orbitAxis,\n      rotationX,\n      rotationOrbit,\n      target,\n      fovy,\n      zoom,\n      minZoom,\n      maxZoom\n    });\n\n    this._interactiveState = {\n      startPanPosition,\n      startTarget,\n      startRotationX,\n      startRotationOrbit,\n      startZoomPosition,\n      startZoom\n    };\n\n    this.ViewportType = ViewportType;\n  }\n\n  /* Public API */\n\n  getViewportProps() {\n    return this._viewportProps;\n  }\n\n  getInteractiveState() {\n    return this._interactiveState;\n  }\n\n  /**\n   * Start panning\n   * @param {[Number, Number]} pos - position on screen where the pointer grabs\n   */\n  panStart({pos}) {\n    const {target} = this._viewportProps;\n\n    return this._getUpdatedState({\n      startPanPosition: pos,\n      startTarget: target\n    });\n  }\n\n  /**\n   * Pan\n   * @param {[Number, Number]} pos - position on screen where the pointer is\n   */\n  pan({pos, startPos}) {\n    const {startPanPosition, startTarget} = this._interactiveState;\n    const delta = new Vector2(pos).subtract(startPanPosition);\n\n    return this._getUpdatedState({\n      target: this._calculateNewTarget({startTarget, pixelOffset: delta})\n    });\n  }\n\n  /**\n   * End panning\n   * Must call if `panStart()` was called\n   */\n  panEnd() {\n    return this._getUpdatedState({\n      startPanPosition: null,\n      startTarget: null\n    });\n  }\n\n  /**\n   * Start rotating\n   * @param {[Number, Number]} pos - position on screen where the pointer grabs\n   */\n  rotateStart({pos}) {\n    return this._getUpdatedState({\n      startRotationX: this._viewportProps.rotationX,\n      startRotationOrbit: this._viewportProps.rotationOrbit\n    });\n  }\n\n  /**\n   * Rotate\n   * @param {[Number, Number]} pos - position on screen where the pointer is\n   */\n  rotate({deltaScaleX, deltaScaleY}) {\n    const {startRotationX, startRotationOrbit} = this._interactiveState;\n\n    if (!Number.isFinite(startRotationX) || !Number.isFinite(startRotationOrbit)) {\n      return this;\n    }\n\n    const newRotationX = clamp(startRotationX + deltaScaleY * 180, -89.999, 89.999);\n    const newRotationOrbit = (startRotationOrbit + deltaScaleX * 180) % 360;\n\n    return this._getUpdatedState({\n      rotationX: newRotationX,\n      rotationOrbit: newRotationOrbit,\n      isRotating: true\n    });\n  }\n\n  /**\n   * End rotating\n   * Must call if `rotateStart()` was called\n   */\n  rotateEnd() {\n    return this._getUpdatedState({\n      startRotationX: null,\n      startRotationOrbit: null\n    });\n  }\n\n  // default implementation of shortest path between two view states\n  shortestPathFrom(viewState) {\n    const props = Object.assign({}, this._viewportProps);\n    return props;\n  }\n\n  /**\n   * Start zooming\n   * @param {[Number, Number]} pos - position on screen where the pointer grabs\n   */\n  zoomStart({pos}) {\n    return this._getUpdatedState({\n      startZoomPosition: pos,\n      startTarget: this._viewportProps.target,\n      startZoom: this._viewportProps.zoom\n    });\n  }\n\n  /**\n   * Zoom\n   * @param {[Number, Number]} pos - position on screen where the current target is\n   * @param {[Number, Number]} startPos - the target position at\n   *   the start of the operation. Must be supplied of `zoomStart()` was not called\n   * @param {Number} scale - a number between [0, 1] specifying the accumulated\n   *   relative scale.\n   */\n  zoom({pos, startPos, scale}) {\n    const {zoom, width, height, target} = this._viewportProps;\n    let {startZoom, startZoomPosition, startTarget} = this._interactiveState;\n    if (!Number.isFinite(startZoom)) {\n      // We have two modes of zoom:\n      // scroll zoom that are discrete events (transform from the current zoom level),\n      // and pinch zoom that are continuous events (transform from the zoom level when\n      // pinch started).\n      // If startZoom state is defined, then use the startZoom state;\n      // otherwise assume discrete zooming\n      startZoom = zoom;\n      startTarget = target;\n      startZoomPosition = startPos || pos;\n    }\n\n    const newZoom = this._calculateNewZoom({scale, startZoom});\n    const startScale = zoom2Scale(startZoom);\n    const newScale = zoom2Scale(newZoom);\n\n    const dX = (width / 2 - startZoomPosition[0]) * (newScale / startScale - 1);\n    const dY = (height / 2 - startZoomPosition[1]) * (newScale / startScale - 1);\n\n    return this._getUpdatedState({\n      zoom: newZoom,\n      target: this._calculateNewTarget({startTarget, zoom: newZoom, pixelOffset: [dX, dY]})\n    });\n  }\n\n  /**\n   * End zooming\n   * Must call if `zoomStart()` was called\n   */\n  zoomEnd() {\n    return this._getUpdatedState({\n      startZoomPosition: null,\n      startTarget: null,\n      startZoom: null\n    });\n  }\n\n  zoomIn() {\n    return this._getUpdatedState({\n      zoom: this._calculateNewZoom({scale: 2})\n    });\n  }\n\n  zoomOut() {\n    return this._getUpdatedState({\n      zoom: this._calculateNewZoom({scale: 0.5})\n    });\n  }\n\n  moveLeft() {\n    const pixelOffset = [-MOVEMENT_SPEED, 0];\n    return this._getUpdatedState({\n      target: this._calculateNewTarget({pixelOffset})\n    });\n  }\n\n  moveRight() {\n    const pixelOffset = [MOVEMENT_SPEED, 0];\n    return this._getUpdatedState({\n      target: this._calculateNewTarget({pixelOffset})\n    });\n  }\n\n  moveUp() {\n    const pixelOffset = [0, -MOVEMENT_SPEED];\n    return this._getUpdatedState({\n      target: this._calculateNewTarget({pixelOffset})\n    });\n  }\n\n  moveDown() {\n    const pixelOffset = [0, MOVEMENT_SPEED];\n    return this._getUpdatedState({\n      target: this._calculateNewTarget({pixelOffset})\n    });\n  }\n\n  rotateLeft() {\n    return this._getUpdatedState({\n      rotationOrbit: this._viewportProps.rotationOrbit - 15\n    });\n  }\n\n  rotateRight() {\n    return this._getUpdatedState({\n      rotationOrbit: this._viewportProps.rotationOrbit + 15\n    });\n  }\n\n  rotateUp() {\n    return this._getUpdatedState({\n      rotationX: this._viewportProps.rotationX - 10\n    });\n  }\n\n  rotateDown() {\n    return this._getUpdatedState({\n      rotationX: this._viewportProps.rotationX + 10\n    });\n  }\n\n  /* Private methods */\n\n  // Calculates new zoom\n  _calculateNewZoom({scale, startZoom}) {\n    const {maxZoom, minZoom} = this._viewportProps;\n    if (!Number.isFinite(startZoom)) {\n      startZoom = this._viewportProps.zoom;\n    }\n    const zoom = startZoom + Math.log2(scale);\n    return clamp(zoom, minZoom, maxZoom);\n  }\n\n  _calculateNewTarget({startTarget, zoom, pixelOffset}) {\n    const viewportProps = Object.assign({}, this._viewportProps);\n    if (Number.isFinite(zoom)) {\n      viewportProps.zoom = zoom;\n    }\n    if (startTarget) {\n      viewportProps.target = startTarget;\n    }\n    const viewport = new this.ViewportType(viewportProps);\n    const center = viewport.project(viewportProps.target);\n    return viewport.unproject([center[0] - pixelOffset[0], center[1] - pixelOffset[1], center[2]]);\n  }\n\n  _getUpdatedState(newProps) {\n    // Update _viewportProps\n    return new OrbitState(Object.assign({}, this._viewportProps, this._interactiveState, newProps));\n  }\n\n  // Apply any constraints (mathematical or defined by _viewportProps) to map state\n  _applyConstraints(props) {\n    // Ensure zoom is within specified range\n    const {maxZoom, minZoom, zoom} = props;\n    props.zoom = zoom > maxZoom ? maxZoom : zoom;\n    props.zoom = zoom < minZoom ? minZoom : zoom;\n\n    return props;\n  }\n}\n\nexport default class OrbitController extends Controller {\n  constructor(props) {\n    super(OrbitState, props);\n  }\n\n  _getTransitionProps() {\n    // Enables Transitions on double-tap and key-down events.\n    return LINEAR_TRANSITION_PROPS;\n  }\n}\n"],"file":"orbit-controller.js"}