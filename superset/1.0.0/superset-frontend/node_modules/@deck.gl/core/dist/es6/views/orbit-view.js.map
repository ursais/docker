{"version":3,"sources":["../../../src/views/orbit-view.js"],"names":["View","Viewport","Matrix4","OrbitController","DEGREES_TO_RADIANS","Math","PI","getViewMatrix","height","fovy","orbitAxis","rotationX","rotationOrbit","zoom","distance","tan","viewMatrix","lookAt","eye","rotateX","rotateZ","rotateY","projectionScale","scale","OrbitViewport","constructor","props","id","x","y","width","near","far","target","position","OrbitView","Object","assign","type","controller","_getControllerProps","ViewportType","displayName"],"mappings":"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","sourcesContent":["import View from './view';\nimport Viewport from '../viewports/viewport';\n\nimport {Matrix4} from 'math.gl';\nimport OrbitController from '../controllers/orbit-controller';\n\nconst DEGREES_TO_RADIANS = Math.PI / 180;\n\nfunction getViewMatrix({height, fovy, orbitAxis, rotationX, rotationOrbit, zoom}) {\n  // We position the camera so that one common space unit (world space unit scaled by zoom)\n  // at the target maps to one screen pixel.\n  // This is a similar technique to that used in web mercator projection\n  // By doing so we are able to convert between common space and screen space sizes efficiently\n  // in the vertex shader.\n  const distance = 0.5 / Math.tan((fovy * DEGREES_TO_RADIANS) / 2);\n\n  const viewMatrix = new Matrix4().lookAt({eye: [0, 0, distance]});\n\n  viewMatrix.rotateX(rotationX * DEGREES_TO_RADIANS);\n  if (orbitAxis === 'Z') {\n    viewMatrix.rotateZ(rotationOrbit * DEGREES_TO_RADIANS);\n  } else {\n    viewMatrix.rotateY(rotationOrbit * DEGREES_TO_RADIANS);\n  }\n\n  // When height increases, we need to increase the distance from the camera to the target to\n  // keep the 1:1 mapping. However, this also changes the projected depth of each position by\n  // moving them further away between the near/far plane.\n  // Without modifying the default near/far planes, we instead scale down the common space to\n  // remove the distortion to the depth field.\n  const projectionScale = 1 / (height || 1);\n  viewMatrix.scale([projectionScale, projectionScale, projectionScale]);\n\n  return viewMatrix;\n}\n\nclass OrbitViewport extends Viewport {\n  constructor(props) {\n    const {\n      id,\n      x,\n      y,\n      width,\n      height,\n\n      fovy = 50, // From eye position to lookAt\n      near,\n      far,\n      orbitAxis = 'Z', // Orbit axis with 360 degrees rotating freedom, can only be 'Y' or 'Z'\n      target = [0, 0, 0], // Which point is camera looking at, default origin\n\n      rotationX = 0, // Rotating angle around X axis\n      rotationOrbit = 0, // Rotating angle around orbit axis\n\n      zoom = 0\n    } = props;\n\n    super({\n      id,\n      viewMatrix: getViewMatrix({\n        height,\n        fovy,\n        orbitAxis,\n        rotationX,\n        rotationOrbit,\n        zoom\n      }),\n      fovy,\n      near,\n      far,\n      x,\n      y,\n      position: target,\n      width,\n      height,\n      zoom\n    });\n  }\n}\n\nexport default class OrbitView extends View {\n  constructor(props) {\n    super(\n      Object.assign({}, props, {\n        type: OrbitViewport\n      })\n    );\n  }\n\n  get controller() {\n    return this._getControllerProps({\n      type: OrbitController,\n      ViewportType: OrbitViewport\n    });\n  }\n}\n\nOrbitView.displayName = 'OrbitView';\n"],"file":"orbit-view.js"}