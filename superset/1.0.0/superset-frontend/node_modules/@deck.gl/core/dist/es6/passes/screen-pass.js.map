{"version":3,"sources":["../../../src/passes/screen-pass.js"],"names":["ClipSpace","withParameters","clear","Pass","ScreenPass","constructor","gl","props","module","fs","id","moduleProps","model","_getModel","render","params","framebuffer","outputBuffer","clearColor","_renderPass","delete","userProps","modules","uniforms","Object","assign","getUniforms","setUniforms","inputBuffer","color","draw","texture","texSize","width","height","parameters","depthWrite","depthTest"],"mappings":"AAMA,SAAQA,SAAR,EAAmBC,cAAnB,EAAmCC,KAAnC,QAA+C,eAA/C;AACA,OAAOC,IAAP,MAAiB,QAAjB;AAEA,eAAe,MAAMC,UAAN,SAAyBD,IAAzB,CAA8B;AAC3CE,EAAAA,WAAW,CAACC,EAAD,EAAiB;AAAA,QAAZC,KAAY,uEAAJ,EAAI;AAC1B,UAAMD,EAAN,EAAUC,KAAV;AAD0B,UAEnBC,MAFmB,GAEYD,KAFZ,CAEnBC,MAFmB;AAAA,UAEXC,EAFW,GAEYF,KAFZ,CAEXE,EAFW;AAAA,UAEPC,EAFO,GAEYH,KAFZ,CAEPG,EAFO;AAAA,UAEHC,WAFG,GAEYJ,KAFZ,CAEHI,WAFG;AAG1B,SAAKC,KAAL,GAAa,KAAKC,SAAL,CAAeP,EAAf,EAAmBE,MAAnB,EAA2BC,EAA3B,EAA+BC,EAA/B,EAAmCC,WAAnC,CAAb;AACD;;AAEDG,EAAAA,MAAM,CAACC,MAAD,EAAS;AACb,UAAMT,EAAE,GAAG,KAAKA,EAAhB;AAEAL,IAAAA,cAAc,CAACK,EAAD,EAAK;AAACU,MAAAA,WAAW,EAAED,MAAM,CAACE,YAArB;AAAmCC,MAAAA,UAAU,EAAE,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,CAAV;AAA/C,KAAL,EAAmE,MAC/E,KAAKC,WAAL,CAAiBb,EAAjB,EAAqBS,MAArB,CADY,CAAd;AAGD;;AAEDK,EAAAA,MAAM,GAAG;AACP,SAAKR,KAAL,CAAWQ,MAAX;AACA,SAAKR,KAAL,GAAa,IAAb;AACD;;AAIDC,EAAAA,SAAS,CAACP,EAAD,EAAKE,MAAL,EAAaC,EAAb,EAAiBC,EAAjB,EAAqBW,SAArB,EAAgC;AACvC,UAAMT,KAAK,GAAG,IAAIZ,SAAJ,CAAcM,EAAd,EAAkB;AAACI,MAAAA,EAAD;AAAKD,MAAAA,EAAL;AAASa,MAAAA,OAAO,EAAE,CAACd,MAAD;AAAlB,KAAlB,CAAd;AAEA,UAAMe,QAAQ,GAAGC,MAAM,CAACC,MAAP,CAAcjB,MAAM,CAACkB,WAAP,EAAd,EAAoClB,MAAM,CAACkB,WAAP,CAAmBL,SAAnB,CAApC,CAAjB;AAEAT,IAAAA,KAAK,CAACe,WAAN,CAAkBJ,QAAlB;AACA,WAAOX,KAAP;AACD;;AAQDO,EAAAA,WAAW,CAACb,EAAD,QAAkC;AAAA,QAA5BsB,WAA4B,QAA5BA,WAA4B;AAAA,QAAfX,YAAe,QAAfA,YAAe;AAC3Cf,IAAAA,KAAK,CAACI,EAAD,EAAK;AAACuB,MAAAA,KAAK,EAAE;AAAR,KAAL,CAAL;AACA,SAAKjB,KAAL,CAAWkB,IAAX,CAAgB;AACdP,MAAAA,QAAQ,EAAE;AACRQ,QAAAA,OAAO,EAAEH,WADD;AAERI,QAAAA,OAAO,EAAE,CAACJ,WAAW,CAACK,KAAb,EAAoBL,WAAW,CAACM,MAAhC;AAFD,OADI;AAKdC,MAAAA,UAAU,EAAE;AACVC,QAAAA,UAAU,EAAE,KADF;AAEVC,QAAAA,SAAS,EAAE;AAFD;AALE,KAAhB;AAUD;;AAjD0C","sourcesContent":["//\n// A base render pass.\n//\n// Attribution: This class and the multipass system were inspired by\n// the THREE.js EffectComposer and *Pass classes\n\nimport {ClipSpace, withParameters, clear} from '@luma.gl/core';\nimport Pass from './pass';\n\nexport default class ScreenPass extends Pass {\n  constructor(gl, props = {}) {\n    super(gl, props);\n    const {module, fs, id, moduleProps} = props;\n    this.model = this._getModel(gl, module, fs, id, moduleProps);\n  }\n\n  render(params) {\n    const gl = this.gl;\n\n    withParameters(gl, {framebuffer: params.outputBuffer, clearColor: [0, 0, 0, 0]}, () =>\n      this._renderPass(gl, params)\n    );\n  }\n\n  delete() {\n    this.model.delete();\n    this.model = null;\n  }\n\n  // Private method\n\n  _getModel(gl, module, fs, id, userProps) {\n    const model = new ClipSpace(gl, {id, fs, modules: [module]});\n\n    const uniforms = Object.assign(module.getUniforms(), module.getUniforms(userProps));\n\n    model.setUniforms(uniforms);\n    return model;\n  }\n\n  /**\n   * Renders the pass.\n   * This is an abstract method that should be overridden.\n   * @param {Framebuffer} inputBuffer - Frame buffer that contains the result of the previous pass\n   * @param {Framebuffer} outputBuffer - Frame buffer that serves as the output render target\n   */\n  _renderPass(gl, {inputBuffer, outputBuffer}) {\n    clear(gl, {color: true});\n    this.model.draw({\n      uniforms: {\n        texture: inputBuffer,\n        texSize: [inputBuffer.width, inputBuffer.height]\n      },\n      parameters: {\n        depthWrite: false,\n        depthTest: false\n      }\n    });\n  }\n}\n"],"file":"screen-pass.js"}