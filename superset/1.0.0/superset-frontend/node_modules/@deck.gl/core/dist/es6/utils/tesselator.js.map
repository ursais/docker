{"version":3,"sources":["../../../src/utils/tesselator.js"],"names":["createIterable","TypedArrayManager","constructor","overAlloc","allocate","typedArray","count","size","type","copy","newSize","length","allocSize","Math","max","ceil","newArray","_allocate","set","_release","Type","Float32Array","Tesselator","opts","attributes","typedArrayManager","indexLayout","bufferLayout","vertexCount","instanceCount","_attributeDefs","updateGeometry","Object","seal","data","getGeometry","positionFormat","fp64","positionSize","_rebuildGeometry","updatePartialGeometry","startRow","endRow","updateGeometryAttributes","geometry","startIndex","Error","getGeometrySize","_forEachGeometry","visitor","iterable","objectInfo","object","index","dataRange","Infinity","dataIndex","name","def","Boolean","fp64Only","context","vertexStart","indexStart","i","geometrySize","geometryIndex"],"mappings":"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","sourcesContent":["// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\nimport {createIterable} from './iterable-utils';\n\nclass TypedArrayManager {\n  constructor({overAlloc = 1} = {}) {\n    this.overAlloc = overAlloc;\n  }\n\n  allocate(typedArray, count, {size, type, copy = false}) {\n    const newSize = count * size;\n    if (typedArray && newSize <= typedArray.length) {\n      return typedArray;\n    }\n\n    // Allocate at least one element to ensure a valid buffer\n    const allocSize = Math.max(Math.ceil(newSize * this.overAlloc), 1);\n    const newArray = this._allocate(type, allocSize);\n\n    if (typedArray && copy) {\n      newArray.set(typedArray);\n    }\n\n    this._release(typedArray);\n    return newArray;\n  }\n\n  _allocate(Type = Float32Array, size) {\n    // TODO - check if available in pool\n    return new Type(size);\n  }\n\n  _release(typedArray) {\n    // TODO - add to pool\n    // logFunctions.onUpdate({\n    //   level: LOG_DETAIL_PRIORITY,\n    //   message: `${attributeName} allocated ${allocCount}`,\n    //   id: this.id\n    // });\n  }\n}\n\nexport default class Tesselator {\n  constructor(opts = {}) {\n    const {attributes = {}} = opts;\n\n    this.typedArrayManager = new TypedArrayManager();\n    this.indexLayout = null;\n    this.bufferLayout = null;\n    this.vertexCount = 0;\n    this.instanceCount = 0;\n    this.attributes = {};\n    this._attributeDefs = attributes;\n\n    this.updateGeometry(opts);\n\n    Object.seal(this);\n  }\n\n  /* Public methods */\n  updateGeometry({data, getGeometry, positionFormat, fp64}) {\n    this.data = data;\n    this.getGeometry = getGeometry;\n    this.fp64 = fp64;\n    this.positionSize = positionFormat === 'XY' ? 2 : 3;\n    this._rebuildGeometry();\n  }\n\n  updatePartialGeometry({startRow, endRow}) {\n    this._rebuildGeometry({startRow, endRow});\n  }\n\n  /* Subclass interface */\n\n  // Update the positions of a single geometry\n  updateGeometryAttributes(geometry, startIndex, size) {\n    throw new Error('Not implemented');\n  }\n\n  // Returns the number of vertices in a geometry\n  getGeometrySize(geometry) {\n    throw new Error('Not implemented');\n  }\n\n  /* Private utility methods */\n\n  /**\n   * Visit all objects\n   * `data` is expected to be an iterable consistent with the base Layer expectation\n   */\n  _forEachGeometry(visitor, startRow, endRow) {\n    const {data, getGeometry} = this;\n    const {iterable, objectInfo} = createIterable(data, startRow, endRow);\n    for (const object of iterable) {\n      objectInfo.index++;\n      const geometry = getGeometry(object, objectInfo);\n      visitor(geometry, objectInfo.index);\n    }\n  }\n\n  /* eslint-disable complexity,max-statements */\n  _rebuildGeometry(dataRange) {\n    if (!this.data || !this.getGeometry) {\n      return;\n    }\n\n    let {indexLayout, bufferLayout} = this;\n\n    if (!dataRange) {\n      // Full update - regenerate buffer layout from scratch\n      indexLayout = [];\n      bufferLayout = [];\n    }\n\n    const {startRow = 0, endRow = Infinity} = dataRange || {};\n    this._forEachGeometry(\n      (geometry, dataIndex) => {\n        bufferLayout[dataIndex] = this.getGeometrySize(geometry);\n      },\n      startRow,\n      endRow\n    );\n\n    // count instances\n    let instanceCount = 0;\n    for (const count of bufferLayout) {\n      instanceCount += count;\n    }\n\n    // allocate attributes\n    const {attributes, _attributeDefs, typedArrayManager, fp64} = this;\n    for (const name in _attributeDefs) {\n      const def = _attributeDefs[name];\n      // If dataRange is supplied, this is a partial update.\n      // In case we need to reallocate the typed array, it will need the old values copied\n      // before performing partial update.\n      def.copy = Boolean(dataRange);\n\n      // do not create fp64-only attributes unless in fp64 mode\n      if (!def.fp64Only || fp64) {\n        attributes[name] = typedArrayManager.allocate(attributes[name], instanceCount, def);\n      }\n    }\n\n    this.indexLayout = indexLayout;\n    this.bufferLayout = bufferLayout;\n    this.instanceCount = instanceCount;\n\n    const context = {\n      vertexStart: 0,\n      indexStart: 0\n    };\n    for (let i = 0; i < startRow; i++) {\n      context.vertexStart += bufferLayout[i];\n      context.indexStart += indexLayout[i] || 0;\n    }\n\n    this._forEachGeometry(\n      (geometry, dataIndex) => {\n        const geometrySize = bufferLayout[dataIndex];\n        context.geometryIndex = dataIndex;\n        context.geometrySize = geometrySize;\n        this.updateGeometryAttributes(geometry, context);\n        context.vertexStart += geometrySize;\n        context.indexStart += indexLayout[dataIndex] || 0;\n      },\n      startRow,\n      endRow\n    );\n\n    // count vertices\n    let vertexCount = context.indexStart;\n    for (let i = endRow; i < indexLayout.length; i++) {\n      vertexCount += indexLayout[i];\n    }\n    this.vertexCount = vertexCount;\n  }\n}\n"],"file":"tesselator.js"}