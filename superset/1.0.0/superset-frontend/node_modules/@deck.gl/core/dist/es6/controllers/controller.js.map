{"version":3,"sources":["../../../src/controllers/controller.js"],"names":["TransitionManager","log","assert","NO_TRANSITION_PROPS","transitionDuration","ZOOM_ACCEL","EVENT_TYPES","WHEEL","PAN","PINCH","DOUBLE_TAP","KEYBOARD","Controller","constructor","ControllerState","options","controllerState","controllerStateProps","eventManager","transitionManager","_events","_state","isDragging","events","onViewStateChange","onStateChange","invertPan","handleEvent","bind","setProps","finalize","eventName","off","event","Object","assign","type","_onPanStart","_onPan","_onPanEnd","_onPinchStart","_onPinch","_onPinchEnd","_onDoubleTap","_onWheel","_onKeyDown","getCenter","x","y","offsetCenter","isPointInBounds","pos","width","height","handled","inside","stopPropagation","isFunctionKeyPressed","srcEvent","Boolean","metaKey","altKey","ctrlKey","shiftKey","props","removed","toggleEvents","processViewStateChange","scrollZoom","dragPan","dragRotate","doubleClickZoom","touchZoom","touchRotate","keyboard","isInteractive","updateTransition","timestamp","eventNames","enabled","forEach","on","setOptions","updateViewport","newControllerState","extraProps","interactionState","viewState","getViewportProps","changed","oldViewState","getInteractiveState","panStart","rotateStart","alternateMode","rightButton","_onPanMove","_onPanRotate","panEnd","rotateEnd","pan","deltaX","deltaY","deltaScaleX","deltaScaleY","rotate","preventDefault","delta","scale","Math","exp","abs","zoom","zoomStart","startPinchRotation","rotation","zoomEnd","isZoomOut","_getTransitionProps","funcKey","keyCode","zoomOut","zoomIn","rotateLeft","moveLeft","rotateRight","moveRight","rotateUp","moveUp","rotateDown","moveDown"],"mappings":"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","sourcesContent":["// Copyright (c) 2015 Uber Technologies, Inc.\n\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nimport TransitionManager from './transition-manager';\nimport log from '../utils/log';\nimport assert from '../utils/assert';\n\nconst NO_TRANSITION_PROPS = {\n  transitionDuration: 0\n};\n\n// EVENT HANDLING PARAMETERS\nconst ZOOM_ACCEL = 0.01;\n\nconst EVENT_TYPES = {\n  WHEEL: ['wheel'],\n  PAN: ['panstart', 'panmove', 'panend'],\n  PINCH: ['pinchstart', 'pinchmove', 'pinchend'],\n  DOUBLE_TAP: ['doubletap'],\n  KEYBOARD: ['keydown']\n};\n\nexport default class Controller {\n  constructor(ControllerState, options = {}) {\n    assert(ControllerState);\n    this.ControllerState = ControllerState;\n    this.controllerState = null;\n    this.controllerStateProps = null;\n    this.eventManager = null;\n    this.transitionManager = new TransitionManager(ControllerState, options);\n    this._events = null;\n    this._state = {\n      isDragging: false\n    };\n    this.events = [];\n    this.onViewStateChange = null;\n    this.onStateChange = null;\n    this.invertPan = false;\n\n    this.handleEvent = this.handleEvent.bind(this);\n\n    this.setProps(options);\n  }\n\n  finalize() {\n    for (const eventName in this._events) {\n      if (this._events[eventName]) {\n        this.eventManager.off(eventName, this.handleEvent);\n      }\n    }\n    this.transitionManager.finalize();\n  }\n\n  /**\n   * Callback for events\n   * @param {hammer.Event} event\n   */\n  handleEvent(event) {\n    const {ControllerState} = this;\n    this.controllerState = new ControllerState(\n      Object.assign({}, this.controllerStateProps, this._state)\n    );\n\n    switch (event.type) {\n      case 'panstart':\n        return this._onPanStart(event);\n      case 'panmove':\n        return this._onPan(event);\n      case 'panend':\n        return this._onPanEnd(event);\n      case 'pinchstart':\n        return this._onPinchStart(event);\n      case 'pinchmove':\n        return this._onPinch(event);\n      case 'pinchend':\n        return this._onPinchEnd(event);\n      case 'doubletap':\n        return this._onDoubleTap(event);\n      case 'wheel':\n        return this._onWheel(event);\n      case 'keydown':\n        return this._onKeyDown(event);\n      default:\n        return false;\n    }\n  }\n\n  /* Event utils */\n  // Event object: http://hammerjs.github.io/api/#event-object\n  getCenter(event) {\n    const {x, y} = this.controllerStateProps;\n    const {offsetCenter} = event;\n    return [offsetCenter.x - x, offsetCenter.y - y];\n  }\n\n  isPointInBounds(pos, event) {\n    const {width, height} = this.controllerStateProps;\n    if (event && event.handled) {\n      return false;\n    }\n\n    const inside = pos[0] >= 0 && pos[0] <= width && pos[1] >= 0 && pos[1] <= height;\n    if (inside && event) {\n      event.stopPropagation();\n    }\n    return inside;\n  }\n\n  isFunctionKeyPressed(event) {\n    const {srcEvent} = event;\n    return Boolean(srcEvent.metaKey || srcEvent.altKey || srcEvent.ctrlKey || srcEvent.shiftKey);\n  }\n\n  isDragging() {\n    return this._state.isDragging;\n  }\n\n  /**\n   * Extract interactivity options\n   */\n  /* eslint-disable complexity, max-statements */\n  setProps(props) {\n    if ('onViewportChange' in props) {\n      log.removed('onViewportChange')();\n    }\n    if ('onViewStateChange' in props) {\n      this.onViewStateChange = props.onViewStateChange;\n    }\n    if ('onStateChange' in props) {\n      this.onStateChange = props.onStateChange;\n    }\n    this.controllerStateProps = props;\n\n    if ('eventManager' in props && this.eventManager !== props.eventManager) {\n      // EventManager has changed\n      this.eventManager = props.eventManager;\n      this._events = {};\n      this.toggleEvents(this.events, true);\n    }\n\n    this.transitionManager.processViewStateChange(this.controllerStateProps);\n\n    // TODO - make sure these are not reset on every setProps\n    const {\n      scrollZoom = true,\n      dragPan = true,\n      dragRotate = true,\n      doubleClickZoom = true,\n      touchZoom = true,\n      touchRotate = false,\n      keyboard = true\n    } = props;\n\n    // Register/unregister events\n    const isInteractive = Boolean(this.onViewStateChange);\n    this.toggleEvents(EVENT_TYPES.WHEEL, isInteractive && scrollZoom);\n    this.toggleEvents(EVENT_TYPES.PAN, isInteractive && (dragPan || dragRotate));\n    this.toggleEvents(EVENT_TYPES.PINCH, isInteractive && (touchZoom || touchRotate));\n    this.toggleEvents(EVENT_TYPES.DOUBLE_TAP, isInteractive && doubleClickZoom);\n    this.toggleEvents(EVENT_TYPES.KEYBOARD, isInteractive && keyboard);\n\n    // Interaction toggles\n    this.scrollZoom = scrollZoom;\n    this.dragPan = dragPan;\n    this.dragRotate = dragRotate;\n    this.doubleClickZoom = doubleClickZoom;\n    this.touchZoom = touchZoom;\n    this.touchRotate = touchRotate;\n    this.keyboard = keyboard;\n  }\n  /* eslint-enable complexity, max-statements */\n\n  updateTransition(timestamp) {\n    this.transitionManager.updateTransition(timestamp);\n  }\n\n  toggleEvents(eventNames, enabled) {\n    if (this.eventManager) {\n      eventNames.forEach(eventName => {\n        if (this._events[eventName] !== enabled) {\n          this._events[eventName] = enabled;\n          if (enabled) {\n            this.eventManager.on(eventName, this.handleEvent);\n          } else {\n            this.eventManager.off(eventName, this.handleEvent);\n          }\n        }\n      });\n    }\n  }\n\n  // DEPRECATED\n\n  setOptions(props) {\n    return this.setProps(props);\n  }\n\n  // Private Methods\n\n  /* Callback util */\n  // formats map state and invokes callback function\n  updateViewport(newControllerState, extraProps = {}, interactionState = {}) {\n    const viewState = Object.assign({}, newControllerState.getViewportProps(), extraProps);\n\n    // TODO - to restore diffing, we need to include interactionState\n    const changed = this.controllerState !== newControllerState;\n    // const oldViewState = this.controllerState.getViewportProps();\n    // const changed = Object.keys(viewState).some(key => oldViewState[key] !== viewState[key]);\n\n    if (changed) {\n      const oldViewState = this.controllerState ? this.controllerState.getViewportProps() : null;\n      if (this.onViewStateChange) {\n        this.onViewStateChange({viewState, interactionState, oldViewState});\n      }\n    }\n\n    Object.assign(\n      this._state,\n      Object.assign({}, newControllerState.getInteractiveState(), interactionState)\n    );\n    if (this.onStateChange) {\n      this.onStateChange(this._state);\n    }\n    // this.setState(Object.assign({}, newControllerState.getInteractiveState(), extraState));\n  }\n\n  /* Event handlers */\n  // Default handler for the `panstart` event.\n  _onPanStart(event) {\n    const pos = this.getCenter(event);\n    if (!this.isPointInBounds(pos, event)) {\n      return false;\n    }\n    const newControllerState = this.controllerState.panStart({pos}).rotateStart({pos});\n    return this.updateViewport(newControllerState, NO_TRANSITION_PROPS, {isDragging: true});\n  }\n\n  // Default handler for the `panmove` event.\n  _onPan(event) {\n    let alternateMode = this.isFunctionKeyPressed(event) || event.rightButton;\n    alternateMode = this.invertPan ? !alternateMode : alternateMode;\n    return alternateMode ? this._onPanMove(event) : this._onPanRotate(event);\n  }\n\n  // Default handler for the `panend` event.\n  _onPanEnd(event) {\n    const newControllerState = this.controllerState.panEnd().rotateEnd();\n    return this.updateViewport(newControllerState, null, {isDragging: false});\n  }\n\n  // Default handler for panning to move.\n  // Called by `_onPan` when panning without function key pressed.\n  _onPanMove(event) {\n    if (!this.dragPan) {\n      return false;\n    }\n    const pos = this.getCenter(event);\n    if (!this.isDragging()) {\n      return false;\n    }\n    const newControllerState = this.controllerState.pan({pos});\n    return this.updateViewport(newControllerState, NO_TRANSITION_PROPS, {isDragging: true});\n  }\n\n  // Default handler for panning to rotate.\n  // Called by `_onPan` when panning with function key pressed.\n  _onPanRotate(event) {\n    if (!this.dragRotate) {\n      return false;\n    }\n\n    const {deltaX, deltaY} = event;\n    const {width, height} = this.controllerState.getViewportProps();\n\n    const deltaScaleX = deltaX / width;\n    const deltaScaleY = deltaY / height;\n\n    const newControllerState = this.controllerState.rotate({deltaScaleX, deltaScaleY});\n    return this.updateViewport(newControllerState, NO_TRANSITION_PROPS, {isDragging: true});\n  }\n\n  // Default handler for the `wheel` event.\n  _onWheel(event) {\n    if (!this.scrollZoom) {\n      return false;\n    }\n    event.preventDefault();\n\n    const pos = this.getCenter(event);\n    if (!this.isPointInBounds(pos, event)) {\n      return false;\n    }\n\n    const {delta} = event;\n\n    // Map wheel delta to relative scale\n    let scale = 2 / (1 + Math.exp(-Math.abs(delta * ZOOM_ACCEL)));\n    if (delta < 0 && scale !== 0) {\n      scale = 1 / scale;\n    }\n\n    const newControllerState = this.controllerState.zoom({pos, scale});\n    return this.updateViewport(newControllerState, NO_TRANSITION_PROPS);\n  }\n\n  // Default handler for the `pinchstart` event.\n  _onPinchStart(event) {\n    const pos = this.getCenter(event);\n    if (!this.isPointInBounds(pos, event)) {\n      return false;\n    }\n\n    const newControllerState = this.controllerState.zoomStart({pos}).rotateStart({pos});\n    // hack - hammer's `rotation` field doesn't seem to produce the correct angle\n    this._state.startPinchRotation = event.rotation;\n    return this.updateViewport(newControllerState, NO_TRANSITION_PROPS, {isDragging: true});\n  }\n\n  // Default handler for the `pinch` event.\n  _onPinch(event) {\n    if (!this.touchZoom && !this.touchRotate) {\n      return false;\n    }\n\n    let newControllerState = this.controllerState;\n    if (this.touchZoom) {\n      const {scale} = event;\n      const pos = this.getCenter(event);\n      newControllerState = newControllerState.zoom({pos, scale});\n    }\n    if (this.touchRotate) {\n      const {rotation} = event;\n      const {startPinchRotation} = this._state;\n      newControllerState = newControllerState.rotate({\n        deltaScaleX: -(rotation - startPinchRotation) / 180\n      });\n    }\n\n    return this.updateViewport(newControllerState, NO_TRANSITION_PROPS, {isDragging: true});\n  }\n\n  // Default handler for the `pinchend` event.\n  _onPinchEnd(event) {\n    const newControllerState = this.controllerState.zoomEnd().rotateEnd();\n    this._state.startPinchRotation = 0;\n    return this.updateViewport(newControllerState, null, {isDragging: false});\n  }\n\n  // Default handler for the `doubletap` event.\n  _onDoubleTap(event) {\n    if (!this.doubleClickZoom) {\n      return false;\n    }\n    const pos = this.getCenter(event);\n    if (!this.isPointInBounds(pos, event)) {\n      return false;\n    }\n\n    const isZoomOut = this.isFunctionKeyPressed(event);\n\n    const newControllerState = this.controllerState.zoom({pos, scale: isZoomOut ? 0.5 : 2});\n    return this.updateViewport(newControllerState, this._getTransitionProps());\n  }\n\n  /* eslint-disable complexity */\n  // Default handler for the `keydown` event\n  _onKeyDown(event) {\n    if (!this.keyboard) {\n      return false;\n    }\n    const funcKey = this.isFunctionKeyPressed(event);\n    const {controllerState} = this;\n    let newControllerState;\n\n    switch (event.srcEvent.keyCode) {\n      case 189: // -\n        newControllerState = funcKey\n          ? controllerState.zoomOut().zoomOut()\n          : controllerState.zoomOut();\n        break;\n      case 187: // +\n        newControllerState = funcKey ? controllerState.zoomIn().zoomIn() : controllerState.zoomIn();\n        break;\n      case 37: // left\n        newControllerState = funcKey ? controllerState.rotateLeft() : controllerState.moveLeft();\n        break;\n      case 39: // right\n        newControllerState = funcKey ? controllerState.rotateRight() : controllerState.moveRight();\n        break;\n      case 38: // up\n        newControllerState = funcKey ? controllerState.rotateUp() : controllerState.moveUp();\n        break;\n      case 40: // down\n        newControllerState = funcKey ? controllerState.rotateDown() : controllerState.moveDown();\n        break;\n      default:\n        return false;\n    }\n    return this.updateViewport(newControllerState, this._getTransitionProps());\n  }\n  /* eslint-enable complexity */\n\n  _getTransitionProps() {\n    // Transitions on double-tap and key-down are only supported by MapController\n    return NO_TRANSITION_PROPS;\n  }\n}\n"],"file":"controller.js"}