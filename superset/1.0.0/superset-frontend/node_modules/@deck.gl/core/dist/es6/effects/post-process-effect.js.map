{"version":3,"sources":["../../../src/effects/post-process-effect.js"],"names":["Effect","ScreenPass","normalizeShaderModule","PostProcessEffect","constructor","module","props","id","name","prepare","gl","passes","createPasses","render","params","target","switchBuffer","index","length","inputBuffer","outputBuffer","cleanup","pass","delete","moduleProps","filter","sampler","fs","getFragmentShaderForRenderPass","map","idn","FILTER_FS_TEMPLATE","func","SAMPLER_FS_TEMPLATE"],"mappings":"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","sourcesContent":["import Effect from '../lib/effect';\nimport ScreenPass from '../passes/screen-pass';\n/* eslint-disable import/no-extraneous-dependencies */\nimport {normalizeShaderModule} from '@luma.gl/shadertools';\n\nexport default class PostProcessEffect extends Effect {\n  constructor(module, props = {}) {\n    super(props);\n    this.id = `${module.name}-pass`;\n    normalizeShaderModule(module);\n    this.module = module;\n  }\n\n  prepare(gl) {\n    if (!this.passes) {\n      this.passes = createPasses(gl, this.module, this.id, this.props);\n    }\n  }\n\n  render(params) {\n    const {target = null} = params;\n    let switchBuffer = false;\n    for (let index = 0; index < this.passes.length; index++) {\n      const inputBuffer = switchBuffer ? params.outputBuffer : params.inputBuffer;\n      let outputBuffer = switchBuffer ? params.inputBuffer : params.outputBuffer;\n      if (target && index === this.passes.length - 1) {\n        outputBuffer = target;\n      }\n      this.passes[index].render({inputBuffer, outputBuffer});\n      switchBuffer = !switchBuffer;\n    }\n    return {\n      inputBuffer: switchBuffer ? params.outputBuffer : params.inputBuffer,\n      outputBuffer: switchBuffer ? params.inputBuffer : params.outputBuffer\n    };\n  }\n\n  cleanup() {\n    if (this.passes) {\n      for (const pass of this.passes) {\n        pass.delete();\n      }\n      this.passes = null;\n    }\n  }\n}\n\nfunction createPasses(gl, module, id, moduleProps) {\n  if (module.filter || module.sampler) {\n    const fs = getFragmentShaderForRenderPass(module);\n    const pass = new ScreenPass(gl, {\n      id,\n      module,\n      fs,\n      moduleProps\n    });\n    return [pass];\n  }\n\n  const passes = module.passes || [];\n  return passes.map((pass, index) => {\n    const fs = getFragmentShaderForRenderPass(module, pass);\n    const idn = `${id}-${index}`;\n\n    return new ScreenPass(gl, {\n      id: idn,\n      module,\n      fs,\n      moduleProps\n    });\n  });\n}\n\nconst FILTER_FS_TEMPLATE = func => `\\\nuniform sampler2D texture;\nuniform vec2 texSize;\n\nvarying vec2 position;\nvarying vec2 coordinate;\nvarying vec2 uv;\n\nvoid main() {\n  vec2 texCoord = coordinate;\n\n  gl_FragColor = texture2D(texture, texCoord);\n  gl_FragColor = ${func}(gl_FragColor, texSize, texCoord);\n}\n`;\n\nconst SAMPLER_FS_TEMPLATE = func => `\\\nuniform sampler2D texture;\nuniform vec2 texSize;\n\nvarying vec2 position;\nvarying vec2 coordinate;\nvarying vec2 uv;\n\nvoid main() {\n  vec2 texCoord = coordinate;\n\n  gl_FragColor = ${func}(texture, texSize, texCoord);\n}\n`;\n\nfunction getFragmentShaderForRenderPass(module, pass = module) {\n  if (pass.filter) {\n    const func = typeof pass.filter === 'string' ? pass.filter : `${module.name}_filterColor`;\n    return FILTER_FS_TEMPLATE(func);\n  }\n\n  if (pass.sampler) {\n    const func = typeof pass.sampler === 'string' ? pass.sampler : `${module.name}_sampleColor`;\n    return SAMPLER_FS_TEMPLATE(func);\n  }\n\n  // console.error(`${module.name} no fragment shader generated`);\n  return null;\n}\n"],"file":"post-process-effect.js"}