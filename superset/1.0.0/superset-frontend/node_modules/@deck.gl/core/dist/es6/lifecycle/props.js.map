{"version":3,"sources":["../../../src/lifecycle/props.js"],"names":["assert","validateProps","props","propTypes","getPropTypes","propName","propType","validate","Error","diffProps","oldProps","propsChangedReason","compareProps","newProps","ignoreProps","data","updateTriggers","dataChangedReason","diffDataProps","updateTriggersChangedReason","diffUpdateTriggers","dataChanged","propsChanged","updateTriggersChanged","triggerName","undefined","key","newProp","oldProp","equal","equals","call","dataComparator","diffReason","diffUpdateTrigger","all","triggerChanged","reason","newTriggers","oldTriggers","layer","_component","LayerType","constructor","_propTypes"],"mappings":"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","sourcesContent":["import assert from '../utils/assert';\n\nexport function validateProps(props) {\n  const propTypes = getPropTypes(props);\n\n  for (const propName in propTypes) {\n    const propType = propTypes[propName];\n    const {validate} = propType;\n    if (validate && !validate(props[propName], propType)) {\n      throw new Error(`Invalid prop ${propName}: ${props[propName]}`);\n    }\n  }\n}\n\n// Returns an object with \"change flags\", either false or strings indicating reason for change\nexport function diffProps(props, oldProps) {\n  // First check if any props have changed (ignore props that will be examined separately)\n  const propsChangedReason = compareProps({\n    newProps: props,\n    oldProps,\n    propTypes: getPropTypes(props),\n    ignoreProps: {data: null, updateTriggers: null}\n  });\n\n  // Now check if any data related props have changed\n  const dataChangedReason = diffDataProps(props, oldProps);\n\n  // Check update triggers to determine if any attributes need regeneration\n  // Note - if data has changed, all attributes will need regeneration, so skip this step\n  let updateTriggersChangedReason = false;\n  if (!dataChangedReason) {\n    updateTriggersChangedReason = diffUpdateTriggers(props, oldProps);\n  }\n\n  return {\n    dataChanged: dataChangedReason,\n    propsChanged: propsChangedReason,\n    updateTriggersChanged: updateTriggersChangedReason\n  };\n}\n\n/**\n * Performs equality by iterating through keys on an object and returning false\n * when any key has values which are not strictly equal between the arguments.\n * @param {Object} opt.oldProps - object with old key/value pairs\n * @param {Object} opt.newProps - object with new key/value pairs\n * @param {Object} opt.ignoreProps={} - object, keys that should not be compared\n * @returns {null|String} - null when values of all keys are strictly equal.\n *   if unequal, returns a string explaining what changed.\n */\n/* eslint-disable max-statements, max-depth, complexity */\nexport function compareProps({\n  newProps,\n  oldProps,\n  ignoreProps = {},\n  propTypes = {},\n  triggerName = 'props'\n} = {}) {\n  assert(oldProps !== undefined && newProps !== undefined, 'compareProps args');\n\n  // shallow equality => deep equality\n  if (oldProps === newProps) {\n    return null;\n  }\n\n  // TODO - do we need these checks? Should never happen...\n  if (typeof newProps !== 'object' || newProps === null) {\n    return `${triggerName} changed shallowly`;\n  }\n\n  if (typeof oldProps !== 'object' || oldProps === null) {\n    return `${triggerName} changed shallowly`;\n  }\n\n  // Test if new props different from old props\n  for (const key in oldProps) {\n    if (!(key in ignoreProps)) {\n      if (!(key in newProps)) {\n        return `${triggerName}.${key} dropped`;\n      }\n      const newProp = newProps[key];\n      const oldProp = oldProps[key];\n      const propType = propTypes[key];\n\n      // If prop type has an equal function, invoke it\n      let equal = propType && propType.equal;\n      if (equal && !equal(newProp, oldProp, propType)) {\n        return `${triggerName}.${key} changed deeply`;\n      }\n\n      if (!equal) {\n        // If object has an equals function, invoke it\n        equal = newProp && oldProp && newProp.equals;\n        if (equal && !equal.call(newProp, oldProp)) {\n          return `${triggerName}.${key} changed deeply`;\n        }\n      }\n\n      if (!equal && oldProp !== newProp) {\n        return `${triggerName}.${key} changed shallowly`;\n      }\n    }\n  }\n\n  // Test if any new props have been added\n  for (const key in newProps) {\n    if (!(key in ignoreProps)) {\n      if (!(key in oldProps)) {\n        return `${triggerName}.${key} added: undefined -> ${newProps[key]}`;\n      }\n    }\n  }\n\n  return null;\n}\n/* eslint-enable max-statements, max-depth, complexity */\n\n// HELPERS\n\n// The comparison of the data prop requires special handling\n// the dataComparator should be used if supplied\nfunction diffDataProps(props, oldProps) {\n  if (oldProps === null) {\n    return 'oldProps is null, initial diff';\n  }\n\n  // Support optional app defined comparison of data\n  const {dataComparator} = props;\n  if (dataComparator) {\n    if (!dataComparator(props.data, oldProps.data)) {\n      return 'Data comparator detected a change';\n    }\n    // Otherwise, do a shallow equal on props\n  } else if (props.data !== oldProps.data) {\n    return 'A new data container was supplied';\n  }\n\n  return null;\n}\n\n// Checks if any update triggers have changed\n// also calls callback to invalidate attributes accordingly.\nfunction diffUpdateTriggers(props, oldProps) {\n  if (oldProps === null) {\n    return 'oldProps is null, initial diff';\n  }\n\n  // If the 'all' updateTrigger fires, ignore testing others\n  if ('all' in props.updateTriggers) {\n    const diffReason = diffUpdateTrigger(props, oldProps, 'all');\n    if (diffReason) {\n      return {all: true};\n    }\n  }\n\n  const triggerChanged = {};\n  let reason = false;\n  // If the 'all' updateTrigger didn't fire, need to check all others\n  for (const triggerName in props.updateTriggers) {\n    if (triggerName !== 'all') {\n      const diffReason = diffUpdateTrigger(props, oldProps, triggerName);\n      if (diffReason) {\n        triggerChanged[triggerName] = true;\n        reason = triggerChanged;\n      }\n    }\n  }\n\n  return reason;\n}\n\nfunction diffUpdateTrigger(props, oldProps, triggerName) {\n  let newTriggers = props.updateTriggers[triggerName];\n  newTriggers = newTriggers === undefined || newTriggers === null ? {} : newTriggers;\n  let oldTriggers = oldProps.updateTriggers[triggerName];\n  oldTriggers = oldTriggers === undefined || oldTriggers === null ? {} : oldTriggers;\n  const diffReason = compareProps({\n    oldProps: oldTriggers,\n    newProps: newTriggers,\n    triggerName\n  });\n  return diffReason;\n}\n\nfunction getPropTypes(props) {\n  const layer = props._component;\n  const LayerType = layer && layer.constructor;\n  return LayerType ? LayerType._propTypes : {};\n}\n"],"file":"props.js"}