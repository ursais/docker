{"version":3,"sources":["../../../src/viewports/web-mercator-viewport.js"],"names":["Viewport","pixelsToWorld","getViewMatrix","addMetersToLngLat","getProjectionParameters","fitBounds","vec2","assert","ERR_ARGUMENT","WebMercatorViewport","constructor","opts","latitude","longitude","zoom","pitch","bearing","nearZMultiplier","farZMultiplier","orthographic","width","height","altitude","Math","max","fov","aspect","focalDistance","near","far","viewMatrixUncentered","viewportOpts","Object","assign","viewMatrix","fovyRadians","orthographicFocalDistance","metersToLngLatDelta","bind","lngLatDeltaToMeters","freeze","xyz","x","y","z","Number","isFinite","distanceScales","pixelsPerMeter","degreesPerPixel","deltaLng","deltaLat","length","deltaLngLatZ","deltaZ","pixelsPerDegree","metersPerPixel","deltaX","deltaY","lngLatZ","getMapCenterByLngLatPosition","lngLat","pos","fromLocation","pixelUnprojectionMatrix","toLocation","projectFlat","translate","add","negate","newCenter","center","unprojectFlat","getLocationAtPoint","bounds","options","displayName"],"mappings":"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","sourcesContent":["// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\n// View and Projection Matrix calculations for mapbox-js style\n// map view properties\nimport Viewport from './viewport';\n\nimport {\n  pixelsToWorld,\n  getViewMatrix,\n  addMetersToLngLat,\n  getProjectionParameters,\n  fitBounds\n} from 'viewport-mercator-project';\n\n// TODO - import from math.gl\nimport * as vec2 from 'gl-matrix/vec2';\n\nimport assert from '../utils/assert';\n\nconst ERR_ARGUMENT = 'Illegal argument to WebMercatorViewport';\n\nexport default class WebMercatorViewport extends Viewport {\n  /**\n   * @classdesc\n   * Creates view/projection matrices from mercator params\n   * Note: The Viewport is immutable in the sense that it only has accessors.\n   * A new viewport instance should be created if any parameters have changed.\n   */\n  /* eslint-disable complexity, max-statements */\n  constructor(opts = {}) {\n    const {\n      latitude = 0,\n      longitude = 0,\n      zoom = 11,\n      pitch = 0,\n      bearing = 0,\n      nearZMultiplier = 0.1,\n      farZMultiplier = 10,\n      orthographic = false\n    } = opts;\n\n    let {width, height, altitude = 1.5} = opts;\n\n    // Silently allow apps to send in 0,0 to facilitate isomorphic render etc\n    width = width || 1;\n    height = height || 1;\n\n    // Altitude - prevent division by 0\n    // TODO - just throw an Error instead?\n    altitude = Math.max(0.75, altitude);\n\n    const {fov, aspect, focalDistance, near, far} = getProjectionParameters({\n      width,\n      height,\n      pitch,\n      altitude,\n      nearZMultiplier,\n      farZMultiplier\n    });\n\n    // The uncentered matrix allows us two move the center addition to the\n    // shader (cheap) which gives a coordinate system that has its center in\n    // the layer's center position. This makes rotations and other modelMatrx\n    // transforms much more useful.\n    const viewMatrixUncentered = getViewMatrix({\n      height,\n      pitch,\n      bearing,\n      altitude\n    });\n\n    const viewportOpts = Object.assign({}, opts, {\n      // x, y,\n      width,\n      height,\n\n      // view matrix\n      viewMatrix: viewMatrixUncentered,\n      longitude,\n      latitude,\n      zoom,\n\n      // projection matrix parameters\n      orthographic,\n      fovyRadians: fov,\n      aspect,\n      // TODO Viewport is already carefully set up to \"focus\" on ground, so can't use focal distance\n      orthographicFocalDistance: focalDistance,\n      near,\n      far\n    });\n\n    super(viewportOpts);\n\n    // Save parameters\n    this.latitude = latitude;\n    this.longitude = longitude;\n    this.zoom = zoom;\n    this.pitch = pitch;\n    this.bearing = bearing;\n    this.altitude = altitude;\n\n    this.orthographic = orthographic;\n\n    // Bind methods\n    this.metersToLngLatDelta = this.metersToLngLatDelta.bind(this);\n    this.lngLatDeltaToMeters = this.lngLatDeltaToMeters.bind(this);\n    this.addMetersToLngLat = this.addMetersToLngLat.bind(this);\n\n    Object.freeze(this);\n  }\n  /* eslint-enable complexity, max-statements */\n\n  /**\n   * Converts a meter offset to a lnglat offset\n   *\n   * Note: Uses simple linear approximation around the viewport center\n   * Error increases with size of offset (roughly 1% per 100km)\n   *\n   * @param {[Number,Number]|[Number,Number,Number]) xyz - array of meter deltas\n   * @return {[Number,Number]|[Number,Number,Number]) - array of [lng,lat,z] deltas\n   */\n  metersToLngLatDelta(xyz) {\n    const [x, y, z = 0] = xyz;\n    assert(Number.isFinite(x) && Number.isFinite(y) && Number.isFinite(z), ERR_ARGUMENT);\n    const {pixelsPerMeter, degreesPerPixel} = this.distanceScales;\n    const deltaLng = x * pixelsPerMeter[0] * degreesPerPixel[0];\n    const deltaLat = y * pixelsPerMeter[1] * degreesPerPixel[1];\n    return xyz.length === 2 ? [deltaLng, deltaLat] : [deltaLng, deltaLat, z];\n  }\n\n  /**\n   * Converts a lnglat offset to a meter offset\n   *\n   * Note: Uses simple linear approximation around the viewport center\n   * Error increases with size of offset (roughly 1% per 100km)\n   *\n   * @param {[Number,Number]|[Number,Number,Number]) deltaLngLatZ - array of [lng,lat,z] deltas\n   * @return {[Number,Number]|[Number,Number,Number]) - array of meter deltas\n   */\n  lngLatDeltaToMeters(deltaLngLatZ) {\n    const [deltaLng, deltaLat, deltaZ = 0] = deltaLngLatZ;\n    assert(\n      Number.isFinite(deltaLng) && Number.isFinite(deltaLat) && Number.isFinite(deltaZ),\n      ERR_ARGUMENT\n    );\n    const {pixelsPerDegree, metersPerPixel} = this.distanceScales;\n    const deltaX = deltaLng * pixelsPerDegree[0] * metersPerPixel[0];\n    const deltaY = deltaLat * pixelsPerDegree[1] * metersPerPixel[1];\n    return deltaLngLatZ.length === 2 ? [deltaX, deltaY] : [deltaX, deltaY, deltaZ];\n  }\n\n  /**\n   * Add a meter delta to a base lnglat coordinate, returning a new lnglat array\n   *\n   * Note: Uses simple linear approximation around the viewport center\n   * Error increases with size of offset (roughly 1% per 100km)\n   *\n   * @param {[Number,Number]|[Number,Number,Number]) lngLatZ - base coordinate\n   * @param {[Number,Number]|[Number,Number,Number]) xyz - array of meter deltas\n   * @return {[Number,Number]|[Number,Number,Number]) array of [lng,lat,z] deltas\n   */\n  addMetersToLngLat(lngLatZ, xyz) {\n    return addMetersToLngLat(lngLatZ, xyz);\n  }\n\n  /**\n   * Get the map center that place a given [lng, lat] coordinate at screen\n   * point [x, y]\n   *\n   * @param {Array} lngLat - [lng,lat] coordinates\n   *   Specifies a point on the sphere.\n   * @param {Array} pos - [x,y] coordinates\n   *   Specifies a point on the screen.\n   * @return {Array} [lng,lat] new map center.\n   */\n  getMapCenterByLngLatPosition({lngLat, pos}) {\n    const fromLocation = pixelsToWorld(pos, this.pixelUnprojectionMatrix);\n    const toLocation = this.projectFlat(lngLat);\n\n    const translate = vec2.add([], toLocation, vec2.negate([], fromLocation));\n    const newCenter = vec2.add([], this.center, translate);\n\n    return this.unprojectFlat(newCenter);\n  }\n\n  // Legacy method name\n  getLocationAtPoint({lngLat, pos}) {\n    return this.getMapCenterByLngLatPosition({lngLat, pos});\n  }\n\n  /**\n   * Returns a new viewport that fit around the given rectangle.\n   * Only supports non-perspective mode.\n   * @param {Array} bounds - [[lon, lat], [lon, lat]]\n   * @param {Number} [options.padding] - The amount of padding in pixels to add to the given bounds.\n   * @param {Array} [options.offset] - The center of the given bounds relative to the map's center,\n   *    [x, y] measured in pixels.\n   * @returns {WebMercatorViewport}\n   */\n  fitBounds(bounds, options = {}) {\n    const {width, height} = this;\n    const {longitude, latitude, zoom} = fitBounds(Object.assign({width, height, bounds}, options));\n    return new WebMercatorViewport({width, height, longitude, latitude, zoom});\n  }\n}\n\nWebMercatorViewport.displayName = 'WebMercatorViewport';\n"],"file":"web-mercator-viewport.js"}