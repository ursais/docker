{"version":3,"sources":["../../../src/lib/attribute.js"],"names":["Buffer","assert","createIterable","fillArray","range","log","BaseAttribute","DEFAULT_STATE","isExternalBuffer","needsUpdate","needsRedraw","updateRanges","FULL","allocedInstances","Attribute","constructor","gl","opts","transition","noAlloc","update","accessor","bufferLayout","defaultValue","Array","isArray","shaderAttributes","hasShaderAttributes","shaderAttributeName","shaderAttribute","Object","assign","id","constant","isIndexed","elements","size","value","divisor","instanced","buffer","getBuffer","userData","_standardAccessor","seal","_validateAttributeUpdaters","layout","clearChangedFlags","getInstanceCount","length","getUpdateTriggers","concat","getAccessor","getShaderAttributes","supportsTransition","getTransitionSetting","settings","find","a","Number","isFinite","duration","setNeedsUpdate","reason","dataRange","startRow","endRow","Infinity","add","clearNeedsUpdate","EMPTY","setNeedsRedraw","allocate","numInstances","state","instanceCount","needsAlloc","allocCount","Math","max","ArrayType","glArrayFromType","type","oldValue","byteLength","reallocate","set","subData","updateBuffer","data","props","context","updated","call","startOffset","_getVertexOffset","endOffset","subarray","offset","BYTES_PER_ELEMENT","_checkAttributeArray","_updateShaderAttributes","setGenericValue","undefined","_normalizeValue","hasChanged","_areValuesEqual","setExternalBuffer","externalBuffer","ArrayBuffer","isView","Error","auto","warn","name","row","index","geometrySize","out","start","value1","value2","i","attribute","accessorFunc","iterable","objectInfo","object","objectValue","target","numVertices","source","count","hasUpdater","valid","glType","clamped","Float32Array","Uint16Array","Uint32Array","Uint8ClampedArray","Uint8Array","Int8Array","Int16Array","Int32Array"],"mappings":"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","sourcesContent":["/* eslint-disable complexity */\nimport GL from '@luma.gl/constants';\nimport {Buffer} from '@luma.gl/core';\nimport assert from '../utils/assert';\nimport {createIterable} from '../utils/iterable-utils';\nimport {fillArray} from '../utils/flatten';\nimport * as range from '../utils/range';\nimport log from '../utils/log';\nimport BaseAttribute from './base-attribute';\n\nconst DEFAULT_STATE = {\n  isExternalBuffer: false,\n  needsUpdate: true,\n  needsRedraw: false,\n  updateRanges: range.FULL,\n  allocedInstances: -1\n};\n\nexport default class Attribute extends BaseAttribute {\n  constructor(gl, opts = {}) {\n    super(gl, opts);\n\n    const {\n      // deck.gl fields\n      transition = false,\n      noAlloc = false,\n      update = null,\n      accessor = null,\n      bufferLayout = null\n    } = opts;\n\n    let {defaultValue = [0, 0, 0, 0]} = opts;\n    defaultValue = Array.isArray(defaultValue) ? defaultValue : [defaultValue];\n\n    this.shaderAttributes = {};\n    this.hasShaderAttributes = false;\n\n    if (opts.shaderAttributes) {\n      const shaderAttributes = opts.shaderAttributes;\n      for (const shaderAttributeName in shaderAttributes) {\n        const shaderAttribute = shaderAttributes[shaderAttributeName];\n\n        // Initialize the attribute descriptor, with WebGL and metadata fields\n        this.shaderAttributes[shaderAttributeName] = new Attribute(\n          this.gl,\n          Object.assign({}, shaderAttribute, {\n            id: shaderAttributeName,\n            // Luma fields\n            constant: shaderAttribute.constant || false,\n            isIndexed: shaderAttribute.isIndexed || shaderAttribute.elements,\n            size: (shaderAttribute.elements && 1) || shaderAttribute.size || this.size,\n            value: shaderAttribute.value || null,\n            divisor: shaderAttribute.instanced || shaderAttribute.divisor || this.divisor,\n            buffer: this.getBuffer(),\n            noAlloc: true\n          })\n        );\n\n        this.hasShaderAttributes = true;\n      }\n    }\n\n    Object.assign(this.userData, DEFAULT_STATE, opts, {\n      transition,\n      noAlloc,\n      update: update || (accessor && this._standardAccessor),\n      accessor,\n      defaultValue,\n      bufferLayout\n    });\n\n    Object.seal(this.userData);\n\n    // Check all fields and generate helpful error messages\n    this._validateAttributeUpdaters();\n  }\n\n  get bufferLayout() {\n    return this.userData.bufferLayout;\n  }\n\n  set bufferLayout(layout) {\n    this.userData.bufferLayout = layout;\n  }\n\n  needsUpdate() {\n    return this.userData.needsUpdate;\n  }\n\n  needsRedraw({clearChangedFlags = false} = {}) {\n    const needsRedraw = this.userData.needsRedraw;\n    this.userData.needsRedraw = this.userData.needsRedraw && !clearChangedFlags;\n    return needsRedraw;\n  }\n\n  getInstanceCount() {\n    return this.value !== null ? this.value.length / this.size : 0;\n  }\n\n  getUpdateTriggers() {\n    const {accessor} = this.userData;\n\n    // Backards compatibility: allow attribute name to be used as update trigger key\n    return [this.id].concat((typeof accessor !== 'function' && accessor) || []);\n  }\n\n  getAccessor() {\n    return this.userData.accessor;\n  }\n\n  getShaderAttributes() {\n    const shaderAttributes = {};\n    if (this.hasShaderAttributes) {\n      Object.assign(shaderAttributes, this.shaderAttributes);\n    } else {\n      shaderAttributes[this.id] = this;\n    }\n\n    return shaderAttributes;\n  }\n\n  supportsTransition() {\n    return this.userData.transition;\n  }\n\n  // Resolve transition settings object if transition is enabled, otherwise `null`\n  getTransitionSetting(opts) {\n    const {transition, accessor} = this.userData;\n    if (!transition) {\n      return null;\n    }\n    let settings = Array.isArray(accessor) ? opts[accessor.find(a => opts[a])] : opts[accessor];\n\n    // Shorthand: use duration instead of parameter object\n    if (Number.isFinite(settings)) {\n      settings = {duration: settings};\n    }\n\n    if (settings && settings.duration > 0) {\n      return Object.assign({}, transition, settings);\n    }\n\n    return null;\n  }\n\n  setNeedsUpdate(reason = this.id, dataRange) {\n    this.userData.needsUpdate = this.userData.needsUpdate || reason;\n    if (dataRange) {\n      const {startRow = 0, endRow = Infinity} = dataRange;\n      this.userData.updateRanges = range.add(this.userData.updateRanges, [startRow, endRow]);\n    } else {\n      this.userData.updateRanges = range.FULL;\n    }\n  }\n\n  clearNeedsUpdate() {\n    this.userData.needsUpdate = false;\n    this.userData.updateRanges = range.EMPTY;\n  }\n\n  setNeedsRedraw(reason = this.id) {\n    this.userData.needsRedraw = this.userData.needsRedraw || reason;\n  }\n\n  allocate(numInstances) {\n    const state = this.userData;\n\n    if (state.isExternalBuffer || state.noAlloc) {\n      // Data is provided through a Buffer object.\n      return false;\n    }\n\n    // Do we need to reallocate the attribute's typed array?\n    const instanceCount = this.getInstanceCount();\n    const needsAlloc = instanceCount === 0 || instanceCount < numInstances;\n    if (needsAlloc && (state.update || state.accessor)) {\n      assert(Number.isFinite(numInstances));\n      // Allocate at least one element to ensure a valid buffer\n      const allocCount = Math.max(numInstances, 1);\n      const ArrayType = glArrayFromType(this.type || GL.FLOAT);\n      const oldValue = this.value;\n\n      this.constant = false;\n      this.value = new ArrayType(this.size * allocCount);\n\n      if (this.buffer && this.buffer.byteLength < this.value.byteLength) {\n        this.buffer.reallocate(this.value.byteLength);\n      }\n\n      if (state.updateRanges !== range.FULL) {\n        this.value.set(oldValue);\n        // Upload the full existing attribute value to the GPU, so that updateBuffer\n        // can choose to only update a partial range.\n        // TODO - copy old buffer to new buffer on the GPU\n        this.buffer.subData(oldValue);\n      }\n\n      this.setNeedsUpdate(true, {startRow: instanceCount});\n      state.allocedInstances = allocCount;\n      return true;\n    }\n\n    return false;\n  }\n\n  updateBuffer({numInstances, bufferLayout, data, props, context}) {\n    if (!this.needsUpdate()) {\n      return false;\n    }\n\n    const state = this.userData;\n\n    const {update, updateRanges, noAlloc} = state;\n\n    let updated = true;\n    if (update) {\n      // Custom updater - typically for non-instanced layers\n      for (const [startRow, endRow] of updateRanges) {\n        update.call(context, this, {data, startRow, endRow, props, numInstances, bufferLayout});\n      }\n      if (this.constant || !this.buffer || this.buffer.byteLength < this.value.byteLength) {\n        // call base clas `update` method to upload value to GPU\n        this.update({\n          value: this.value,\n          constant: this.constant\n        });\n      } else {\n        for (const [startRow, endRow] of updateRanges) {\n          const startOffset = Number.isFinite(startRow)\n            ? this._getVertexOffset(startRow, this.bufferLayout)\n            : 0;\n          const endOffset = Number.isFinite(endRow)\n            ? this._getVertexOffset(endRow, this.bufferLayout)\n            : noAlloc || !Number.isFinite(numInstances)\n              ? this.value.length\n              : numInstances * this.size;\n\n          // Only update the changed part of the attribute\n          this.buffer.subData({\n            data: this.value.subarray(startOffset, endOffset),\n            offset: startOffset * this.value.BYTES_PER_ELEMENT\n          });\n        }\n      }\n      this._checkAttributeArray();\n    } else {\n      updated = false;\n    }\n\n    this._updateShaderAttributes();\n\n    this.clearNeedsUpdate();\n    state.needsRedraw = true;\n\n    return updated;\n  }\n\n  update(props) {\n    super.update(props);\n    this._updateShaderAttributes();\n  }\n\n  // Use generic value\n  // Returns true if successful\n  setGenericValue(value) {\n    const state = this.userData;\n\n    if (value === undefined || typeof value === 'function') {\n      // ignore if this attribute has no accessor\n      // ignore if accessor is function, will be used in updateBuffer\n      state.isExternalBuffer = false;\n      return false;\n    }\n\n    value = this._normalizeValue(value);\n    const hasChanged = !this.constant || !this._areValuesEqual(value, this.value);\n\n    if (hasChanged) {\n      this.update({constant: true, value});\n    }\n    state.needsRedraw = state.needsUpdate || hasChanged;\n    this.clearNeedsUpdate();\n    state.isExternalBuffer = true;\n    this._updateShaderAttributes();\n    return true;\n  }\n\n  // Use external buffer\n  // Returns true if successful\n  setExternalBuffer(buffer, numInstances) {\n    const state = this.userData;\n\n    if (buffer) {\n      state.isExternalBuffer = true;\n      this.clearNeedsUpdate();\n\n      if (buffer instanceof Buffer) {\n        if (this.externalBuffer !== buffer) {\n          this.update({constant: false, buffer});\n          state.needsRedraw = true;\n        }\n      } else if (this.value !== buffer) {\n        if (!ArrayBuffer.isView(buffer)) {\n          throw new Error('Attribute prop must be typed array');\n        }\n        if (state.auto && buffer.length <= numInstances * this.size) {\n          throw new Error('Attribute prop array must match length and size');\n        }\n\n        const ArrayType = glArrayFromType(this.type || GL.FLOAT);\n        if (buffer instanceof ArrayType) {\n          this.update({constant: false, value: buffer});\n        } else {\n          log.warn(`Attribute prop ${this.id} is casted to ${ArrayType.name}`)();\n          // Cast to proper type\n          this.update({constant: false, value: new ArrayType(buffer)});\n        }\n        // Save original typed array\n        this.value = buffer;\n        state.needsRedraw = true;\n      }\n      this._updateShaderAttributes();\n      return true;\n    }\n\n    state.isExternalBuffer = false;\n    return false;\n  }\n\n  // PRIVATE HELPER METHODS\n  _getVertexOffset(row, bufferLayout) {\n    if (bufferLayout) {\n      let offset = 0;\n      let index = 0;\n      for (const geometrySize of bufferLayout) {\n        if (index >= row) {\n          break;\n        }\n        offset += geometrySize * this.size;\n        index++;\n      }\n      return offset;\n    }\n    return row * this.size;\n  }\n\n  /* check user supplied values and apply fallback */\n  _normalizeValue(value, out = [], start = 0) {\n    const {defaultValue} = this.userData;\n\n    if (!Array.isArray(value) && !ArrayBuffer.isView(value)) {\n      out[start] = Number.isFinite(value) ? value : defaultValue[0];\n      return out;\n    }\n\n    /* eslint-disable no-fallthrough, default-case */\n    switch (this.size) {\n      case 4:\n        out[start + 3] = Number.isFinite(value[3]) ? value[3] : defaultValue[3];\n      case 3:\n        out[start + 2] = Number.isFinite(value[2]) ? value[2] : defaultValue[2];\n      case 2:\n        out[start + 1] = Number.isFinite(value[1]) ? value[1] : defaultValue[1];\n      case 1:\n        out[start + 0] = Number.isFinite(value[0]) ? value[0] : defaultValue[0];\n    }\n\n    return out;\n  }\n\n  _areValuesEqual(value1, value2, size = this.size) {\n    for (let i = 0; i < size; i++) {\n      if (value1[i] !== value2[i]) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  _standardAccessor(attribute, {data, startRow, endRow, props, numInstances, bufferLayout}) {\n    const state = attribute.userData;\n\n    const {accessor} = state;\n    const {value, size} = attribute;\n    const accessorFunc = typeof accessor === 'function' ? accessor : props[accessor];\n\n    assert(typeof accessorFunc === 'function', `accessor \"${accessor}\" is not a function`);\n\n    let i = attribute._getVertexOffset(startRow, bufferLayout);\n    const {iterable, objectInfo} = createIterable(data, startRow, endRow);\n    for (const object of iterable) {\n      objectInfo.index++;\n\n      const objectValue = accessorFunc(object, objectInfo);\n\n      if (bufferLayout) {\n        attribute._normalizeValue(objectValue, objectInfo.target);\n        const numVertices = bufferLayout[objectInfo.index];\n        fillArray({\n          target: attribute.value,\n          source: objectInfo.target,\n          start: i,\n          count: numVertices\n        });\n        i += numVertices * size;\n      } else {\n        attribute._normalizeValue(objectValue, value, i);\n        i += size;\n      }\n    }\n    attribute.constant = false;\n    attribute.bufferLayout = bufferLayout;\n  }\n\n  // Validate deck.gl level fields\n  _validateAttributeUpdaters() {\n    const state = this.userData;\n\n    // Check that either 'accessor' or 'update' is a valid function\n    const hasUpdater =\n      state.noAlloc || typeof state.update === 'function' || typeof state.accessor === 'string';\n    if (!hasUpdater) {\n      throw new Error(`Attribute ${this.id} missing update or accessor`);\n    }\n  }\n\n  _checkAttributeArray() {\n    const {value} = this;\n    if (value && value.length >= 4) {\n      const valid =\n        Number.isFinite(value[0]) &&\n        Number.isFinite(value[1]) &&\n        Number.isFinite(value[2]) &&\n        Number.isFinite(value[3]);\n      if (!valid) {\n        throw new Error(`Illegal attribute generated for ${this.id}`);\n      }\n    }\n  }\n\n  _updateShaderAttributes() {\n    const shaderAttributes = this.shaderAttributes;\n    for (const shaderAttributeName in shaderAttributes) {\n      const shaderAttribute = shaderAttributes[shaderAttributeName];\n      shaderAttribute.update({\n        buffer: this.getBuffer(),\n        value: this.value,\n        constant: this.constant\n      });\n    }\n  }\n}\n\n/* eslint-disable complexity */\nexport function glArrayFromType(glType, {clamped = true} = {}) {\n  // Sorted in some order of likelihood to reduce amount of comparisons\n  switch (glType) {\n    case GL.FLOAT:\n      return Float32Array;\n    case GL.UNSIGNED_SHORT:\n    case GL.UNSIGNED_SHORT_5_6_5:\n    case GL.UNSIGNED_SHORT_4_4_4_4:\n    case GL.UNSIGNED_SHORT_5_5_5_1:\n      return Uint16Array;\n    case GL.UNSIGNED_INT:\n      return Uint32Array;\n    case GL.UNSIGNED_BYTE:\n      return clamped ? Uint8ClampedArray : Uint8Array;\n    case GL.BYTE:\n      return Int8Array;\n    case GL.SHORT:\n      return Int16Array;\n    case GL.INT:\n      return Int32Array;\n    default:\n      throw new Error('Failed to deduce type from array');\n  }\n}\n/* eslint-enable complexity */\n"],"file":"attribute.js"}