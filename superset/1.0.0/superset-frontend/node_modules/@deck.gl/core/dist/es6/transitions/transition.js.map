{"version":3,"sources":["../../../src/transitions/transition.js"],"names":["TRANSITION_STATE","NONE","PENDING","IN_PROGRESS","ENDED","noop","Transition","constructor","props","_startTime","_state","duration","easing","t","onStart","onUpdate","onInterrupt","onEnd","Object","assign","state","inProgress","start","_setState","cancel","update","currentTime","shouldEnd","time","newState"],"mappings":"AAAA,OAAO,MAAMA,gBAAgB,GAAG;AAC9BC,EAAAA,IAAI,EAAE,MADwB;AAE9BC,EAAAA,OAAO,EAAE,SAFqB;AAG9BC,EAAAA,WAAW,EAAE,aAHiB;AAI9BC,EAAAA,KAAK,EAAE;AAJuB,CAAzB;;AAOP,SAASC,IAAT,GAAgB,CAAE;;AAElB,eAAe,MAAMC,UAAN,CAAiB;AAa9BC,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,SAAKC,UAAL,GAAkB,IAAlB;AACA,SAAKC,MAAL,GAAcV,gBAAgB,CAACC,IAA/B;AAGA,SAAKU,QAAL,GAAgB,CAAhB;;AACA,SAAKC,MAAL,GAAcC,CAAC,IAAIA,CAAnB;;AACA,SAAKC,OAAL,GAAeT,IAAf;AACA,SAAKU,QAAL,GAAgBV,IAAhB;AACA,SAAKW,WAAL,GAAmBX,IAAnB;AACA,SAAKY,KAAL,GAAaZ,IAAb;AAEAa,IAAAA,MAAM,CAACC,MAAP,CAAc,IAAd,EAAoBX,KAApB;AACD;;AAGD,MAAIY,KAAJ,GAAY;AACV,WAAO,KAAKV,MAAZ;AACD;;AAED,MAAIW,UAAJ,GAAiB;AACf,WAAO,KAAKX,MAAL,KAAgBV,gBAAgB,CAACE,OAAjC,IAA4C,KAAKQ,MAAL,KAAgBV,gBAAgB,CAACG,WAApF;AACD;;AAMDmB,EAAAA,KAAK,CAACd,KAAD,EAAQ;AACX,QAAI,KAAKa,UAAT,EAAqB;AACnB,WAAKL,WAAL,CAAiB,IAAjB;AACD;;AACDE,IAAAA,MAAM,CAACC,MAAP,CAAc,IAAd,EAAoBX,KAApB;;AACA,SAAKe,SAAL,CAAevB,gBAAgB,CAACE,OAAhC;AACD;;AAKDsB,EAAAA,MAAM,GAAG;AACP,QAAI,KAAKH,UAAT,EAAqB;AACnB,WAAKL,WAAL,CAAiB,IAAjB;;AACA,WAAKO,SAAL,CAAevB,gBAAgB,CAACC,IAAhC;AACD;AACF;;AAMDwB,EAAAA,MAAM,CAACC,WAAD,EAAc;AAClB,QAAI,KAAKN,KAAL,KAAepB,gBAAgB,CAACE,OAApC,EAA6C;AAC3C,WAAKO,UAAL,GAAkBiB,WAAlB;;AACA,WAAKH,SAAL,CAAevB,gBAAgB,CAACG,WAAhC;AACD;;AAED,QAAI,KAAKiB,KAAL,KAAepB,gBAAgB,CAACG,WAApC,EAAiD;AAC/C,UAAIwB,SAAS,GAAG,KAAhB;AACA,UAAIC,IAAI,GAAG,CAACF,WAAW,GAAG,KAAKjB,UAApB,IAAkC,KAAKE,QAAlD;;AACA,UAAIiB,IAAI,IAAI,CAAZ,EAAe;AACbA,QAAAA,IAAI,GAAG,CAAP;AACAD,QAAAA,SAAS,GAAG,IAAZ;AACD;;AACD,WAAKC,IAAL,GAAY,KAAKhB,MAAL,CAAYgB,IAAZ,CAAZ;AACA,WAAKb,QAAL,CAAc,IAAd;;AAEA,UAAIY,SAAJ,EAAe;AACb,aAAKJ,SAAL,CAAevB,gBAAgB,CAACI,KAAhC;AACD;;AACD,aAAO,IAAP;AACD;;AAED,WAAO,KAAP;AACD;;AAGDmB,EAAAA,SAAS,CAACM,QAAD,EAAW;AAClB,QAAI,KAAKnB,MAAL,KAAgBmB,QAApB,EAA8B;AAC5B;AACD;;AAED,SAAKnB,MAAL,GAAcmB,QAAd;;AAEA,YAAQA,QAAR;AACE,WAAK7B,gBAAgB,CAACE,OAAtB;AACE,aAAKY,OAAL,CAAa,IAAb;AACA;;AACF,WAAKd,gBAAgB,CAACI,KAAtB;AACE,aAAKa,KAAL,CAAW,IAAX;AACA;;AACF;AAPF;AASD;;AAzG6B","sourcesContent":["export const TRANSITION_STATE = {\n  NONE: 'none',\n  PENDING: 'pending',\n  IN_PROGRESS: 'in_progress',\n  ENDED: 'ended'\n};\n\nfunction noop() {}\n\nexport default class Transition {\n  /**\n   * @params props {object} - properties of the transition.\n   *\n   * @params props.duration {number} - total time to complete the transition\n   * @params props.easing {func} - easing function\n   * @params props.onStart {func} - callback when transition starts\n   * @params props.onUpdate {func} - callback when transition updates\n   * @params props.onInterrupt {func} - callback when transition is interrupted\n   * @params props.onEnd {func} - callback when transition ends\n   *\n   * Any additional properties are also saved on the instance but have no effect.\n   */\n  constructor(props) {\n    this._startTime = null;\n    this._state = TRANSITION_STATE.NONE;\n\n    // Defaults\n    this.duration = 1;\n    this.easing = t => t;\n    this.onStart = noop;\n    this.onUpdate = noop;\n    this.onInterrupt = noop;\n    this.onEnd = noop;\n\n    Object.assign(this, props);\n  }\n\n  /* Public API */\n  get state() {\n    return this._state;\n  }\n\n  get inProgress() {\n    return this._state === TRANSITION_STATE.PENDING || this._state === TRANSITION_STATE.IN_PROGRESS;\n  }\n\n  /**\n   * (re)start this transition.\n   * @params props {object} - optional overriding props. see constructor\n   */\n  start(props) {\n    if (this.inProgress) {\n      this.onInterrupt(this);\n    }\n    Object.assign(this, props);\n    this._setState(TRANSITION_STATE.PENDING);\n  }\n\n  /**\n   * cancel this transition if it is in progress.\n   */\n  cancel() {\n    if (this.inProgress) {\n      this.onInterrupt(this);\n      this._setState(TRANSITION_STATE.NONE);\n    }\n  }\n\n  /**\n   * update this transition.\n   * @params currentTime {number} - timestamp of the update. should be in the same unit as `duration`.\n   */\n  update(currentTime) {\n    if (this.state === TRANSITION_STATE.PENDING) {\n      this._startTime = currentTime;\n      this._setState(TRANSITION_STATE.IN_PROGRESS);\n    }\n\n    if (this.state === TRANSITION_STATE.IN_PROGRESS) {\n      let shouldEnd = false;\n      let time = (currentTime - this._startTime) / this.duration;\n      if (time >= 1) {\n        time = 1;\n        shouldEnd = true;\n      }\n      this.time = this.easing(time);\n      this.onUpdate(this);\n\n      if (shouldEnd) {\n        this._setState(TRANSITION_STATE.ENDED);\n      }\n      return true;\n    }\n\n    return false;\n  }\n\n  /* Private API */\n  _setState(newState) {\n    if (this._state === newState) {\n      return;\n    }\n\n    this._state = newState;\n\n    switch (newState) {\n      case TRANSITION_STATE.PENDING:\n        this.onStart(this);\n        break;\n      case TRANSITION_STATE.ENDED:\n        this.onEnd(this);\n        break;\n      default:\n    }\n  }\n}\n"],"file":"transition.js"}