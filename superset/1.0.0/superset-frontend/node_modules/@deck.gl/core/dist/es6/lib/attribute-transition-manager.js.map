{"version":3,"sources":["../../../src/lib/attribute-transition-manager.js"],"names":["Buffer","Transform","getShaders","getBuffers","padBuffer","Attribute","BaseAttribute","Transition","log","assert","noop","DEFAULT_TRANSITION_SETTINGS","duration","easing","t","onStart","onEnd","onInterrupt","AttributeTransitionManager","constructor","gl","id","attributeTransitions","needsRedraw","transform","numInstances","isSupported","warn","finalize","delete","attributeName","_removeTransition","update","attributes","transitions","opts","changedTransitions","hasChanged","_updateAttribute","attribute","supportsTransition","_createModel","sourceBuffers","feedbackBuffers","elementCount","hasAttribute","getAttributes","animatedAttributes","transition","buffer","attributeInTransition","setCurrentTime","currentTime","uniforms","updated","time","run","_createTransition","name","bufferLayout","_invalidateModel","_swapBuffer","settings","getTransitionSetting","_triggerTransition","Object","keys","length","assign","_getNextTransitionStates","size","toState","constant","value","getBuffer","divisor","externalBuffer","fromState","toLength","fromLength","getElementCount","data","Float32Array","usage","setData","fromBufferLayout","toBufferLayout","getData","enter","transitionSettings","start"],"mappings":"AACA,SAAQA,MAAR,EAAgBC,SAAhB,QAAgC,eAAhC;AACA,SAAQC,UAAR,EAAoBC,UAApB,EAAgCC,SAAhC,QAAgD,8BAAhD;AACA,OAAOC,SAAP,MAAsB,aAAtB;AACA,OAAOC,aAAP,MAA0B,kBAA1B;AACA,OAAOC,UAAP,MAAuB,2BAAvB;AACA,OAAOC,GAAP,MAAgB,cAAhB;AACA,OAAOC,MAAP,MAAmB,iBAAnB;;AAEA,MAAMC,IAAI,GAAG,MAAM,CAAE,CAArB;;AACA,MAAMC,2BAA2B,GAAG;AAClCC,EAAAA,QAAQ,EAAE,CADwB;AAElCC,EAAAA,MAAM,EAAEC,CAAC,IAAIA,CAFqB;AAGlCC,EAAAA,OAAO,EAAEL,IAHyB;AAIlCM,EAAAA,KAAK,EAAEN,IAJ2B;AAKlCO,EAAAA,WAAW,EAAEP;AALqB,CAApC;AAQA,eAAe,MAAMQ,0BAAN,CAAiC;AAC9CC,EAAAA,WAAW,CAACC,EAAD,QAAW;AAAA,QAALC,EAAK,QAALA,EAAK;AACpB,SAAKA,EAAL,GAAUA,EAAV;AACA,SAAKD,EAAL,GAAUA,EAAV;AAEA,SAAKE,oBAAL,GAA4B,EAA5B;AACA,SAAKC,WAAL,GAAmB,KAAnB;AACA,SAAKC,SAAL,GAAiB,IAAjB;AACA,SAAKC,YAAL,GAAoB,CAApB;;AAEA,QAAIxB,SAAS,CAACyB,WAAV,CAAsBN,EAAtB,CAAJ,EAA+B;AAC7B,WAAKM,WAAL,GAAmB,IAAnB;AACD,KAFD,MAEO,IAAIN,EAAJ,EAAQ;AAEbZ,MAAAA,GAAG,CAACmB,IAAJ,CAAS,yEAAT;AACD;AACF;;AAEDC,EAAAA,QAAQ,GAAG;AACT,QAAI,KAAKJ,SAAT,EAAoB;AAClB,WAAKA,SAAL,CAAeK,MAAf;AACD;;AACD,SAAK,MAAMC,aAAX,IAA4B,KAAKR,oBAAjC,EAAuD;AACrD,WAAKS,iBAAL,CAAuBD,aAAvB;AACD;AACF;;AAMDE,EAAAA,MAAM,QAA+C;AAAA,QAA7CC,UAA6C,SAA7CA,UAA6C;AAAA,kCAAjCC,WAAiC;AAAA,QAAjCA,WAAiC,kCAAnB,EAAmB;AAAA,QAAfT,YAAe,SAAfA,YAAe;AACnD,SAAKU,IAAL,GAAYD,WAAZ;AAEA,SAAKT,YAAL,GAAoBA,YAAY,IAAI,CAApC;;AAEA,QAAI,CAAC,KAAKC,WAAV,EAAuB;AACrB;AACD;;AAPkD,UAS5CJ,oBAT4C,GASpB,IAToB,CAS5CA,oBAT4C;AAUnD,UAAMc,kBAAkB,GAAG,EAA3B;;AAEA,SAAK,MAAMN,aAAX,IAA4BG,UAA5B,EAAwC;AACtC,YAAMI,UAAU,GAAG,KAAKC,gBAAL,CAAsBR,aAAtB,EAAqCG,UAAU,CAACH,aAAD,CAA/C,CAAnB;;AAEA,UAAIO,UAAJ,EAAgB;AACdD,QAAAA,kBAAkB,CAACN,aAAD,CAAlB,GAAoCR,oBAAoB,CAACQ,aAAD,CAAxD;AACD;AACF;;AAED,SAAK,MAAMA,aAAX,IAA4BR,oBAA5B,EAAkD;AAChD,YAAMiB,SAAS,GAAGN,UAAU,CAACH,aAAD,CAA5B;;AAEA,UAAI,CAACS,SAAD,IAAc,CAACA,SAAS,CAACC,kBAAV,EAAnB,EAAmD;AAEjD,aAAKT,iBAAL,CAAuBD,aAAvB;AACD;AACF;;AAED,QAAI,CAAC,KAAKN,SAAV,EAAqB;AACnB,WAAKiB,YAAL;AACD,KAFD,MAEO,IAAI,KAAKjB,SAAT,EAAoB;AAAA,0BACgBrB,UAAU,CAACiC,kBAAD,CAD1B;AAAA,YAClBM,aADkB,eAClBA,aADkB;AAAA,YACHC,eADG,eACHA,eADG;;AAEzB,WAAKnB,SAAL,CAAeQ,MAAf,CAAsB;AACpBY,QAAAA,YAAY,EAAE,KAAKnB,YADC;AAEpBiB,QAAAA,aAFoB;AAGpBC,QAAAA;AAHoB,OAAtB;AAKD;AACF;;AAGDE,EAAAA,YAAY,CAACf,aAAD,EAAgB;AAC1B,WAAOA,aAAa,IAAI,KAAKR,oBAA7B;AACD;;AAGDwB,EAAAA,aAAa,GAAG;AACd,UAAMC,kBAAkB,GAAG,EAA3B;;AAEA,SAAK,MAAMjB,aAAX,IAA4B,KAAKR,oBAAjC,EAAuD;AACrD,YAAM0B,UAAU,GAAG,KAAK1B,oBAAL,CAA0BQ,aAA1B,CAAnB;;AAEA,UAAIkB,UAAU,CAACC,MAAf,EAAuB;AACrBF,QAAAA,kBAAkB,CAACjB,aAAD,CAAlB,GAAoCkB,UAAU,CAACE,qBAA/C;AACD;AACF;;AAED,WAAOH,kBAAP;AACD;;AAKDI,EAAAA,cAAc,CAACC,WAAD,EAAc;AAC1B,QAAI,CAAC,KAAK5B,SAAN,IAAmB,KAAKC,YAAL,KAAsB,CAA7C,EAAgD;AAC9C,aAAO,KAAP;AACD;;AAED,UAAM4B,QAAQ,GAAG,EAAjB;AAEA,QAAI9B,WAAW,GAAG,KAAKA,WAAvB;AACA,SAAKA,WAAL,GAAmB,KAAnB;;AAEA,SAAK,MAAMO,aAAX,IAA4B,KAAKR,oBAAjC,EAAuD;AACrD,YAAM0B,UAAU,GAAG,KAAK1B,oBAAL,CAA0BQ,aAA1B,CAAnB;AACA,YAAMwB,OAAO,GAAGN,UAAU,CAAChB,MAAX,CAAkBoB,WAAlB,CAAhB;;AACA,UAAIE,OAAJ,EAAa;AACXD,QAAAA,QAAQ,CAAE,GAAEvB,aAAc,MAAlB,CAAR,GAAmCkB,UAAU,CAACO,IAA9C;AACAhC,QAAAA,WAAW,GAAG,IAAd;AACD;AACF;;AAED,QAAIA,WAAJ,EAAiB;AACf,WAAKC,SAAL,CAAegC,GAAf,CAAmB;AAACH,QAAAA;AAAD,OAAnB;AACD;;AAED,WAAO9B,WAAP;AACD;;AAIDkC,EAAAA,iBAAiB,CAAC3B,aAAD,EAAgBS,SAAhB,EAA2B;AAC1C,QAAIS,UAAU,GAAG,KAAK1B,oBAAL,CAA0BQ,aAA1B,CAAjB;;AACA,QAAI,CAACkB,UAAL,EAAiB;AACfA,MAAAA,UAAU,GAAG,IAAIzC,UAAJ,CAAe;AAC1BmD,QAAAA,IAAI,EAAE5B,aADoB;AAE1BS,QAAAA,SAF0B;AAG1BW,QAAAA,qBAAqB,EAAE,IAAI7C,SAAJ,CAAc,KAAKe,EAAnB,EAAuBmB,SAAvB,CAHG;AAI1BoB,QAAAA,YAAY,EAAEpB,SAAS,CAACoB;AAJE,OAAf,CAAb;AAMA,WAAKrC,oBAAL,CAA0BQ,aAA1B,IAA2CkB,UAA3C;;AACA,WAAKY,gBAAL;;AACA,aAAOZ,UAAP;AACD;;AACD,WAAO,IAAP;AACD;;AAEDjB,EAAAA,iBAAiB,CAACD,aAAD,EAAgB;AAC/B,UAAMkB,UAAU,GAAG,KAAK1B,oBAAL,CAA0BQ,aAA1B,CAAnB;;AACA,QAAIkB,UAAJ,EAAgB;AACd,UAAIA,UAAU,CAACC,MAAf,EAAuB;AACrBD,QAAAA,UAAU,CAACC,MAAX,CAAkBpB,MAAlB;AACD;;AACD,UAAImB,UAAU,CAACa,WAAf,EAA4B;AAC1Bb,QAAAA,UAAU,CAACa,WAAX,CAAuBhC,MAAvB;AACD;;AACD,aAAO,KAAKP,oBAAL,CAA0BQ,aAA1B,CAAP;;AACA,WAAK8B,gBAAL;AACD;AACF;;AAIDtB,EAAAA,gBAAgB,CAACR,aAAD,EAAgBS,SAAhB,EAA2B;AACzC,UAAMuB,QAAQ,GAAGvB,SAAS,CAACwB,oBAAV,CAA+B,KAAK5B,IAApC,CAAjB;;AAEA,QAAI2B,QAAJ,EAAc;AACZ,UAAIzB,UAAJ;AACA,UAAIW,UAAU,GAAG,KAAK1B,oBAAL,CAA0BQ,aAA1B,CAAjB;;AACA,UAAIkB,UAAJ,EAAgB;AACdX,QAAAA,UAAU,GAAGE,SAAS,CAAChB,WAAV,EAAb;AACD,OAFD,MAEO;AAELyB,QAAAA,UAAU,GAAG,KAAKS,iBAAL,CAAuB3B,aAAvB,EAAsCS,SAAtC,CAAb;AACAF,QAAAA,UAAU,GAAG,IAAb;AACD;;AAED,UAAIA,UAAJ,EAAgB;AACd,aAAK2B,kBAAL,CAAwBhB,UAAxB,EAAoCc,QAApC;;AACA,eAAO,IAAP;AACD;AACF;;AAED,WAAO,KAAP;AACD;;AAGDF,EAAAA,gBAAgB,GAAG;AACjB,QAAI,KAAKpC,SAAT,EAAoB;AAClB,WAAKA,SAAL,CAAeK,MAAf;AACA,WAAKL,SAAL,GAAiB,IAAjB;AACD;AACF;;AAGDiB,EAAAA,YAAY,GAAG;AACb,QAAIwB,MAAM,CAACC,IAAP,CAAY,KAAK5C,oBAAjB,EAAuC6C,MAAvC,KAAkD,CAAtD,EAAyD;AAEvD;AACD;;AACD,SAAK3C,SAAL,GAAiB,IAAIvB,SAAJ,CACf,KAAKmB,EADU,EAEf6C,MAAM,CAACG,MAAP,CACE;AACExB,MAAAA,YAAY,EAAE,KAAKnB;AADrB,KADF,EAIEtB,UAAU,CAAC,KAAKmB,oBAAN,CAJZ,EAKEpB,UAAU,CAAC,KAAKoB,oBAAN,CALZ,CAFe,CAAjB;AAUD;;AAGD+C,EAAAA,wBAAwB,CAACrB,UAAD,EAAac,QAAb,EAAuB;AAAA,UACtCvB,SADsC,GACzBS,UADyB,CACtCT,SADsC;AAAA,UAEtC+B,IAFsC,GAE9B/B,SAF8B,CAEtC+B,IAFsC;AAI7C,QAAIC,OAAJ;;AACA,QAAIhC,SAAS,CAACiC,QAAd,EAAwB;AACtBD,MAAAA,OAAO,GAAG,IAAIjE,aAAJ,CAAkB,KAAKc,EAAvB,EAA2B;AAACoD,QAAAA,QAAQ,EAAE,IAAX;AAAiBC,QAAAA,KAAK,EAAElC,SAAS,CAACkC,KAAlC;AAAyCH,QAAAA;AAAzC,OAA3B,CAAV;AACD,KAFD,MAEO;AACLC,MAAAA,OAAO,GAAG,IAAIjE,aAAJ,CAAkB,KAAKc,EAAvB,EAA2B;AACnCoD,QAAAA,QAAQ,EAAE,KADyB;AAEnCvB,QAAAA,MAAM,EAAEV,SAAS,CAACmC,SAAV,EAF2B;AAGnCC,QAAAA,OAAO,EAAE,CAH0B;AAInCL,QAAAA,IAJmC;AAOnCG,QAAAA,KAAK,EAAElC,SAAS,CAACqC,cAAV,GAA2B,IAA3B,GAAkCrC,SAAS,CAACkC;AAPhB,OAA3B,CAAV;AASD;;AACD,UAAMI,SAAS,GAAG7B,UAAU,CAACC,MAAX,IAAqBsB,OAAvC;AACA,UAAMO,QAAQ,GAAG,KAAKrD,YAAL,GAAoB6C,IAArC;AACA,UAAMS,UAAU,GAAIF,SAAS,YAAY7E,MAArB,IAA+B6E,SAAS,CAACG,eAAV,EAAhC,IAAgEF,QAAnF;AAKA,QAAI7B,MAAM,GAAGD,UAAU,CAACa,WAAxB;AACAb,IAAAA,UAAU,CAACa,WAAX,GAAyBb,UAAU,CAACC,MAApC;;AAEA,QAAI,CAACA,MAAL,EAAa;AACXA,MAAAA,MAAM,GAAG,IAAIjD,MAAJ,CAAW,KAAKoB,EAAhB,EAAoB;AAC3B6D,QAAAA,IAAI,EAAE,IAAIC,YAAJ,CAAiBJ,QAAjB,CADqB;AAE3BK,QAAAA,KAAK;AAFsB,OAApB,CAAT;AAID,KALD,MAKO,IAAIlC,MAAM,CAAC+B,eAAP,KAA2BF,QAA/B,EAAyC;AAE9C7B,MAAAA,MAAM,CAACmC,OAAP,CAAe;AACbH,QAAAA,IAAI,EAAE,IAAIC,YAAJ,CAAiBJ,QAAjB;AADO,OAAf;AAGD;;AAED9B,IAAAA,UAAU,CAACE,qBAAX,CAAiClB,MAAjC,CAAwC;AAACiB,MAAAA;AAAD,KAAxC;AAEA7C,IAAAA,SAAS,CAAC;AACRyE,MAAAA,SADQ;AAERN,MAAAA,OAFQ;AAGRQ,MAAAA,UAHQ;AAIRD,MAAAA,QAJQ;AAKRO,MAAAA,gBAAgB,EAAErC,UAAU,CAACW,YALrB;AAMR2B,MAAAA,cAAc,EAAE/C,SAAS,CAACoB,YANlB;AAOR4B,MAAAA,OAAO,EAAEzB,QAAQ,CAAC0B;AAPV,KAAD,CAAT;AAUAxC,IAAAA,UAAU,CAACW,YAAX,GAA0BpB,SAAS,CAACoB,YAApC;AAEA,WAAO;AAACkB,MAAAA,SAAD;AAAYN,MAAAA,OAAZ;AAAqBtB,MAAAA;AAArB,KAAP;AACD;;AAIDe,EAAAA,kBAAkB,CAAChB,UAAD,EAAac,QAAb,EAAuB;AAEvCrD,IAAAA,MAAM,CAACqD,QAAQ,IAAIA,QAAQ,CAAClD,QAAT,GAAoB,CAAjC,CAAN;AAEA,SAAKW,WAAL,GAAmB,IAAnB;AAEA,UAAMkE,kBAAkB,GAAGxB,MAAM,CAACG,MAAP,CAAc,EAAd,EAAkBzD,2BAAlB,EAA+CmD,QAA/C,CAA3B;AAGAd,IAAAA,UAAU,CAAC0C,KAAX,CACEzB,MAAM,CAACG,MAAP,CAAc,EAAd,EAAkB,KAAKC,wBAAL,CAA8BrB,UAA9B,EAA0Cc,QAA1C,CAAlB,EAAuE2B,kBAAvE,CADF;AAGD;;AApR6C","sourcesContent":["import GL from '@luma.gl/constants';\nimport {Buffer, Transform} from '@luma.gl/core';\nimport {getShaders, getBuffers, padBuffer} from './attribute-transition-utils';\nimport Attribute from './attribute';\nimport BaseAttribute from './base-attribute';\nimport Transition from '../transitions/transition';\nimport log from '../utils/log';\nimport assert from '../utils/assert';\n\nconst noop = () => {};\nconst DEFAULT_TRANSITION_SETTINGS = {\n  duration: 0,\n  easing: t => t,\n  onStart: noop,\n  onEnd: noop,\n  onInterrupt: noop\n};\n\nexport default class AttributeTransitionManager {\n  constructor(gl, {id}) {\n    this.id = id;\n    this.gl = gl;\n\n    this.attributeTransitions = {};\n    this.needsRedraw = false;\n    this.transform = null;\n    this.numInstances = 0;\n\n    if (Transform.isSupported(gl)) {\n      this.isSupported = true;\n    } else if (gl) {\n      // This class may be instantiated without a WebGL context (e.g. web worker)\n      log.warn('WebGL2 not supported by this browser. Transition animation is disabled.')();\n    }\n  }\n\n  finalize() {\n    if (this.transform) {\n      this.transform.delete();\n    }\n    for (const attributeName in this.attributeTransitions) {\n      this._removeTransition(attributeName);\n    }\n  }\n\n  /* Public methods */\n\n  // Called when attribute manager updates\n  // Check the latest attributes for updates.\n  update({attributes, transitions = {}, numInstances}) {\n    this.opts = transitions;\n    // Transform class will crash if elementCount is 0\n    this.numInstances = numInstances || 1;\n\n    if (!this.isSupported) {\n      return;\n    }\n\n    const {attributeTransitions} = this;\n    const changedTransitions = {};\n\n    for (const attributeName in attributes) {\n      const hasChanged = this._updateAttribute(attributeName, attributes[attributeName]);\n\n      if (hasChanged) {\n        changedTransitions[attributeName] = attributeTransitions[attributeName];\n      }\n    }\n\n    for (const attributeName in attributeTransitions) {\n      const attribute = attributes[attributeName];\n\n      if (!attribute || !attribute.supportsTransition()) {\n        // Animated attribute has been removed\n        this._removeTransition(attributeName);\n      }\n    }\n\n    if (!this.transform) {\n      this._createModel();\n    } else if (this.transform) {\n      const {sourceBuffers, feedbackBuffers} = getBuffers(changedTransitions);\n      this.transform.update({\n        elementCount: this.numInstances,\n        sourceBuffers,\n        feedbackBuffers\n      });\n    }\n  }\n\n  // Returns `true` if attribute is transition-enabled\n  hasAttribute(attributeName) {\n    return attributeName in this.attributeTransitions;\n  }\n\n  // Get all the animated attributes\n  getAttributes() {\n    const animatedAttributes = {};\n\n    for (const attributeName in this.attributeTransitions) {\n      const transition = this.attributeTransitions[attributeName];\n\n      if (transition.buffer) {\n        animatedAttributes[attributeName] = transition.attributeInTransition;\n      }\n    }\n\n    return animatedAttributes;\n  }\n\n  /* eslint-disable max-statements */\n  // Called every render cycle, run transform feedback\n  // Returns `true` if anything changes\n  setCurrentTime(currentTime) {\n    if (!this.transform || this.numInstances === 0) {\n      return false;\n    }\n\n    const uniforms = {};\n\n    let needsRedraw = this.needsRedraw;\n    this.needsRedraw = false;\n\n    for (const attributeName in this.attributeTransitions) {\n      const transition = this.attributeTransitions[attributeName];\n      const updated = transition.update(currentTime);\n      if (updated) {\n        uniforms[`${attributeName}Time`] = transition.time;\n        needsRedraw = true;\n      }\n    }\n\n    if (needsRedraw) {\n      this.transform.run({uniforms});\n    }\n\n    return needsRedraw;\n  }\n  /* eslint-enable max-statements */\n\n  /* Private methods */\n  _createTransition(attributeName, attribute) {\n    let transition = this.attributeTransitions[attributeName];\n    if (!transition) {\n      transition = new Transition({\n        name: attributeName,\n        attribute,\n        attributeInTransition: new Attribute(this.gl, attribute),\n        bufferLayout: attribute.bufferLayout\n      });\n      this.attributeTransitions[attributeName] = transition;\n      this._invalidateModel();\n      return transition;\n    }\n    return null;\n  }\n\n  _removeTransition(attributeName) {\n    const transition = this.attributeTransitions[attributeName];\n    if (transition) {\n      if (transition.buffer) {\n        transition.buffer.delete();\n      }\n      if (transition._swapBuffer) {\n        transition._swapBuffer.delete();\n      }\n      delete this.attributeTransitions[attributeName];\n      this._invalidateModel();\n    }\n  }\n\n  // Check an attributes for updates\n  // Returns a transition object if a new transition is triggered.\n  _updateAttribute(attributeName, attribute) {\n    const settings = attribute.getTransitionSetting(this.opts);\n\n    if (settings) {\n      let hasChanged;\n      let transition = this.attributeTransitions[attributeName];\n      if (transition) {\n        hasChanged = attribute.needsRedraw();\n      } else {\n        // New animated attributes have been added\n        transition = this._createTransition(attributeName, attribute);\n        hasChanged = true;\n      }\n\n      if (hasChanged) {\n        this._triggerTransition(transition, settings);\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  // Invalidates the current model\n  _invalidateModel() {\n    if (this.transform) {\n      this.transform.delete();\n      this.transform = null;\n    }\n  }\n\n  // Create a model for the transform feedback\n  _createModel() {\n    if (Object.keys(this.attributeTransitions).length === 0) {\n      // no transitions\n      return;\n    }\n    this.transform = new Transform(\n      this.gl,\n      Object.assign(\n        {\n          elementCount: this.numInstances\n        },\n        getBuffers(this.attributeTransitions),\n        getShaders(this.attributeTransitions)\n      )\n    );\n  }\n\n  // get current values of an attribute, clipped/padded to the size of the new buffer\n  _getNextTransitionStates(transition, settings) {\n    const {attribute} = transition;\n    const {size} = attribute;\n\n    let toState;\n    if (attribute.constant) {\n      toState = new BaseAttribute(this.gl, {constant: true, value: attribute.value, size});\n    } else {\n      toState = new BaseAttribute(this.gl, {\n        constant: false,\n        buffer: attribute.getBuffer(),\n        divisor: 0,\n        size,\n        // attribute's `value` does not match the content of external buffer,\n        // will need to call buffer.getData if needed\n        value: attribute.externalBuffer ? null : attribute.value\n      });\n    }\n    const fromState = transition.buffer || toState;\n    const toLength = this.numInstances * size;\n    const fromLength = (fromState instanceof Buffer && fromState.getElementCount()) || toLength;\n\n    // Alternate between two buffers when new transitions start.\n    // Last destination buffer is used as an attribute (from state),\n    // And the other buffer is now the destination buffer.\n    let buffer = transition._swapBuffer;\n    transition._swapBuffer = transition.buffer;\n\n    if (!buffer) {\n      buffer = new Buffer(this.gl, {\n        data: new Float32Array(toLength),\n        usage: GL.DYNAMIC_COPY\n      });\n    } else if (buffer.getElementCount() < toLength) {\n      // Pad buffers to be the same length\n      buffer.setData({\n        data: new Float32Array(toLength)\n      });\n    }\n\n    transition.attributeInTransition.update({buffer});\n\n    padBuffer({\n      fromState,\n      toState,\n      fromLength,\n      toLength,\n      fromBufferLayout: transition.bufferLayout,\n      toBufferLayout: attribute.bufferLayout,\n      getData: settings.enter\n    });\n\n    transition.bufferLayout = attribute.bufferLayout;\n\n    return {fromState, toState, buffer};\n  }\n\n  // Start a new transition using the current settings\n  // Updates transition state and from/to buffer\n  _triggerTransition(transition, settings) {\n    // Check if settings is valid\n    assert(settings && settings.duration > 0);\n\n    this.needsRedraw = true;\n\n    const transitionSettings = Object.assign({}, DEFAULT_TRANSITION_SETTINGS, settings);\n\n    // Attribute descriptor to transition from\n    transition.start(\n      Object.assign({}, this._getNextTransitionStates(transition, settings), transitionSettings)\n    );\n  }\n}\n"],"file":"attribute-transition-manager.js"}