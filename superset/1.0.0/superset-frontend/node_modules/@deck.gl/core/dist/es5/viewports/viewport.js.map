{"version":3,"sources":["../../../src/viewports/viewport.js"],"names":["DEGREES_TO_RADIANS","Math","PI","IDENTITY","ZERO_VECTOR","DEFAULT_ZOOM","ERR_ARGUMENT","Viewport","opts","id","x","y","width","height","constructor","displayName","_initViewMatrix","_initProjectionMatrix","_initPixelMatrices","equals","bind","project","unproject","projectPosition","unprojectPosition","projectFlat","unprojectFlat","getMatrices","viewport","scale","projectionMatrix","viewMatrix","xyz","topLeft","worldPosition","coord","pixelProjectionMatrix","y2","length","targetZ","z","targetZWorld","distanceScales","pixelsPerMeter","pixelUnprojectionMatrix","X","Y","Z","Number","isFinite","metersPerPixel","isGeospatial","coordinateOrigin","longitude","latitude","highPrecision","modelMatrix","modelViewProjectionMatrix","viewProjectionMatrix","mat4","multiply","invert","matrices","Object","assign","cameraPosition","cameraDirection","cameraUp","lngLatZ","lng","lat","_metersToLngLatDelta","deltaLng","deltaLat","deltaZ","degreesPerPixel","orthographic","fovyRadians","aspect","focalDistance","near","far","Matrix4","fovy","perspective","zoom","position","log2","pow","Vector3","meterOffset","transformVector","center","_getCenterInWorld","viewMatrixUncentered","multiplyRight","translate","negate","center2d","pixelPosition","add","fovyDegrees","orthographicFocalDistance","radians","_createProjectionMatrix","vpm","viewMatrixInverse","eye","direction","up","viewportMatrix","log","warn"],"mappings":"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","sourcesContent":["// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nimport log from '../utils/log';\nimport {createMat4, extractCameraVectors} from '../utils/math-utils';\n\nimport {Matrix4, Vector3, equals} from 'math.gl';\nimport * as mat4 from 'gl-matrix/mat4';\n\nimport {\n  getDistanceScales,\n  getMeterZoom,\n  lngLatToWorld,\n  worldToLngLat,\n  worldToPixels,\n  pixelsToWorld\n} from 'viewport-mercator-project';\n\nimport assert from '../utils/assert';\n\nconst DEGREES_TO_RADIANS = Math.PI / 180;\n\nconst IDENTITY = createMat4();\n\nconst ZERO_VECTOR = [0, 0, 0];\n\nconst DEFAULT_ZOOM = 0;\n\nconst ERR_ARGUMENT = 'Illegal argument to Viewport';\n\nexport default class Viewport {\n  /**\n   * @classdesc\n   * Manages coordinate system transformations for deck.gl.\n   *\n   * Note: The Viewport is immutable in the sense that it only has accessors.\n   * A new viewport instance should be created if any parameters have changed.\n   */\n  constructor(opts = {}) {\n    const {\n      id = null,\n      // Window width/height in pixels (for pixel projection)\n      x = 0,\n      y = 0,\n      width = 1,\n      height = 1\n    } = opts;\n\n    this.id = id || this.constructor.displayName || 'viewport';\n\n    this.x = x;\n    this.y = y;\n    // Silently allow apps to send in w,h = 0,0\n    this.width = width || 1;\n    this.height = height || 1;\n\n    this._initViewMatrix(opts);\n    this._initProjectionMatrix(opts);\n    this._initPixelMatrices();\n\n    // Bind methods for easy access\n    this.equals = this.equals.bind(this);\n    this.project = this.project.bind(this);\n    this.unproject = this.unproject.bind(this);\n    this.projectPosition = this.projectPosition.bind(this);\n    this.unprojectPosition = this.unprojectPosition.bind(this);\n    this.projectFlat = this.projectFlat.bind(this);\n    this.unprojectFlat = this.unprojectFlat.bind(this);\n    this.getMatrices = this.getMatrices.bind(this);\n  }\n\n  // Two viewports are equal if width and height are identical, and if\n  // their view and projection matrices are (approximately) equal.\n  equals(viewport) {\n    if (!(viewport instanceof Viewport)) {\n      return false;\n    }\n\n    return (\n      viewport.width === this.width &&\n      viewport.height === this.height &&\n      viewport.scale === this.scale &&\n      equals(viewport.projectionMatrix, this.projectionMatrix) &&\n      equals(viewport.viewMatrix, this.viewMatrix)\n    );\n    // TODO - check distance scales?\n  }\n\n  /**\n   * Projects xyz (possibly latitude and longitude) to pixel coordinates in window\n   * using viewport projection parameters\n   * - [longitude, latitude] to [x, y]\n   * - [longitude, latitude, Z] => [x, y, z]\n   * Note: By default, returns top-left coordinates for canvas/SVG type render\n   *\n   * @param {Array} lngLatZ - [lng, lat] or [lng, lat, Z]\n   * @param {Object} opts - options\n   * @param {Object} opts.topLeft=true - Whether projected coords are top left\n   * @return {Array} - [x, y] or [x, y, z] in top left coords\n   */\n  project(xyz, {topLeft = true} = {}) {\n    const worldPosition = this.projectPosition(xyz);\n    const coord = worldToPixels(worldPosition, this.pixelProjectionMatrix);\n\n    const [x, y] = coord;\n    const y2 = topLeft ? y : this.height - y;\n    return xyz.length === 2 ? [x, y2] : [x, y2, coord[2]];\n  }\n\n  /**\n   * Unproject pixel coordinates on screen onto world coordinates,\n   * (possibly [lon, lat]) on map.\n   * - [x, y] => [lng, lat]\n   * - [x, y, z] => [lng, lat, Z]\n   * @param {Array} xyz -\n   * @param {Object} opts - options\n   * @param {Object} opts.topLeft=true - Whether origin is top left\n   * @return {Array|null} - [lng, lat, Z] or [X, Y, Z]\n   */\n  unproject(xyz, {topLeft = true, targetZ} = {}) {\n    const [x, y, z] = xyz;\n\n    const y2 = topLeft ? y : this.height - y;\n    const targetZWorld = targetZ && targetZ * this.distanceScales.pixelsPerMeter[2];\n    const coord = pixelsToWorld([x, y2, z], this.pixelUnprojectionMatrix, targetZWorld);\n    const [X, Y, Z] = this.unprojectPosition(coord);\n\n    if (Number.isFinite(z)) {\n      return [X, Y, Z];\n    }\n    return Number.isFinite(targetZ) ? [X, Y, targetZ] : [X, Y];\n  }\n\n  // NON_LINEAR PROJECTION HOOKS\n  // Used for web meractor projection\n\n  projectPosition(xyz) {\n    const [X, Y] = this.projectFlat(xyz);\n    const Z = (xyz[2] || 0) * this.distanceScales.pixelsPerMeter[2];\n    return [X, Y, Z];\n  }\n\n  unprojectPosition(xyz) {\n    const [X, Y] = this.unprojectFlat(xyz);\n    const Z = (xyz[2] || 0) * this.distanceScales.metersPerPixel[2];\n    return [X, Y, Z];\n  }\n\n  /**\n   * Project [lng,lat] on sphere onto [x,y] on 512*512 Mercator Zoom 0 tile.\n   * Performs the nonlinear part of the web mercator projection.\n   * Remaining projection is done with 4x4 matrices which also handles\n   * perspective.\n   * @param {Array} lngLat - [lng, lat] coordinates\n   *   Specifies a point on the sphere to project onto the map.\n   * @return {Array} [x,y] coordinates.\n   */\n  projectFlat(xyz, scale = this.scale) {\n    if (this.isGeospatial) {\n      return lngLatToWorld(xyz, scale);\n    }\n    const {pixelsPerMeter} = this.distanceScales;\n    return [xyz[0] * pixelsPerMeter[0], xyz[1] * pixelsPerMeter[1]];\n  }\n\n  /**\n   * Unproject world point [x,y] on map onto {lat, lon} on sphere\n   * @param {object|Vector} xy - object with {x,y} members\n   *  representing point on projected map plane\n   * @return {GeoCoordinates} - object with {lat,lon} of point on sphere.\n   *   Has toArray method if you need a GeoJSON Array.\n   *   Per cartographic tradition, lat and lon are specified as degrees.\n   */\n  unprojectFlat(xyz, scale = this.scale) {\n    if (this.isGeospatial) {\n      return worldToLngLat(xyz, scale);\n    }\n    const {metersPerPixel} = this.distanceScales;\n    return [xyz[0] * metersPerPixel[0], xyz[1] * metersPerPixel[1]];\n  }\n\n  getDistanceScales(coordinateOrigin = null) {\n    if (coordinateOrigin) {\n      return getDistanceScales({\n        longitude: coordinateOrigin[0],\n        latitude: coordinateOrigin[1],\n        scale: this.scale,\n        highPrecision: true\n      });\n    }\n    return this.distanceScales;\n  }\n\n  getMatrices({modelMatrix = null} = {}) {\n    let modelViewProjectionMatrix = this.viewProjectionMatrix;\n    let pixelProjectionMatrix = this.pixelProjectionMatrix;\n    let pixelUnprojectionMatrix = this.pixelUnprojectionMatrix;\n\n    if (modelMatrix) {\n      modelViewProjectionMatrix = mat4.multiply([], this.viewProjectionMatrix, modelMatrix);\n      pixelProjectionMatrix = mat4.multiply([], this.pixelProjectionMatrix, modelMatrix);\n      pixelUnprojectionMatrix = mat4.invert([], pixelProjectionMatrix);\n    }\n\n    const matrices = Object.assign({\n      modelViewProjectionMatrix,\n      viewProjectionMatrix: this.viewProjectionMatrix,\n      viewMatrix: this.viewMatrix,\n      projectionMatrix: this.projectionMatrix,\n\n      // project/unproject between pixels and world\n      pixelProjectionMatrix,\n      pixelUnprojectionMatrix,\n\n      width: this.width,\n      height: this.height,\n      scale: this.scale\n    });\n\n    return matrices;\n  }\n\n  containsPixel({x, y, width = 1, height = 1}) {\n    return (\n      x < this.x + this.width &&\n      this.x < x + width &&\n      y < this.y + this.height &&\n      this.y < y + height\n    );\n  }\n\n  // EXPERIMENTAL METHODS\n\n  getCameraPosition() {\n    return this.cameraPosition;\n  }\n\n  getCameraDirection() {\n    return this.cameraDirection;\n  }\n\n  getCameraUp() {\n    return this.cameraUp;\n  }\n\n  // INTERNAL METHODS\n\n  // TODO - these are duplicating WebMercator methods\n  _addMetersToLngLat(lngLatZ, xyz) {\n    const [lng, lat, Z = 0] = lngLatZ;\n    const [deltaLng, deltaLat, deltaZ = 0] = this._metersToLngLatDelta(xyz);\n    return lngLatZ.length === 2\n      ? [lng + deltaLng, lat + deltaLat]\n      : [lng + deltaLng, lat + deltaLat, Z + deltaZ];\n  }\n\n  _metersToLngLatDelta(xyz) {\n    const [x, y, z = 0] = xyz;\n    assert(Number.isFinite(x) && Number.isFinite(y) && Number.isFinite(z), ERR_ARGUMENT);\n    const {pixelsPerMeter, degreesPerPixel} = this.distanceScales;\n    const deltaLng = x * pixelsPerMeter[0] * degreesPerPixel[0];\n    const deltaLat = y * pixelsPerMeter[1] * degreesPerPixel[1];\n    return xyz.length === 2 ? [deltaLng, deltaLat] : [deltaLng, deltaLat, z];\n  }\n\n  _createProjectionMatrix({orthographic, fovyRadians, aspect, focalDistance, near, far}) {\n    assert(Number.isFinite(fovyRadians));\n    return orthographic\n      ? new Matrix4().orthographic({fovy: fovyRadians, aspect, focalDistance, near, far})\n      : new Matrix4().perspective({fovy: fovyRadians, aspect, near, far});\n  }\n\n  /* eslint-disable complexity, max-statements */\n  _initViewMatrix(opts) {\n    const {\n      // view matrix\n      viewMatrix = IDENTITY,\n\n      longitude = null, // Anchor: lng lat zoom makes viewport work w/ geospatial coordinate systems\n      latitude = null,\n      zoom = null,\n\n      position = null, // Anchor position offset (in meters for geospatial viewports)\n      modelMatrix = null, // A model matrix to be applied to position, to match the layer props API\n      focalDistance = 1, // Only needed for orthographic views\n\n      distanceScales = null\n    } = opts;\n\n    // Check if we have a geospatial anchor\n    this.isGeospatial = Number.isFinite(latitude) && Number.isFinite(longitude);\n\n    this.zoom = zoom;\n    if (!Number.isFinite(this.zoom)) {\n      this.zoom = this.isGeospatial\n        ? getMeterZoom({latitude}) + Math.log2(focalDistance)\n        : DEFAULT_ZOOM;\n    }\n    const scale = Math.pow(2, this.zoom);\n    this.scale = scale;\n\n    // Calculate distance scales if lng/lat/zoom are provided\n    this.distanceScales = this.isGeospatial\n      ? getDistanceScales({latitude, longitude, scale: this.scale})\n      : distanceScales || {\n          pixelsPerMeter: [scale, scale, scale],\n          metersPerPixel: [1 / scale, 1 / scale, 1 / scale]\n        };\n\n    this.focalDistance = focalDistance;\n\n    this.distanceScales.metersPerPixel = new Vector3(this.distanceScales.metersPerPixel);\n    this.distanceScales.pixelsPerMeter = new Vector3(this.distanceScales.pixelsPerMeter);\n\n    this.position = ZERO_VECTOR;\n    this.meterOffset = ZERO_VECTOR;\n    if (position) {\n      // Apply model matrix if supplied\n      this.position = position;\n      this.modelMatrix = modelMatrix;\n      this.meterOffset = modelMatrix ? modelMatrix.transformVector(position) : position;\n    }\n\n    if (this.isGeospatial) {\n      // Determine camera center\n      this.longitude = longitude;\n      this.latitude = latitude;\n      this.center = this._getCenterInWorld({longitude, latitude});\n\n      // Flip Y to match the orientation of the Mercator plane\n      this.viewMatrixUncentered = mat4.scale([], viewMatrix, [1, -1, 1]);\n    } else {\n      this.center = position ? this.projectPosition(position) : [0, 0, 0];\n      this.viewMatrixUncentered = viewMatrix;\n    }\n    // Make a centered version of the matrix for projection modes without an offset\n    this.viewMatrix = new Matrix4()\n      // Apply the uncentered view matrix\n      .multiplyRight(this.viewMatrixUncentered)\n      // And center it\n      .translate(new Vector3(this.center || ZERO_VECTOR).negate());\n  }\n  /* eslint-enable complexity, max-statements */\n\n  _getCenterInWorld({longitude, latitude}) {\n    const {meterOffset, scale, distanceScales} = this;\n\n    // Make a centered version of the matrix for projection modes without an offset\n    const center2d = this.projectFlat([longitude, latitude], scale);\n    const center = new Vector3(center2d[0], center2d[1], 0);\n\n    if (meterOffset) {\n      const pixelPosition = new Vector3(meterOffset)\n        // Convert to pixels in current zoom\n        .scale(distanceScales.pixelsPerMeter);\n      center.add(pixelPosition);\n    }\n\n    return center;\n  }\n\n  _initProjectionMatrix(opts) {\n    const {\n      // Projection matrix\n      projectionMatrix = null,\n\n      // Projection matrix parameters, used if projectionMatrix not supplied\n      orthographic = false,\n      fovyRadians,\n      fovyDegrees,\n      fovy,\n      near = 0.1, // Distance of near clipping plane\n      far = 1000, // Distance of far clipping plane\n      focalDistance = 1, // Only needed for orthographic views\n      orthographicFocalDistance\n    } = opts;\n\n    const radians = fovyRadians || (fovyDegrees || fovy || 75) * DEGREES_TO_RADIANS;\n\n    this.projectionMatrix =\n      projectionMatrix ||\n      this._createProjectionMatrix({\n        orthographic,\n        fovyRadians: radians,\n        aspect: this.width / this.height,\n        focalDistance: orthographicFocalDistance || focalDistance,\n        near,\n        far\n      });\n  }\n\n  _initPixelMatrices() {\n    // Note: As usual, matrix operations should be applied in \"reverse\" order\n    // since vectors will be multiplied in from the right during transformation\n    const vpm = createMat4();\n    mat4.multiply(vpm, vpm, this.projectionMatrix);\n    mat4.multiply(vpm, vpm, this.viewMatrix);\n    this.viewProjectionMatrix = vpm;\n\n    // console.log('VPM', this.viewMatrix, this.projectionMatrix, this.viewProjectionMatrix);\n\n    // Calculate inverse view matrix\n    this.viewMatrixInverse = mat4.invert([], this.viewMatrix) || this.viewMatrix;\n\n    // Decompose camera directions\n    const {eye, direction, up} = extractCameraVectors({\n      viewMatrix: this.viewMatrix,\n      viewMatrixInverse: this.viewMatrixInverse\n    });\n    this.cameraPosition = eye;\n    this.cameraDirection = direction;\n    this.cameraUp = up;\n\n    // console.log(this.cameraPosition, this.cameraDirection, this.cameraUp);\n\n    /*\n     * Builds matrices that converts preprojected lngLats to screen pixels\n     * and vice versa.\n     * Note: Currently returns bottom-left coordinates!\n     * Note: Starts with the GL projection matrix and adds steps to the\n     *       scale and translate that matrix onto the window.\n     * Note: WebGL controls clip space to screen projection with gl.viewport\n     *       and does not need this step.\n     */\n\n    // matrix for conversion from world location to screen (pixel) coordinates\n    const viewportMatrix = createMat4(); // matrix from NDC to viewport.\n    const pixelProjectionMatrix = createMat4(); // matrix from world space to viewport.\n    mat4.scale(viewportMatrix, viewportMatrix, [this.width / 2, -this.height / 2, 1]);\n    mat4.translate(viewportMatrix, viewportMatrix, [1, -1, 0]);\n    mat4.multiply(pixelProjectionMatrix, viewportMatrix, this.viewProjectionMatrix);\n    this.pixelProjectionMatrix = pixelProjectionMatrix;\n    this.viewportMatrix = viewportMatrix;\n\n    this.pixelUnprojectionMatrix = mat4.invert(createMat4(), this.pixelProjectionMatrix);\n    if (!this.pixelUnprojectionMatrix) {\n      log.warn('Pixel project matrix not invertible')();\n      // throw new Error('Pixel project matrix not invertible');\n    }\n  }\n}\n\nViewport.displayName = 'Viewport';\n"],"file":"viewport.js"}