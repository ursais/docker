{"version":3,"sources":["../../../src/lib/attribute.js"],"names":["DEFAULT_STATE","isExternalBuffer","needsUpdate","needsRedraw","updateRanges","range","FULL","allocedInstances","Attribute","gl","opts","transition","noAlloc","update","accessor","bufferLayout","defaultValue","Array","isArray","shaderAttributes","hasShaderAttributes","shaderAttributeName","shaderAttribute","Object","assign","id","constant","isIndexed","elements","size","value","divisor","instanced","buffer","getBuffer","userData","_standardAccessor","seal","_validateAttributeUpdaters","clearChangedFlags","length","concat","settings","find","a","Number","isFinite","duration","reason","dataRange","startRow","endRow","Infinity","add","EMPTY","numInstances","state","instanceCount","getInstanceCount","needsAlloc","allocCount","Math","max","ArrayType","glArrayFromType","type","oldValue","byteLength","reallocate","set","subData","setNeedsUpdate","data","props","context","updated","call","startOffset","_getVertexOffset","endOffset","subarray","offset","BYTES_PER_ELEMENT","_checkAttributeArray","_updateShaderAttributes","clearNeedsUpdate","undefined","_normalizeValue","hasChanged","_areValuesEqual","Buffer","externalBuffer","ArrayBuffer","isView","Error","auto","log","warn","name","row","index","geometrySize","out","start","value1","value2","i","attribute","accessorFunc","iterable","objectInfo","object","objectValue","target","numVertices","source","count","hasUpdater","valid","layout","BaseAttribute","glType","clamped","Float32Array","Uint16Array","Uint32Array","Uint8ClampedArray","Uint8Array","Int8Array","Int16Array","Int32Array"],"mappings":"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","sourcesContent":["/* eslint-disable complexity */\nimport GL from '@luma.gl/constants';\nimport {Buffer} from '@luma.gl/core';\nimport assert from '../utils/assert';\nimport {createIterable} from '../utils/iterable-utils';\nimport {fillArray} from '../utils/flatten';\nimport * as range from '../utils/range';\nimport log from '../utils/log';\nimport BaseAttribute from './base-attribute';\n\nconst DEFAULT_STATE = {\n  isExternalBuffer: false,\n  needsUpdate: true,\n  needsRedraw: false,\n  updateRanges: range.FULL,\n  allocedInstances: -1\n};\n\nexport default class Attribute extends BaseAttribute {\n  constructor(gl, opts = {}) {\n    super(gl, opts);\n\n    const {\n      // deck.gl fields\n      transition = false,\n      noAlloc = false,\n      update = null,\n      accessor = null,\n      bufferLayout = null\n    } = opts;\n\n    let {defaultValue = [0, 0, 0, 0]} = opts;\n    defaultValue = Array.isArray(defaultValue) ? defaultValue : [defaultValue];\n\n    this.shaderAttributes = {};\n    this.hasShaderAttributes = false;\n\n    if (opts.shaderAttributes) {\n      const shaderAttributes = opts.shaderAttributes;\n      for (const shaderAttributeName in shaderAttributes) {\n        const shaderAttribute = shaderAttributes[shaderAttributeName];\n\n        // Initialize the attribute descriptor, with WebGL and metadata fields\n        this.shaderAttributes[shaderAttributeName] = new Attribute(\n          this.gl,\n          Object.assign({}, shaderAttribute, {\n            id: shaderAttributeName,\n            // Luma fields\n            constant: shaderAttribute.constant || false,\n            isIndexed: shaderAttribute.isIndexed || shaderAttribute.elements,\n            size: (shaderAttribute.elements && 1) || shaderAttribute.size || this.size,\n            value: shaderAttribute.value || null,\n            divisor: shaderAttribute.instanced || shaderAttribute.divisor || this.divisor,\n            buffer: this.getBuffer(),\n            noAlloc: true\n          })\n        );\n\n        this.hasShaderAttributes = true;\n      }\n    }\n\n    Object.assign(this.userData, DEFAULT_STATE, opts, {\n      transition,\n      noAlloc,\n      update: update || (accessor && this._standardAccessor),\n      accessor,\n      defaultValue,\n      bufferLayout\n    });\n\n    Object.seal(this.userData);\n\n    // Check all fields and generate helpful error messages\n    this._validateAttributeUpdaters();\n  }\n\n  get bufferLayout() {\n    return this.userData.bufferLayout;\n  }\n\n  set bufferLayout(layout) {\n    this.userData.bufferLayout = layout;\n  }\n\n  needsUpdate() {\n    return this.userData.needsUpdate;\n  }\n\n  needsRedraw({clearChangedFlags = false} = {}) {\n    const needsRedraw = this.userData.needsRedraw;\n    this.userData.needsRedraw = this.userData.needsRedraw && !clearChangedFlags;\n    return needsRedraw;\n  }\n\n  getInstanceCount() {\n    return this.value !== null ? this.value.length / this.size : 0;\n  }\n\n  getUpdateTriggers() {\n    const {accessor} = this.userData;\n\n    // Backards compatibility: allow attribute name to be used as update trigger key\n    return [this.id].concat((typeof accessor !== 'function' && accessor) || []);\n  }\n\n  getAccessor() {\n    return this.userData.accessor;\n  }\n\n  getShaderAttributes() {\n    const shaderAttributes = {};\n    if (this.hasShaderAttributes) {\n      Object.assign(shaderAttributes, this.shaderAttributes);\n    } else {\n      shaderAttributes[this.id] = this;\n    }\n\n    return shaderAttributes;\n  }\n\n  supportsTransition() {\n    return this.userData.transition;\n  }\n\n  // Resolve transition settings object if transition is enabled, otherwise `null`\n  getTransitionSetting(opts) {\n    const {transition, accessor} = this.userData;\n    if (!transition) {\n      return null;\n    }\n    let settings = Array.isArray(accessor) ? opts[accessor.find(a => opts[a])] : opts[accessor];\n\n    // Shorthand: use duration instead of parameter object\n    if (Number.isFinite(settings)) {\n      settings = {duration: settings};\n    }\n\n    if (settings && settings.duration > 0) {\n      return Object.assign({}, transition, settings);\n    }\n\n    return null;\n  }\n\n  setNeedsUpdate(reason = this.id, dataRange) {\n    this.userData.needsUpdate = this.userData.needsUpdate || reason;\n    if (dataRange) {\n      const {startRow = 0, endRow = Infinity} = dataRange;\n      this.userData.updateRanges = range.add(this.userData.updateRanges, [startRow, endRow]);\n    } else {\n      this.userData.updateRanges = range.FULL;\n    }\n  }\n\n  clearNeedsUpdate() {\n    this.userData.needsUpdate = false;\n    this.userData.updateRanges = range.EMPTY;\n  }\n\n  setNeedsRedraw(reason = this.id) {\n    this.userData.needsRedraw = this.userData.needsRedraw || reason;\n  }\n\n  allocate(numInstances) {\n    const state = this.userData;\n\n    if (state.isExternalBuffer || state.noAlloc) {\n      // Data is provided through a Buffer object.\n      return false;\n    }\n\n    // Do we need to reallocate the attribute's typed array?\n    const instanceCount = this.getInstanceCount();\n    const needsAlloc = instanceCount === 0 || instanceCount < numInstances;\n    if (needsAlloc && (state.update || state.accessor)) {\n      assert(Number.isFinite(numInstances));\n      // Allocate at least one element to ensure a valid buffer\n      const allocCount = Math.max(numInstances, 1);\n      const ArrayType = glArrayFromType(this.type || GL.FLOAT);\n      const oldValue = this.value;\n\n      this.constant = false;\n      this.value = new ArrayType(this.size * allocCount);\n\n      if (this.buffer && this.buffer.byteLength < this.value.byteLength) {\n        this.buffer.reallocate(this.value.byteLength);\n      }\n\n      if (state.updateRanges !== range.FULL) {\n        this.value.set(oldValue);\n        // Upload the full existing attribute value to the GPU, so that updateBuffer\n        // can choose to only update a partial range.\n        // TODO - copy old buffer to new buffer on the GPU\n        this.buffer.subData(oldValue);\n      }\n\n      this.setNeedsUpdate(true, {startRow: instanceCount});\n      state.allocedInstances = allocCount;\n      return true;\n    }\n\n    return false;\n  }\n\n  updateBuffer({numInstances, bufferLayout, data, props, context}) {\n    if (!this.needsUpdate()) {\n      return false;\n    }\n\n    const state = this.userData;\n\n    const {update, updateRanges, noAlloc} = state;\n\n    let updated = true;\n    if (update) {\n      // Custom updater - typically for non-instanced layers\n      for (const [startRow, endRow] of updateRanges) {\n        update.call(context, this, {data, startRow, endRow, props, numInstances, bufferLayout});\n      }\n      if (this.constant || !this.buffer || this.buffer.byteLength < this.value.byteLength) {\n        // call base clas `update` method to upload value to GPU\n        this.update({\n          value: this.value,\n          constant: this.constant\n        });\n      } else {\n        for (const [startRow, endRow] of updateRanges) {\n          const startOffset = Number.isFinite(startRow)\n            ? this._getVertexOffset(startRow, this.bufferLayout)\n            : 0;\n          const endOffset = Number.isFinite(endRow)\n            ? this._getVertexOffset(endRow, this.bufferLayout)\n            : noAlloc || !Number.isFinite(numInstances)\n              ? this.value.length\n              : numInstances * this.size;\n\n          // Only update the changed part of the attribute\n          this.buffer.subData({\n            data: this.value.subarray(startOffset, endOffset),\n            offset: startOffset * this.value.BYTES_PER_ELEMENT\n          });\n        }\n      }\n      this._checkAttributeArray();\n    } else {\n      updated = false;\n    }\n\n    this._updateShaderAttributes();\n\n    this.clearNeedsUpdate();\n    state.needsRedraw = true;\n\n    return updated;\n  }\n\n  update(props) {\n    super.update(props);\n    this._updateShaderAttributes();\n  }\n\n  // Use generic value\n  // Returns true if successful\n  setGenericValue(value) {\n    const state = this.userData;\n\n    if (value === undefined || typeof value === 'function') {\n      // ignore if this attribute has no accessor\n      // ignore if accessor is function, will be used in updateBuffer\n      state.isExternalBuffer = false;\n      return false;\n    }\n\n    value = this._normalizeValue(value);\n    const hasChanged = !this.constant || !this._areValuesEqual(value, this.value);\n\n    if (hasChanged) {\n      this.update({constant: true, value});\n    }\n    state.needsRedraw = state.needsUpdate || hasChanged;\n    this.clearNeedsUpdate();\n    state.isExternalBuffer = true;\n    this._updateShaderAttributes();\n    return true;\n  }\n\n  // Use external buffer\n  // Returns true if successful\n  setExternalBuffer(buffer, numInstances) {\n    const state = this.userData;\n\n    if (buffer) {\n      state.isExternalBuffer = true;\n      this.clearNeedsUpdate();\n\n      if (buffer instanceof Buffer) {\n        if (this.externalBuffer !== buffer) {\n          this.update({constant: false, buffer});\n          state.needsRedraw = true;\n        }\n      } else if (this.value !== buffer) {\n        if (!ArrayBuffer.isView(buffer)) {\n          throw new Error('Attribute prop must be typed array');\n        }\n        if (state.auto && buffer.length <= numInstances * this.size) {\n          throw new Error('Attribute prop array must match length and size');\n        }\n\n        const ArrayType = glArrayFromType(this.type || GL.FLOAT);\n        if (buffer instanceof ArrayType) {\n          this.update({constant: false, value: buffer});\n        } else {\n          log.warn(`Attribute prop ${this.id} is casted to ${ArrayType.name}`)();\n          // Cast to proper type\n          this.update({constant: false, value: new ArrayType(buffer)});\n        }\n        // Save original typed array\n        this.value = buffer;\n        state.needsRedraw = true;\n      }\n      this._updateShaderAttributes();\n      return true;\n    }\n\n    state.isExternalBuffer = false;\n    return false;\n  }\n\n  // PRIVATE HELPER METHODS\n  _getVertexOffset(row, bufferLayout) {\n    if (bufferLayout) {\n      let offset = 0;\n      let index = 0;\n      for (const geometrySize of bufferLayout) {\n        if (index >= row) {\n          break;\n        }\n        offset += geometrySize * this.size;\n        index++;\n      }\n      return offset;\n    }\n    return row * this.size;\n  }\n\n  /* check user supplied values and apply fallback */\n  _normalizeValue(value, out = [], start = 0) {\n    const {defaultValue} = this.userData;\n\n    if (!Array.isArray(value) && !ArrayBuffer.isView(value)) {\n      out[start] = Number.isFinite(value) ? value : defaultValue[0];\n      return out;\n    }\n\n    /* eslint-disable no-fallthrough, default-case */\n    switch (this.size) {\n      case 4:\n        out[start + 3] = Number.isFinite(value[3]) ? value[3] : defaultValue[3];\n      case 3:\n        out[start + 2] = Number.isFinite(value[2]) ? value[2] : defaultValue[2];\n      case 2:\n        out[start + 1] = Number.isFinite(value[1]) ? value[1] : defaultValue[1];\n      case 1:\n        out[start + 0] = Number.isFinite(value[0]) ? value[0] : defaultValue[0];\n    }\n\n    return out;\n  }\n\n  _areValuesEqual(value1, value2, size = this.size) {\n    for (let i = 0; i < size; i++) {\n      if (value1[i] !== value2[i]) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  _standardAccessor(attribute, {data, startRow, endRow, props, numInstances, bufferLayout}) {\n    const state = attribute.userData;\n\n    const {accessor} = state;\n    const {value, size} = attribute;\n    const accessorFunc = typeof accessor === 'function' ? accessor : props[accessor];\n\n    assert(typeof accessorFunc === 'function', `accessor \"${accessor}\" is not a function`);\n\n    let i = attribute._getVertexOffset(startRow, bufferLayout);\n    const {iterable, objectInfo} = createIterable(data, startRow, endRow);\n    for (const object of iterable) {\n      objectInfo.index++;\n\n      const objectValue = accessorFunc(object, objectInfo);\n\n      if (bufferLayout) {\n        attribute._normalizeValue(objectValue, objectInfo.target);\n        const numVertices = bufferLayout[objectInfo.index];\n        fillArray({\n          target: attribute.value,\n          source: objectInfo.target,\n          start: i,\n          count: numVertices\n        });\n        i += numVertices * size;\n      } else {\n        attribute._normalizeValue(objectValue, value, i);\n        i += size;\n      }\n    }\n    attribute.constant = false;\n    attribute.bufferLayout = bufferLayout;\n  }\n\n  // Validate deck.gl level fields\n  _validateAttributeUpdaters() {\n    const state = this.userData;\n\n    // Check that either 'accessor' or 'update' is a valid function\n    const hasUpdater =\n      state.noAlloc || typeof state.update === 'function' || typeof state.accessor === 'string';\n    if (!hasUpdater) {\n      throw new Error(`Attribute ${this.id} missing update or accessor`);\n    }\n  }\n\n  _checkAttributeArray() {\n    const {value} = this;\n    if (value && value.length >= 4) {\n      const valid =\n        Number.isFinite(value[0]) &&\n        Number.isFinite(value[1]) &&\n        Number.isFinite(value[2]) &&\n        Number.isFinite(value[3]);\n      if (!valid) {\n        throw new Error(`Illegal attribute generated for ${this.id}`);\n      }\n    }\n  }\n\n  _updateShaderAttributes() {\n    const shaderAttributes = this.shaderAttributes;\n    for (const shaderAttributeName in shaderAttributes) {\n      const shaderAttribute = shaderAttributes[shaderAttributeName];\n      shaderAttribute.update({\n        buffer: this.getBuffer(),\n        value: this.value,\n        constant: this.constant\n      });\n    }\n  }\n}\n\n/* eslint-disable complexity */\nexport function glArrayFromType(glType, {clamped = true} = {}) {\n  // Sorted in some order of likelihood to reduce amount of comparisons\n  switch (glType) {\n    case GL.FLOAT:\n      return Float32Array;\n    case GL.UNSIGNED_SHORT:\n    case GL.UNSIGNED_SHORT_5_6_5:\n    case GL.UNSIGNED_SHORT_4_4_4_4:\n    case GL.UNSIGNED_SHORT_5_5_5_1:\n      return Uint16Array;\n    case GL.UNSIGNED_INT:\n      return Uint32Array;\n    case GL.UNSIGNED_BYTE:\n      return clamped ? Uint8ClampedArray : Uint8Array;\n    case GL.BYTE:\n      return Int8Array;\n    case GL.SHORT:\n      return Int16Array;\n    case GL.INT:\n      return Int32Array;\n    default:\n      throw new Error('Failed to deduce type from array');\n  }\n}\n/* eslint-enable complexity */\n"],"file":"attribute.js"}