{"version":3,"sources":["../../../src/utils/math-utils.js"],"names":["transformVector","matrix","vector","result","vec4","transformMat4","scale","multiply","createMat4","extractCameraVectors","viewMatrix","viewMatrixInverse","eye","direction","up","mod","value","divisor","Number","isFinite","modulus"],"mappings":";;;;;;;;;;;;;;AAEA;;AACA;;AAEO,SAASA,eAAT,CAAyBC,MAAzB,EAAiCC,MAAjC,EAAyC;AAE9C,MAAI,CAACD,MAAL,EAAa;AACX,WAAO,IAAP;AACD;;AACD,MAAME,MAAM,GAAGC,IAAI,CAACC,aAAL,CAAmB,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,CAAV,CAAnB,EAAiCH,MAAjC,EAAyCD,MAAzC,CAAf;AACA,MAAMK,KAAK,GAAG,IAAIH,MAAM,CAAC,CAAD,CAAxB;AACAC,EAAAA,IAAI,CAACG,QAAL,CAAcJ,MAAd,EAAsBA,MAAtB,EAA8B,CAACG,KAAD,EAAQA,KAAR,EAAeA,KAAf,EAAsBA,KAAtB,CAA9B;AACA,SAAOH,MAAP;AACD;;AAGM,SAASK,UAAT,GAAsB;AAC3B,SAAO,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,CAAV,EAAa,CAAb,EAAgB,CAAhB,EAAmB,CAAnB,EAAsB,CAAtB,EAAyB,CAAzB,EAA4B,CAA5B,EAA+B,CAA/B,EAAkC,CAAlC,EAAqC,CAArC,EAAwC,CAAxC,EAA2C,CAA3C,EAA8C,CAA9C,CAAP;AACD;;AAGM,SAASC,oBAAT,OAA+D;AAAA,MAAhCC,UAAgC,QAAhCA,UAAgC;AAAA,MAApBC,iBAAoB,QAApBA,iBAAoB;AAEpE,SAAO;AACLC,IAAAA,GAAG,EAAE,CAACD,iBAAiB,CAAC,EAAD,CAAlB,EAAwBA,iBAAiB,CAAC,EAAD,CAAzC,EAA+CA,iBAAiB,CAAC,EAAD,CAAhE,CADA;AAELE,IAAAA,SAAS,EAAE,CAACH,UAAU,CAAC,CAAD,CAAX,EAAgBA,UAAU,CAAC,CAAD,CAA1B,EAA+BA,UAAU,CAAC,EAAD,CAAzC,CAFN;AAGLI,IAAAA,EAAE,EAAE,CAACJ,UAAU,CAAC,CAAD,CAAX,EAAgBA,UAAU,CAAC,CAAD,CAA1B,EAA+BA,UAAU,CAAC,CAAD,CAAzC;AAHC,GAAP;AAKD;;AAEM,SAASK,GAAT,CAAaC,KAAb,EAAoBC,OAApB,EAA6B;AAClC,uBAAOC,MAAM,CAACC,QAAP,CAAgBH,KAAhB,KAA0BE,MAAM,CAACC,QAAP,CAAgBF,OAAhB,CAAjC;AACA,MAAMG,OAAO,GAAGJ,KAAK,GAAGC,OAAxB;AACA,SAAOG,OAAO,GAAG,CAAV,GAAcH,OAAO,GAAGG,OAAxB,GAAkCA,OAAzC;AACD","sourcesContent":["// Extensions to math.gl library. Intended to be folded back.\n\nimport * as vec4 from 'gl-matrix/vec4';\nimport assert from '../utils/assert';\n\nexport function transformVector(matrix, vector) {\n  // Handle non-invertible matrix\n  if (!matrix) {\n    return null;\n  }\n  const result = vec4.transformMat4([0, 0, 0, 0], vector, matrix);\n  const scale = 1 / result[3];\n  vec4.multiply(result, result, [scale, scale, scale, scale]);\n  return result;\n}\n\n// Helper, avoids low-precision 32 bit matrices from gl-matrix mat4.create()\nexport function createMat4() {\n  return [1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1];\n}\n\n// Extract camera vectors (move to math library?)\nexport function extractCameraVectors({viewMatrix, viewMatrixInverse}) {\n  // Read the translation from the inverse view matrix\n  return {\n    eye: [viewMatrixInverse[12], viewMatrixInverse[13], viewMatrixInverse[14]],\n    direction: [viewMatrix[2], viewMatrix[6], viewMatrix[10]],\n    up: [viewMatrix[1], viewMatrix[5], viewMatrix[9]]\n  };\n}\n\nexport function mod(value, divisor) {\n  assert(Number.isFinite(value) && Number.isFinite(divisor));\n  const modulus = value % divisor;\n  return modulus < 0 ? divisor + modulus : modulus;\n}\n"],"file":"math-utils.js"}