{"version":3,"sources":["../../../src/views/third-person-view.js"],"names":["getDirectionFromBearingAndPitch","bearing","pitch","spherical","SphericalCoordinates","toVector3","normalize","ThirdPersonView","props","viewState","position","up","zoom","direction","distance","eye","scale","multiply","Vector3","viewMatrix","Matrix4","multiplyRight","lookAt","center","Viewport","Object","assign","id","View","displayName"],"mappings":";;;;;;;;;;;;;;;;;;;AAAA;;AACA;;AACA;;AAEA,SAASA,+BAAT,OAA2D;AAAA,MAAjBC,OAAiB,QAAjBA,OAAiB;AAAA,MAARC,KAAQ,QAARA,KAAQ;AACzD,MAAMC,SAAS,GAAG,IAAIC,2BAAJ,CAAyB;AAACH,IAAAA,OAAO,EAAPA,OAAD;AAAUC,IAAAA,KAAK,EAALA;AAAV,GAAzB,CAAlB;AACA,SAAOC,SAAS,CAACE,SAAV,GAAsBC,SAAtB,EAAP;AACD;;IAEoBC,e;;;;;;;;;;iCACNC,K,EAAO;AAAA,6BAC2BA,KAAK,CAACC,SADjC;AAAA,UACXR,OADW,oBACXA,OADW;AAAA,UACFC,KADE,oBACFA,KADE;AAAA,UACKQ,QADL,oBACKA,QADL;AAAA,UACeC,EADf,oBACeA,EADf;AAAA,UACmBC,IADnB,oBACmBA,IADnB;AAGlB,UAAMC,SAAS,GAAGb,+BAA+B,CAAC;AAChDC,QAAAA,OAAO,EAAPA,OADgD;AAEhDC,QAAAA,KAAK,EAALA;AAFgD,OAAD,CAAjD;AAKA,UAAMY,QAAQ,GAAGF,IAAI,GAAG,EAAxB;AAIA,UAAMG,GAAG,GAAGF,SAAS,CAACG,KAAV,CAAgB,CAACF,QAAjB,EAA2BG,QAA3B,CAAoC,IAAIC,aAAJ,CAAY,CAAZ,EAAe,CAAf,EAAkB,CAAC,CAAnB,CAApC,CAAZ;AAEA,UAAMC,UAAU,GAAG,IAAIC,aAAJ,GAAcC,aAAd,CACjB,IAAID,aAAJ,GAAcE,MAAd,CAAqB;AAACP,QAAAA,GAAG,EAAHA,GAAD;AAAMQ,QAAAA,MAAM,EAAEb,QAAd;AAAwBC,QAAAA,EAAE,EAAFA;AAAxB,OAArB,CADiB,CAAnB;AAIA,aAAO,IAAIa,iBAAJ,CACLC,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBlB,KAAlB,EAAyB;AACvBmB,QAAAA,EAAE,EAAE,KAAKA,EADc;AAEvBf,QAAAA,IAAI,EAAE,IAFiB;AAGvBO,QAAAA,UAAU,EAAVA;AAHuB,OAAzB,CADK,CAAP;AAOD;;;EA1B0CS,a;;;AA6B7CrB,eAAe,CAACsB,WAAhB,GAA8B,iBAA9B","sourcesContent":["import View from './view';\nimport Viewport from '../viewports/viewport';\nimport {Vector3, Matrix4, _SphericalCoordinates as SphericalCoordinates} from 'math.gl';\n\nfunction getDirectionFromBearingAndPitch({bearing, pitch}) {\n  const spherical = new SphericalCoordinates({bearing, pitch});\n  return spherical.toVector3().normalize();\n}\n\nexport default class ThirdPersonView extends View {\n  _getViewport(props) {\n    const {bearing, pitch, position, up, zoom} = props.viewState;\n\n    const direction = getDirectionFromBearingAndPitch({\n      bearing,\n      pitch\n    });\n\n    const distance = zoom * 50;\n\n    // TODO somehow need to flip z to make it work\n    // check if the position offset is done in the base viewport\n    const eye = direction.scale(-distance).multiply(new Vector3(1, 1, -1));\n\n    const viewMatrix = new Matrix4().multiplyRight(\n      new Matrix4().lookAt({eye, center: position, up})\n    );\n\n    return new Viewport(\n      Object.assign({}, props, {\n        id: this.id,\n        zoom: null, // triggers meter level zoom\n        viewMatrix\n      })\n    );\n  }\n}\n\nThirdPersonView.displayName = 'ThirdPersonView';\n"],"file":"third-person-view.js"}