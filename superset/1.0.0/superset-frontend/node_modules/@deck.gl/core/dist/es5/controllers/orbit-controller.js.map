{"version":3,"sources":["../../../src/controllers/orbit-controller.js"],"names":["MOVEMENT_SPEED","DEFAULT_STATE","orbitAxis","rotationX","rotationOrbit","fovy","zoom","target","minZoom","Infinity","maxZoom","LINEAR_TRANSITION_PROPS","transitionDuration","transitionEasing","t","transitionInterpolator","LinearInterpolator","transitionInterruption","TRANSITION_EVENTS","BREAK","zoom2Scale","Math","pow","OrbitState","ViewportType","width","height","startPanPosition","startTarget","startRotationX","startRotationOrbit","startZoomPosition","startZoom","_interactiveState","_viewportProps","pos","_getUpdatedState","startPos","delta","Vector2","subtract","_calculateNewTarget","pixelOffset","deltaScaleX","deltaScaleY","Number","isFinite","newRotationX","newRotationOrbit","isRotating","viewState","props","Object","assign","scale","newZoom","_calculateNewZoom","startScale","newScale","dX","dY","log2","viewportProps","viewport","center","project","unproject","newProps","ViewState","OrbitController","Controller"],"mappings":"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","sourcesContent":["import {clamp, Vector2} from 'math.gl';\nimport Controller from './controller';\nimport ViewState from './view-state';\nimport LinearInterpolator from '../transitions/linear-interpolator';\nimport {TRANSITION_EVENTS} from './transition-manager';\n\nconst MOVEMENT_SPEED = 50; // per keyboard click\n\nconst DEFAULT_STATE = {\n  orbitAxis: 'Z',\n  rotationX: 0,\n  rotationOrbit: 0,\n  fovy: 50,\n  zoom: 0,\n  target: [0, 0, 0],\n  minZoom: -Infinity,\n  maxZoom: Infinity\n};\n\nconst LINEAR_TRANSITION_PROPS = {\n  transitionDuration: 300,\n  transitionEasing: t => t,\n  transitionInterpolator: new LinearInterpolator(['target', 'zoom', 'rotationX', 'rotationOrbit']),\n  transitionInterruption: TRANSITION_EVENTS.BREAK\n};\n\n/* Helpers */\n\nconst zoom2Scale = zoom => Math.pow(2, zoom);\n\nexport class OrbitState extends ViewState {\n  constructor({\n    ViewportType,\n\n    /* Viewport arguments */\n    width, // Width of viewport\n    height, // Height of viewport\n    orbitAxis = DEFAULT_STATE.orbitAxis,\n    rotationX = DEFAULT_STATE.rotationX, // Rotation around x axis\n    rotationOrbit = DEFAULT_STATE.rotationOrbit, // Rotation around orbit axis\n    target = DEFAULT_STATE.target,\n    zoom = DEFAULT_STATE.zoom,\n    fovy = DEFAULT_STATE.fovy,\n\n    /* Viewport constraints */\n    minZoom = DEFAULT_STATE.minZoom,\n    maxZoom = DEFAULT_STATE.maxZoom,\n\n    /** Interaction states, required to calculate change during transform */\n    // Model state when the pan operation first started\n    startPanPosition,\n    startTarget,\n    // Model state when the rotate operation first started\n    startRotationX,\n    startRotationOrbit,\n    // Model state when the zoom operation first started\n    startZoomPosition,\n    startZoom\n  }) {\n    super({\n      width,\n      height,\n      orbitAxis,\n      rotationX,\n      rotationOrbit,\n      target,\n      fovy,\n      zoom,\n      minZoom,\n      maxZoom\n    });\n\n    this._interactiveState = {\n      startPanPosition,\n      startTarget,\n      startRotationX,\n      startRotationOrbit,\n      startZoomPosition,\n      startZoom\n    };\n\n    this.ViewportType = ViewportType;\n  }\n\n  /* Public API */\n\n  getViewportProps() {\n    return this._viewportProps;\n  }\n\n  getInteractiveState() {\n    return this._interactiveState;\n  }\n\n  /**\n   * Start panning\n   * @param {[Number, Number]} pos - position on screen where the pointer grabs\n   */\n  panStart({pos}) {\n    const {target} = this._viewportProps;\n\n    return this._getUpdatedState({\n      startPanPosition: pos,\n      startTarget: target\n    });\n  }\n\n  /**\n   * Pan\n   * @param {[Number, Number]} pos - position on screen where the pointer is\n   */\n  pan({pos, startPos}) {\n    const {startPanPosition, startTarget} = this._interactiveState;\n    const delta = new Vector2(pos).subtract(startPanPosition);\n\n    return this._getUpdatedState({\n      target: this._calculateNewTarget({startTarget, pixelOffset: delta})\n    });\n  }\n\n  /**\n   * End panning\n   * Must call if `panStart()` was called\n   */\n  panEnd() {\n    return this._getUpdatedState({\n      startPanPosition: null,\n      startTarget: null\n    });\n  }\n\n  /**\n   * Start rotating\n   * @param {[Number, Number]} pos - position on screen where the pointer grabs\n   */\n  rotateStart({pos}) {\n    return this._getUpdatedState({\n      startRotationX: this._viewportProps.rotationX,\n      startRotationOrbit: this._viewportProps.rotationOrbit\n    });\n  }\n\n  /**\n   * Rotate\n   * @param {[Number, Number]} pos - position on screen where the pointer is\n   */\n  rotate({deltaScaleX, deltaScaleY}) {\n    const {startRotationX, startRotationOrbit} = this._interactiveState;\n\n    if (!Number.isFinite(startRotationX) || !Number.isFinite(startRotationOrbit)) {\n      return this;\n    }\n\n    const newRotationX = clamp(startRotationX + deltaScaleY * 180, -89.999, 89.999);\n    const newRotationOrbit = (startRotationOrbit + deltaScaleX * 180) % 360;\n\n    return this._getUpdatedState({\n      rotationX: newRotationX,\n      rotationOrbit: newRotationOrbit,\n      isRotating: true\n    });\n  }\n\n  /**\n   * End rotating\n   * Must call if `rotateStart()` was called\n   */\n  rotateEnd() {\n    return this._getUpdatedState({\n      startRotationX: null,\n      startRotationOrbit: null\n    });\n  }\n\n  // default implementation of shortest path between two view states\n  shortestPathFrom(viewState) {\n    const props = Object.assign({}, this._viewportProps);\n    return props;\n  }\n\n  /**\n   * Start zooming\n   * @param {[Number, Number]} pos - position on screen where the pointer grabs\n   */\n  zoomStart({pos}) {\n    return this._getUpdatedState({\n      startZoomPosition: pos,\n      startTarget: this._viewportProps.target,\n      startZoom: this._viewportProps.zoom\n    });\n  }\n\n  /**\n   * Zoom\n   * @param {[Number, Number]} pos - position on screen where the current target is\n   * @param {[Number, Number]} startPos - the target position at\n   *   the start of the operation. Must be supplied of `zoomStart()` was not called\n   * @param {Number} scale - a number between [0, 1] specifying the accumulated\n   *   relative scale.\n   */\n  zoom({pos, startPos, scale}) {\n    const {zoom, width, height, target} = this._viewportProps;\n    let {startZoom, startZoomPosition, startTarget} = this._interactiveState;\n    if (!Number.isFinite(startZoom)) {\n      // We have two modes of zoom:\n      // scroll zoom that are discrete events (transform from the current zoom level),\n      // and pinch zoom that are continuous events (transform from the zoom level when\n      // pinch started).\n      // If startZoom state is defined, then use the startZoom state;\n      // otherwise assume discrete zooming\n      startZoom = zoom;\n      startTarget = target;\n      startZoomPosition = startPos || pos;\n    }\n\n    const newZoom = this._calculateNewZoom({scale, startZoom});\n    const startScale = zoom2Scale(startZoom);\n    const newScale = zoom2Scale(newZoom);\n\n    const dX = (width / 2 - startZoomPosition[0]) * (newScale / startScale - 1);\n    const dY = (height / 2 - startZoomPosition[1]) * (newScale / startScale - 1);\n\n    return this._getUpdatedState({\n      zoom: newZoom,\n      target: this._calculateNewTarget({startTarget, zoom: newZoom, pixelOffset: [dX, dY]})\n    });\n  }\n\n  /**\n   * End zooming\n   * Must call if `zoomStart()` was called\n   */\n  zoomEnd() {\n    return this._getUpdatedState({\n      startZoomPosition: null,\n      startTarget: null,\n      startZoom: null\n    });\n  }\n\n  zoomIn() {\n    return this._getUpdatedState({\n      zoom: this._calculateNewZoom({scale: 2})\n    });\n  }\n\n  zoomOut() {\n    return this._getUpdatedState({\n      zoom: this._calculateNewZoom({scale: 0.5})\n    });\n  }\n\n  moveLeft() {\n    const pixelOffset = [-MOVEMENT_SPEED, 0];\n    return this._getUpdatedState({\n      target: this._calculateNewTarget({pixelOffset})\n    });\n  }\n\n  moveRight() {\n    const pixelOffset = [MOVEMENT_SPEED, 0];\n    return this._getUpdatedState({\n      target: this._calculateNewTarget({pixelOffset})\n    });\n  }\n\n  moveUp() {\n    const pixelOffset = [0, -MOVEMENT_SPEED];\n    return this._getUpdatedState({\n      target: this._calculateNewTarget({pixelOffset})\n    });\n  }\n\n  moveDown() {\n    const pixelOffset = [0, MOVEMENT_SPEED];\n    return this._getUpdatedState({\n      target: this._calculateNewTarget({pixelOffset})\n    });\n  }\n\n  rotateLeft() {\n    return this._getUpdatedState({\n      rotationOrbit: this._viewportProps.rotationOrbit - 15\n    });\n  }\n\n  rotateRight() {\n    return this._getUpdatedState({\n      rotationOrbit: this._viewportProps.rotationOrbit + 15\n    });\n  }\n\n  rotateUp() {\n    return this._getUpdatedState({\n      rotationX: this._viewportProps.rotationX - 10\n    });\n  }\n\n  rotateDown() {\n    return this._getUpdatedState({\n      rotationX: this._viewportProps.rotationX + 10\n    });\n  }\n\n  /* Private methods */\n\n  // Calculates new zoom\n  _calculateNewZoom({scale, startZoom}) {\n    const {maxZoom, minZoom} = this._viewportProps;\n    if (!Number.isFinite(startZoom)) {\n      startZoom = this._viewportProps.zoom;\n    }\n    const zoom = startZoom + Math.log2(scale);\n    return clamp(zoom, minZoom, maxZoom);\n  }\n\n  _calculateNewTarget({startTarget, zoom, pixelOffset}) {\n    const viewportProps = Object.assign({}, this._viewportProps);\n    if (Number.isFinite(zoom)) {\n      viewportProps.zoom = zoom;\n    }\n    if (startTarget) {\n      viewportProps.target = startTarget;\n    }\n    const viewport = new this.ViewportType(viewportProps);\n    const center = viewport.project(viewportProps.target);\n    return viewport.unproject([center[0] - pixelOffset[0], center[1] - pixelOffset[1], center[2]]);\n  }\n\n  _getUpdatedState(newProps) {\n    // Update _viewportProps\n    return new OrbitState(Object.assign({}, this._viewportProps, this._interactiveState, newProps));\n  }\n\n  // Apply any constraints (mathematical or defined by _viewportProps) to map state\n  _applyConstraints(props) {\n    // Ensure zoom is within specified range\n    const {maxZoom, minZoom, zoom} = props;\n    props.zoom = zoom > maxZoom ? maxZoom : zoom;\n    props.zoom = zoom < minZoom ? minZoom : zoom;\n\n    return props;\n  }\n}\n\nexport default class OrbitController extends Controller {\n  constructor(props) {\n    super(OrbitState, props);\n  }\n\n  _getTransitionProps() {\n    // Enables Transitions on double-tap and key-down events.\n    return LINEAR_TRANSITION_PROPS;\n  }\n}\n"],"file":"orbit-controller.js"}