{"version":3,"sources":["../../../src/lib/attribute-transition-manager.js"],"names":["noop","DEFAULT_TRANSITION_SETTINGS","duration","easing","t","onStart","onEnd","onInterrupt","AttributeTransitionManager","gl","id","attributeTransitions","needsRedraw","transform","numInstances","Transform","isSupported","log","warn","delete","attributeName","_removeTransition","attributes","transitions","opts","changedTransitions","hasChanged","_updateAttribute","attribute","supportsTransition","_createModel","sourceBuffers","feedbackBuffers","update","elementCount","animatedAttributes","transition","buffer","attributeInTransition","currentTime","uniforms","updated","time","run","Transition","name","Attribute","bufferLayout","_invalidateModel","_swapBuffer","settings","getTransitionSetting","_createTransition","_triggerTransition","Object","keys","length","assign","size","toState","constant","BaseAttribute","value","getBuffer","divisor","externalBuffer","fromState","toLength","fromLength","Buffer","getElementCount","data","Float32Array","usage","setData","fromBufferLayout","toBufferLayout","getData","enter","transitionSettings","start","_getNextTransitionStates"],"mappings":"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","sourcesContent":["import GL from '@luma.gl/constants';\nimport {Buffer, Transform} from '@luma.gl/core';\nimport {getShaders, getBuffers, padBuffer} from './attribute-transition-utils';\nimport Attribute from './attribute';\nimport BaseAttribute from './base-attribute';\nimport Transition from '../transitions/transition';\nimport log from '../utils/log';\nimport assert from '../utils/assert';\n\nconst noop = () => {};\nconst DEFAULT_TRANSITION_SETTINGS = {\n  duration: 0,\n  easing: t => t,\n  onStart: noop,\n  onEnd: noop,\n  onInterrupt: noop\n};\n\nexport default class AttributeTransitionManager {\n  constructor(gl, {id}) {\n    this.id = id;\n    this.gl = gl;\n\n    this.attributeTransitions = {};\n    this.needsRedraw = false;\n    this.transform = null;\n    this.numInstances = 0;\n\n    if (Transform.isSupported(gl)) {\n      this.isSupported = true;\n    } else if (gl) {\n      // This class may be instantiated without a WebGL context (e.g. web worker)\n      log.warn('WebGL2 not supported by this browser. Transition animation is disabled.')();\n    }\n  }\n\n  finalize() {\n    if (this.transform) {\n      this.transform.delete();\n    }\n    for (const attributeName in this.attributeTransitions) {\n      this._removeTransition(attributeName);\n    }\n  }\n\n  /* Public methods */\n\n  // Called when attribute manager updates\n  // Check the latest attributes for updates.\n  update({attributes, transitions = {}, numInstances}) {\n    this.opts = transitions;\n    // Transform class will crash if elementCount is 0\n    this.numInstances = numInstances || 1;\n\n    if (!this.isSupported) {\n      return;\n    }\n\n    const {attributeTransitions} = this;\n    const changedTransitions = {};\n\n    for (const attributeName in attributes) {\n      const hasChanged = this._updateAttribute(attributeName, attributes[attributeName]);\n\n      if (hasChanged) {\n        changedTransitions[attributeName] = attributeTransitions[attributeName];\n      }\n    }\n\n    for (const attributeName in attributeTransitions) {\n      const attribute = attributes[attributeName];\n\n      if (!attribute || !attribute.supportsTransition()) {\n        // Animated attribute has been removed\n        this._removeTransition(attributeName);\n      }\n    }\n\n    if (!this.transform) {\n      this._createModel();\n    } else if (this.transform) {\n      const {sourceBuffers, feedbackBuffers} = getBuffers(changedTransitions);\n      this.transform.update({\n        elementCount: this.numInstances,\n        sourceBuffers,\n        feedbackBuffers\n      });\n    }\n  }\n\n  // Returns `true` if attribute is transition-enabled\n  hasAttribute(attributeName) {\n    return attributeName in this.attributeTransitions;\n  }\n\n  // Get all the animated attributes\n  getAttributes() {\n    const animatedAttributes = {};\n\n    for (const attributeName in this.attributeTransitions) {\n      const transition = this.attributeTransitions[attributeName];\n\n      if (transition.buffer) {\n        animatedAttributes[attributeName] = transition.attributeInTransition;\n      }\n    }\n\n    return animatedAttributes;\n  }\n\n  /* eslint-disable max-statements */\n  // Called every render cycle, run transform feedback\n  // Returns `true` if anything changes\n  setCurrentTime(currentTime) {\n    if (!this.transform || this.numInstances === 0) {\n      return false;\n    }\n\n    const uniforms = {};\n\n    let needsRedraw = this.needsRedraw;\n    this.needsRedraw = false;\n\n    for (const attributeName in this.attributeTransitions) {\n      const transition = this.attributeTransitions[attributeName];\n      const updated = transition.update(currentTime);\n      if (updated) {\n        uniforms[`${attributeName}Time`] = transition.time;\n        needsRedraw = true;\n      }\n    }\n\n    if (needsRedraw) {\n      this.transform.run({uniforms});\n    }\n\n    return needsRedraw;\n  }\n  /* eslint-enable max-statements */\n\n  /* Private methods */\n  _createTransition(attributeName, attribute) {\n    let transition = this.attributeTransitions[attributeName];\n    if (!transition) {\n      transition = new Transition({\n        name: attributeName,\n        attribute,\n        attributeInTransition: new Attribute(this.gl, attribute),\n        bufferLayout: attribute.bufferLayout\n      });\n      this.attributeTransitions[attributeName] = transition;\n      this._invalidateModel();\n      return transition;\n    }\n    return null;\n  }\n\n  _removeTransition(attributeName) {\n    const transition = this.attributeTransitions[attributeName];\n    if (transition) {\n      if (transition.buffer) {\n        transition.buffer.delete();\n      }\n      if (transition._swapBuffer) {\n        transition._swapBuffer.delete();\n      }\n      delete this.attributeTransitions[attributeName];\n      this._invalidateModel();\n    }\n  }\n\n  // Check an attributes for updates\n  // Returns a transition object if a new transition is triggered.\n  _updateAttribute(attributeName, attribute) {\n    const settings = attribute.getTransitionSetting(this.opts);\n\n    if (settings) {\n      let hasChanged;\n      let transition = this.attributeTransitions[attributeName];\n      if (transition) {\n        hasChanged = attribute.needsRedraw();\n      } else {\n        // New animated attributes have been added\n        transition = this._createTransition(attributeName, attribute);\n        hasChanged = true;\n      }\n\n      if (hasChanged) {\n        this._triggerTransition(transition, settings);\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  // Invalidates the current model\n  _invalidateModel() {\n    if (this.transform) {\n      this.transform.delete();\n      this.transform = null;\n    }\n  }\n\n  // Create a model for the transform feedback\n  _createModel() {\n    if (Object.keys(this.attributeTransitions).length === 0) {\n      // no transitions\n      return;\n    }\n    this.transform = new Transform(\n      this.gl,\n      Object.assign(\n        {\n          elementCount: this.numInstances\n        },\n        getBuffers(this.attributeTransitions),\n        getShaders(this.attributeTransitions)\n      )\n    );\n  }\n\n  // get current values of an attribute, clipped/padded to the size of the new buffer\n  _getNextTransitionStates(transition, settings) {\n    const {attribute} = transition;\n    const {size} = attribute;\n\n    let toState;\n    if (attribute.constant) {\n      toState = new BaseAttribute(this.gl, {constant: true, value: attribute.value, size});\n    } else {\n      toState = new BaseAttribute(this.gl, {\n        constant: false,\n        buffer: attribute.getBuffer(),\n        divisor: 0,\n        size,\n        // attribute's `value` does not match the content of external buffer,\n        // will need to call buffer.getData if needed\n        value: attribute.externalBuffer ? null : attribute.value\n      });\n    }\n    const fromState = transition.buffer || toState;\n    const toLength = this.numInstances * size;\n    const fromLength = (fromState instanceof Buffer && fromState.getElementCount()) || toLength;\n\n    // Alternate between two buffers when new transitions start.\n    // Last destination buffer is used as an attribute (from state),\n    // And the other buffer is now the destination buffer.\n    let buffer = transition._swapBuffer;\n    transition._swapBuffer = transition.buffer;\n\n    if (!buffer) {\n      buffer = new Buffer(this.gl, {\n        data: new Float32Array(toLength),\n        usage: GL.DYNAMIC_COPY\n      });\n    } else if (buffer.getElementCount() < toLength) {\n      // Pad buffers to be the same length\n      buffer.setData({\n        data: new Float32Array(toLength)\n      });\n    }\n\n    transition.attributeInTransition.update({buffer});\n\n    padBuffer({\n      fromState,\n      toState,\n      fromLength,\n      toLength,\n      fromBufferLayout: transition.bufferLayout,\n      toBufferLayout: attribute.bufferLayout,\n      getData: settings.enter\n    });\n\n    transition.bufferLayout = attribute.bufferLayout;\n\n    return {fromState, toState, buffer};\n  }\n\n  // Start a new transition using the current settings\n  // Updates transition state and from/to buffer\n  _triggerTransition(transition, settings) {\n    // Check if settings is valid\n    assert(settings && settings.duration > 0);\n\n    this.needsRedraw = true;\n\n    const transitionSettings = Object.assign({}, DEFAULT_TRANSITION_SETTINGS, settings);\n\n    // Attribute descriptor to transition from\n    transition.start(\n      Object.assign({}, this._getNextTransitionStates(transition, settings), transitionSettings)\n    );\n  }\n}\n"],"file":"attribute-transition-manager.js"}