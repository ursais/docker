{"version":3,"sources":["../../../src/utils/bin-sorter.js"],"names":["defaultGetValue","points","length","BinSorter","bins","getValue","sortedBins","getSortedBins","maxCount","getMaxCount","binMap","getBinMap","reduce","accu","h","i","value","undefined","push","Number","isFinite","index","counts","sort","a","b","lower","upper","len","lowerIdx","Math","ceil","upperIdx","floor","forEach","x","mapper","curr","Object","assign"],"mappings":";;;;;AAwBA,IAAMA,eAAe,GAAG,SAAlBA,eAAkB,CAAAC,MAAM;AAAA,SAAIA,MAAM,CAACC,MAAX;AAAA,CAA9B;;IAEqBC,S;AACnB,uBAAmD;AAAA,QAAvCC,IAAuC,uEAAhC,EAAgC;AAAA,QAA5BC,QAA4B,uEAAjBL,eAAiB;;AAAA;;AACjD,SAAKM,UAAL,GAAkB,KAAKC,aAAL,CAAmBH,IAAnB,EAAyBC,QAAzB,CAAlB;AACA,SAAKG,QAAL,GAAgB,KAAKC,WAAL,EAAhB;AACA,SAAKC,MAAL,GAAc,KAAKC,SAAL,EAAd;AACD;;;;kCAQaP,I,EAAMC,Q,EAAU;AAC5B,aAAOD,IAAI,CACRQ,MADI,CACG,UAACC,IAAD,EAAOC,CAAP,EAAUC,CAAV,EAAgB;AACtB,YAAMC,KAAK,GAAGX,QAAQ,CAACS,CAAC,CAACb,MAAH,CAAtB;;AAEA,YAAIe,KAAK,KAAK,IAAV,IAAkBA,KAAK,KAAKC,SAAhC,EAA2C;AAEzCJ,UAAAA,IAAI,CAACK,IAAL,CAAU;AACRH,YAAAA,CAAC,EAAEI,MAAM,CAACC,QAAP,CAAgBN,CAAC,CAACO,KAAlB,IAA2BP,CAAC,CAACO,KAA7B,GAAqCN,CADhC;AAERC,YAAAA,KAAK,EAALA,KAFQ;AAGRM,YAAAA,MAAM,EAAER,CAAC,CAACb,MAAF,CAASC;AAHT,WAAV;AAKD;;AAED,eAAOW,IAAP;AACD,OAdI,EAcF,EAdE,EAeJU,IAfI,CAeC,UAACC,CAAD,EAAIC,CAAJ;AAAA,eAAUD,CAAC,CAACR,KAAF,GAAUS,CAAC,CAACT,KAAtB;AAAA,OAfD,CAAP;AAgBD;;;wCAS6B;AAAA;AAAA,UAAfU,KAAe;AAAA,UAARC,KAAQ;;AAC5B,UAAMC,GAAG,GAAG,KAAKtB,UAAL,CAAgBJ,MAA5B;;AACA,UAAI,CAAC0B,GAAL,EAAU;AACR,eAAO,CAAC,CAAD,EAAI,CAAJ,CAAP;AACD;;AACD,UAAMC,QAAQ,GAAGC,IAAI,CAACC,IAAL,CAAWL,KAAK,GAAG,GAAT,IAAiBE,GAAG,GAAG,CAAvB,CAAV,CAAjB;AACA,UAAMI,QAAQ,GAAGF,IAAI,CAACG,KAAL,CAAYN,KAAK,GAAG,GAAT,IAAiBC,GAAG,GAAG,CAAvB,CAAX,CAAjB;AAEA,aAAO,CAAC,KAAKtB,UAAL,CAAgBuB,QAAhB,EAA0Bb,KAA3B,EAAkC,KAAKV,UAAL,CAAgB0B,QAAhB,EAA0BhB,KAA5D,CAAP;AACD;;;kCAMa;AACZ,UAAIR,QAAQ,GAAG,CAAf;AACA,WAAKF,UAAL,CAAgB4B,OAAhB,CAAwB,UAAAC,CAAC;AAAA,eAAK3B,QAAQ,GAAGA,QAAQ,GAAG2B,CAAC,CAACb,MAAb,GAAsBd,QAAtB,GAAiC2B,CAAC,CAACb,MAAnD;AAAA,OAAzB;AACA,aAAOd,QAAP;AACD;;;gCAOW;AACV,aAAO,KAAKF,UAAL,CAAgBM,MAAhB,CACL,UAACwB,MAAD,EAASC,IAAT;AAAA,eACEC,MAAM,CAACC,MAAP,CAAcH,MAAd,sBACGC,IAAI,CAACtB,CADR,EACYsB,IADZ,EADF;AAAA,OADK,EAKL,EALK,CAAP;AAOD;;;;;;SAzEkBlC,S","sourcesContent":["// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\n// getValue takes an array of points returns a value to sort the bins on.\n// by default it returns the number of points\n// this is where to pass in a function to color the bins by\n// avg/mean/max of specific value of the point\nconst defaultGetValue = points => points.length;\n\nexport default class BinSorter {\n  constructor(bins = [], getValue = defaultGetValue) {\n    this.sortedBins = this.getSortedBins(bins, getValue);\n    this.maxCount = this.getMaxCount();\n    this.binMap = this.getBinMap();\n  }\n\n  /**\n   * Get an array of object with sorted values and index of bins\n   * @param {Array} bins\n   * @param {Function} getValue\n   * @return {Array} array of values and index lookup\n   */\n  getSortedBins(bins, getValue) {\n    return bins\n      .reduce((accu, h, i) => {\n        const value = getValue(h.points);\n\n        if (value !== null && value !== undefined) {\n          // filter bins if value is null or undefined\n          accu.push({\n            i: Number.isFinite(h.index) ? h.index : i,\n            value,\n            counts: h.points.length\n          });\n        }\n\n        return accu;\n      }, [])\n      .sort((a, b) => a.value - b.value);\n  }\n\n  /**\n   * Get range of values of all bins\n   * @param {Number[]} range\n   * @param {Number} range[0] - lower bound\n   * @param {Number} range[1] - upper bound\n   * @return {Array} array of new value range\n   */\n  getValueRange([lower, upper]) {\n    const len = this.sortedBins.length;\n    if (!len) {\n      return [0, 0];\n    }\n    const lowerIdx = Math.ceil((lower / 100) * (len - 1));\n    const upperIdx = Math.floor((upper / 100) * (len - 1));\n\n    return [this.sortedBins[lowerIdx].value, this.sortedBins[upperIdx].value];\n  }\n\n  /**\n   * Get ths max count of all bins\n   * @return {Number | Boolean} max count\n   */\n  getMaxCount() {\n    let maxCount = 0;\n    this.sortedBins.forEach(x => (maxCount = maxCount > x.counts ? maxCount : x.counts));\n    return maxCount;\n  }\n\n  /**\n   * Get a mapping from cell/hexagon index to sorted bin\n   * This is used to retrieve bin value for color calculation\n   * @return {Object} bin index to sortedBins\n   */\n  getBinMap() {\n    return this.sortedBins.reduce(\n      (mapper, curr) =>\n        Object.assign(mapper, {\n          [curr.i]: curr\n        }),\n      {}\n    );\n  }\n}\n"],"file":"bin-sorter.js"}