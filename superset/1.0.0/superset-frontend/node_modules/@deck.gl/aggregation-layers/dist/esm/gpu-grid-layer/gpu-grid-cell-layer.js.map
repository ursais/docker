{"version":3,"sources":["../../../src/gpu-grid-layer/gpu-grid-cell-layer.js"],"names":["Layer","Model","CubeGeometry","fp64","PhongMaterial","fp64LowPart","defaultMaterial","defaultColorRange","vs","fs","COLOR_DATA_UBO_INDEX","ELEVATION_DATA_UBO_INDEX","defaultProps","colorDomain","colorRange","elevationDomain","elevationRange","elevationScale","type","min","value","gridSize","gridOrigin","gridOffset","cellSize","max","offset","coverage","extruded","material","GPUGridCellLayer","modules","gl","context","attributeManager","getAttributeManager","addInstanced","colors","size","update","calculateColors","noAlloc","elevations","calculateElevations","model","_getModel","_setupUniformBuffer","setState","Object","assign","getShaders","id","props","geometry","isInstanced","shaderCache","uniforms","data","gridOriginLow","gridOffsetLow","colorMaxMinBuffer","color","maxMinBuffer","elevationMaxMinBuffer","elevation","bind","target","index","domainUniforms","getDomainUniforms","state","setUniforms","draw","unbind","attribute","buffer","aggregationBuffer","colorDomainValid","elevationDomainValid","programHandle","program","handle","colorIndex","getUniformBlockIndex","elevationIndex","uniformBlockBinding","layerName"],"mappings":"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","sourcesContent":["// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nimport {Layer} from '@deck.gl/core';\nimport GL from '@luma.gl/constants';\nimport {Model, CubeGeometry, fp64, PhongMaterial} from '@luma.gl/core';\nconst {fp64LowPart} = fp64;\nconst defaultMaterial = new PhongMaterial();\nimport {defaultColorRange} from '../utils/color-utils';\n\nimport vs from './gpu-grid-cell-layer-vertex.glsl';\nimport fs from './gpu-grid-cell-layer-fragment.glsl';\n\nconst COLOR_DATA_UBO_INDEX = 0;\nconst ELEVATION_DATA_UBO_INDEX = 1;\n\nconst defaultProps = {\n  // color\n  colorDomain: null,\n  colorRange: defaultColorRange,\n\n  // elevation\n  elevationDomain: null,\n  elevationRange: [0, 1000],\n  elevationScale: {type: 'number', min: 0, value: 1},\n\n  // grid\n  gridSize: {type: 'array', min: 0, value: [1, 1]},\n  gridOrigin: {type: 'array', min: 0, value: [0, 0]},\n  gridOffset: {type: 'array', min: 0, value: [0, 0]},\n\n  cellSize: {type: 'number', min: 0, max: 1000, value: 1000},\n  offset: {type: 'array', min: 0, value: [1, 1]},\n  coverage: {type: 'number', min: 0, max: 1, value: 1},\n  extruded: true,\n  fp64: false,\n  material: defaultMaterial\n};\n\nexport default class GPUGridCellLayer extends Layer {\n  getShaders() {\n    return {vs, fs, modules: ['project32', 'gouraud-lighting', 'picking', 'fp64']};\n  }\n\n  initializeState() {\n    const {gl} = this.context;\n    const attributeManager = this.getAttributeManager();\n    attributeManager.addInstanced({\n      colors: {\n        size: 4,\n        update: this.calculateColors,\n        noAlloc: true\n      },\n      elevations: {\n        size: 4,\n        update: this.calculateElevations,\n        noAlloc: true\n      }\n    });\n    const model = this._getModel(gl);\n    this._setupUniformBuffer(model);\n    this.setState({model});\n  }\n\n  _getModel(gl) {\n    return new Model(\n      gl,\n      Object.assign({}, this.getShaders(), {\n        id: this.props.id,\n        geometry: new CubeGeometry(),\n        isInstanced: true,\n        shaderCache: this.context.shaderCache\n      })\n    );\n  }\n\n  draw({uniforms}) {\n    const {\n      data,\n      cellSize,\n      offset,\n      extruded,\n      elevationScale,\n      coverage,\n      gridSize,\n      gridOrigin,\n      gridOffset,\n      colorRange,\n      elevationRange\n    } = this.props;\n\n    const gridOriginLow = [fp64LowPart(gridOrigin[0]), fp64LowPart(gridOrigin[1])];\n    const gridOffsetLow = [fp64LowPart(gridOffset[0]), fp64LowPart(gridOffset[1])];\n    const colorMaxMinBuffer = data.color.maxMinBuffer;\n    const elevationMaxMinBuffer = data.elevation.maxMinBuffer;\n\n    colorMaxMinBuffer.bind({target: GL.UNIFORM_BUFFER, index: COLOR_DATA_UBO_INDEX});\n    elevationMaxMinBuffer.bind({target: GL.UNIFORM_BUFFER, index: ELEVATION_DATA_UBO_INDEX});\n    const domainUniforms = this.getDomainUniforms();\n\n    this.state.model\n      .setUniforms(\n        Object.assign({}, uniforms, domainUniforms, {\n          cellSize,\n          offset,\n          extruded,\n          elevationScale,\n          coverage,\n          gridSize,\n          gridOrigin,\n          gridOriginLow,\n          gridOffset,\n          gridOffsetLow,\n          colorRange,\n          elevationRange\n        })\n      )\n      .draw();\n    colorMaxMinBuffer.unbind({target: GL.UNIFORM_BUFFER, index: COLOR_DATA_UBO_INDEX});\n    elevationMaxMinBuffer.unbind({target: GL.UNIFORM_BUFFER, index: ELEVATION_DATA_UBO_INDEX});\n  }\n\n  calculateColors(attribute) {\n    const {data} = this.props;\n    attribute.update({\n      buffer: data.color.aggregationBuffer\n    });\n  }\n\n  calculateElevations(attribute) {\n    const {data} = this.props;\n    attribute.update({\n      buffer: data.elevation.aggregationBuffer\n    });\n  }\n\n  getDomainUniforms() {\n    const {colorDomain, elevationDomain} = this.props;\n    const domainUniforms = {};\n    if (colorDomain !== null) {\n      domainUniforms.colorDomainValid = true;\n      domainUniforms.colorDomain = colorDomain;\n    } else {\n      domainUniforms.colorDomainValid = false;\n    }\n    if (elevationDomain !== null) {\n      domainUniforms.elevationDomainValid = true;\n      domainUniforms.elevationDomain = elevationDomain;\n    } else {\n      domainUniforms.elevationDomainValid = false;\n    }\n    return domainUniforms;\n  }\n\n  _setupUniformBuffer(model) {\n    const gl = this.context.gl;\n    const programHandle = model.program.handle;\n\n    const colorIndex = gl.getUniformBlockIndex(programHandle, 'ColorData');\n    const elevationIndex = gl.getUniformBlockIndex(programHandle, 'ElevationData');\n    gl.uniformBlockBinding(programHandle, colorIndex, COLOR_DATA_UBO_INDEX);\n    gl.uniformBlockBinding(programHandle, elevationIndex, ELEVATION_DATA_UBO_INDEX);\n  }\n}\n\nGPUGridCellLayer.layerName = 'GPUGridCellLayer';\nGPUGridCellLayer.defaultProps = defaultProps;\n"],"file":"gpu-grid-cell-layer.js"}