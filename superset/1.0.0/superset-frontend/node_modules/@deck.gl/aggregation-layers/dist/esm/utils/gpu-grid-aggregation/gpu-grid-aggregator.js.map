{"version":3,"sources":["../../../../src/utils/gpu-grid-aggregation/gpu-grid-aggregator.js"],"names":["Buffer","Model","Transform","FEATURES","hasFeatures","isWebGL2","readPixelsToBuffer","fp64","fp64Utils","withParameters","log","worldToPixels","fp64ifyMatrix4","DEFAULT_CHANGE_FLAGS","DEFAULT_RUN_PARAMS","MAX_32_BIT_FLOAT","MIN_BLEND_EQUATION","MAX_BLEND_EQUATION","MAX_MIN_BLEND_EQUATION","EQUATION_MAP","ELEMENTCOUNT","DEFAULT_WEIGHT_PARAMS","IDENTITY_MATRIX","PIXEL_SIZE","WEIGHT_SIZE","AGGREGATION_OPERATION","AGGREGATE_TO_GRID_VS","AGGREGATE_TO_GRID_VS_FP64","AGGREGATE_TO_GRID_FS","AGGREGATE_ALL_VS_FP64","AGGREGATE_ALL_FS","TRANSFORM_MEAN_VS","getFloatTexture","getFramebuffer","getFloatArray","BUFFER_NAMES","ARRAY_BUFFER_MAP","maxData","minData","maxMinData","GPUGridAggregator","aggregationData","pixelIndex","index","results","cellCount","cellWeight","maxCellWieght","minCellWeight","totalCount","countsData","size","numCells","length","cellWeights","Float32Array","cellCounts","Uint32Array","i","sizeIndex","gl","BLEND_EQUATION_MINMAX","COLOR_ATTACHMENT_RGBA32F","TEXTURE_FLOAT","opts","id","shaderCache","state","weights","gridPositions","positionsBuffer","positions64xyLowBuffer","vertexCount","useGPU","numCol","numRow","windowSize","cellSize","weightAttributes","textures","meanTextures","buffers","framebuffers","maxMinFramebuffers","minFramebuffers","maxFramebuffers","equations","resources","_hasGPUSupport","gridAggregationModel","allAggregationModel","meanTransform","delete","deleteResources","setState","aggregationParams","getAggregationParams","updateGridSize","runAggregationOnGPU","info","runAggregationOnCPU","weightId","data","aggregationBuffer","getData","arrayName","bufferName","Array","isArray","forEach","obj","name","Object","assign","gridTransformMatrix","viewport","projectPoints","changeFlags","cellSizeChanged","validateProps","viewportMatrix","normalizeWeightParams","result","updateObject","dataChanged","viewportChanged","width","height","Math","ceil","assert","positions","projectPositions","warn","cellIndex","posIndex","values","operation","cellElementIndex","weightComponent","SUM","MEAN","MIN","min","MAX","max","validCellIndices","needMin","needMax","calculateMinMax","calculateMean","combineMaxMin","count","weight","aggregationSize","fill","Infinity","initCPUResults","gridTransformRequired","shouldTransformToGrid","pos","posCount","Float64Array","Set","x","y","project","colId","floor","rowId","add","calculateAggregationData","calculateMeanMaxMinData","updateAggregationBuffers","resourceName","setData","createBufferObjects","updateCPUResultBuffer","aggregationTexture","target","sourceType","maxMinBuffer","minBuffer","maxBuffer","trackGPUResultBuffers","vs","fs","modules","drawMode","isInstanced","instanceCount","attributes","position","update","_targetTextureVarying","uProjectionMatrixFP64","gridSize","parameters","blend","depthTest","blendFunc","moduleSettings","uniforms","uProjectionMatrix","renderToWeightsTexture","renderToMaxMinTexture","blendEquation","minOrMaxFb","clearParams","clearColor","bind","clear","draw","uSampler","texture","unbind","transformOptions","_sourceTextures","aggregationValues","_targetTexture","elementCount","getMeanTransform","run","attach","updateModels","setupFramebuffers","renderAggregateData","getAggregateData","framebufferSize","resize","getAggregationModel","getAllAggregationModel","constructor","typedArray","positions64xyLow","aggregationModelAttributes","modelDirty","setupModels","accessor","setupWeightAttributes","setVertexCount","setAttributes","setInstanceCount"],"mappings":"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","sourcesContent":["import GL from '@luma.gl/constants';\nimport {\n  Buffer,\n  Model,\n  Transform,\n  FEATURES,\n  hasFeatures,\n  isWebGL2,\n  readPixelsToBuffer,\n  fp64 as fp64Utils,\n  withParameters\n} from '@luma.gl/core';\nimport {log} from '@deck.gl/core';\nimport {worldToPixels} from 'viewport-mercator-project';\nconst {fp64ifyMatrix4} = fp64Utils;\n\nimport {\n  DEFAULT_CHANGE_FLAGS,\n  DEFAULT_RUN_PARAMS,\n  MAX_32_BIT_FLOAT,\n  MIN_BLEND_EQUATION,\n  MAX_BLEND_EQUATION,\n  MAX_MIN_BLEND_EQUATION,\n  EQUATION_MAP,\n  ELEMENTCOUNT,\n  DEFAULT_WEIGHT_PARAMS,\n  IDENTITY_MATRIX,\n  PIXEL_SIZE,\n  WEIGHT_SIZE\n} from './gpu-grid-aggregator-constants';\nimport {AGGREGATION_OPERATION} from '../aggregation-operation-utils';\n\nimport AGGREGATE_TO_GRID_VS from './aggregate-to-grid-vs.glsl';\nimport AGGREGATE_TO_GRID_VS_FP64 from './aggregate-to-grid-vs-64.glsl';\nimport AGGREGATE_TO_GRID_FS from './aggregate-to-grid-fs.glsl';\nimport AGGREGATE_ALL_VS_FP64 from './aggregate-all-vs-64.glsl';\nimport AGGREGATE_ALL_FS from './aggregate-all-fs.glsl';\nimport TRANSFORM_MEAN_VS from './transform-mean-vs.glsl';\nimport {getFloatTexture, getFramebuffer, getFloatArray} from './gpu-grid-aggregator-utils.js';\n\nconst BUFFER_NAMES = ['aggregationBuffer', 'maxMinBuffer', 'minBuffer', 'maxBuffer'];\nconst ARRAY_BUFFER_MAP = {\n  maxData: 'maxBuffer',\n  minData: 'minBuffer',\n  maxMinData: 'maxMinBuffer'\n};\n\nexport default class GPUGridAggregator {\n  // Decode and return aggregation data of given pixel.\n  static getAggregationData({aggregationData, maxData, minData, maxMinData, pixelIndex}) {\n    const index = pixelIndex * PIXEL_SIZE;\n    const results = {};\n    if (aggregationData) {\n      results.cellCount = aggregationData[index + 3];\n      results.cellWeight = aggregationData[index];\n    }\n    if (maxMinData) {\n      results.maxCellWieght = maxMinData[0];\n      results.minCellWeight = maxMinData[3];\n    } else {\n      if (maxData) {\n        results.maxCellWieght = maxData[0];\n        results.totalCount = maxData[3];\n      }\n      if (minData) {\n        results.minCellWeight = minData[0];\n        results.totalCount = maxData[3];\n      }\n    }\n    return results;\n  }\n\n  // Decodes and retuns counts and weights of all cells\n  static getCellData({countsData, size = 1}) {\n    const numCells = countsData.length / 4;\n    const cellWeights = new Float32Array(numCells * size);\n    const cellCounts = new Uint32Array(numCells);\n    for (let i = 0; i < numCells; i++) {\n      // weights in RGB channels\n      for (let sizeIndex = 0; sizeIndex < size; sizeIndex++) {\n        cellWeights[i * size + sizeIndex] = countsData[i * 4 + sizeIndex];\n      }\n      // count in Alpha channel\n      cellCounts[i] = countsData[i * 4 + 3];\n    }\n    return {cellCounts, cellWeights};\n  }\n\n  static isSupported(gl) {\n    return (\n      isWebGL2(gl) &&\n      hasFeatures(\n        gl,\n        FEATURES.BLEND_EQUATION_MINMAX,\n        FEATURES.COLOR_ATTACHMENT_RGBA32F,\n        FEATURES.TEXTURE_FLOAT\n      )\n    );\n  }\n\n  // DEBUG ONLY\n  // static logData({aggregationBuffer, minBuffer, maxBuffer, maxMinBuffer, limit = 10}) {\n  //   if (aggregationBuffer) {\n  //     console.log('Aggregation Data:');\n  //     const agrData = aggregationBuffer.getData();\n  //     for (let index = 0; index < agrData.length && limit > 0; index += 4) {\n  //       if (agrData[index + 3] > 0) {\n  //         console.log(\n  //           `index: ${index} weights: ${agrData[index]} ${agrData[index + 1]} ${\n  //             agrData[index + 2]\n  //           } count: ${agrData[index + 3]}`\n  //         );\n  //         limit--;\n  //       }\n  //     }\n  //   }\n  //   const obj = {minBuffer, maxBuffer, maxMinBuffer};\n  //   for (const key in obj) {\n  //     if (obj[key]) {\n  //       const data = obj[key].getData();\n  //       console.log(`${key} data : R: ${data[0]} G: ${data[1]} B: ${data[2]} A: ${data[3]}`);\n  //     }\n  //   }\n  // }\n\n  constructor(gl, opts = {}) {\n    this.id = opts.id || 'gpu-grid-aggregator';\n    this.shaderCache = opts.shaderCache || null;\n    this.gl = gl;\n    this.state = {\n      // cache weights and position data to process when data is not changed\n      weights: null,\n      gridPositions: null,\n      positionsBuffer: null,\n      positions64xyLowBuffer: null,\n      vertexCount: 0,\n\n      // flags/variables that affect the aggregation\n      fp64: null,\n      useGPU: null,\n      numCol: 0,\n      numRow: 0,\n      windowSize: null,\n      cellSize: null,\n\n      // per weight GPU resources\n      weightAttributes: {},\n      textures: {},\n      meanTextures: {},\n      buffers: {},\n      framebuffers: {},\n      maxMinFramebuffers: {},\n      minFramebuffers: {},\n      maxFramebuffers: {},\n      equations: {},\n\n      // common resources to be deleted\n      resources: {},\n\n      // results\n      results: {}\n    };\n    this._hasGPUSupport =\n      isWebGL2(gl) && // gl_InstanceID usage in min/max calculation shaders\n      hasFeatures(\n        this.gl,\n        FEATURES.BLEND_EQUATION_MINMAX, // set min/max blend modes\n        FEATURES.COLOR_ATTACHMENT_RGBA32F, // render to float texture\n        FEATURES.TEXTURE_FLOAT // sample from a float texture\n      );\n  }\n\n  // Delete owned resources.\n  /* eslint no-unused-expressions: [\"error\", { \"allowShortCircuit\": true }] */\n  delete() {\n    const {gridAggregationModel, allAggregationModel, meanTransform} = this;\n    const {\n      positionsBuffer,\n      positions64xyLowBuffer,\n      textures,\n      framebuffers,\n      maxMinFramebuffers,\n      minFramebuffers,\n      maxFramebuffers,\n      meanTextures,\n      resources\n    } = this.state;\n\n    gridAggregationModel && gridAggregationModel.delete();\n    allAggregationModel && allAggregationModel.delete();\n    meanTransform && meanTransform.delete();\n\n    positionsBuffer && positionsBuffer.delete();\n    positions64xyLowBuffer && positions64xyLowBuffer.delete();\n    this.deleteResources([\n      framebuffers,\n      textures,\n      maxMinFramebuffers,\n      minFramebuffers,\n      maxFramebuffers,\n      meanTextures,\n      resources\n    ]);\n  }\n\n  // Perform aggregation and retun the results\n  run(opts = {}) {\n    // reset results\n    this.setState({results: {}});\n    const aggregationParams = this.getAggregationParams(opts);\n    this.updateGridSize(aggregationParams);\n    const {useGPU} = aggregationParams;\n    if (this._hasGPUSupport && useGPU) {\n      return this.runAggregationOnGPU(aggregationParams);\n    }\n    if (useGPU) {\n      log.info('GPUGridAggregator: GPU Aggregation not supported, falling back to CPU')();\n    }\n    return this.runAggregationOnCPU(aggregationParams);\n  }\n\n  // Reads aggregation data into JS Array object\n  // For WebGL1, data is available in JS Array objects already.\n  // For WebGL2, data is read from Buffer objects and cached for subsequent queries.\n  getData(weightId) {\n    const data = {};\n    const results = this.state.results;\n    if (!results[weightId].aggregationData) {\n      // cache the results if reading from the buffer (WebGL2 path)\n      results[weightId].aggregationData = results[weightId].aggregationBuffer.getData();\n    }\n    data.aggregationData = results[weightId].aggregationData;\n\n    // Check for optional results\n    for (const arrayName in ARRAY_BUFFER_MAP) {\n      const bufferName = ARRAY_BUFFER_MAP[arrayName];\n\n      if (results[weightId][arrayName] || results[weightId][bufferName]) {\n        // cache the result\n        results[weightId][arrayName] =\n          results[weightId][arrayName] || results[weightId][bufferName].getData();\n        data[arrayName] = results[weightId][arrayName];\n      }\n    }\n    return data;\n  }\n\n  // PRIVATE\n\n  deleteResources(resources) {\n    resources = Array.isArray(resources) ? resources : [resources];\n    resources.forEach(obj => {\n      for (const name in obj) {\n        obj[name].delete();\n      }\n    });\n  }\n\n  getAggregationParams(opts) {\n    const aggregationParams = Object.assign({}, DEFAULT_RUN_PARAMS, opts);\n    const {\n      useGPU,\n      gridTransformMatrix,\n      viewport,\n      weights,\n      projectPoints,\n      cellSize\n    } = aggregationParams;\n    if (this.state.useGPU !== useGPU) {\n      // CPU/GPU resources need to reinitialized, force set the change flags.\n      aggregationParams.changeFlags = Object.assign(\n        {},\n        aggregationParams.changeFlags,\n        DEFAULT_CHANGE_FLAGS\n      );\n    }\n    if (\n      cellSize &&\n      (!this.state.cellSize ||\n        this.state.cellSize[0] !== cellSize[0] ||\n        this.state.cellSize[1] !== cellSize[1])\n    ) {\n      aggregationParams.changeFlags.cellSizeChanged = true;\n      // For GridLayer aggregation, cellSize is calculated by parsing all input data as it depends\n      // on bounding box, cache cellSize\n      this.setState({cellSize});\n    }\n\n    this.validateProps(aggregationParams, opts);\n\n    this.setState({useGPU});\n    aggregationParams.gridTransformMatrix =\n      (projectPoints ? viewport.viewportMatrix : gridTransformMatrix) || IDENTITY_MATRIX;\n\n    if (weights) {\n      aggregationParams.weights = this.normalizeWeightParams(weights);\n\n      // cache weights to process when only cellSize or viewport is changed.\n      // position data is cached in Buffers for GPU case and in 'gridPositions' for CPU case.\n      this.setState({weights: aggregationParams.weights});\n    }\n    return aggregationParams;\n  }\n\n  normalizeWeightParams(weights) {\n    const result = {};\n    for (const id in weights) {\n      result[id] = Object.assign({}, DEFAULT_WEIGHT_PARAMS, weights[id]);\n    }\n    return result;\n  }\n\n  // Update priveate state\n  setState(updateObject) {\n    Object.assign(this.state, updateObject);\n  }\n\n  shouldTransformToGrid(opts) {\n    const {projectPoints, changeFlags} = opts;\n    if (\n      !this.state.gridPositions ||\n      changeFlags.dataChanged ||\n      (projectPoints && changeFlags.viewportChanged) // world space aggregation (GridLayer) doesn't change when viewport is changed.\n    ) {\n      return true;\n    }\n    return false;\n  }\n\n  updateGridSize(opts) {\n    const {viewport, cellSize} = opts;\n    const width = opts.width || viewport.width;\n    const height = opts.height || viewport.height;\n    const numCol = Math.ceil(width / cellSize[0]);\n    const numRow = Math.ceil(height / cellSize[1]);\n    this.setState({numCol, numRow, windowSize: [width, height]});\n  }\n\n  /* eslint-disable complexity */\n  // validate and log.assert\n  validateProps(aggregationParams, opts) {\n    const {changeFlags, projectPoints, gridTransformMatrix} = aggregationParams;\n    log.assert(\n      changeFlags.dataChanged || changeFlags.viewportChanged || changeFlags.cellSizeChanged\n    );\n\n    // log.assert for required options\n    log.assert(\n      !changeFlags.dataChanged ||\n        (opts.positions &&\n          opts.weights &&\n          (!opts.projectPositions || opts.viewport) &&\n          opts.cellSize)\n    );\n    log.assert(!changeFlags.cellSizeChanged || opts.cellSize);\n\n    // viewport is needed only when performing screen space aggregation (projectPoints is true)\n    log.assert(!(changeFlags.viewportChanged && projectPoints) || opts.viewport);\n\n    if (projectPoints && gridTransformMatrix) {\n      log.warn('projectPoints is true, gridTransformMatrix is ignored')();\n    }\n  }\n  /* eslint-enable complexity */\n\n  // CPU Aggregation methods\n\n  // aggregated weight value to a cell\n  /* eslint-disable max-depth */\n  calculateAggregationData(opts) {\n    const {weights, results, cellIndex, posIndex} = opts;\n    for (const id in weights) {\n      const {values, size, operation} = weights[id];\n      const {aggregationData} = results[id];\n\n      // Fill RGB with weights\n      for (let sizeIndex = 0; sizeIndex < size; sizeIndex++) {\n        const cellElementIndex = cellIndex + sizeIndex;\n        const weightComponent = values[posIndex * WEIGHT_SIZE + sizeIndex];\n\n        if (aggregationData[cellIndex + 3] === 0) {\n          // if the cell is getting update the first time, set the value directly.\n          aggregationData[cellElementIndex] = weightComponent;\n        } else {\n          switch (operation) {\n            case AGGREGATION_OPERATION.SUM:\n            case AGGREGATION_OPERATION.MEAN:\n              aggregationData[cellElementIndex] += weightComponent;\n              // MEAN value is calculated during 'calculateMeanMaxMinData'\n              break;\n            case AGGREGATION_OPERATION.MIN:\n              aggregationData[cellElementIndex] = Math.min(\n                aggregationData[cellElementIndex],\n                weightComponent\n              );\n              break;\n            case AGGREGATION_OPERATION.MAX:\n              aggregationData[cellElementIndex] = Math.max(\n                aggregationData[cellElementIndex],\n                weightComponent\n              );\n              break;\n            default:\n              // Not a valid operation enum.\n              log.assert(false);\n              break;\n          }\n        }\n      }\n\n      // Track the count per grid-cell\n      aggregationData[cellIndex + 3]++;\n    }\n  }\n\n  /* eslint-disable max-depth, complexity */\n  calculateMeanMaxMinData(opts) {\n    const {validCellIndices, results, weights} = opts;\n\n    // collect max/min values\n    validCellIndices.forEach(cellIndex => {\n      for (const id in results) {\n        const {size, needMin, needMax, operation} = weights[id];\n        const {aggregationData, minData, maxData, maxMinData} = results[id];\n        const calculateMinMax = needMin || needMax;\n        const calculateMean = operation === AGGREGATION_OPERATION.MEAN;\n        const combineMaxMin = needMin && needMax && weights[id].combineMaxMin;\n        const count = aggregationData[cellIndex + ELEMENTCOUNT - 1];\n        for (\n          let sizeIndex = 0;\n          sizeIndex < size && (calculateMinMax || calculateMean);\n          sizeIndex++\n        ) {\n          const cellElementIndex = cellIndex + sizeIndex;\n          let weight = aggregationData[cellElementIndex];\n          if (calculateMean) {\n            aggregationData[cellElementIndex] /= count;\n            weight = aggregationData[cellElementIndex];\n          }\n          if (combineMaxMin) {\n            // use RGB for max values for 3 weights.\n            maxMinData[sizeIndex] = Math.max(maxMinData[sizeIndex], weight);\n          } else {\n            if (needMin) {\n              minData[sizeIndex] = Math.min(minData[sizeIndex], weight);\n            }\n            if (needMax) {\n              maxData[sizeIndex] = Math.max(maxData[sizeIndex], weight);\n            }\n          }\n        }\n        // update total aggregation values.\n        if (combineMaxMin) {\n          // Use Alpha channel to store total min value for weight#0\n          maxMinData[ELEMENTCOUNT - 1] = Math.min(\n            maxMinData[ELEMENTCOUNT - 1],\n            aggregationData[cellIndex + 0]\n          );\n        } else {\n          // Use Alpha channel to store total counts.\n          if (needMin) {\n            minData[ELEMENTCOUNT - 1] += count;\n          }\n          if (needMax) {\n            maxData[ELEMENTCOUNT - 1] += count;\n          }\n        }\n      }\n    });\n  }\n  /* eslint-enable max-depth */\n\n  initCPUResults(opts) {\n    const weights = opts.weights || this.state.weights;\n    const {numCol, numRow} = this.state;\n    const results = {};\n    // setup results object\n    for (const id in weights) {\n      let {aggregationData, minData, maxData, maxMinData} = weights[id];\n      const {needMin, needMax} = weights[id];\n      const combineMaxMin = needMin && needMax && weights[id].combineMaxMin;\n\n      const aggregationSize = numCol * numRow * ELEMENTCOUNT;\n      aggregationData = getFloatArray(aggregationData, aggregationSize);\n      if (combineMaxMin) {\n        maxMinData = getFloatArray(maxMinData, ELEMENTCOUNT);\n        // RGB for max value\n        maxMinData.fill(-Infinity, 0, ELEMENTCOUNT - 1);\n        // Alpha for min value\n        maxMinData[ELEMENTCOUNT - 1] = Infinity;\n      } else {\n        // RGB for min/max values\n        // Alpha for total count\n        if (needMin) {\n          minData = getFloatArray(minData, ELEMENTCOUNT, Infinity);\n          minData[ELEMENTCOUNT - 1] = 0;\n        }\n        if (needMax) {\n          maxData = getFloatArray(maxData, ELEMENTCOUNT, -Infinity);\n          maxData[ELEMENTCOUNT - 1] = 0;\n        }\n      }\n      results[id] = Object.assign({}, weights[id], {\n        aggregationData,\n        minData,\n        maxData,\n        maxMinData\n      });\n    }\n    return results;\n  }\n\n  /* eslint-disable max-statements */\n  runAggregationOnCPU(opts) {\n    const {positions, cellSize, gridTransformMatrix, viewport, projectPoints} = opts;\n    let {weights} = opts;\n    const {numCol, numRow} = this.state;\n    const results = this.initCPUResults(opts);\n    // screen space or world space projection required\n    const gridTransformRequired = this.shouldTransformToGrid(opts);\n    let gridPositions;\n    const pos = [0, 0, 0];\n\n    log.assert(gridTransformRequired || opts.changeFlags.cellSizeChanged);\n\n    let posCount;\n    if (gridTransformRequired) {\n      posCount = positions.length / 2;\n      gridPositions = new Float64Array(positions.length);\n      this.setState({gridPositions});\n    } else {\n      gridPositions = this.state.gridPositions;\n      weights = this.state.weights;\n      posCount = gridPositions.length / 2;\n    }\n\n    const validCellIndices = new Set();\n    for (let posIndex = 0; posIndex < posCount; posIndex++) {\n      let x;\n      let y;\n      if (gridTransformRequired) {\n        pos[0] = positions[posIndex * 2];\n        pos[1] = positions[posIndex * 2 + 1];\n        if (projectPoints) {\n          [x, y] = viewport.project(pos);\n        } else {\n          [x, y] = worldToPixels(pos, gridTransformMatrix);\n        }\n        gridPositions[posIndex * 2] = x;\n        gridPositions[posIndex * 2 + 1] = y;\n      } else {\n        x = gridPositions[posIndex * 2];\n        y = gridPositions[posIndex * 2 + 1];\n      }\n\n      const colId = Math.floor(x / cellSize[0]);\n      const rowId = Math.floor(y / cellSize[1]);\n      if (colId >= 0 && colId < numCol && rowId >= 0 && rowId < numRow) {\n        const cellIndex = (colId + rowId * numCol) * ELEMENTCOUNT;\n        validCellIndices.add(cellIndex);\n        this.calculateAggregationData({weights, results, cellIndex, posIndex});\n      }\n    }\n\n    this.calculateMeanMaxMinData({validCellIndices, results, weights});\n\n    // Update buffer objects.\n    this.updateAggregationBuffers(opts, results);\n\n    this.setState({results});\n    return results;\n  }\n  /* eslint-disable max-statements */\n\n  updateCPUResultBuffer({gl, bufferName, id, data, result}) {\n    const {resources} = this.state;\n    const resourceName = `cpu-result-${id}-${bufferName}`;\n    result[bufferName] = result[bufferName] || resources[resourceName];\n    if (result[bufferName]) {\n      result[bufferName].setData({data});\n    } else {\n      // save resource for garbage collection\n      resources[resourceName] = new Buffer(gl, data);\n      result[bufferName] = resources[resourceName];\n    }\n  }\n\n  updateAggregationBuffers(opts, results) {\n    if (!opts.createBufferObjects) {\n      return;\n    }\n    const weights = opts.weights || this.state.weights;\n    for (const id in results) {\n      const {aggregationData, minData, maxData, maxMinData} = results[id];\n      const {needMin, needMax} = weights[id];\n      const combineMaxMin = needMin && needMax && weights[id].combineMaxMin;\n      this.updateCPUResultBuffer({\n        gl: this.gl,\n        bufferName: 'aggregationBuffer',\n        id,\n        data: aggregationData,\n        result: results[id]\n      });\n      if (combineMaxMin) {\n        this.updateCPUResultBuffer({\n          gl: this.gl,\n          bufferName: 'maxMinBuffer',\n          id,\n          data: maxMinData,\n          result: results[id]\n        });\n      } else {\n        if (needMin) {\n          this.updateCPUResultBuffer({\n            gl: this.gl,\n            bufferName: 'minBuffer',\n            id,\n            data: minData,\n            result: results[id]\n          });\n        }\n        if (needMax) {\n          this.updateCPUResultBuffer({\n            gl: this.gl,\n            bufferName: 'maxBuffer',\n            id,\n            data: maxData,\n            result: results[id]\n          });\n        }\n      }\n    }\n  }\n\n  // GPU Aggregation methods\n\n  getAggregateData(opts) {\n    const results = {};\n    const {\n      textures,\n      framebuffers,\n      maxMinFramebuffers,\n      minFramebuffers,\n      maxFramebuffers,\n      weights\n    } = this.state;\n\n    for (const id in weights) {\n      results[id] = {};\n      const {needMin, needMax, combineMaxMin} = weights[id];\n      results[id].aggregationTexture = textures[id];\n      results[id].aggregationBuffer = readPixelsToBuffer(framebuffers[id], {\n        target: weights[id].aggregationBuffer, // update if a buffer is provided\n        sourceType: GL.FLOAT\n      });\n      if (needMin && needMax && combineMaxMin) {\n        results[id].maxMinBuffer = readPixelsToBuffer(maxMinFramebuffers[id], {\n          target: weights[id].maxMinBuffer, // update if a buffer is provided\n          sourceType: GL.FLOAT\n        });\n      } else {\n        if (needMin) {\n          results[id].minBuffer = readPixelsToBuffer(minFramebuffers[id], {\n            target: weights[id].minBuffer, // update if a buffer is provided\n            sourceType: GL.FLOAT\n          });\n        }\n        if (needMax) {\n          results[id].maxBuffer = readPixelsToBuffer(maxFramebuffers[id], {\n            target: weights[id].maxBuffer, // update if a buffer is provided\n            sourceType: GL.FLOAT\n          });\n        }\n      }\n    }\n    this.trackGPUResultBuffers(results, weights);\n    return results;\n  }\n\n  getAggregationModel(fp64 = false) {\n    const {gl, shaderCache} = this;\n    return new Model(gl, {\n      id: 'Gird-Aggregation-Model',\n      vs: fp64 ? AGGREGATE_TO_GRID_VS_FP64 : AGGREGATE_TO_GRID_VS,\n      fs: AGGREGATE_TO_GRID_FS,\n      modules: fp64 ? ['fp64', 'project64'] : ['project32'],\n      shaderCache,\n      vertexCount: 0,\n      drawMode: GL.POINTS\n    });\n  }\n\n  getAllAggregationModel() {\n    const {gl, shaderCache} = this;\n    const {numCol, numRow} = this.state;\n    return new Model(gl, {\n      id: 'All-Aggregation-Model',\n      vs: AGGREGATE_ALL_VS_FP64,\n      fs: AGGREGATE_ALL_FS,\n      modules: ['fp64'],\n      shaderCache,\n      vertexCount: 1,\n      drawMode: GL.POINTS,\n      isInstanced: true,\n      instanceCount: numCol * numRow,\n      attributes: {\n        position: [0, 0]\n      }\n    });\n  }\n\n  getMeanTransform(opts) {\n    if (this.meanTransform) {\n      this.meanTransform.update(opts);\n    } else {\n      this.meanTransform = new Transform(\n        this.gl,\n        Object.assign(\n          {},\n          {\n            vs: TRANSFORM_MEAN_VS,\n            _targetTextureVarying: 'meanValues'\n          },\n          opts\n        )\n      );\n    }\n    return this.meanTransform;\n  }\n\n  renderAggregateData(opts) {\n    const {cellSize, viewport, gridTransformMatrix, projectPoints} = opts;\n    const {\n      numCol,\n      numRow,\n      windowSize,\n      maxMinFramebuffers,\n      minFramebuffers,\n      maxFramebuffers,\n      weights\n    } = this.state;\n\n    const uProjectionMatrixFP64 = fp64ifyMatrix4(gridTransformMatrix);\n    const gridSize = [numCol, numRow];\n    const parameters = {\n      blend: true,\n      depthTest: false,\n      blendFunc: [GL.ONE, GL.ONE]\n    };\n    const moduleSettings = {viewport};\n    const uniforms = {\n      windowSize,\n      cellSize,\n      gridSize,\n      uProjectionMatrix: gridTransformMatrix,\n      uProjectionMatrixFP64,\n      projectPoints\n    };\n\n    for (const id in weights) {\n      const {needMin, needMax} = weights[id];\n      const combineMaxMin = needMin && needMax && weights[id].combineMaxMin;\n      this.renderToWeightsTexture({id, parameters, moduleSettings, uniforms, gridSize});\n      if (combineMaxMin) {\n        this.renderToMaxMinTexture({\n          id,\n          parameters: Object.assign({}, parameters, {blendEquation: MAX_MIN_BLEND_EQUATION}),\n          gridSize,\n          minOrMaxFb: maxMinFramebuffers[id],\n          clearParams: {clearColor: [0, 0, 0, MAX_32_BIT_FLOAT]},\n          combineMaxMin\n        });\n      } else {\n        if (needMin) {\n          this.renderToMaxMinTexture({\n            id,\n            parameters: Object.assign({}, parameters, {blendEquation: MIN_BLEND_EQUATION}),\n            gridSize,\n            minOrMaxFb: minFramebuffers[id],\n            clearParams: {clearColor: [MAX_32_BIT_FLOAT, MAX_32_BIT_FLOAT, MAX_32_BIT_FLOAT, 0]},\n            combineMaxMin\n          });\n        }\n        if (needMax) {\n          this.renderToMaxMinTexture({\n            id,\n            parameters: Object.assign({}, parameters, {blendEquation: MAX_BLEND_EQUATION}),\n            gridSize,\n            minOrMaxFb: maxFramebuffers[id],\n            combineMaxMin\n          });\n        }\n      }\n    }\n  }\n\n  // render all aggregated grid-cells to generate Min, Max or MaxMin data texture\n  renderToMaxMinTexture(opts) {\n    const {id, parameters, gridSize, minOrMaxFb, combineMaxMin, clearParams = {}} = opts;\n    const {framebuffers} = this.state;\n    const {gl, allAggregationModel} = this;\n\n    minOrMaxFb.bind();\n    gl.viewport(0, 0, gridSize[0], gridSize[1]);\n    withParameters(gl, clearParams, () => {\n      gl.clear(gl.COLOR_BUFFER_BIT);\n    });\n    allAggregationModel.draw({\n      parameters,\n      uniforms: {\n        uSampler: framebuffers[id].texture,\n        gridSize,\n        combineMaxMin\n      }\n    });\n    minOrMaxFb.unbind();\n  }\n\n  // render all data points to aggregate weights\n  renderToWeightsTexture(opts) {\n    const {id, parameters, moduleSettings, uniforms, gridSize} = opts;\n    const {framebuffers, equations, weightAttributes, weights} = this.state;\n    const {gl, gridAggregationModel} = this;\n    const {operation} = weights[id];\n\n    framebuffers[id].bind();\n    gl.viewport(0, 0, gridSize[0], gridSize[1]);\n    const clearColor =\n      operation === AGGREGATION_OPERATION.MIN\n        ? [MAX_32_BIT_FLOAT, MAX_32_BIT_FLOAT, MAX_32_BIT_FLOAT, 0]\n        : [0, 0, 0, 0];\n    withParameters(gl, {clearColor}, () => {\n      gl.clear(gl.COLOR_BUFFER_BIT);\n    });\n\n    const attributes = {weights: weightAttributes[id]};\n    gridAggregationModel.draw({\n      parameters: Object.assign({}, parameters, {blendEquation: equations[id]}),\n      moduleSettings,\n      uniforms,\n      attributes\n    });\n    framebuffers[id].unbind();\n\n    if (operation === AGGREGATION_OPERATION.MEAN) {\n      const {meanTextures, textures} = this.state;\n      const transformOptions = {\n        _sourceTextures: {aggregationValues: meanTextures[id]}, // contains aggregated data\n        _targetTexture: textures[id], // store mean values,\n        elementCount: textures[id].width * textures[id].height\n      };\n      const meanTransform = this.getMeanTransform(transformOptions);\n      meanTransform.run({\n        parameters: {\n          blend: false,\n          depthTest: false\n        }\n      });\n\n      // update framebuffer with mean results so readPixelsToBuffer returns mean values\n      framebuffers[id].attach({[GL.COLOR_ATTACHMENT0]: textures[id]});\n    }\n  }\n\n  runAggregationOnGPU(opts) {\n    this.updateModels(opts);\n    this.setupFramebuffers(opts);\n    this.renderAggregateData(opts);\n    const results = this.getAggregateData(opts);\n    this.setState({results});\n    return results;\n  }\n\n  // set up framebuffer for each weight\n  /* eslint-disable complexity, max-depth */\n  setupFramebuffers(opts) {\n    const {\n      numCol,\n      numRow,\n      textures,\n      framebuffers,\n      maxMinFramebuffers,\n      minFramebuffers,\n      maxFramebuffers,\n      resources,\n      meanTextures,\n      equations,\n      weights\n    } = this.state;\n    const framebufferSize = {width: numCol, height: numRow};\n    for (const id in weights) {\n      const {needMin, needMax, combineMaxMin, operation} = weights[id];\n      textures[id] =\n        weights[id].aggregationTexture ||\n        textures[id] ||\n        getFloatTexture(this.gl, {id: `${id}-texture`, width: numCol, height: numRow});\n      textures[id].resize(framebufferSize);\n      let texture = textures[id];\n      if (operation === AGGREGATION_OPERATION.MEAN) {\n        // For MEAN, we first aggregatet into a temp texture\n        meanTextures[id] =\n          meanTextures[id] ||\n          getFloatTexture(this.gl, {id: `${id}-mean-texture`, width: numCol, height: numRow});\n        meanTextures[id].resize(framebufferSize);\n        texture = meanTextures[id];\n      }\n      if (framebuffers[id]) {\n        framebuffers[id].attach({[GL.COLOR_ATTACHMENT0]: texture});\n      } else {\n        framebuffers[id] = getFramebuffer(this.gl, {\n          id: `${id}-fb`,\n          width: numCol,\n          height: numRow,\n          texture\n        });\n      }\n      framebuffers[id].resize(framebufferSize);\n      equations[id] = EQUATION_MAP[operation];\n      // For min/max framebuffers will use default size 1X1\n      if (needMin || needMax) {\n        if (needMin && needMax && combineMaxMin) {\n          if (!maxMinFramebuffers[id]) {\n            resources[`${id}-maxMin`] = getFloatTexture(this.gl, {id: `${id}-maxMinTex`});\n            maxMinFramebuffers[id] = getFramebuffer(this.gl, {\n              id: `${id}-maxMinFb`,\n              texture: resources[`${id}-maxMin`]\n            });\n          }\n        } else {\n          if (needMin) {\n            if (!minFramebuffers[id]) {\n              resources[`${id}-min`] = getFloatTexture(this.gl, {id: `${id}-minTex`});\n              minFramebuffers[id] = getFramebuffer(this.gl, {\n                id: `${id}-minFb`,\n                texture: resources[`${id}-min`]\n              });\n            }\n          }\n          if (needMax) {\n            if (!maxFramebuffers[id]) {\n              resources[`${id}-max`] = getFloatTexture(this.gl, {id: `${id}-maxTex`});\n              maxFramebuffers[id] = getFramebuffer(this.gl, {\n                id: `${id}-maxFb`,\n                texture: resources[`${id}-max`]\n              });\n            }\n          }\n        }\n      }\n    }\n  }\n  /* eslint-enable complexity, max-depth */\n\n  setupModels(fp64 = false) {\n    if (this.gridAggregationModel) {\n      this.gridAggregationModel.delete();\n    }\n    this.gridAggregationModel = this.getAggregationModel(fp64);\n    if (!this.allAggregationModel) {\n      // Model doesn't have to change when fp64 flag changes\n      this.allAggregationModel = this.getAllAggregationModel();\n    }\n  }\n\n  // set up buffers for all weights\n  setupWeightAttributes(opts) {\n    const {weightAttributes, vertexCount, weights, resources} = this.state;\n    for (const id in weights) {\n      const {values} = weights[id];\n      // values can be Array, Float32Array or Buffer\n      if (Array.isArray(values) || values.constructor === Float32Array) {\n        log.assert(values.length / 3 === vertexCount);\n        const typedArray = Array.isArray(values) ? new Float32Array(values) : values;\n        if (weightAttributes[id] instanceof Buffer) {\n          weightAttributes[id].setData(typedArray);\n        } else {\n          resources[`${id}-buffer`] = new Buffer(this.gl, typedArray);\n          weightAttributes[id] = resources[`${id}-buffer`];\n        }\n      } else {\n        // log.assert((values instanceof Attribute) || (values instanceof Buffer));\n        log.assert(values instanceof Buffer);\n        weightAttributes[id] = values;\n      }\n    }\n  }\n\n  // GPU Aggregation results are provided in Buffers, if new Buffer objects are created track them for later deletion.\n  /* eslint-disable max-depth */\n  trackGPUResultBuffers(results, weights) {\n    const {resources} = this.state;\n    for (const id in results) {\n      if (results[id]) {\n        for (const bufferName of BUFFER_NAMES) {\n          if (results[id][bufferName] && weights[id][bufferName] !== results[id][bufferName]) {\n            // No result buffer is provided in weights object, `readPixelsToBuffer` has created a new Buffer object\n            // collect the new buffer for garabge collection\n            const name = `gpu-result-${id}-${bufferName}`;\n            if (resources[name]) {\n              resources[name].delete();\n            }\n            resources[name] = results[id][bufferName];\n          }\n        }\n      }\n    }\n  }\n  /* eslint-enable max-depth */\n\n  /* eslint-disable max-statements */\n  updateModels(opts) {\n    const {gl} = this;\n    const {positions, positions64xyLow, changeFlags} = opts;\n    const {numCol, numRow} = this.state;\n    const aggregationModelAttributes = {};\n    let modelDirty = false;\n\n    if (opts.fp64 !== this.state.fp64) {\n      this.setupModels(opts.fp64);\n      this.setState({fp64: opts.fp64});\n      modelDirty = true;\n    }\n\n    if (changeFlags.dataChanged || !this.state.positionsBuffer) {\n      let {positionsBuffer, positions64xyLowBuffer} = this.state;\n      if (positionsBuffer) {\n        positionsBuffer.delete();\n      }\n      if (positions64xyLowBuffer) {\n        positions64xyLowBuffer.delete();\n      }\n      const vertexCount = positions.length / 2;\n      positionsBuffer = new Buffer(gl, new Float32Array(positions));\n      positions64xyLowBuffer = new Buffer(gl, {\n        data: new Float32Array(positions64xyLow),\n        accessor: {size: 2}\n      });\n      this.setState({positionsBuffer, positions64xyLowBuffer, vertexCount});\n\n      this.setupWeightAttributes(opts);\n      modelDirty = true;\n    }\n\n    if (modelDirty) {\n      const {vertexCount, positionsBuffer, positions64xyLowBuffer} = this.state;\n      aggregationModelAttributes.positions = positionsBuffer;\n      if (opts.fp64) {\n        aggregationModelAttributes.positions64xyLow = positions64xyLowBuffer;\n      }\n      this.gridAggregationModel.setVertexCount(vertexCount);\n      this.gridAggregationModel.setAttributes(aggregationModelAttributes);\n    }\n\n    if (changeFlags.cellSizeChanged || changeFlags.viewportChanged) {\n      this.allAggregationModel.setInstanceCount(numCol * numRow);\n    }\n  }\n  /* eslint-enable max-statements */\n}\n"],"file":"gpu-grid-aggregator.js"}