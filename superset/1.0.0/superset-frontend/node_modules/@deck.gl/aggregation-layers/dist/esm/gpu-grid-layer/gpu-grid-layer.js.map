{"version":3,"sources":["../../../src/gpu-grid-layer/gpu-grid-layer.js"],"names":["PhongMaterial","CompositeLayer","log","GPUGridAggregator","AGGREGATION_OPERATION","pointToDensityGridData","defaultColorRange","colorRangeToFlatArray","GPUGridCellLayer","pointToDensityGridDataCPU","defaultMaterial","defaultProps","colorDomain","colorRange","getColorWeight","type","value","x","colorAggregation","elevationDomain","elevationRange","getElevationWeight","elevationAggregation","elevationScale","min","cellSize","max","coverage","getPosition","position","extruded","fp64","material","gpuAggregation","GPUGridLayer","gl","context","isSupported","error","options","id","shaderCache","state","gpuGridAggregator","opts","aggregationFlags","getAggregationFlags","getLayerData","setState","gridHash","delete","oldProps","props","changeFlags","isDataChanged","Object","assign","dataChanged","cellSizeChanged","updateTriggersChanged","all","index","gridSize","gridOrigin","yIndex","Math","floor","xIndex","latIdx","lonIdx","yPos","xPos","info","mode","object","getPositionForIndex","colorInfo","getAggregationData","pixelIndex","getData","elevationInfo","colorValue","cellWeight","elevationValue","count","cellCount","totalCount","data","cpuAggregation","key","getHashKeyForIndex","cpuAggregationData","picked","Boolean","cellSizeMeters","weightParams","color","getWeight","operation","needMin","needMax","combineMaxMin","elevation","boundingBox","weights","Float32Array","SubLayerClass","getSubLayerClass","gridOffset","getSubLayerProps","numInstances","layerName"],"mappings":"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","sourcesContent":["// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nimport {PhongMaterial} from '@luma.gl/core';\nimport {CompositeLayer, log} from '@deck.gl/core';\n\nimport GPUGridAggregator from '../utils/gpu-grid-aggregation/gpu-grid-aggregator';\nimport {AGGREGATION_OPERATION} from '../utils/aggregation-operation-utils';\nimport {pointToDensityGridData} from '../utils/gpu-grid-aggregation/grid-aggregation-utils';\nimport {defaultColorRange, colorRangeToFlatArray} from '../utils/color-utils';\nimport GPUGridCellLayer from './gpu-grid-cell-layer';\nimport {pointToDensityGridDataCPU} from './../cpu-grid-layer/grid-aggregator';\n\nconst defaultMaterial = new PhongMaterial();\nconst defaultProps = {\n  // color\n  colorDomain: null,\n  colorRange: defaultColorRange,\n  getColorWeight: {type: 'accessor', value: x => 1},\n  colorAggregation: 'SUM',\n\n  // elevation\n  elevationDomain: null,\n  elevationRange: [0, 1000],\n  getElevationWeight: {type: 'accessor', value: x => 1},\n  elevationAggregation: 'SUM',\n  elevationScale: {type: 'number', min: 0, value: 1},\n\n  // grid\n  cellSize: {type: 'number', min: 0, max: 1000, value: 1000},\n  coverage: {type: 'number', min: 0, max: 1, value: 1},\n  getPosition: {type: 'accessor', value: x => x.position},\n  extruded: false,\n  fp64: false,\n\n  // Optional material for 'lighting' shader module\n  material: defaultMaterial,\n\n  // GPU Aggregation\n  gpuAggregation: true\n};\n\nexport default class GPUGridLayer extends CompositeLayer {\n  initializeState() {\n    const {gl} = this.context;\n    const isSupported = GPUGridAggregator.isSupported(gl);\n    if (!isSupported) {\n      log.error('GPUGridLayer is not supported on this browser, use GridLayer instead')();\n    }\n    const options = {\n      id: `${this.id}-gpu-aggregator`,\n      shaderCache: this.context.shaderCache\n    };\n    this.state = {\n      gpuGridAggregator: new GPUGridAggregator(gl, options),\n      isSupported\n    };\n  }\n\n  updateState(opts) {\n    const aggregationFlags = this.getAggregationFlags(opts);\n    if (aggregationFlags) {\n      // aggregate points into grid cells\n      this.getLayerData(aggregationFlags);\n      // reset cached CPU Aggregation results (used for picking)\n      this.setState({gridHash: null});\n    }\n  }\n\n  finalizeState() {\n    super.finalizeState();\n    this.state.gpuGridAggregator.delete();\n  }\n\n  getAggregationFlags({oldProps, props, changeFlags}) {\n    let aggregationFlags = null;\n    if (!this.state.isSupported) {\n      // Skip update, layer not supported\n      return false;\n    }\n    if (this.isDataChanged({oldProps, props, changeFlags})) {\n      aggregationFlags = Object.assign({}, aggregationFlags, {dataChanged: true});\n    }\n    if (oldProps.cellSize !== props.cellSize) {\n      aggregationFlags = Object.assign({}, aggregationFlags, {cellSizeChanged: true});\n    }\n    return aggregationFlags;\n  }\n\n  isDataChanged({oldProps, props, changeFlags}) {\n    // Flags affecting aggregation data\n    if (changeFlags.dataChanged) {\n      return true;\n    }\n    if (oldProps.gpuAggregation !== props.gpuAggregation) {\n      return true;\n    }\n    if (\n      oldProps.colorAggregation !== props.colorAggregation ||\n      oldProps.elevationAggregation !== props.elevationAggregation\n    ) {\n      return true;\n    }\n    if (\n      changeFlags.updateTriggersChanged &&\n      (changeFlags.updateTriggersChanged.all ||\n        changeFlags.updateTriggersChanged.getPosition ||\n        changeFlags.updateTriggersChanged.getColorWeight ||\n        changeFlags.updateTriggersChanged.getElevationWeight)\n    ) {\n      return true;\n    }\n    return false;\n  }\n\n  getHashKeyForIndex(index) {\n    const {gridSize, gridOrigin, cellSize} = this.state;\n    const yIndex = Math.floor(index / gridSize[0]);\n    const xIndex = index - yIndex * gridSize[0];\n    // This will match the index to the hash-key to access aggregation data from CPU aggregation results.\n    const latIdx = Math.floor(\n      (yIndex * cellSize[1] + gridOrigin[1] + 90 + cellSize[1] / 2) / cellSize[1]\n    );\n    const lonIdx = Math.floor(\n      (xIndex * cellSize[0] + gridOrigin[0] + 180 + cellSize[0] / 2) / cellSize[0]\n    );\n    return `${latIdx}-${lonIdx}`;\n  }\n\n  getPositionForIndex(index) {\n    const {gridSize, gridOrigin, cellSize} = this.state;\n    const yIndex = Math.floor(index / gridSize[0]);\n    const xIndex = index - yIndex * gridSize[0];\n    const yPos = yIndex * cellSize[1] + gridOrigin[1];\n    const xPos = xIndex * cellSize[0] + gridOrigin[0];\n    return [xPos, yPos];\n  }\n\n  getPickingInfo({info, mode}) {\n    const {index} = info;\n    let object = null;\n    if (index >= 0) {\n      const {gpuGridAggregator} = this.state;\n      const position = this.getPositionForIndex(index);\n      const colorInfo = GPUGridAggregator.getAggregationData(\n        Object.assign({pixelIndex: index}, gpuGridAggregator.getData('color'))\n      );\n      const elevationInfo = GPUGridAggregator.getAggregationData(\n        Object.assign({pixelIndex: index}, gpuGridAggregator.getData('elevation'))\n      );\n\n      object = {\n        colorValue: colorInfo.cellWeight,\n        elevationValue: elevationInfo.cellWeight,\n        count: colorInfo.cellCount || elevationInfo.cellCount,\n        position,\n        totalCount: colorInfo.totalCount || elevationInfo.totalCount\n      };\n      if (mode !== 'hover') {\n        // perform CPU aggregation for full list of points for each cell\n        const {data, getPosition} = this.props;\n        let {gridHash} = this.state;\n        if (!gridHash) {\n          const cpuAggregation = pointToDensityGridDataCPU(data, this.props.cellSize, getPosition);\n          gridHash = cpuAggregation.gridHash;\n          this.setState({gridHash});\n        }\n        const key = this.getHashKeyForIndex(index);\n        const cpuAggregationData = gridHash[key];\n        Object.assign(object, cpuAggregationData);\n      }\n    }\n\n    return Object.assign(info, {\n      picked: Boolean(object),\n      // override object with picked cell\n      object\n    });\n  }\n\n  getLayerData(aggregationFlags) {\n    const {\n      data,\n      cellSize: cellSizeMeters,\n      getPosition,\n      gpuAggregation,\n      getColorWeight,\n      colorAggregation,\n      getElevationWeight,\n      elevationAggregation,\n      fp64\n    } = this.props;\n    const weightParams = {\n      color: {\n        getWeight: getColorWeight,\n        operation:\n          AGGREGATION_OPERATION[colorAggregation] ||\n          AGGREGATION_OPERATION[defaultProps.colorAggregation],\n        needMin: true,\n        needMax: true,\n        combineMaxMin: true\n      },\n      elevation: {\n        getWeight: getElevationWeight,\n        operation:\n          AGGREGATION_OPERATION[elevationAggregation] ||\n          AGGREGATION_OPERATION[defaultProps.elevationAggregation],\n        needMin: true,\n        needMax: true,\n        combineMaxMin: true\n      }\n    };\n    const {weights, gridSize, gridOrigin, cellSize, boundingBox} = pointToDensityGridData({\n      data,\n      cellSizeMeters,\n      getPosition,\n      weightParams,\n      gpuAggregation,\n      gpuGridAggregator: this.state.gpuGridAggregator,\n      boundingBox: this.state.boundingBox, // avoid parsing data when it is not changed.\n      aggregationFlags,\n      fp64\n    });\n    this.setState({weights, gridSize, gridOrigin, cellSize, boundingBox});\n  }\n\n  renderLayers() {\n    if (!this.state.isSupported) {\n      return null;\n    }\n    const {\n      elevationScale,\n      fp64,\n      extruded,\n      cellSize: cellSizeMeters,\n      coverage,\n      material,\n      elevationRange,\n      colorDomain,\n      elevationDomain\n    } = this.props;\n\n    const {weights, gridSize, gridOrigin, cellSize} = this.state;\n\n    const colorRange = colorRangeToFlatArray(this.props.colorRange, Float32Array, 255);\n\n    const SubLayerClass = this.getSubLayerClass('gpu-grid-cell', GPUGridCellLayer);\n\n    return new SubLayerClass(\n      {\n        gridSize,\n        gridOrigin,\n        gridOffset: cellSize,\n        colorRange,\n        elevationRange,\n        colorDomain,\n        elevationDomain,\n\n        fp64,\n        cellSize: cellSizeMeters,\n        coverage,\n        material,\n        elevationScale,\n        extruded\n      },\n      this.getSubLayerProps({\n        id: 'gpu-grid-cell'\n      }),\n      {\n        data: weights,\n        numInstances: gridSize[0] * gridSize[1]\n      }\n    );\n  }\n}\n\nGPUGridLayer.layerName = 'GPUGridLayer';\nGPUGridLayer.defaultProps = defaultProps;\n"],"file":"gpu-grid-layer.js"}