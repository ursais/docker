{"version":3,"sources":["../../../src/screen-grid-layer/screen-grid-layer.js"],"names":["Layer","WebMercatorViewport","createIterable","log","experimental","count","defaultColorRange","colorRangeToFlatArray","GPUGridAggregator","AGGREGATION_OPERATION","Model","Geometry","Buffer","isWebGL2","vs","vs_WebGL1","fs","fs_WebGL1","DEFAULT_MINCOLOR","DEFAULT_MAXCOLOR","AGGREGATION_DATA_UBO_INDEX","COLOR_PROPS","defaultProps","cellSizePixels","value","min","cellMarginPixels","max","colorDomain","colorRange","getPosition","type","d","position","getWeight","gpuAggregation","aggregation","ScreenGridLayer","getShaders","shaders","context","gl","modules","initializeState","attributeManager","getAttributeManager","addInstanced","instancePositions","size","update","calculateInstancePositions","instanceCounts","transition","accessor","calculateInstanceCounts","noAlloc","options","id","shaderCache","maxBuffer","_getMaxCountBuffer","weights","color","operation","SUM","needMax","setState","model","_getModel","gpuGridAggregator","_setupUniformBuffer","shouldUpdateState","changeFlags","somethingChanged","updateState","opts","_updateUniforms","dataChanged","_processData","_getAggregationChangeFlags","_updateAggregation","finalizeState","state","aggregationBuffer","delete","draw","uniforms","props","parameters","minColor","maxColor","cellScale","shouldUseMinMax","maxWeight","layerUniforms","bind","target","Object","assign","depthTest","depthMask","unbind","attribute","numInstances","viewport","width","height","numCol","i","x","y","Math","floor","buffer","getPickingInfo","info","mode","index","aggregationResults","getData","object","getAggregationData","pixelIndex","oldProps","cellSizeChanged","viewportChanged","geometry","drawMode","attributes","positions","Float32Array","isInstanced","byteLength","data","pointCount","Float64Array","colorWeights","iterable","objectInfo","weight","Array","isArray","values","programHandle","program","handle","uniformBlockIndex","getUniformBlockIndex","uniformBlockBinding","_shouldUseMinMax","deprecated","_updateGridParams","invalidateAll","toUpperCase","projectPoints","gridTransformMatrix","pixelProjectionMatrix","results","run","cellSize","useGPU","maxData","Number","isFinite","invalidate","newState","some","key","margin","ceil","numRow","dataBytes","divisor","layerName"],"mappings":"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","sourcesContent":["// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nimport {Layer, WebMercatorViewport, createIterable, log, experimental} from '@deck.gl/core';\nconst {count} = experimental;\nimport {defaultColorRange, colorRangeToFlatArray} from '../utils/color-utils';\nimport GPUGridAggregator from '../utils/gpu-grid-aggregation/gpu-grid-aggregator';\nimport {AGGREGATION_OPERATION} from '../utils/aggregation-operation-utils';\n\nimport GL from '@luma.gl/constants';\nimport {Model, Geometry, Buffer, isWebGL2} from '@luma.gl/core';\n\nimport vs from './screen-grid-layer-vertex.glsl';\nimport vs_WebGL1 from './screen-grid-layer-vertex-webgl1.glsl';\nimport fs from './screen-grid-layer-fragment.glsl';\nimport fs_WebGL1 from './screen-grid-layer-fragment-webgl1.glsl';\n\nconst DEFAULT_MINCOLOR = [0, 0, 0, 0];\nconst DEFAULT_MAXCOLOR = [0, 255, 0, 255];\nconst AGGREGATION_DATA_UBO_INDEX = 0;\nconst COLOR_PROPS = [`minColor`, `maxColor`, `colorRange`, `colorDomain`];\n\nconst defaultProps = {\n  cellSizePixels: {value: 100, min: 1},\n  cellMarginPixels: {value: 2, min: 0, max: 5},\n\n  colorDomain: null,\n  colorRange: defaultColorRange,\n\n  getPosition: {type: 'accessor', value: d => d.position},\n  getWeight: {type: 'accessor', value: d => [1, 0, 0]},\n\n  gpuAggregation: true,\n  aggregation: 'SUM'\n};\n\nexport default class ScreenGridLayer extends Layer {\n  getShaders() {\n    const shaders = isWebGL2(this.context.gl) ? {vs, fs} : {vs: vs_WebGL1, fs: fs_WebGL1};\n    shaders.modules = ['picking'];\n    return shaders;\n  }\n\n  initializeState() {\n    const attributeManager = this.getAttributeManager();\n    const {gl} = this.context;\n\n    /* eslint-disable max-len */\n    attributeManager.addInstanced({\n      instancePositions: {size: 3, update: this.calculateInstancePositions},\n      instanceCounts: {\n        size: 4,\n        transition: true,\n        accessor: ['getPosition', 'getWeight'],\n        update: this.calculateInstanceCounts,\n        noAlloc: true\n      }\n    });\n    /* eslint-disable max-len */\n\n    const options = {\n      id: `${this.id}-aggregator`,\n      shaderCache: this.context.shaderCache\n    };\n    const maxBuffer = this._getMaxCountBuffer(gl);\n    const weights = {\n      color: {\n        size: 1,\n        operation: AGGREGATION_OPERATION.SUM,\n        needMax: true,\n        maxBuffer\n      }\n    };\n    this.setState({\n      model: this._getModel(gl),\n      gpuGridAggregator: new GPUGridAggregator(gl, options),\n      maxBuffer,\n      weights\n    });\n\n    this._setupUniformBuffer();\n  }\n\n  shouldUpdateState({changeFlags}) {\n    return changeFlags.somethingChanged;\n  }\n\n  updateState(opts) {\n    super.updateState(opts);\n\n    this._updateUniforms(opts);\n\n    if (opts.changeFlags.dataChanged) {\n      this._processData();\n    }\n\n    const changeFlags = this._getAggregationChangeFlags(opts);\n\n    if (changeFlags) {\n      this._updateAggregation(changeFlags);\n    }\n  }\n\n  finalizeState() {\n    super.finalizeState();\n\n    const {aggregationBuffer, maxBuffer, gpuGridAggregator} = this.state;\n    gpuGridAggregator.delete();\n    if (aggregationBuffer) {\n      aggregationBuffer.delete();\n    }\n    if (maxBuffer) {\n      maxBuffer.delete();\n    }\n  }\n\n  draw({uniforms}) {\n    const {gl} = this.context;\n    const {parameters = {}} = this.props;\n    const minColor = this.props.minColor || DEFAULT_MINCOLOR;\n    const maxColor = this.props.maxColor || DEFAULT_MAXCOLOR;\n\n    // If colorDomain not specified we use default domain [1, maxCount]\n    // maxCount value will be deduced from aggregated buffer in the vertex shader.\n    const colorDomain = this.props.colorDomain || [1, 0];\n    const {model, maxBuffer, cellScale, shouldUseMinMax, colorRange, maxWeight} = this.state;\n    const layerUniforms = {\n      minColor,\n      maxColor,\n      cellScale,\n      colorRange,\n      colorDomain,\n      shouldUseMinMax\n    };\n\n    if (isWebGL2(gl)) {\n      maxBuffer.bind({target: GL.UNIFORM_BUFFER});\n    } else {\n      layerUniforms.maxWeight = maxWeight;\n    }\n    uniforms = Object.assign(layerUniforms, uniforms);\n    model.draw({\n      uniforms,\n      parameters: Object.assign(\n        {\n          depthTest: false,\n          depthMask: false\n        },\n        parameters\n      )\n    });\n    if (isWebGL2(gl)) {\n      maxBuffer.unbind();\n    }\n  }\n\n  calculateInstancePositions(attribute, {numInstances}) {\n    const {width, height} = this.context.viewport;\n    const {cellSizePixels} = this.props;\n    const {numCol} = this.state;\n    const {value, size} = attribute;\n\n    for (let i = 0; i < numInstances; i++) {\n      const x = i % numCol;\n      const y = Math.floor(i / numCol);\n      value[i * size + 0] = ((x * cellSizePixels) / width) * 2 - 1;\n      value[i * size + 1] = 1 - ((y * cellSizePixels) / height) * 2;\n      value[i * size + 2] = 0;\n    }\n  }\n\n  calculateInstanceCounts(attribute, {numInstances}) {\n    const {aggregationBuffer} = this.state;\n    attribute.update({\n      buffer: aggregationBuffer\n    });\n  }\n\n  getPickingInfo({info, mode}) {\n    const {index} = info;\n    if (index >= 0) {\n      const {gpuGridAggregator} = this.state;\n      // Get color aggregation results\n      const aggregationResults = gpuGridAggregator.getData('color');\n\n      // Each instance (one cell) is aggregated into single pixel,\n      // Get current instance's aggregation details.\n      info.object = GPUGridAggregator.getAggregationData(\n        Object.assign({pixelIndex: index}, aggregationResults)\n      );\n    }\n\n    return info;\n  }\n\n  // HELPER Methods\n\n  _getAggregationChangeFlags({oldProps, props, changeFlags}) {\n    const cellSizeChanged =\n      props.cellSizePixels !== oldProps.cellSizePixels ||\n      props.cellMarginPixels !== oldProps.cellMarginPixels;\n    const dataChanged = changeFlags.dataChanged || props.aggregation !== oldProps.aggregation;\n    const viewportChanged = changeFlags.viewportChanged;\n\n    if (cellSizeChanged || dataChanged || viewportChanged) {\n      return {cellSizeChanged, dataChanged, viewportChanged};\n    }\n\n    return null;\n  }\n\n  _getModel(gl) {\n    return new Model(\n      gl,\n      Object.assign({}, this.getShaders(), {\n        id: this.props.id,\n        geometry: new Geometry({\n          drawMode: GL.TRIANGLE_FAN,\n          attributes: {\n            positions: new Float32Array([0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0])\n          }\n        }),\n        isInstanced: true,\n        shaderCache: this.context.shaderCache\n      })\n    );\n  }\n\n  // Creates and returns a Uniform Buffer object to hold maxCount value.\n  _getMaxCountBuffer(gl) {\n    return new Buffer(gl, {\n      byteLength: 4 * 4, // Four floats\n      index: AGGREGATION_DATA_UBO_INDEX,\n      accessor: {\n        size: 4\n      }\n    });\n  }\n\n  // Process 'data' and build positions and weights Arrays.\n  _processData() {\n    const {data, getPosition, getWeight} = this.props;\n    const pointCount = count(data);\n    const positions = new Float64Array(pointCount * 2);\n    const colorWeights = new Float32Array(pointCount * 3);\n    const {weights} = this.state;\n\n    const {iterable, objectInfo} = createIterable(data);\n    for (const object of iterable) {\n      objectInfo.index++;\n      const position = getPosition(object, objectInfo);\n      const weight = getWeight(object, objectInfo);\n      const {index} = objectInfo;\n\n      positions[index * 2] = position[0];\n      positions[index * 2 + 1] = position[1];\n\n      if (Array.isArray(weight)) {\n        colorWeights[index * 3] = weight[0];\n        colorWeights[index * 3 + 1] = weight[1];\n        colorWeights[index * 3 + 2] = weight[2];\n      } else {\n        // backward compitability\n        colorWeights[index * 3] = weight;\n      }\n    }\n    weights.color.values = colorWeights;\n    this.setState({positions});\n  }\n\n  // Set a binding point for the aggregation uniform block index\n  _setupUniformBuffer() {\n    const gl = this.context.gl;\n    // For WebGL1, uniform buffer is not used.\n    if (!isWebGL2(gl)) {\n      return;\n    }\n    const programHandle = this.state.model.program.handle;\n\n    // TODO: Replace with luma.gl api when ready.\n    const uniformBlockIndex = gl.getUniformBlockIndex(programHandle, 'AggregationData');\n    gl.uniformBlockBinding(programHandle, uniformBlockIndex, AGGREGATION_DATA_UBO_INDEX);\n  }\n\n  _shouldUseMinMax() {\n    const {minColor, maxColor, colorDomain, colorRange} = this.props;\n    if (minColor || maxColor) {\n      log.deprecated('ScreenGridLayer props: minColor and maxColor', 'colorRange, colorDomain')();\n      return true;\n    }\n    // minColor and maxColor not supplied, check if colorRange or colorDomain supplied.\n    // NOTE: colorDomain and colorRange are experimental features, use them only when supplied.\n    if (colorDomain || colorRange) {\n      return false;\n    }\n    // None specified, use default minColor and maxColor\n    return true;\n  }\n\n  _updateAggregation(changeFlags) {\n    const attributeManager = this.getAttributeManager();\n    if (changeFlags.cellSizeChanged || changeFlags.viewportChanged) {\n      this._updateGridParams();\n      attributeManager.invalidateAll();\n    }\n    const {cellSizePixels, gpuAggregation} = this.props;\n\n    const {positions, weights} = this.state;\n    const {viewport} = this.context;\n\n    weights.color.operation =\n      AGGREGATION_OPERATION[this.props.aggregation.toUpperCase()] || AGGREGATION_OPERATION.SUM;\n\n    let projectPoints = false;\n    let gridTransformMatrix = null;\n\n    if (this.context.viewport instanceof WebMercatorViewport) {\n      // project points from world space (lng/lat) to viewport (screen) space.\n      projectPoints = true;\n    } else {\n      projectPoints = false;\n      // Use pixelProjectionMatrix to transform points to viewport (screen) space.\n      gridTransformMatrix = viewport.pixelProjectionMatrix;\n    }\n    const results = this.state.gpuGridAggregator.run({\n      positions,\n      weights,\n      cellSize: [cellSizePixels, cellSizePixels],\n      viewport,\n      changeFlags,\n      useGPU: gpuAggregation,\n      projectPoints,\n      gridTransformMatrix\n    });\n\n    const maxWeight =\n      results.color.maxData && Number.isFinite(results.color.maxData[0])\n        ? results.color.maxData[0]\n        : 0;\n\n    this.setState({\n      maxWeight // uniform to use under WebGL1\n    });\n\n    attributeManager.invalidate('instanceCounts');\n  }\n\n  _updateUniforms({oldProps, props, changeFlags}) {\n    const newState = {};\n    if (COLOR_PROPS.some(key => oldProps[key] !== props[key])) {\n      newState.shouldUseMinMax = this._shouldUseMinMax();\n    }\n\n    if (oldProps.colorRange !== props.colorRange) {\n      newState.colorRange = colorRangeToFlatArray(props.colorRange, Float32Array, 255);\n    }\n\n    if (\n      oldProps.cellMarginPixels !== props.cellMarginPixels ||\n      oldProps.cellSizePixels !== props.cellSizePixels ||\n      changeFlags.viewportChanged\n    ) {\n      const {width, height} = this.context.viewport;\n      const {cellSizePixels, cellMarginPixels} = this.props;\n      const margin = cellSizePixels > cellMarginPixels ? cellMarginPixels : 0;\n\n      newState.cellScale = new Float32Array([\n        ((cellSizePixels - margin) / width) * 2,\n        (-(cellSizePixels - margin) / height) * 2,\n        1\n      ]);\n    }\n    this.setState(newState);\n  }\n\n  _updateGridParams() {\n    const {width, height} = this.context.viewport;\n    const {cellSizePixels} = this.props;\n    const {gl} = this.context;\n\n    const numCol = Math.ceil(width / cellSizePixels);\n    const numRow = Math.ceil(height / cellSizePixels);\n    const numInstances = numCol * numRow;\n    const dataBytes = numInstances * 4 * 4;\n    let aggregationBuffer = this.state.aggregationBuffer;\n    if (aggregationBuffer) {\n      aggregationBuffer.delete();\n    }\n\n    aggregationBuffer = new Buffer(gl, {\n      byteLength: dataBytes,\n      accessor: {\n        size: 4,\n        type: GL.FLOAT,\n        divisor: 1\n      }\n    });\n    this.state.weights.color.aggregationBuffer = aggregationBuffer;\n    this.setState({\n      numCol,\n      numRow,\n      numInstances,\n      aggregationBuffer\n    });\n  }\n}\n\nScreenGridLayer.layerName = 'ScreenGridLayer';\nScreenGridLayer.defaultProps = defaultProps;\n"],"file":"screen-grid-layer.js"}