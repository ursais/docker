{"version":3,"sources":["../../../src/contour-layer/contour-utils.js"],"names":["getCode","getVertices","CONTOUR_TYPE","generateContours","thresholdData","colors","cellWeights","gridSize","gridOrigin","cellSize","contourSegments","contourPolygons","width","height","forEach","data","index","threshold","x","y","code","meanCode","opts","Array","isArray","type","ISO_BANDS","polygons","polygon","push","vertices","ISO_LINES","i","length","start","end"],"mappings":"AAAA,SAAQA,OAAR,EAAiBC,WAAjB,EAA8BC,YAA9B,QAAiD,oBAAjD;AAIA,OAAO,SAASC,gBAAT,OAOJ;AAAA,MANDC,aAMC,QANDA,aAMC;AAAA,MALDC,MAKC,QALDA,MAKC;AAAA,MAJDC,WAIC,QAJDA,WAIC;AAAA,MAHDC,QAGC,QAHDA,QAGC;AAAA,MAFDC,UAEC,QAFDA,UAEC;AAAA,MADDC,QACC,QADDA,QACC;AACD,QAAMC,eAAe,GAAG,EAAxB;AACA,QAAMC,eAAe,GAAG,EAAxB;AACA,QAAMC,KAAK,GAAGL,QAAQ,CAAC,CAAD,CAAtB;AACA,QAAMM,MAAM,GAAGN,QAAQ,CAAC,CAAD,CAAvB;AAEAH,EAAAA,aAAa,CAACU,OAAd,CAAsB,CAACC,IAAD,EAAOC,KAAP,KAAiB;AAAA,UAC9BC,SAD8B,GACjBF,IADiB,CAC9BE,SAD8B;;AAErC,SAAK,IAAIC,CAAC,GAAG,CAAC,CAAd,EAAiBA,CAAC,GAAGN,KAArB,EAA4BM,CAAC,EAA7B,EAAiC;AAC/B,WAAK,IAAIC,CAAC,GAAG,CAAC,CAAd,EAAiBA,CAAC,GAAGN,MAArB,EAA6BM,CAAC,EAA9B,EAAkC;AAAA,yBAEPnB,OAAO,CAAC;AAC/BM,UAAAA,WAD+B;AAE/BW,UAAAA,SAF+B;AAG/BC,UAAAA,CAH+B;AAI/BC,UAAAA,CAJ+B;AAK/BP,UAAAA,KAL+B;AAM/BC,UAAAA;AAN+B,SAAD,CAFA;AAAA,cAEzBO,IAFyB,YAEzBA,IAFyB;AAAA,cAEnBC,QAFmB,YAEnBA,QAFmB;;AAUhC,cAAMC,IAAI,GAAG;AACXd,UAAAA,UADW;AAEXC,UAAAA,QAFW;AAGXS,UAAAA,CAHW;AAIXC,UAAAA,CAJW;AAKXP,UAAAA,KALW;AAMXC,UAAAA,MANW;AAOXO,UAAAA,IAPW;AAQXC,UAAAA,QARW;AASXjB,UAAAA,aAAa,EAAEW;AATJ,SAAb;;AAWA,YAAIQ,KAAK,CAACC,OAAN,CAAcP,SAAd,CAAJ,EAA8B;AAC5BK,UAAAA,IAAI,CAACG,IAAL,GAAYvB,YAAY,CAACwB,SAAzB;AACA,gBAAMC,QAAQ,GAAG1B,WAAW,CAACqB,IAAD,CAA5B;AACAK,UAAAA,QAAQ,CAACb,OAAT,CAAiBc,OAAO,IAAI;AAC1BjB,YAAAA,eAAe,CAACkB,IAAhB,CAAqB;AACnBC,cAAAA,QAAQ,EAAEF,OADS;AAEnBX,cAAAA;AAFmB,aAArB;AAID,WALD;AAMD,SATD,MASO;AAELK,UAAAA,IAAI,CAACG,IAAL,GAAYvB,YAAY,CAAC6B,SAAzB;AACA,gBAAMD,QAAQ,GAAG7B,WAAW,CAACqB,IAAD,CAA5B;;AACA,eAAK,IAAIU,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGF,QAAQ,CAACG,MAA7B,EAAqCD,CAAC,IAAI,CAA1C,EAA6C;AAC3CtB,YAAAA,eAAe,CAACmB,IAAhB,CAAqB;AACnBK,cAAAA,KAAK,EAAEJ,QAAQ,CAACE,CAAD,CADI;AAEnBG,cAAAA,GAAG,EAAEL,QAAQ,CAACE,CAAC,GAAG,CAAL,CAFM;AAGnBf,cAAAA;AAHmB,aAArB;AAKD;AACF;AACF;AACF;AACF,GA/CD;AAgDA,SAAO;AAACP,IAAAA,eAAD;AAAkBC,IAAAA;AAAlB,GAAP;AACD","sourcesContent":["import {getCode, getVertices, CONTOUR_TYPE} from './marching-squares';\n\n// Given all the cell weights, generates contours for each threshold.\n/* eslint-disable max-depth */\nexport function generateContours({\n  thresholdData,\n  colors,\n  cellWeights,\n  gridSize,\n  gridOrigin,\n  cellSize\n}) {\n  const contourSegments = [];\n  const contourPolygons = [];\n  const width = gridSize[0];\n  const height = gridSize[1];\n\n  thresholdData.forEach((data, index) => {\n    const {threshold} = data;\n    for (let x = -1; x < width; x++) {\n      for (let y = -1; y < height; y++) {\n        // Get the MarchingSquares code based on neighbor cell weights.\n        const {code, meanCode} = getCode({\n          cellWeights,\n          threshold,\n          x,\n          y,\n          width,\n          height\n        });\n        const opts = {\n          gridOrigin,\n          cellSize,\n          x,\n          y,\n          width,\n          height,\n          code,\n          meanCode,\n          thresholdData: data\n        };\n        if (Array.isArray(threshold)) {\n          opts.type = CONTOUR_TYPE.ISO_BANDS;\n          const polygons = getVertices(opts);\n          polygons.forEach(polygon => {\n            contourPolygons.push({\n              vertices: polygon,\n              threshold\n            });\n          });\n        } else {\n          // Get the intersection vertices based on MarchingSquares code.\n          opts.type = CONTOUR_TYPE.ISO_LINES;\n          const vertices = getVertices(opts);\n          for (let i = 0; i < vertices.length; i += 2) {\n            contourSegments.push({\n              start: vertices[i],\n              end: vertices[i + 1],\n              threshold\n            });\n          }\n        }\n      }\n    }\n  });\n  return {contourSegments, contourPolygons};\n}\n/* eslint-enable max-depth */\n"],"file":"contour-utils.js"}