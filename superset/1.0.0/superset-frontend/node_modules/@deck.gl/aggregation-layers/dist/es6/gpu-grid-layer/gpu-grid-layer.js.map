{"version":3,"sources":["../../../src/gpu-grid-layer/gpu-grid-layer.js"],"names":["PhongMaterial","CompositeLayer","log","GPUGridAggregator","AGGREGATION_OPERATION","pointToDensityGridData","defaultColorRange","colorRangeToFlatArray","GPUGridCellLayer","pointToDensityGridDataCPU","defaultMaterial","defaultProps","colorDomain","colorRange","getColorWeight","type","value","x","colorAggregation","elevationDomain","elevationRange","getElevationWeight","elevationAggregation","elevationScale","min","cellSize","max","coverage","getPosition","position","extruded","fp64","material","gpuAggregation","GPUGridLayer","initializeState","gl","context","isSupported","error","options","id","shaderCache","state","gpuGridAggregator","updateState","opts","aggregationFlags","getAggregationFlags","getLayerData","setState","gridHash","finalizeState","delete","oldProps","props","changeFlags","isDataChanged","Object","assign","dataChanged","cellSizeChanged","updateTriggersChanged","all","getHashKeyForIndex","index","gridSize","gridOrigin","yIndex","Math","floor","xIndex","latIdx","lonIdx","getPositionForIndex","yPos","xPos","getPickingInfo","info","mode","object","colorInfo","getAggregationData","pixelIndex","getData","elevationInfo","colorValue","cellWeight","elevationValue","count","cellCount","totalCount","data","cpuAggregation","key","cpuAggregationData","picked","Boolean","cellSizeMeters","weightParams","color","getWeight","operation","needMin","needMax","combineMaxMin","elevation","boundingBox","weights","renderLayers","Float32Array","SubLayerClass","getSubLayerClass","gridOffset","getSubLayerProps","numInstances","layerName"],"mappings":"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","sourcesContent":["// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nimport {PhongMaterial} from '@luma.gl/core';\nimport {CompositeLayer, log} from '@deck.gl/core';\n\nimport GPUGridAggregator from '../utils/gpu-grid-aggregation/gpu-grid-aggregator';\nimport {AGGREGATION_OPERATION} from '../utils/aggregation-operation-utils';\nimport {pointToDensityGridData} from '../utils/gpu-grid-aggregation/grid-aggregation-utils';\nimport {defaultColorRange, colorRangeToFlatArray} from '../utils/color-utils';\nimport GPUGridCellLayer from './gpu-grid-cell-layer';\nimport {pointToDensityGridDataCPU} from './../cpu-grid-layer/grid-aggregator';\n\nconst defaultMaterial = new PhongMaterial();\nconst defaultProps = {\n  // color\n  colorDomain: null,\n  colorRange: defaultColorRange,\n  getColorWeight: {type: 'accessor', value: x => 1},\n  colorAggregation: 'SUM',\n\n  // elevation\n  elevationDomain: null,\n  elevationRange: [0, 1000],\n  getElevationWeight: {type: 'accessor', value: x => 1},\n  elevationAggregation: 'SUM',\n  elevationScale: {type: 'number', min: 0, value: 1},\n\n  // grid\n  cellSize: {type: 'number', min: 0, max: 1000, value: 1000},\n  coverage: {type: 'number', min: 0, max: 1, value: 1},\n  getPosition: {type: 'accessor', value: x => x.position},\n  extruded: false,\n  fp64: false,\n\n  // Optional material for 'lighting' shader module\n  material: defaultMaterial,\n\n  // GPU Aggregation\n  gpuAggregation: true\n};\n\nexport default class GPUGridLayer extends CompositeLayer {\n  initializeState() {\n    const {gl} = this.context;\n    const isSupported = GPUGridAggregator.isSupported(gl);\n    if (!isSupported) {\n      log.error('GPUGridLayer is not supported on this browser, use GridLayer instead')();\n    }\n    const options = {\n      id: `${this.id}-gpu-aggregator`,\n      shaderCache: this.context.shaderCache\n    };\n    this.state = {\n      gpuGridAggregator: new GPUGridAggregator(gl, options),\n      isSupported\n    };\n  }\n\n  updateState(opts) {\n    const aggregationFlags = this.getAggregationFlags(opts);\n    if (aggregationFlags) {\n      // aggregate points into grid cells\n      this.getLayerData(aggregationFlags);\n      // reset cached CPU Aggregation results (used for picking)\n      this.setState({gridHash: null});\n    }\n  }\n\n  finalizeState() {\n    super.finalizeState();\n    this.state.gpuGridAggregator.delete();\n  }\n\n  getAggregationFlags({oldProps, props, changeFlags}) {\n    let aggregationFlags = null;\n    if (!this.state.isSupported) {\n      // Skip update, layer not supported\n      return false;\n    }\n    if (this.isDataChanged({oldProps, props, changeFlags})) {\n      aggregationFlags = Object.assign({}, aggregationFlags, {dataChanged: true});\n    }\n    if (oldProps.cellSize !== props.cellSize) {\n      aggregationFlags = Object.assign({}, aggregationFlags, {cellSizeChanged: true});\n    }\n    return aggregationFlags;\n  }\n\n  isDataChanged({oldProps, props, changeFlags}) {\n    // Flags affecting aggregation data\n    if (changeFlags.dataChanged) {\n      return true;\n    }\n    if (oldProps.gpuAggregation !== props.gpuAggregation) {\n      return true;\n    }\n    if (\n      oldProps.colorAggregation !== props.colorAggregation ||\n      oldProps.elevationAggregation !== props.elevationAggregation\n    ) {\n      return true;\n    }\n    if (\n      changeFlags.updateTriggersChanged &&\n      (changeFlags.updateTriggersChanged.all ||\n        changeFlags.updateTriggersChanged.getPosition ||\n        changeFlags.updateTriggersChanged.getColorWeight ||\n        changeFlags.updateTriggersChanged.getElevationWeight)\n    ) {\n      return true;\n    }\n    return false;\n  }\n\n  getHashKeyForIndex(index) {\n    const {gridSize, gridOrigin, cellSize} = this.state;\n    const yIndex = Math.floor(index / gridSize[0]);\n    const xIndex = index - yIndex * gridSize[0];\n    // This will match the index to the hash-key to access aggregation data from CPU aggregation results.\n    const latIdx = Math.floor(\n      (yIndex * cellSize[1] + gridOrigin[1] + 90 + cellSize[1] / 2) / cellSize[1]\n    );\n    const lonIdx = Math.floor(\n      (xIndex * cellSize[0] + gridOrigin[0] + 180 + cellSize[0] / 2) / cellSize[0]\n    );\n    return `${latIdx}-${lonIdx}`;\n  }\n\n  getPositionForIndex(index) {\n    const {gridSize, gridOrigin, cellSize} = this.state;\n    const yIndex = Math.floor(index / gridSize[0]);\n    const xIndex = index - yIndex * gridSize[0];\n    const yPos = yIndex * cellSize[1] + gridOrigin[1];\n    const xPos = xIndex * cellSize[0] + gridOrigin[0];\n    return [xPos, yPos];\n  }\n\n  getPickingInfo({info, mode}) {\n    const {index} = info;\n    let object = null;\n    if (index >= 0) {\n      const {gpuGridAggregator} = this.state;\n      const position = this.getPositionForIndex(index);\n      const colorInfo = GPUGridAggregator.getAggregationData(\n        Object.assign({pixelIndex: index}, gpuGridAggregator.getData('color'))\n      );\n      const elevationInfo = GPUGridAggregator.getAggregationData(\n        Object.assign({pixelIndex: index}, gpuGridAggregator.getData('elevation'))\n      );\n\n      object = {\n        colorValue: colorInfo.cellWeight,\n        elevationValue: elevationInfo.cellWeight,\n        count: colorInfo.cellCount || elevationInfo.cellCount,\n        position,\n        totalCount: colorInfo.totalCount || elevationInfo.totalCount\n      };\n      if (mode !== 'hover') {\n        // perform CPU aggregation for full list of points for each cell\n        const {data, getPosition} = this.props;\n        let {gridHash} = this.state;\n        if (!gridHash) {\n          const cpuAggregation = pointToDensityGridDataCPU(data, this.props.cellSize, getPosition);\n          gridHash = cpuAggregation.gridHash;\n          this.setState({gridHash});\n        }\n        const key = this.getHashKeyForIndex(index);\n        const cpuAggregationData = gridHash[key];\n        Object.assign(object, cpuAggregationData);\n      }\n    }\n\n    return Object.assign(info, {\n      picked: Boolean(object),\n      // override object with picked cell\n      object\n    });\n  }\n\n  getLayerData(aggregationFlags) {\n    const {\n      data,\n      cellSize: cellSizeMeters,\n      getPosition,\n      gpuAggregation,\n      getColorWeight,\n      colorAggregation,\n      getElevationWeight,\n      elevationAggregation,\n      fp64\n    } = this.props;\n    const weightParams = {\n      color: {\n        getWeight: getColorWeight,\n        operation:\n          AGGREGATION_OPERATION[colorAggregation] ||\n          AGGREGATION_OPERATION[defaultProps.colorAggregation],\n        needMin: true,\n        needMax: true,\n        combineMaxMin: true\n      },\n      elevation: {\n        getWeight: getElevationWeight,\n        operation:\n          AGGREGATION_OPERATION[elevationAggregation] ||\n          AGGREGATION_OPERATION[defaultProps.elevationAggregation],\n        needMin: true,\n        needMax: true,\n        combineMaxMin: true\n      }\n    };\n    const {weights, gridSize, gridOrigin, cellSize, boundingBox} = pointToDensityGridData({\n      data,\n      cellSizeMeters,\n      getPosition,\n      weightParams,\n      gpuAggregation,\n      gpuGridAggregator: this.state.gpuGridAggregator,\n      boundingBox: this.state.boundingBox, // avoid parsing data when it is not changed.\n      aggregationFlags,\n      fp64\n    });\n    this.setState({weights, gridSize, gridOrigin, cellSize, boundingBox});\n  }\n\n  renderLayers() {\n    if (!this.state.isSupported) {\n      return null;\n    }\n    const {\n      elevationScale,\n      fp64,\n      extruded,\n      cellSize: cellSizeMeters,\n      coverage,\n      material,\n      elevationRange,\n      colorDomain,\n      elevationDomain\n    } = this.props;\n\n    const {weights, gridSize, gridOrigin, cellSize} = this.state;\n\n    const colorRange = colorRangeToFlatArray(this.props.colorRange, Float32Array, 255);\n\n    const SubLayerClass = this.getSubLayerClass('gpu-grid-cell', GPUGridCellLayer);\n\n    return new SubLayerClass(\n      {\n        gridSize,\n        gridOrigin,\n        gridOffset: cellSize,\n        colorRange,\n        elevationRange,\n        colorDomain,\n        elevationDomain,\n\n        fp64,\n        cellSize: cellSizeMeters,\n        coverage,\n        material,\n        elevationScale,\n        extruded\n      },\n      this.getSubLayerProps({\n        id: 'gpu-grid-cell'\n      }),\n      {\n        data: weights,\n        numInstances: gridSize[0] * gridSize[1]\n      }\n    );\n  }\n}\n\nGPUGridLayer.layerName = 'GPUGridLayer';\nGPUGridLayer.defaultProps = defaultProps;\n"],"file":"gpu-grid-layer.js"}