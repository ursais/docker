{"version":3,"sources":["../../../../src/utils/gpu-grid-aggregation/gpu-grid-aggregator.js"],"names":["Buffer","Model","Transform","FEATURES","hasFeatures","isWebGL2","readPixelsToBuffer","fp64","fp64Utils","withParameters","log","worldToPixels","fp64ifyMatrix4","DEFAULT_CHANGE_FLAGS","DEFAULT_RUN_PARAMS","MAX_32_BIT_FLOAT","MIN_BLEND_EQUATION","MAX_BLEND_EQUATION","MAX_MIN_BLEND_EQUATION","EQUATION_MAP","ELEMENTCOUNT","DEFAULT_WEIGHT_PARAMS","IDENTITY_MATRIX","PIXEL_SIZE","WEIGHT_SIZE","AGGREGATION_OPERATION","AGGREGATE_TO_GRID_VS","AGGREGATE_TO_GRID_VS_FP64","AGGREGATE_TO_GRID_FS","AGGREGATE_ALL_VS_FP64","AGGREGATE_ALL_FS","TRANSFORM_MEAN_VS","getFloatTexture","getFramebuffer","getFloatArray","BUFFER_NAMES","ARRAY_BUFFER_MAP","maxData","minData","maxMinData","GPUGridAggregator","getAggregationData","aggregationData","pixelIndex","index","results","cellCount","cellWeight","maxCellWieght","minCellWeight","totalCount","getCellData","countsData","size","numCells","length","cellWeights","Float32Array","cellCounts","Uint32Array","i","sizeIndex","isSupported","gl","BLEND_EQUATION_MINMAX","COLOR_ATTACHMENT_RGBA32F","TEXTURE_FLOAT","constructor","opts","id","shaderCache","state","weights","gridPositions","positionsBuffer","positions64xyLowBuffer","vertexCount","useGPU","numCol","numRow","windowSize","cellSize","weightAttributes","textures","meanTextures","buffers","framebuffers","maxMinFramebuffers","minFramebuffers","maxFramebuffers","equations","resources","_hasGPUSupport","delete","gridAggregationModel","allAggregationModel","meanTransform","deleteResources","run","setState","aggregationParams","getAggregationParams","updateGridSize","runAggregationOnGPU","info","runAggregationOnCPU","getData","weightId","data","aggregationBuffer","arrayName","bufferName","Array","isArray","forEach","obj","name","Object","assign","gridTransformMatrix","viewport","projectPoints","changeFlags","cellSizeChanged","validateProps","viewportMatrix","normalizeWeightParams","result","updateObject","shouldTransformToGrid","dataChanged","viewportChanged","width","height","Math","ceil","assert","positions","projectPositions","warn","calculateAggregationData","cellIndex","posIndex","values","operation","cellElementIndex","weightComponent","SUM","MEAN","MIN","min","MAX","max","calculateMeanMaxMinData","validCellIndices","needMin","needMax","calculateMinMax","calculateMean","combineMaxMin","count","weight","initCPUResults","aggregationSize","fill","Infinity","gridTransformRequired","pos","posCount","Float64Array","Set","x","y","project","colId","floor","rowId","add","updateAggregationBuffers","updateCPUResultBuffer","resourceName","setData","createBufferObjects","getAggregateData","aggregationTexture","target","sourceType","maxMinBuffer","minBuffer","maxBuffer","trackGPUResultBuffers","getAggregationModel","vs","fs","modules","drawMode","getAllAggregationModel","isInstanced","instanceCount","attributes","position","getMeanTransform","update","_targetTextureVarying","renderAggregateData","uProjectionMatrixFP64","gridSize","parameters","blend","depthTest","blendFunc","moduleSettings","uniforms","uProjectionMatrix","renderToWeightsTexture","renderToMaxMinTexture","blendEquation","minOrMaxFb","clearParams","clearColor","bind","clear","draw","uSampler","texture","unbind","transformOptions","_sourceTextures","aggregationValues","_targetTexture","elementCount","attach","updateModels","setupFramebuffers","framebufferSize","resize","setupModels","setupWeightAttributes","typedArray","positions64xyLow","aggregationModelAttributes","modelDirty","accessor","setVertexCount","setAttributes","setInstanceCount"],"mappings":"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","sourcesContent":["import GL from '@luma.gl/constants';\nimport {\n  Buffer,\n  Model,\n  Transform,\n  FEATURES,\n  hasFeatures,\n  isWebGL2,\n  readPixelsToBuffer,\n  fp64 as fp64Utils,\n  withParameters\n} from '@luma.gl/core';\nimport {log} from '@deck.gl/core';\nimport {worldToPixels} from 'viewport-mercator-project';\nconst {fp64ifyMatrix4} = fp64Utils;\n\nimport {\n  DEFAULT_CHANGE_FLAGS,\n  DEFAULT_RUN_PARAMS,\n  MAX_32_BIT_FLOAT,\n  MIN_BLEND_EQUATION,\n  MAX_BLEND_EQUATION,\n  MAX_MIN_BLEND_EQUATION,\n  EQUATION_MAP,\n  ELEMENTCOUNT,\n  DEFAULT_WEIGHT_PARAMS,\n  IDENTITY_MATRIX,\n  PIXEL_SIZE,\n  WEIGHT_SIZE\n} from './gpu-grid-aggregator-constants';\nimport {AGGREGATION_OPERATION} from '../aggregation-operation-utils';\n\nimport AGGREGATE_TO_GRID_VS from './aggregate-to-grid-vs.glsl';\nimport AGGREGATE_TO_GRID_VS_FP64 from './aggregate-to-grid-vs-64.glsl';\nimport AGGREGATE_TO_GRID_FS from './aggregate-to-grid-fs.glsl';\nimport AGGREGATE_ALL_VS_FP64 from './aggregate-all-vs-64.glsl';\nimport AGGREGATE_ALL_FS from './aggregate-all-fs.glsl';\nimport TRANSFORM_MEAN_VS from './transform-mean-vs.glsl';\nimport {getFloatTexture, getFramebuffer, getFloatArray} from './gpu-grid-aggregator-utils.js';\n\nconst BUFFER_NAMES = ['aggregationBuffer', 'maxMinBuffer', 'minBuffer', 'maxBuffer'];\nconst ARRAY_BUFFER_MAP = {\n  maxData: 'maxBuffer',\n  minData: 'minBuffer',\n  maxMinData: 'maxMinBuffer'\n};\n\nexport default class GPUGridAggregator {\n  // Decode and return aggregation data of given pixel.\n  static getAggregationData({aggregationData, maxData, minData, maxMinData, pixelIndex}) {\n    const index = pixelIndex * PIXEL_SIZE;\n    const results = {};\n    if (aggregationData) {\n      results.cellCount = aggregationData[index + 3];\n      results.cellWeight = aggregationData[index];\n    }\n    if (maxMinData) {\n      results.maxCellWieght = maxMinData[0];\n      results.minCellWeight = maxMinData[3];\n    } else {\n      if (maxData) {\n        results.maxCellWieght = maxData[0];\n        results.totalCount = maxData[3];\n      }\n      if (minData) {\n        results.minCellWeight = minData[0];\n        results.totalCount = maxData[3];\n      }\n    }\n    return results;\n  }\n\n  // Decodes and retuns counts and weights of all cells\n  static getCellData({countsData, size = 1}) {\n    const numCells = countsData.length / 4;\n    const cellWeights = new Float32Array(numCells * size);\n    const cellCounts = new Uint32Array(numCells);\n    for (let i = 0; i < numCells; i++) {\n      // weights in RGB channels\n      for (let sizeIndex = 0; sizeIndex < size; sizeIndex++) {\n        cellWeights[i * size + sizeIndex] = countsData[i * 4 + sizeIndex];\n      }\n      // count in Alpha channel\n      cellCounts[i] = countsData[i * 4 + 3];\n    }\n    return {cellCounts, cellWeights};\n  }\n\n  static isSupported(gl) {\n    return (\n      isWebGL2(gl) &&\n      hasFeatures(\n        gl,\n        FEATURES.BLEND_EQUATION_MINMAX,\n        FEATURES.COLOR_ATTACHMENT_RGBA32F,\n        FEATURES.TEXTURE_FLOAT\n      )\n    );\n  }\n\n  // DEBUG ONLY\n  // static logData({aggregationBuffer, minBuffer, maxBuffer, maxMinBuffer, limit = 10}) {\n  //   if (aggregationBuffer) {\n  //     console.log('Aggregation Data:');\n  //     const agrData = aggregationBuffer.getData();\n  //     for (let index = 0; index < agrData.length && limit > 0; index += 4) {\n  //       if (agrData[index + 3] > 0) {\n  //         console.log(\n  //           `index: ${index} weights: ${agrData[index]} ${agrData[index + 1]} ${\n  //             agrData[index + 2]\n  //           } count: ${agrData[index + 3]}`\n  //         );\n  //         limit--;\n  //       }\n  //     }\n  //   }\n  //   const obj = {minBuffer, maxBuffer, maxMinBuffer};\n  //   for (const key in obj) {\n  //     if (obj[key]) {\n  //       const data = obj[key].getData();\n  //       console.log(`${key} data : R: ${data[0]} G: ${data[1]} B: ${data[2]} A: ${data[3]}`);\n  //     }\n  //   }\n  // }\n\n  constructor(gl, opts = {}) {\n    this.id = opts.id || 'gpu-grid-aggregator';\n    this.shaderCache = opts.shaderCache || null;\n    this.gl = gl;\n    this.state = {\n      // cache weights and position data to process when data is not changed\n      weights: null,\n      gridPositions: null,\n      positionsBuffer: null,\n      positions64xyLowBuffer: null,\n      vertexCount: 0,\n\n      // flags/variables that affect the aggregation\n      fp64: null,\n      useGPU: null,\n      numCol: 0,\n      numRow: 0,\n      windowSize: null,\n      cellSize: null,\n\n      // per weight GPU resources\n      weightAttributes: {},\n      textures: {},\n      meanTextures: {},\n      buffers: {},\n      framebuffers: {},\n      maxMinFramebuffers: {},\n      minFramebuffers: {},\n      maxFramebuffers: {},\n      equations: {},\n\n      // common resources to be deleted\n      resources: {},\n\n      // results\n      results: {}\n    };\n    this._hasGPUSupport =\n      isWebGL2(gl) && // gl_InstanceID usage in min/max calculation shaders\n      hasFeatures(\n        this.gl,\n        FEATURES.BLEND_EQUATION_MINMAX, // set min/max blend modes\n        FEATURES.COLOR_ATTACHMENT_RGBA32F, // render to float texture\n        FEATURES.TEXTURE_FLOAT // sample from a float texture\n      );\n  }\n\n  // Delete owned resources.\n  /* eslint no-unused-expressions: [\"error\", { \"allowShortCircuit\": true }] */\n  delete() {\n    const {gridAggregationModel, allAggregationModel, meanTransform} = this;\n    const {\n      positionsBuffer,\n      positions64xyLowBuffer,\n      textures,\n      framebuffers,\n      maxMinFramebuffers,\n      minFramebuffers,\n      maxFramebuffers,\n      meanTextures,\n      resources\n    } = this.state;\n\n    gridAggregationModel && gridAggregationModel.delete();\n    allAggregationModel && allAggregationModel.delete();\n    meanTransform && meanTransform.delete();\n\n    positionsBuffer && positionsBuffer.delete();\n    positions64xyLowBuffer && positions64xyLowBuffer.delete();\n    this.deleteResources([\n      framebuffers,\n      textures,\n      maxMinFramebuffers,\n      minFramebuffers,\n      maxFramebuffers,\n      meanTextures,\n      resources\n    ]);\n  }\n\n  // Perform aggregation and retun the results\n  run(opts = {}) {\n    // reset results\n    this.setState({results: {}});\n    const aggregationParams = this.getAggregationParams(opts);\n    this.updateGridSize(aggregationParams);\n    const {useGPU} = aggregationParams;\n    if (this._hasGPUSupport && useGPU) {\n      return this.runAggregationOnGPU(aggregationParams);\n    }\n    if (useGPU) {\n      log.info('GPUGridAggregator: GPU Aggregation not supported, falling back to CPU')();\n    }\n    return this.runAggregationOnCPU(aggregationParams);\n  }\n\n  // Reads aggregation data into JS Array object\n  // For WebGL1, data is available in JS Array objects already.\n  // For WebGL2, data is read from Buffer objects and cached for subsequent queries.\n  getData(weightId) {\n    const data = {};\n    const results = this.state.results;\n    if (!results[weightId].aggregationData) {\n      // cache the results if reading from the buffer (WebGL2 path)\n      results[weightId].aggregationData = results[weightId].aggregationBuffer.getData();\n    }\n    data.aggregationData = results[weightId].aggregationData;\n\n    // Check for optional results\n    for (const arrayName in ARRAY_BUFFER_MAP) {\n      const bufferName = ARRAY_BUFFER_MAP[arrayName];\n\n      if (results[weightId][arrayName] || results[weightId][bufferName]) {\n        // cache the result\n        results[weightId][arrayName] =\n          results[weightId][arrayName] || results[weightId][bufferName].getData();\n        data[arrayName] = results[weightId][arrayName];\n      }\n    }\n    return data;\n  }\n\n  // PRIVATE\n\n  deleteResources(resources) {\n    resources = Array.isArray(resources) ? resources : [resources];\n    resources.forEach(obj => {\n      for (const name in obj) {\n        obj[name].delete();\n      }\n    });\n  }\n\n  getAggregationParams(opts) {\n    const aggregationParams = Object.assign({}, DEFAULT_RUN_PARAMS, opts);\n    const {\n      useGPU,\n      gridTransformMatrix,\n      viewport,\n      weights,\n      projectPoints,\n      cellSize\n    } = aggregationParams;\n    if (this.state.useGPU !== useGPU) {\n      // CPU/GPU resources need to reinitialized, force set the change flags.\n      aggregationParams.changeFlags = Object.assign(\n        {},\n        aggregationParams.changeFlags,\n        DEFAULT_CHANGE_FLAGS\n      );\n    }\n    if (\n      cellSize &&\n      (!this.state.cellSize ||\n        this.state.cellSize[0] !== cellSize[0] ||\n        this.state.cellSize[1] !== cellSize[1])\n    ) {\n      aggregationParams.changeFlags.cellSizeChanged = true;\n      // For GridLayer aggregation, cellSize is calculated by parsing all input data as it depends\n      // on bounding box, cache cellSize\n      this.setState({cellSize});\n    }\n\n    this.validateProps(aggregationParams, opts);\n\n    this.setState({useGPU});\n    aggregationParams.gridTransformMatrix =\n      (projectPoints ? viewport.viewportMatrix : gridTransformMatrix) || IDENTITY_MATRIX;\n\n    if (weights) {\n      aggregationParams.weights = this.normalizeWeightParams(weights);\n\n      // cache weights to process when only cellSize or viewport is changed.\n      // position data is cached in Buffers for GPU case and in 'gridPositions' for CPU case.\n      this.setState({weights: aggregationParams.weights});\n    }\n    return aggregationParams;\n  }\n\n  normalizeWeightParams(weights) {\n    const result = {};\n    for (const id in weights) {\n      result[id] = Object.assign({}, DEFAULT_WEIGHT_PARAMS, weights[id]);\n    }\n    return result;\n  }\n\n  // Update priveate state\n  setState(updateObject) {\n    Object.assign(this.state, updateObject);\n  }\n\n  shouldTransformToGrid(opts) {\n    const {projectPoints, changeFlags} = opts;\n    if (\n      !this.state.gridPositions ||\n      changeFlags.dataChanged ||\n      (projectPoints && changeFlags.viewportChanged) // world space aggregation (GridLayer) doesn't change when viewport is changed.\n    ) {\n      return true;\n    }\n    return false;\n  }\n\n  updateGridSize(opts) {\n    const {viewport, cellSize} = opts;\n    const width = opts.width || viewport.width;\n    const height = opts.height || viewport.height;\n    const numCol = Math.ceil(width / cellSize[0]);\n    const numRow = Math.ceil(height / cellSize[1]);\n    this.setState({numCol, numRow, windowSize: [width, height]});\n  }\n\n  /* eslint-disable complexity */\n  // validate and log.assert\n  validateProps(aggregationParams, opts) {\n    const {changeFlags, projectPoints, gridTransformMatrix} = aggregationParams;\n    log.assert(\n      changeFlags.dataChanged || changeFlags.viewportChanged || changeFlags.cellSizeChanged\n    );\n\n    // log.assert for required options\n    log.assert(\n      !changeFlags.dataChanged ||\n        (opts.positions &&\n          opts.weights &&\n          (!opts.projectPositions || opts.viewport) &&\n          opts.cellSize)\n    );\n    log.assert(!changeFlags.cellSizeChanged || opts.cellSize);\n\n    // viewport is needed only when performing screen space aggregation (projectPoints is true)\n    log.assert(!(changeFlags.viewportChanged && projectPoints) || opts.viewport);\n\n    if (projectPoints && gridTransformMatrix) {\n      log.warn('projectPoints is true, gridTransformMatrix is ignored')();\n    }\n  }\n  /* eslint-enable complexity */\n\n  // CPU Aggregation methods\n\n  // aggregated weight value to a cell\n  /* eslint-disable max-depth */\n  calculateAggregationData(opts) {\n    const {weights, results, cellIndex, posIndex} = opts;\n    for (const id in weights) {\n      const {values, size, operation} = weights[id];\n      const {aggregationData} = results[id];\n\n      // Fill RGB with weights\n      for (let sizeIndex = 0; sizeIndex < size; sizeIndex++) {\n        const cellElementIndex = cellIndex + sizeIndex;\n        const weightComponent = values[posIndex * WEIGHT_SIZE + sizeIndex];\n\n        if (aggregationData[cellIndex + 3] === 0) {\n          // if the cell is getting update the first time, set the value directly.\n          aggregationData[cellElementIndex] = weightComponent;\n        } else {\n          switch (operation) {\n            case AGGREGATION_OPERATION.SUM:\n            case AGGREGATION_OPERATION.MEAN:\n              aggregationData[cellElementIndex] += weightComponent;\n              // MEAN value is calculated during 'calculateMeanMaxMinData'\n              break;\n            case AGGREGATION_OPERATION.MIN:\n              aggregationData[cellElementIndex] = Math.min(\n                aggregationData[cellElementIndex],\n                weightComponent\n              );\n              break;\n            case AGGREGATION_OPERATION.MAX:\n              aggregationData[cellElementIndex] = Math.max(\n                aggregationData[cellElementIndex],\n                weightComponent\n              );\n              break;\n            default:\n              // Not a valid operation enum.\n              log.assert(false);\n              break;\n          }\n        }\n      }\n\n      // Track the count per grid-cell\n      aggregationData[cellIndex + 3]++;\n    }\n  }\n\n  /* eslint-disable max-depth, complexity */\n  calculateMeanMaxMinData(opts) {\n    const {validCellIndices, results, weights} = opts;\n\n    // collect max/min values\n    validCellIndices.forEach(cellIndex => {\n      for (const id in results) {\n        const {size, needMin, needMax, operation} = weights[id];\n        const {aggregationData, minData, maxData, maxMinData} = results[id];\n        const calculateMinMax = needMin || needMax;\n        const calculateMean = operation === AGGREGATION_OPERATION.MEAN;\n        const combineMaxMin = needMin && needMax && weights[id].combineMaxMin;\n        const count = aggregationData[cellIndex + ELEMENTCOUNT - 1];\n        for (\n          let sizeIndex = 0;\n          sizeIndex < size && (calculateMinMax || calculateMean);\n          sizeIndex++\n        ) {\n          const cellElementIndex = cellIndex + sizeIndex;\n          let weight = aggregationData[cellElementIndex];\n          if (calculateMean) {\n            aggregationData[cellElementIndex] /= count;\n            weight = aggregationData[cellElementIndex];\n          }\n          if (combineMaxMin) {\n            // use RGB for max values for 3 weights.\n            maxMinData[sizeIndex] = Math.max(maxMinData[sizeIndex], weight);\n          } else {\n            if (needMin) {\n              minData[sizeIndex] = Math.min(minData[sizeIndex], weight);\n            }\n            if (needMax) {\n              maxData[sizeIndex] = Math.max(maxData[sizeIndex], weight);\n            }\n          }\n        }\n        // update total aggregation values.\n        if (combineMaxMin) {\n          // Use Alpha channel to store total min value for weight#0\n          maxMinData[ELEMENTCOUNT - 1] = Math.min(\n            maxMinData[ELEMENTCOUNT - 1],\n            aggregationData[cellIndex + 0]\n          );\n        } else {\n          // Use Alpha channel to store total counts.\n          if (needMin) {\n            minData[ELEMENTCOUNT - 1] += count;\n          }\n          if (needMax) {\n            maxData[ELEMENTCOUNT - 1] += count;\n          }\n        }\n      }\n    });\n  }\n  /* eslint-enable max-depth */\n\n  initCPUResults(opts) {\n    const weights = opts.weights || this.state.weights;\n    const {numCol, numRow} = this.state;\n    const results = {};\n    // setup results object\n    for (const id in weights) {\n      let {aggregationData, minData, maxData, maxMinData} = weights[id];\n      const {needMin, needMax} = weights[id];\n      const combineMaxMin = needMin && needMax && weights[id].combineMaxMin;\n\n      const aggregationSize = numCol * numRow * ELEMENTCOUNT;\n      aggregationData = getFloatArray(aggregationData, aggregationSize);\n      if (combineMaxMin) {\n        maxMinData = getFloatArray(maxMinData, ELEMENTCOUNT);\n        // RGB for max value\n        maxMinData.fill(-Infinity, 0, ELEMENTCOUNT - 1);\n        // Alpha for min value\n        maxMinData[ELEMENTCOUNT - 1] = Infinity;\n      } else {\n        // RGB for min/max values\n        // Alpha for total count\n        if (needMin) {\n          minData = getFloatArray(minData, ELEMENTCOUNT, Infinity);\n          minData[ELEMENTCOUNT - 1] = 0;\n        }\n        if (needMax) {\n          maxData = getFloatArray(maxData, ELEMENTCOUNT, -Infinity);\n          maxData[ELEMENTCOUNT - 1] = 0;\n        }\n      }\n      results[id] = Object.assign({}, weights[id], {\n        aggregationData,\n        minData,\n        maxData,\n        maxMinData\n      });\n    }\n    return results;\n  }\n\n  /* eslint-disable max-statements */\n  runAggregationOnCPU(opts) {\n    const {positions, cellSize, gridTransformMatrix, viewport, projectPoints} = opts;\n    let {weights} = opts;\n    const {numCol, numRow} = this.state;\n    const results = this.initCPUResults(opts);\n    // screen space or world space projection required\n    const gridTransformRequired = this.shouldTransformToGrid(opts);\n    let gridPositions;\n    const pos = [0, 0, 0];\n\n    log.assert(gridTransformRequired || opts.changeFlags.cellSizeChanged);\n\n    let posCount;\n    if (gridTransformRequired) {\n      posCount = positions.length / 2;\n      gridPositions = new Float64Array(positions.length);\n      this.setState({gridPositions});\n    } else {\n      gridPositions = this.state.gridPositions;\n      weights = this.state.weights;\n      posCount = gridPositions.length / 2;\n    }\n\n    const validCellIndices = new Set();\n    for (let posIndex = 0; posIndex < posCount; posIndex++) {\n      let x;\n      let y;\n      if (gridTransformRequired) {\n        pos[0] = positions[posIndex * 2];\n        pos[1] = positions[posIndex * 2 + 1];\n        if (projectPoints) {\n          [x, y] = viewport.project(pos);\n        } else {\n          [x, y] = worldToPixels(pos, gridTransformMatrix);\n        }\n        gridPositions[posIndex * 2] = x;\n        gridPositions[posIndex * 2 + 1] = y;\n      } else {\n        x = gridPositions[posIndex * 2];\n        y = gridPositions[posIndex * 2 + 1];\n      }\n\n      const colId = Math.floor(x / cellSize[0]);\n      const rowId = Math.floor(y / cellSize[1]);\n      if (colId >= 0 && colId < numCol && rowId >= 0 && rowId < numRow) {\n        const cellIndex = (colId + rowId * numCol) * ELEMENTCOUNT;\n        validCellIndices.add(cellIndex);\n        this.calculateAggregationData({weights, results, cellIndex, posIndex});\n      }\n    }\n\n    this.calculateMeanMaxMinData({validCellIndices, results, weights});\n\n    // Update buffer objects.\n    this.updateAggregationBuffers(opts, results);\n\n    this.setState({results});\n    return results;\n  }\n  /* eslint-disable max-statements */\n\n  updateCPUResultBuffer({gl, bufferName, id, data, result}) {\n    const {resources} = this.state;\n    const resourceName = `cpu-result-${id}-${bufferName}`;\n    result[bufferName] = result[bufferName] || resources[resourceName];\n    if (result[bufferName]) {\n      result[bufferName].setData({data});\n    } else {\n      // save resource for garbage collection\n      resources[resourceName] = new Buffer(gl, data);\n      result[bufferName] = resources[resourceName];\n    }\n  }\n\n  updateAggregationBuffers(opts, results) {\n    if (!opts.createBufferObjects) {\n      return;\n    }\n    const weights = opts.weights || this.state.weights;\n    for (const id in results) {\n      const {aggregationData, minData, maxData, maxMinData} = results[id];\n      const {needMin, needMax} = weights[id];\n      const combineMaxMin = needMin && needMax && weights[id].combineMaxMin;\n      this.updateCPUResultBuffer({\n        gl: this.gl,\n        bufferName: 'aggregationBuffer',\n        id,\n        data: aggregationData,\n        result: results[id]\n      });\n      if (combineMaxMin) {\n        this.updateCPUResultBuffer({\n          gl: this.gl,\n          bufferName: 'maxMinBuffer',\n          id,\n          data: maxMinData,\n          result: results[id]\n        });\n      } else {\n        if (needMin) {\n          this.updateCPUResultBuffer({\n            gl: this.gl,\n            bufferName: 'minBuffer',\n            id,\n            data: minData,\n            result: results[id]\n          });\n        }\n        if (needMax) {\n          this.updateCPUResultBuffer({\n            gl: this.gl,\n            bufferName: 'maxBuffer',\n            id,\n            data: maxData,\n            result: results[id]\n          });\n        }\n      }\n    }\n  }\n\n  // GPU Aggregation methods\n\n  getAggregateData(opts) {\n    const results = {};\n    const {\n      textures,\n      framebuffers,\n      maxMinFramebuffers,\n      minFramebuffers,\n      maxFramebuffers,\n      weights\n    } = this.state;\n\n    for (const id in weights) {\n      results[id] = {};\n      const {needMin, needMax, combineMaxMin} = weights[id];\n      results[id].aggregationTexture = textures[id];\n      results[id].aggregationBuffer = readPixelsToBuffer(framebuffers[id], {\n        target: weights[id].aggregationBuffer, // update if a buffer is provided\n        sourceType: GL.FLOAT\n      });\n      if (needMin && needMax && combineMaxMin) {\n        results[id].maxMinBuffer = readPixelsToBuffer(maxMinFramebuffers[id], {\n          target: weights[id].maxMinBuffer, // update if a buffer is provided\n          sourceType: GL.FLOAT\n        });\n      } else {\n        if (needMin) {\n          results[id].minBuffer = readPixelsToBuffer(minFramebuffers[id], {\n            target: weights[id].minBuffer, // update if a buffer is provided\n            sourceType: GL.FLOAT\n          });\n        }\n        if (needMax) {\n          results[id].maxBuffer = readPixelsToBuffer(maxFramebuffers[id], {\n            target: weights[id].maxBuffer, // update if a buffer is provided\n            sourceType: GL.FLOAT\n          });\n        }\n      }\n    }\n    this.trackGPUResultBuffers(results, weights);\n    return results;\n  }\n\n  getAggregationModel(fp64 = false) {\n    const {gl, shaderCache} = this;\n    return new Model(gl, {\n      id: 'Gird-Aggregation-Model',\n      vs: fp64 ? AGGREGATE_TO_GRID_VS_FP64 : AGGREGATE_TO_GRID_VS,\n      fs: AGGREGATE_TO_GRID_FS,\n      modules: fp64 ? ['fp64', 'project64'] : ['project32'],\n      shaderCache,\n      vertexCount: 0,\n      drawMode: GL.POINTS\n    });\n  }\n\n  getAllAggregationModel() {\n    const {gl, shaderCache} = this;\n    const {numCol, numRow} = this.state;\n    return new Model(gl, {\n      id: 'All-Aggregation-Model',\n      vs: AGGREGATE_ALL_VS_FP64,\n      fs: AGGREGATE_ALL_FS,\n      modules: ['fp64'],\n      shaderCache,\n      vertexCount: 1,\n      drawMode: GL.POINTS,\n      isInstanced: true,\n      instanceCount: numCol * numRow,\n      attributes: {\n        position: [0, 0]\n      }\n    });\n  }\n\n  getMeanTransform(opts) {\n    if (this.meanTransform) {\n      this.meanTransform.update(opts);\n    } else {\n      this.meanTransform = new Transform(\n        this.gl,\n        Object.assign(\n          {},\n          {\n            vs: TRANSFORM_MEAN_VS,\n            _targetTextureVarying: 'meanValues'\n          },\n          opts\n        )\n      );\n    }\n    return this.meanTransform;\n  }\n\n  renderAggregateData(opts) {\n    const {cellSize, viewport, gridTransformMatrix, projectPoints} = opts;\n    const {\n      numCol,\n      numRow,\n      windowSize,\n      maxMinFramebuffers,\n      minFramebuffers,\n      maxFramebuffers,\n      weights\n    } = this.state;\n\n    const uProjectionMatrixFP64 = fp64ifyMatrix4(gridTransformMatrix);\n    const gridSize = [numCol, numRow];\n    const parameters = {\n      blend: true,\n      depthTest: false,\n      blendFunc: [GL.ONE, GL.ONE]\n    };\n    const moduleSettings = {viewport};\n    const uniforms = {\n      windowSize,\n      cellSize,\n      gridSize,\n      uProjectionMatrix: gridTransformMatrix,\n      uProjectionMatrixFP64,\n      projectPoints\n    };\n\n    for (const id in weights) {\n      const {needMin, needMax} = weights[id];\n      const combineMaxMin = needMin && needMax && weights[id].combineMaxMin;\n      this.renderToWeightsTexture({id, parameters, moduleSettings, uniforms, gridSize});\n      if (combineMaxMin) {\n        this.renderToMaxMinTexture({\n          id,\n          parameters: Object.assign({}, parameters, {blendEquation: MAX_MIN_BLEND_EQUATION}),\n          gridSize,\n          minOrMaxFb: maxMinFramebuffers[id],\n          clearParams: {clearColor: [0, 0, 0, MAX_32_BIT_FLOAT]},\n          combineMaxMin\n        });\n      } else {\n        if (needMin) {\n          this.renderToMaxMinTexture({\n            id,\n            parameters: Object.assign({}, parameters, {blendEquation: MIN_BLEND_EQUATION}),\n            gridSize,\n            minOrMaxFb: minFramebuffers[id],\n            clearParams: {clearColor: [MAX_32_BIT_FLOAT, MAX_32_BIT_FLOAT, MAX_32_BIT_FLOAT, 0]},\n            combineMaxMin\n          });\n        }\n        if (needMax) {\n          this.renderToMaxMinTexture({\n            id,\n            parameters: Object.assign({}, parameters, {blendEquation: MAX_BLEND_EQUATION}),\n            gridSize,\n            minOrMaxFb: maxFramebuffers[id],\n            combineMaxMin\n          });\n        }\n      }\n    }\n  }\n\n  // render all aggregated grid-cells to generate Min, Max or MaxMin data texture\n  renderToMaxMinTexture(opts) {\n    const {id, parameters, gridSize, minOrMaxFb, combineMaxMin, clearParams = {}} = opts;\n    const {framebuffers} = this.state;\n    const {gl, allAggregationModel} = this;\n\n    minOrMaxFb.bind();\n    gl.viewport(0, 0, gridSize[0], gridSize[1]);\n    withParameters(gl, clearParams, () => {\n      gl.clear(gl.COLOR_BUFFER_BIT);\n    });\n    allAggregationModel.draw({\n      parameters,\n      uniforms: {\n        uSampler: framebuffers[id].texture,\n        gridSize,\n        combineMaxMin\n      }\n    });\n    minOrMaxFb.unbind();\n  }\n\n  // render all data points to aggregate weights\n  renderToWeightsTexture(opts) {\n    const {id, parameters, moduleSettings, uniforms, gridSize} = opts;\n    const {framebuffers, equations, weightAttributes, weights} = this.state;\n    const {gl, gridAggregationModel} = this;\n    const {operation} = weights[id];\n\n    framebuffers[id].bind();\n    gl.viewport(0, 0, gridSize[0], gridSize[1]);\n    const clearColor =\n      operation === AGGREGATION_OPERATION.MIN\n        ? [MAX_32_BIT_FLOAT, MAX_32_BIT_FLOAT, MAX_32_BIT_FLOAT, 0]\n        : [0, 0, 0, 0];\n    withParameters(gl, {clearColor}, () => {\n      gl.clear(gl.COLOR_BUFFER_BIT);\n    });\n\n    const attributes = {weights: weightAttributes[id]};\n    gridAggregationModel.draw({\n      parameters: Object.assign({}, parameters, {blendEquation: equations[id]}),\n      moduleSettings,\n      uniforms,\n      attributes\n    });\n    framebuffers[id].unbind();\n\n    if (operation === AGGREGATION_OPERATION.MEAN) {\n      const {meanTextures, textures} = this.state;\n      const transformOptions = {\n        _sourceTextures: {aggregationValues: meanTextures[id]}, // contains aggregated data\n        _targetTexture: textures[id], // store mean values,\n        elementCount: textures[id].width * textures[id].height\n      };\n      const meanTransform = this.getMeanTransform(transformOptions);\n      meanTransform.run({\n        parameters: {\n          blend: false,\n          depthTest: false\n        }\n      });\n\n      // update framebuffer with mean results so readPixelsToBuffer returns mean values\n      framebuffers[id].attach({[GL.COLOR_ATTACHMENT0]: textures[id]});\n    }\n  }\n\n  runAggregationOnGPU(opts) {\n    this.updateModels(opts);\n    this.setupFramebuffers(opts);\n    this.renderAggregateData(opts);\n    const results = this.getAggregateData(opts);\n    this.setState({results});\n    return results;\n  }\n\n  // set up framebuffer for each weight\n  /* eslint-disable complexity, max-depth */\n  setupFramebuffers(opts) {\n    const {\n      numCol,\n      numRow,\n      textures,\n      framebuffers,\n      maxMinFramebuffers,\n      minFramebuffers,\n      maxFramebuffers,\n      resources,\n      meanTextures,\n      equations,\n      weights\n    } = this.state;\n    const framebufferSize = {width: numCol, height: numRow};\n    for (const id in weights) {\n      const {needMin, needMax, combineMaxMin, operation} = weights[id];\n      textures[id] =\n        weights[id].aggregationTexture ||\n        textures[id] ||\n        getFloatTexture(this.gl, {id: `${id}-texture`, width: numCol, height: numRow});\n      textures[id].resize(framebufferSize);\n      let texture = textures[id];\n      if (operation === AGGREGATION_OPERATION.MEAN) {\n        // For MEAN, we first aggregatet into a temp texture\n        meanTextures[id] =\n          meanTextures[id] ||\n          getFloatTexture(this.gl, {id: `${id}-mean-texture`, width: numCol, height: numRow});\n        meanTextures[id].resize(framebufferSize);\n        texture = meanTextures[id];\n      }\n      if (framebuffers[id]) {\n        framebuffers[id].attach({[GL.COLOR_ATTACHMENT0]: texture});\n      } else {\n        framebuffers[id] = getFramebuffer(this.gl, {\n          id: `${id}-fb`,\n          width: numCol,\n          height: numRow,\n          texture\n        });\n      }\n      framebuffers[id].resize(framebufferSize);\n      equations[id] = EQUATION_MAP[operation];\n      // For min/max framebuffers will use default size 1X1\n      if (needMin || needMax) {\n        if (needMin && needMax && combineMaxMin) {\n          if (!maxMinFramebuffers[id]) {\n            resources[`${id}-maxMin`] = getFloatTexture(this.gl, {id: `${id}-maxMinTex`});\n            maxMinFramebuffers[id] = getFramebuffer(this.gl, {\n              id: `${id}-maxMinFb`,\n              texture: resources[`${id}-maxMin`]\n            });\n          }\n        } else {\n          if (needMin) {\n            if (!minFramebuffers[id]) {\n              resources[`${id}-min`] = getFloatTexture(this.gl, {id: `${id}-minTex`});\n              minFramebuffers[id] = getFramebuffer(this.gl, {\n                id: `${id}-minFb`,\n                texture: resources[`${id}-min`]\n              });\n            }\n          }\n          if (needMax) {\n            if (!maxFramebuffers[id]) {\n              resources[`${id}-max`] = getFloatTexture(this.gl, {id: `${id}-maxTex`});\n              maxFramebuffers[id] = getFramebuffer(this.gl, {\n                id: `${id}-maxFb`,\n                texture: resources[`${id}-max`]\n              });\n            }\n          }\n        }\n      }\n    }\n  }\n  /* eslint-enable complexity, max-depth */\n\n  setupModels(fp64 = false) {\n    if (this.gridAggregationModel) {\n      this.gridAggregationModel.delete();\n    }\n    this.gridAggregationModel = this.getAggregationModel(fp64);\n    if (!this.allAggregationModel) {\n      // Model doesn't have to change when fp64 flag changes\n      this.allAggregationModel = this.getAllAggregationModel();\n    }\n  }\n\n  // set up buffers for all weights\n  setupWeightAttributes(opts) {\n    const {weightAttributes, vertexCount, weights, resources} = this.state;\n    for (const id in weights) {\n      const {values} = weights[id];\n      // values can be Array, Float32Array or Buffer\n      if (Array.isArray(values) || values.constructor === Float32Array) {\n        log.assert(values.length / 3 === vertexCount);\n        const typedArray = Array.isArray(values) ? new Float32Array(values) : values;\n        if (weightAttributes[id] instanceof Buffer) {\n          weightAttributes[id].setData(typedArray);\n        } else {\n          resources[`${id}-buffer`] = new Buffer(this.gl, typedArray);\n          weightAttributes[id] = resources[`${id}-buffer`];\n        }\n      } else {\n        // log.assert((values instanceof Attribute) || (values instanceof Buffer));\n        log.assert(values instanceof Buffer);\n        weightAttributes[id] = values;\n      }\n    }\n  }\n\n  // GPU Aggregation results are provided in Buffers, if new Buffer objects are created track them for later deletion.\n  /* eslint-disable max-depth */\n  trackGPUResultBuffers(results, weights) {\n    const {resources} = this.state;\n    for (const id in results) {\n      if (results[id]) {\n        for (const bufferName of BUFFER_NAMES) {\n          if (results[id][bufferName] && weights[id][bufferName] !== results[id][bufferName]) {\n            // No result buffer is provided in weights object, `readPixelsToBuffer` has created a new Buffer object\n            // collect the new buffer for garabge collection\n            const name = `gpu-result-${id}-${bufferName}`;\n            if (resources[name]) {\n              resources[name].delete();\n            }\n            resources[name] = results[id][bufferName];\n          }\n        }\n      }\n    }\n  }\n  /* eslint-enable max-depth */\n\n  /* eslint-disable max-statements */\n  updateModels(opts) {\n    const {gl} = this;\n    const {positions, positions64xyLow, changeFlags} = opts;\n    const {numCol, numRow} = this.state;\n    const aggregationModelAttributes = {};\n    let modelDirty = false;\n\n    if (opts.fp64 !== this.state.fp64) {\n      this.setupModels(opts.fp64);\n      this.setState({fp64: opts.fp64});\n      modelDirty = true;\n    }\n\n    if (changeFlags.dataChanged || !this.state.positionsBuffer) {\n      let {positionsBuffer, positions64xyLowBuffer} = this.state;\n      if (positionsBuffer) {\n        positionsBuffer.delete();\n      }\n      if (positions64xyLowBuffer) {\n        positions64xyLowBuffer.delete();\n      }\n      const vertexCount = positions.length / 2;\n      positionsBuffer = new Buffer(gl, new Float32Array(positions));\n      positions64xyLowBuffer = new Buffer(gl, {\n        data: new Float32Array(positions64xyLow),\n        accessor: {size: 2}\n      });\n      this.setState({positionsBuffer, positions64xyLowBuffer, vertexCount});\n\n      this.setupWeightAttributes(opts);\n      modelDirty = true;\n    }\n\n    if (modelDirty) {\n      const {vertexCount, positionsBuffer, positions64xyLowBuffer} = this.state;\n      aggregationModelAttributes.positions = positionsBuffer;\n      if (opts.fp64) {\n        aggregationModelAttributes.positions64xyLow = positions64xyLowBuffer;\n      }\n      this.gridAggregationModel.setVertexCount(vertexCount);\n      this.gridAggregationModel.setAttributes(aggregationModelAttributes);\n    }\n\n    if (changeFlags.cellSizeChanged || changeFlags.viewportChanged) {\n      this.allAggregationModel.setInstanceCount(numCol * numRow);\n    }\n  }\n  /* eslint-enable max-statements */\n}\n"],"file":"gpu-grid-aggregator.js"}