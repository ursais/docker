{"version":3,"sources":["../../../src/cpu-grid-layer/cpu-grid-layer.js"],"names":["nop","defaultMaterial","PhongMaterial","defaultProps","colorDomain","colorRange","defaultColorRange","getColorValue","type","value","getColorWeight","x","colorAggregation","lowerPercentile","min","max","upperPercentile","onSetColorDomain","elevationDomain","elevationRange","getElevationValue","getElevationWeight","elevationAggregation","elevationLowerPercentile","elevationUpperPercentile","elevationScale","onSetElevationDomain","cellSize","coverage","getPosition","position","extruded","fp64","material","COLOR_PROPS","ELEVATION_PROPS","CPUGridLayer","state","layerData","sortedColorBins","sortedElevationBins","colorValueDomain","elevationValueDomain","colorScaleFunc","elevationScaleFunc","dimensionUpdaters","getDimensionUpdaters","oldProps","props","changeFlags","updateGetValueFuncs","reprojectNeeded","needsReProjectPoints","dataChanged","getLayerData","dimensionChanges","getDimensionChanges","forEach","f","apply","colorChanged","elevationChanged","p","colorElevationPropsChanged","setState","updateTriggersChanged","all","getFillColor","id","triggers","updater","getSortedColorBins","getColorValueDomain","getColorScale","getElevation","getSortedElevationBins","getElevationValueDomain","getElevationScale","updaters","dimensionKey","needUpdate","find","item","some","t","push","length","info","isPicked","picked","index","object","cell","colorValue","binMap","elevationValue","Object","assign","Boolean","updateTriggers","step","prop","data","getSortedBins","BinSorter","getValueRange","cv","isColorValueInDomain","color","Number","isFinite","ev","isElevationValueInDomain","transitions","SubLayerClass","getSubLayerClass","GridCellLayer","_onGetSublayerColor","bind","_onGetSublayerElevation","getSubLayerProps","getUpdateTriggers","CompositeLayer","layerName"],"mappings":";;;;;;;;;;;;;;;;;;;AAoBA;;AACA;;AACA;;AAEA;;AACA;;AACA;;AACA;;AACA;;AACA,SAASA,GAAT,GAAe,CAAE;;AAEjB,IAAMC,eAAe,GAAG,IAAIC,mBAAJ,EAAxB;AAEA,IAAMC,YAAY,GAAG;AAEnBC,EAAAA,WAAW,EAAE,IAFM;AAGnBC,EAAAA,UAAU,EAAEC,6BAHO;AAInBC,EAAAA,aAAa,EAAE;AAACC,IAAAA,IAAI,EAAE,UAAP;AAAmBC,IAAAA,KAAK,EAAE;AAA1B,GAJI;AAKnBC,EAAAA,cAAc,EAAE;AAACF,IAAAA,IAAI,EAAE,UAAP;AAAmBC,IAAAA,KAAK,EAAE,eAAAE,CAAC;AAAA,aAAI,CAAJ;AAAA;AAA3B,GALG;AAMnBC,EAAAA,gBAAgB,EAAE,KANC;AAOnBC,EAAAA,eAAe,EAAE;AAACL,IAAAA,IAAI,EAAE,QAAP;AAAiBM,IAAAA,GAAG,EAAE,CAAtB;AAAyBC,IAAAA,GAAG,EAAE,GAA9B;AAAmCN,IAAAA,KAAK,EAAE;AAA1C,GAPE;AAQnBO,EAAAA,eAAe,EAAE;AAACR,IAAAA,IAAI,EAAE,QAAP;AAAiBM,IAAAA,GAAG,EAAE,CAAtB;AAAyBC,IAAAA,GAAG,EAAE,GAA9B;AAAmCN,IAAAA,KAAK,EAAE;AAA1C,GARE;AASnBQ,EAAAA,gBAAgB,EAAEjB,GATC;AAYnBkB,EAAAA,eAAe,EAAE,IAZE;AAanBC,EAAAA,cAAc,EAAE,CAAC,CAAD,EAAI,IAAJ,CAbG;AAcnBC,EAAAA,iBAAiB,EAAE;AAACZ,IAAAA,IAAI,EAAE,UAAP;AAAmBC,IAAAA,KAAK,EAAE;AAA1B,GAdA;AAenBY,EAAAA,kBAAkB,EAAE;AAACb,IAAAA,IAAI,EAAE,UAAP;AAAmBC,IAAAA,KAAK,EAAE,eAAAE,CAAC;AAAA,aAAI,CAAJ;AAAA;AAA3B,GAfD;AAgBnBW,EAAAA,oBAAoB,EAAE,KAhBH;AAiBnBC,EAAAA,wBAAwB,EAAE;AAACf,IAAAA,IAAI,EAAE,QAAP;AAAiBM,IAAAA,GAAG,EAAE,CAAtB;AAAyBC,IAAAA,GAAG,EAAE,GAA9B;AAAmCN,IAAAA,KAAK,EAAE;AAA1C,GAjBP;AAkBnBe,EAAAA,wBAAwB,EAAE;AAAChB,IAAAA,IAAI,EAAE,QAAP;AAAiBM,IAAAA,GAAG,EAAE,CAAtB;AAAyBC,IAAAA,GAAG,EAAE,GAA9B;AAAmCN,IAAAA,KAAK,EAAE;AAA1C,GAlBP;AAmBnBgB,EAAAA,cAAc,EAAE,CAnBG;AAoBnBC,EAAAA,oBAAoB,EAAE1B,GApBH;AAuBnB2B,EAAAA,QAAQ,EAAE;AAACnB,IAAAA,IAAI,EAAE,QAAP;AAAiBM,IAAAA,GAAG,EAAE,CAAtB;AAAyBC,IAAAA,GAAG,EAAE,IAA9B;AAAoCN,IAAAA,KAAK,EAAE;AAA3C,GAvBS;AAwBnBmB,EAAAA,QAAQ,EAAE;AAACpB,IAAAA,IAAI,EAAE,QAAP;AAAiBM,IAAAA,GAAG,EAAE,CAAtB;AAAyBC,IAAAA,GAAG,EAAE,CAA9B;AAAiCN,IAAAA,KAAK,EAAE;AAAxC,GAxBS;AAyBnBoB,EAAAA,WAAW,EAAE;AAACrB,IAAAA,IAAI,EAAE,UAAP;AAAmBC,IAAAA,KAAK,EAAE,eAAAE,CAAC;AAAA,aAAIA,CAAC,CAACmB,QAAN;AAAA;AAA3B,GAzBM;AA0BnBC,EAAAA,QAAQ,EAAE,KA1BS;AA2BnBC,EAAAA,IAAI,EAAE,KA3Ba;AA8BnBC,EAAAA,QAAQ,EAAEhC;AA9BS,CAArB;AAiCA,IAAMiC,WAAW,GAAG,CAAC,eAAD,EAAkB,kBAAlB,EAAsC,gBAAtC,CAApB;AACA,IAAMC,eAAe,GAAG,CAAC,mBAAD,EAAsB,sBAAtB,EAA8C,oBAA9C,CAAxB;;IAEqBC,Y;;;;;;;;;;sCACD;AAChB,WAAKC,KAAL,GAAa;AACXC,QAAAA,SAAS,EAAE,EADA;AAEXC,QAAAA,eAAe,EAAE,IAFN;AAGXC,QAAAA,mBAAmB,EAAE,IAHV;AAIXC,QAAAA,gBAAgB,EAAE,IAJP;AAKXC,QAAAA,oBAAoB,EAAE,IALX;AAMXC,QAAAA,cAAc,EAAE3C,GANL;AAOX4C,QAAAA,kBAAkB,EAAE5C,GAPT;AAQX6C,QAAAA,iBAAiB,EAAE,KAAKC,oBAAL;AARR,OAAb;AAUD;;;sCAE2C;AAAA;;AAAA,UAA/BC,QAA+B,QAA/BA,QAA+B;AAAA,UAArBC,KAAqB,QAArBA,KAAqB;AAAA,UAAdC,WAAc,QAAdA,WAAc;AAC1C,WAAKC,mBAAL,CAAyBH,QAAzB,EAAmCC,KAAnC;AACA,UAAMG,eAAe,GAAG,KAAKC,oBAAL,CAA0BL,QAA1B,EAAoCC,KAApC,EAA2CC,WAA3C,CAAxB;;AAEA,UAAIA,WAAW,CAACI,WAAZ,IAA2BF,eAA/B,EAAgD;AAE9C,aAAKG,YAAL;AACD,OAHD,MAGO;AACL,YAAMC,gBAAgB,GAAG,KAAKC,mBAAL,CAAyBT,QAAzB,EAAmCC,KAAnC,KAA6C,EAAtE;AACAO,QAAAA,gBAAgB,CAACE,OAAjB,CAAyB,UAAAC,CAAC;AAAA,iBAAI,OAAOA,CAAP,KAAa,UAAb,IAA2BA,CAAC,CAACC,KAAF,CAAQ,KAAR,CAA/B;AAAA,SAA1B;AACD;AACF;;;+CAE0BZ,Q,EAAUC,K,EAAO;AAC1C,UAAIY,YAAY,GAAG,KAAnB;AACA,UAAIC,gBAAgB,GAAG,KAAvB;;AACA,4BAAgB3B,WAAhB,eAA6B;AAAxB,YAAM4B,CAAC,GAAI5B,WAAJ,IAAP;;AACH,YAAIa,QAAQ,CAACe,CAAD,CAAR,KAAgBd,KAAK,CAACc,CAAD,CAAzB,EAA8B;AAC5BF,UAAAA,YAAY,GAAG,IAAf;AACD;AACF;;AACD,8BAAgBzB,eAAhB,gBAAiC;AAA5B,YAAM2B,EAAC,GAAI3B,eAAJ,KAAP;;AACH,YAAIY,QAAQ,CAACe,EAAD,CAAR,KAAgBd,KAAK,CAACc,EAAD,CAAzB,EAA8B;AAC5BD,UAAAA,gBAAgB,GAAG,IAAnB;AACD;AACF;;AACD,aAAO;AAACD,QAAAA,YAAY,EAAZA,YAAD;AAAeC,QAAAA,gBAAgB,EAAhBA;AAAf,OAAP;AACD;;;wCAEmBd,Q,EAAUC,K,EAAO;AAAA,UAC9BzC,aAD8B,GACMyC,KADN,CAC9BzC,aAD8B;AAAA,UACfa,iBADe,GACM4B,KADN,CACf5B,iBADe;AAAA,wBAEkD,KAAK4B,KAFvD;AAAA,UAE5BpC,gBAF4B,eAE5BA,gBAF4B;AAAA,UAEVF,cAFU,eAEVA,cAFU;AAAA,UAEMY,oBAFN,eAEMA,oBAFN;AAAA,UAE4BD,kBAF5B,eAE4BA,kBAF5B;;AAAA,kCAGM,KAAK0C,0BAAL,CAAgChB,QAAhC,EAA0CC,KAA1C,CAHN;AAAA,UAG5BY,YAH4B,yBAG5BA,YAH4B;AAAA,UAGdC,gBAHc,yBAGdA,gBAHc;;AAKnC,UAAID,YAAY,IAAIrD,aAAa,KAAK,IAAtC,EAA4C;AAE1CA,QAAAA,aAAa,GAAG,6CAAaK,gBAAb,EAA+BF,cAA/B,CAAhB;AACD;;AACD,UAAImD,gBAAgB,IAAIzC,iBAAiB,KAAK,IAA9C,EAAoD;AAElDA,QAAAA,iBAAiB,GAAG,6CAAaE,oBAAb,EAAmCD,kBAAnC,CAApB;AACD;;AACD,UAAId,aAAJ,EAAmB;AACjB,aAAKyD,QAAL,CAAc;AAACzD,UAAAA,aAAa,EAAbA;AAAD,SAAd;AACD;;AACD,UAAIa,iBAAJ,EAAuB;AACrB,aAAK4C,QAAL,CAAc;AAAC5C,UAAAA,iBAAiB,EAAjBA;AAAD,SAAd;AACD;AACF;;;yCAEoB2B,Q,EAAUC,K,EAAOC,W,EAAa;AACjD,aACEF,QAAQ,CAACpB,QAAT,KAAsBqB,KAAK,CAACrB,QAA5B,IACCsB,WAAW,CAACgB,qBAAZ,KACEhB,WAAW,CAACgB,qBAAZ,CAAkCC,GAAlC,IAAyCjB,WAAW,CAACgB,qBAAZ,CAAkCpC,WAD7E,CAFH;AAKD;;;2CAEsB;AAKrB,aAAO;AACLsC,QAAAA,YAAY,EAAE,CACZ;AACEC,UAAAA,EAAE,EAAE,OADN;AAEEC,UAAAA,QAAQ,EAAE,CAAC,eAAD,EAAkB,gBAAlB,EAAoC,kBAApC,CAFZ;AAGEC,UAAAA,OAAO,EAAE,KAAKC;AAHhB,SADY,EAMZ;AACEH,UAAAA,EAAE,EAAE,QADN;AAEEC,UAAAA,QAAQ,EAAE,CAAC,iBAAD,EAAoB,iBAApB,CAFZ;AAGEC,UAAAA,OAAO,EAAE,KAAKE;AAHhB,SANY,EAWZ;AACEJ,UAAAA,EAAE,EAAE,WADN;AAEEC,UAAAA,QAAQ,EAAE,CAAC,aAAD,EAAgB,YAAhB,CAFZ;AAGEC,UAAAA,OAAO,EAAE,KAAKG;AAHhB,SAXY,CADT;AAkBLC,QAAAA,YAAY,EAAE,CACZ;AACEN,UAAAA,EAAE,EAAE,OADN;AAEEC,UAAAA,QAAQ,EAAE,CAAC,mBAAD,EAAsB,oBAAtB,EAA4C,sBAA5C,CAFZ;AAGEC,UAAAA,OAAO,EAAE,KAAKK;AAHhB,SADY,EAMZ;AACEP,UAAAA,EAAE,EAAE,QADN;AAEEC,UAAAA,QAAQ,EAAE,CAAC,0BAAD,EAA6B,0BAA7B,CAFZ;AAGEC,UAAAA,OAAO,EAAE,KAAKM;AAHhB,SANY,EAWZ;AACER,UAAAA,EAAE,EAAE,WADN;AAEEC,UAAAA,QAAQ,EAAE,CAAC,iBAAD,EAAoB,gBAApB,CAFZ;AAGEC,UAAAA,OAAO,EAAE,KAAKO;AAHhB,SAXY;AAlBT,OAAP;AAoCD;;;wCAEmB9B,Q,EAAUC,K,EAAO;AAAA,UAC5BH,iBAD4B,GACP,KAAKR,KADE,CAC5BQ,iBAD4B;AAEnC,UAAMiC,QAAQ,GAAG,EAAjB;;AAGA,WAAK,IAAMC,YAAX,IAA2BlC,iBAA3B,EAA8C;AAE5C,YAAMmC,UAAU,GAAGnC,iBAAiB,CAACkC,YAAD,CAAjB,CAAgCE,IAAhC,CAAqC,UAAAC,IAAI;AAAA,iBAC1DA,IAAI,CAACb,QAAL,CAAcc,IAAd,CAAmB,UAAAC,CAAC;AAAA,mBAAIrC,QAAQ,CAACqC,CAAD,CAAR,KAAgBpC,KAAK,CAACoC,CAAD,CAAzB;AAAA,WAApB,CAD0D;AAAA,SAAzC,CAAnB;;AAIA,YAAIJ,UAAJ,EAAgB;AACdF,UAAAA,QAAQ,CAACO,IAAT,CAAcL,UAAU,CAACV,OAAzB;AACD;AACF;;AAED,aAAOQ,QAAQ,CAACQ,MAAT,GAAkBR,QAAlB,GAA6B,IAApC;AACD;;;0CAEsB;AAAA,UAAPS,IAAO,SAAPA,IAAO;AAAA,wBAC0B,KAAKlD,KAD/B;AAAA,UACdE,eADc,eACdA,eADc;AAAA,UACGC,mBADH,eACGA,mBADH;AAGrB,UAAMgD,QAAQ,GAAGD,IAAI,CAACE,MAAL,IAAeF,IAAI,CAACG,KAAL,GAAa,CAAC,CAA9C;AACA,UAAIC,MAAM,GAAG,IAAb;;AAEA,UAAIH,QAAJ,EAAc;AACZ,YAAMI,IAAI,GAAG,KAAKvD,KAAL,CAAWC,SAAX,CAAqBiD,IAAI,CAACG,KAA1B,CAAb;AAEA,YAAMG,UAAU,GACdtD,eAAe,CAACuD,MAAhB,CAAuBF,IAAI,CAACF,KAA5B,KAAsCnD,eAAe,CAACuD,MAAhB,CAAuBF,IAAI,CAACF,KAA5B,EAAmCjF,KAD3E;AAEA,YAAMsF,cAAc,GAClBvD,mBAAmB,CAACsD,MAApB,CAA2BF,IAAI,CAACF,KAAhC,KAA0ClD,mBAAmB,CAACsD,MAApB,CAA2BF,IAAI,CAACF,KAAhC,EAAuCjF,KADnF;AAGAkF,QAAAA,MAAM,GAAGK,MAAM,CAACC,MAAP,CACP;AACEJ,UAAAA,UAAU,EAAVA,UADF;AAEEE,UAAAA,cAAc,EAAdA;AAFF,SADO,EAKPH,IALO,CAAT;AAOD;;AAGD,aAAOI,MAAM,CAACC,MAAP,CAAcV,IAAd,EAAoB;AACzBE,QAAAA,MAAM,EAAES,OAAO,CAACP,MAAD,CADU;AAGzBA,QAAAA,MAAM,EAANA;AAHyB,OAApB,CAAP;AAKD;;;wCAEmB;AAAA;;AAAA,UACX9C,iBADW,GACU,KAAKR,KADf,CACXQ,iBADW;AAIlB,UAAMsD,cAAc,GAAG,EAAvB;;AAJkB,iCAMPpB,YANO;AAOhBoB,QAAAA,cAAc,CAACpB,YAAD,CAAd,GAA+B,EAA/B;AAPgB;AAAA;AAAA;;AAAA;AAShB,+BAAmBlC,iBAAiB,CAACkC,YAAD,CAApC,8HAAoD;AAAA,gBAAzCqB,IAAyC;AAClDA,YAAAA,IAAI,CAAC/B,QAAL,CAAcZ,OAAd,CAAsB,UAAA4C,IAAI,EAAI;AAC5BF,cAAAA,cAAc,CAACpB,YAAD,CAAd,CAA6BsB,IAA7B,IAAqC,MAAI,CAACrD,KAAL,CAAWqD,IAAX,CAArC;AACD,aAFD;AAGD;AAbe;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAMlB,WAAK,IAAMtB,YAAX,IAA2BlC,iBAA3B,EAA8C;AAAA,cAAnCkC,YAAmC;AAQ7C;;AAED,aAAOoB,cAAP;AACD;;;mCAEc;AAAA,yBACyB,KAAKnD,KAD9B;AAAA,UACNsD,IADM,gBACNA,IADM;AAAA,UACA3E,QADA,gBACAA,QADA;AAAA,UACUE,WADV,gBACUA,WADV;;AAAA,kCAEO,+CAA0ByE,IAA1B,EAAgC3E,QAAhC,EAA0CE,WAA1C,CAFP;AAAA,UAENS,SAFM,yBAENA,SAFM;;AAIb,WAAK0B,QAAL,CAAc;AAAC1B,QAAAA,SAAS,EAATA;AAAD,OAAd;AACA,WAAKiE,aAAL;AACD;;;qCAEgB;AACf,WAAK/B,mBAAL;AACA,WAAKI,uBAAL;AACD;;;oCAEe;AACd,WAAKL,kBAAL;AACA,WAAKI,sBAAL;AACD;;;yCAEoB;AAAA,UACZpE,aADY,GACK,KAAK8B,KADV,CACZ9B,aADY;AAEnB,UAAMgC,eAAe,GAAG,IAAIiE,kBAAJ,CAAc,KAAKnE,KAAL,CAAWC,SAAX,IAAwB,EAAtC,EAA0C/B,aAA1C,CAAxB;AAEA,WAAKyD,QAAL,CAAc;AAACzB,QAAAA,eAAe,EAAfA;AAAD,OAAd;AACA,WAAKiC,mBAAL;AACD;;;6CAEwB;AAAA,UAChBpD,iBADgB,GACK,KAAKiB,KADV,CAChBjB,iBADgB;AAEvB,UAAMoB,mBAAmB,GAAG,IAAIgE,kBAAJ,CAAc,KAAKnE,KAAL,CAAWC,SAAX,IAAwB,EAAtC,EAA0ClB,iBAA1C,CAA5B;AACA,WAAK4C,QAAL,CAAc;AAACxB,QAAAA,mBAAmB,EAAnBA;AAAD,OAAd;AACA,WAAKoC,uBAAL;AACD;;;0CAEqB;AAAA,yBACyC,KAAK5B,KAD9C;AAAA,UACbnC,eADa,gBACbA,eADa;AAAA,UACIG,eADJ,gBACIA,eADJ;AAAA,UACqBC,gBADrB,gBACqBA,gBADrB;AAGpB,WAAKoB,KAAL,CAAWI,gBAAX,GAA8B,KAAKJ,KAAL,CAAWE,eAAX,CAA2BkE,aAA3B,CAAyC,CACrE5F,eADqE,EAErEG,eAFqE,CAAzC,CAA9B;;AAKA,UAAI,OAAOC,gBAAP,KAA4B,UAAhC,EAA4C;AAC1CA,QAAAA,gBAAgB,CAAC,KAAKoB,KAAL,CAAWI,gBAAZ,CAAhB;AACD;;AAED,WAAKgC,aAAL;AACD;;;8CAEyB;AAAA,yBAC2D,KAAKzB,KADhE;AAAA,UACjBzB,wBADiB,gBACjBA,wBADiB;AAAA,UACSC,wBADT,gBACSA,wBADT;AAAA,UACmCE,oBADnC,gBACmCA,oBADnC;AAGxB,WAAKW,KAAL,CAAWK,oBAAX,GAAkC,KAAKL,KAAL,CAAWG,mBAAX,CAA+BiE,aAA/B,CAA6C,CAC7ElF,wBAD6E,EAE7EC,wBAF6E,CAA7C,CAAlC;;AAKA,UAAI,OAAOE,oBAAP,KAAgC,UAApC,EAAgD;AAC9CA,QAAAA,oBAAoB,CAAC,KAAKW,KAAL,CAAWK,oBAAZ,CAApB;AACD;;AAED,WAAKmC,iBAAL;AACD;;;oCAEe;AAAA,UACPxE,UADO,GACO,KAAK2C,KADZ,CACP3C,UADO;AAEd,UAAMD,WAAW,GAAG,KAAK4C,KAAL,CAAW5C,WAAX,IAA0B,KAAKiC,KAAL,CAAWI,gBAAzD;AAEA,WAAKJ,KAAL,CAAWM,cAAX,GAA4B,kCAAiBvC,WAAjB,EAA8BC,UAA9B,CAA5B;AACD;;;wCAEmB;AAAA,UACXc,cADW,GACO,KAAK6B,KADZ,CACX7B,cADW;AAElB,UAAMD,eAAe,GAAG,KAAK8B,KAAL,CAAW9B,eAAX,IAA8B,KAAKmB,KAAL,CAAWK,oBAAjE;AAEA,WAAKL,KAAL,CAAWO,kBAAX,GAAgC,gCAAe1B,eAAf,EAAgCC,cAAhC,CAAhC;AACD;;;wCAEmByE,I,EAAM;AAAA,yBACoC,KAAKvD,KADzC;AAAA,UACjBE,eADiB,gBACjBA,eADiB;AAAA,UACAI,cADA,gBACAA,cADA;AAAA,UACgBF,gBADhB,gBACgBA,gBADhB;AAGxB,UAAMiE,EAAE,GAAGnE,eAAe,CAACuD,MAAhB,CAAuBF,IAAI,CAACF,KAA5B,KAAsCnD,eAAe,CAACuD,MAAhB,CAAuBF,IAAI,CAACF,KAA5B,EAAmCjF,KAApF;AACA,UAAML,WAAW,GAAG,KAAK4C,KAAL,CAAW5C,WAAX,IAA0BqC,gBAA9C;AAEA,UAAMkE,oBAAoB,GAAGD,EAAE,IAAItG,WAAW,CAAC,CAAD,CAAjB,IAAwBsG,EAAE,IAAItG,WAAW,CAACA,WAAW,CAACkF,MAAZ,GAAqB,CAAtB,CAAtE;AAGA,UAAMsB,KAAK,GAAGD,oBAAoB,GAAGhE,cAAc,CAAC+D,EAAD,CAAjB,GAAwB,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,CAAV,CAA1D;AAGAE,MAAAA,KAAK,CAAC,CAAD,CAAL,GAAWC,MAAM,CAACC,QAAP,CAAgBF,KAAK,CAAC,CAAD,CAArB,IAA4BA,KAAK,CAAC,CAAD,CAAjC,GAAuC,GAAlD;AAEA,aAAOA,KAAP;AACD;;;4CAEuBhB,I,EAAM;AAAA,yBAC4C,KAAKvD,KADjD;AAAA,UACrBG,mBADqB,gBACrBA,mBADqB;AAAA,UACAI,kBADA,gBACAA,kBADA;AAAA,UACoBF,oBADpB,gBACoBA,oBADpB;AAE5B,UAAMqE,EAAE,GACNvE,mBAAmB,CAACsD,MAApB,CAA2BF,IAAI,CAACF,KAAhC,KAA0ClD,mBAAmB,CAACsD,MAApB,CAA2BF,IAAI,CAACF,KAAhC,EAAuCjF,KADnF;AAGA,UAAMS,eAAe,GAAG,KAAK8B,KAAL,CAAW9B,eAAX,IAA8BwB,oBAAtD;AAEA,UAAMsE,wBAAwB,GAC5BD,EAAE,IAAI7F,eAAe,CAAC,CAAD,CAArB,IAA4B6F,EAAE,IAAI7F,eAAe,CAACA,eAAe,CAACoE,MAAhB,GAAyB,CAA1B,CADnD;AAIA,aAAO0B,wBAAwB,GAAGpE,kBAAkB,CAACmE,EAAD,CAArB,GAA4B,CAAC,CAA5D;AACD;;;mCAEc;AAAA,yBACuE,KAAK/D,KAD5E;AAAA,UACNvB,cADM,gBACNA,cADM;AAAA,UACUO,IADV,gBACUA,IADV;AAAA,UACgBD,QADhB,gBACgBA,QADhB;AAAA,UAC0BJ,QAD1B,gBAC0BA,QAD1B;AAAA,UACoCC,QADpC,gBACoCA,QADpC;AAAA,UAC8CK,QAD9C,gBAC8CA,QAD9C;AAAA,UACwDgF,WADxD,gBACwDA,WADxD;AAGb,UAAMC,aAAa,GAAG,KAAKC,gBAAL,CAAsB,WAAtB,EAAmCC,qBAAnC,CAAtB;AAEA,aAAO,IAAIF,aAAJ,CACL;AACElF,QAAAA,IAAI,EAAJA,IADF;AAEEL,QAAAA,QAAQ,EAARA,QAFF;AAGEC,QAAAA,QAAQ,EAARA,QAHF;AAIEK,QAAAA,QAAQ,EAARA,QAJF;AAKER,QAAAA,cAAc,EAAdA,cALF;AAMEM,QAAAA,QAAQ,EAARA,QANF;AAQEoC,QAAAA,YAAY,EAAE,KAAKkD,mBAAL,CAAyBC,IAAzB,CAA8B,IAA9B,CARhB;AASE5C,QAAAA,YAAY,EAAE,KAAK6C,uBAAL,CAA6BD,IAA7B,CAAkC,IAAlC,CAThB;AAUEL,QAAAA,WAAW,EAAEA,WAAW,IAAI;AAC1B9C,UAAAA,YAAY,EAAE8C,WAAW,CAAC1G,aAAZ,IAA6B0G,WAAW,CAACvG,cAD7B;AAE1BgE,UAAAA,YAAY,EAAEuC,WAAW,CAAC7F,iBAAZ,IAAiC6F,WAAW,CAAC5F;AAFjC;AAV9B,OADK,EAgBL,KAAKmG,gBAAL,CAAsB;AACpBpD,QAAAA,EAAE,EAAE,WADgB;AAEpB+B,QAAAA,cAAc,EAAE,KAAKsB,iBAAL;AAFI,OAAtB,CAhBK,EAoBL;AACEnB,QAAAA,IAAI,EAAE,KAAKjE,KAAL,CAAWC;AADnB,OApBK,CAAP;AAwBD;;;EAjUuCoF,qB;;;AAoU1CtF,YAAY,CAACuF,SAAb,GAAyB,cAAzB;AACAvF,YAAY,CAACjC,YAAb,GAA4BA,YAA5B","sourcesContent":["// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nimport {PhongMaterial} from '@luma.gl/core';\nimport {CompositeLayer} from '@deck.gl/core';\nimport {GridCellLayer} from '@deck.gl/layers';\n\nimport BinSorter from '../utils/bin-sorter';\nimport {defaultColorRange} from '../utils/color-utils';\nimport {getQuantizeScale, getLinearScale} from '../utils/scale-utils';\nimport {pointToDensityGridDataCPU} from './grid-aggregator';\nimport {getValueFunc} from '../utils/aggregation-operation-utils';\nfunction nop() {}\n\nconst defaultMaterial = new PhongMaterial();\n\nconst defaultProps = {\n  // color\n  colorDomain: null,\n  colorRange: defaultColorRange,\n  getColorValue: {type: 'accessor', value: null}, // default value is calcuated from `getColorWeight` and `colorAggregation`\n  getColorWeight: {type: 'accessor', value: x => 1},\n  colorAggregation: 'SUM',\n  lowerPercentile: {type: 'number', min: 0, max: 100, value: 0},\n  upperPercentile: {type: 'number', min: 0, max: 100, value: 100},\n  onSetColorDomain: nop,\n\n  // elevation\n  elevationDomain: null,\n  elevationRange: [0, 1000],\n  getElevationValue: {type: 'accessor', value: null}, // default value is calcuated from `getElevationWeight` and `elevationAggregation`\n  getElevationWeight: {type: 'accessor', value: x => 1},\n  elevationAggregation: 'SUM',\n  elevationLowerPercentile: {type: 'number', min: 0, max: 100, value: 0},\n  elevationUpperPercentile: {type: 'number', min: 0, max: 100, value: 100},\n  elevationScale: 1,\n  onSetElevationDomain: nop,\n\n  // grid\n  cellSize: {type: 'number', min: 0, max: 1000, value: 1000},\n  coverage: {type: 'number', min: 0, max: 1, value: 1},\n  getPosition: {type: 'accessor', value: x => x.position},\n  extruded: false,\n  fp64: false,\n\n  // Optional material for 'lighting' shader module\n  material: defaultMaterial\n};\n\nconst COLOR_PROPS = ['getColorValue', 'colorAggregation', 'getColorWeight'];\nconst ELEVATION_PROPS = ['getElevationValue', 'elevationAggregation', 'getElevationWeight'];\n\nexport default class CPUGridLayer extends CompositeLayer {\n  initializeState() {\n    this.state = {\n      layerData: [],\n      sortedColorBins: null,\n      sortedElevationBins: null,\n      colorValueDomain: null,\n      elevationValueDomain: null,\n      colorScaleFunc: nop,\n      elevationScaleFunc: nop,\n      dimensionUpdaters: this.getDimensionUpdaters()\n    };\n  }\n\n  updateState({oldProps, props, changeFlags}) {\n    this.updateGetValueFuncs(oldProps, props);\n    const reprojectNeeded = this.needsReProjectPoints(oldProps, props, changeFlags);\n\n    if (changeFlags.dataChanged || reprojectNeeded) {\n      // project data into hexagons, and get sortedBins\n      this.getLayerData();\n    } else {\n      const dimensionChanges = this.getDimensionChanges(oldProps, props) || [];\n      dimensionChanges.forEach(f => typeof f === 'function' && f.apply(this));\n    }\n  }\n\n  colorElevationPropsChanged(oldProps, props) {\n    let colorChanged = false;\n    let elevationChanged = false;\n    for (const p of COLOR_PROPS) {\n      if (oldProps[p] !== props[p]) {\n        colorChanged = true;\n      }\n    }\n    for (const p of ELEVATION_PROPS) {\n      if (oldProps[p] !== props[p]) {\n        elevationChanged = true;\n      }\n    }\n    return {colorChanged, elevationChanged};\n  }\n\n  updateGetValueFuncs(oldProps, props) {\n    let {getColorValue, getElevationValue} = props;\n    const {colorAggregation, getColorWeight, elevationAggregation, getElevationWeight} = this.props;\n    const {colorChanged, elevationChanged} = this.colorElevationPropsChanged(oldProps, props);\n\n    if (colorChanged && getColorValue === null) {\n      // If `getColorValue` is not provided, build it.\n      getColorValue = getValueFunc(colorAggregation, getColorWeight);\n    }\n    if (elevationChanged && getElevationValue === null) {\n      // If `getElevationValue` is not provided, build it.\n      getElevationValue = getValueFunc(elevationAggregation, getElevationWeight);\n    }\n    if (getColorValue) {\n      this.setState({getColorValue});\n    }\n    if (getElevationValue) {\n      this.setState({getElevationValue});\n    }\n  }\n\n  needsReProjectPoints(oldProps, props, changeFlags) {\n    return (\n      oldProps.cellSize !== props.cellSize ||\n      (changeFlags.updateTriggersChanged &&\n        (changeFlags.updateTriggersChanged.all || changeFlags.updateTriggersChanged.getPosition))\n    );\n  }\n\n  getDimensionUpdaters() {\n    // dimension updaters are sequential,\n    // if the first one needs to be called, the 2nd and 3rd one will automatically\n    // be called. e.g. if ColorValue needs to be updated, getColorValueDomain and getColorScale\n    // will automatically be called\n    return {\n      getFillColor: [\n        {\n          id: 'value',\n          triggers: ['getColorValue', 'getColorWeight', 'colorAggregation'],\n          updater: this.getSortedColorBins\n        },\n        {\n          id: 'domain',\n          triggers: ['lowerPercentile', 'upperPercentile'],\n          updater: this.getColorValueDomain\n        },\n        {\n          id: 'scaleFunc',\n          triggers: ['colorDomain', 'colorRange'],\n          updater: this.getColorScale\n        }\n      ],\n      getElevation: [\n        {\n          id: 'value',\n          triggers: ['getElevationValue', 'getElevationWeight', 'elevationAggregation'],\n          updater: this.getSortedElevationBins\n        },\n        {\n          id: 'domain',\n          triggers: ['elevationLowerPercentile', 'elevationUpperPercentile'],\n          updater: this.getElevationValueDomain\n        },\n        {\n          id: 'scaleFunc',\n          triggers: ['elevationDomain', 'elevationRange'],\n          updater: this.getElevationScale\n        }\n      ]\n    };\n  }\n\n  getDimensionChanges(oldProps, props) {\n    const {dimensionUpdaters} = this.state;\n    const updaters = [];\n\n    // get dimension to be updated\n    for (const dimensionKey in dimensionUpdaters) {\n      // return the first triggered updater for each dimension\n      const needUpdate = dimensionUpdaters[dimensionKey].find(item =>\n        item.triggers.some(t => oldProps[t] !== props[t])\n      );\n\n      if (needUpdate) {\n        updaters.push(needUpdate.updater);\n      }\n    }\n\n    return updaters.length ? updaters : null;\n  }\n\n  getPickingInfo({info}) {\n    const {sortedColorBins, sortedElevationBins} = this.state;\n\n    const isPicked = info.picked && info.index > -1;\n    let object = null;\n\n    if (isPicked) {\n      const cell = this.state.layerData[info.index];\n\n      const colorValue =\n        sortedColorBins.binMap[cell.index] && sortedColorBins.binMap[cell.index].value;\n      const elevationValue =\n        sortedElevationBins.binMap[cell.index] && sortedElevationBins.binMap[cell.index].value;\n\n      object = Object.assign(\n        {\n          colorValue,\n          elevationValue\n        },\n        cell\n      );\n    }\n\n    // add bin colorValue and elevationValue to info\n    return Object.assign(info, {\n      picked: Boolean(object),\n      // override object with picked cell\n      object\n    });\n  }\n\n  getUpdateTriggers() {\n    const {dimensionUpdaters} = this.state;\n\n    // merge all dimension triggers\n    const updateTriggers = {};\n\n    for (const dimensionKey in dimensionUpdaters) {\n      updateTriggers[dimensionKey] = {};\n\n      for (const step of dimensionUpdaters[dimensionKey]) {\n        step.triggers.forEach(prop => {\n          updateTriggers[dimensionKey][prop] = this.props[prop];\n        });\n      }\n    }\n\n    return updateTriggers;\n  }\n\n  getLayerData() {\n    const {data, cellSize, getPosition} = this.props;\n    const {layerData} = pointToDensityGridDataCPU(data, cellSize, getPosition);\n\n    this.setState({layerData});\n    this.getSortedBins();\n  }\n\n  getValueDomain() {\n    this.getColorValueDomain();\n    this.getElevationValueDomain();\n  }\n\n  getSortedBins() {\n    this.getSortedColorBins();\n    this.getSortedElevationBins();\n  }\n\n  getSortedColorBins() {\n    const {getColorValue} = this.state;\n    const sortedColorBins = new BinSorter(this.state.layerData || [], getColorValue);\n\n    this.setState({sortedColorBins});\n    this.getColorValueDomain();\n  }\n\n  getSortedElevationBins() {\n    const {getElevationValue} = this.state;\n    const sortedElevationBins = new BinSorter(this.state.layerData || [], getElevationValue);\n    this.setState({sortedElevationBins});\n    this.getElevationValueDomain();\n  }\n\n  getColorValueDomain() {\n    const {lowerPercentile, upperPercentile, onSetColorDomain} = this.props;\n\n    this.state.colorValueDomain = this.state.sortedColorBins.getValueRange([\n      lowerPercentile,\n      upperPercentile\n    ]);\n\n    if (typeof onSetColorDomain === 'function') {\n      onSetColorDomain(this.state.colorValueDomain);\n    }\n\n    this.getColorScale();\n  }\n\n  getElevationValueDomain() {\n    const {elevationLowerPercentile, elevationUpperPercentile, onSetElevationDomain} = this.props;\n\n    this.state.elevationValueDomain = this.state.sortedElevationBins.getValueRange([\n      elevationLowerPercentile,\n      elevationUpperPercentile\n    ]);\n\n    if (typeof onSetElevationDomain === 'function') {\n      onSetElevationDomain(this.state.elevationValueDomain);\n    }\n\n    this.getElevationScale();\n  }\n\n  getColorScale() {\n    const {colorRange} = this.props;\n    const colorDomain = this.props.colorDomain || this.state.colorValueDomain;\n\n    this.state.colorScaleFunc = getQuantizeScale(colorDomain, colorRange);\n  }\n\n  getElevationScale() {\n    const {elevationRange} = this.props;\n    const elevationDomain = this.props.elevationDomain || this.state.elevationValueDomain;\n\n    this.state.elevationScaleFunc = getLinearScale(elevationDomain, elevationRange);\n  }\n\n  _onGetSublayerColor(cell) {\n    const {sortedColorBins, colorScaleFunc, colorValueDomain} = this.state;\n\n    const cv = sortedColorBins.binMap[cell.index] && sortedColorBins.binMap[cell.index].value;\n    const colorDomain = this.props.colorDomain || colorValueDomain;\n\n    const isColorValueInDomain = cv >= colorDomain[0] && cv <= colorDomain[colorDomain.length - 1];\n\n    // if cell value is outside domain, set alpha to 0\n    const color = isColorValueInDomain ? colorScaleFunc(cv) : [0, 0, 0, 0];\n\n    // add alpha to color if not defined in colorRange\n    color[3] = Number.isFinite(color[3]) ? color[3] : 255;\n\n    return color;\n  }\n\n  _onGetSublayerElevation(cell) {\n    const {sortedElevationBins, elevationScaleFunc, elevationValueDomain} = this.state;\n    const ev =\n      sortedElevationBins.binMap[cell.index] && sortedElevationBins.binMap[cell.index].value;\n\n    const elevationDomain = this.props.elevationDomain || elevationValueDomain;\n\n    const isElevationValueInDomain =\n      ev >= elevationDomain[0] && ev <= elevationDomain[elevationDomain.length - 1];\n\n    // if cell value is outside domain, set elevation to -1\n    return isElevationValueInDomain ? elevationScaleFunc(ev) : -1;\n  }\n\n  renderLayers() {\n    const {elevationScale, fp64, extruded, cellSize, coverage, material, transitions} = this.props;\n\n    const SubLayerClass = this.getSubLayerClass('grid-cell', GridCellLayer);\n\n    return new SubLayerClass(\n      {\n        fp64,\n        cellSize,\n        coverage,\n        material,\n        elevationScale,\n        extruded,\n\n        getFillColor: this._onGetSublayerColor.bind(this),\n        getElevation: this._onGetSublayerElevation.bind(this),\n        transitions: transitions && {\n          getFillColor: transitions.getColorValue || transitions.getColorWeight,\n          getElevation: transitions.getElevationValue || transitions.getElevationWeight\n        }\n      },\n      this.getSubLayerProps({\n        id: 'grid-cell',\n        updateTriggers: this.getUpdateTriggers()\n      }),\n      {\n        data: this.state.layerData\n      }\n    );\n  }\n}\n\nCPUGridLayer.layerName = 'CPUGridLayer';\nCPUGridLayer.defaultProps = defaultProps;\n"],"file":"cpu-grid-layer.js"}