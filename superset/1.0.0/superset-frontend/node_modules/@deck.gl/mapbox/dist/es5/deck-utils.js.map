{"version":3,"sources":["../../src/deck-utils.js"],"names":["getDeckInstance","map","gl","deck","__deck","customRender","props","_customRender","deckProps","useDevicePixels","triggerRepaint","parameters","depthMask","depthTest","blendFunc","blendEquation","userData","isExternal","mapboxLayers","Set","setProps","Object","assign","width","height","viewState","getViewState","Deck","on","onMapMove","finalize","afterRender","addLayer","layer","add","updateLayers","removeLayer","delete","updateLayer","drawLayer","currentViewport","getViewport","_drawLayers","viewports","layers","getLayers","deckLayer","shouldDrawLayer","id","clearCanvas","getCenter","lng","lat","longitude","latitude","zoom","getZoom","bearing","getBearing","pitch","getPitch","useMapboxProjection","WebMercatorViewport","x","y","nearZMultiplier","farZMultiplier","mapboxLayerIds","Array","from","length","needsRedraw","clearRedrawFlags","layerFilter","layerManager","filter","layerInstance","parent","forEach","LayerType","type","push"],"mappings":"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","sourcesContent":["import {Deck, WebMercatorViewport} from '@deck.gl/core';\n\nexport function getDeckInstance({map, gl, deck}) {\n  // Only create one deck instance per context\n  if (map.__deck) {\n    return map.__deck;\n  }\n\n  const customRender = deck && deck.props._customRender;\n\n  const deckProps = {\n    useDevicePixels: true,\n    _customRender: () => {\n      map.triggerRepaint();\n      if (customRender) {\n        // customRender may be subscribed by DeckGL React component to update child props\n        // make sure it is still called\n        customRender();\n      }\n    },\n    // TODO: import these defaults from a single source of truth\n    parameters: {\n      depthMask: true,\n      depthTest: true,\n      blendFunc: [gl.SRC_ALPHA, gl.ONE_MINUS_SRC_ALPHA, gl.ONE, gl.ONE_MINUS_SRC_ALPHA],\n      blendEquation: gl.FUNC_ADD\n    },\n    userData: {\n      isExternal: false,\n      mapboxLayers: new Set()\n    }\n  };\n\n  if (deck) {\n    deck.setProps(deckProps);\n    deck.props.userData.isExternal = true;\n  } else {\n    // Using external gl context - do not set css size\n    Object.assign(deckProps, {\n      gl,\n      width: false,\n      height: false,\n      viewState: getViewState(map)\n    });\n    deck = new Deck(deckProps);\n\n    // If deck is externally provided (React use case), we use deck's viewState to\n    // drive the map.\n    // Otherwise (pure JS use case), we use the map's viewState to drive deck.\n    map.on('move', () => onMapMove(deck, map));\n    map.on('remove', () => {\n      deck.finalize();\n      map.__deck = null;\n    });\n  }\n  map.__deck = deck;\n  map.on('render', () => afterRender(deck, map));\n\n  return deck;\n}\n\nexport function addLayer(deck, layer) {\n  deck.props.userData.mapboxLayers.add(layer);\n  updateLayers(deck);\n}\n\nexport function removeLayer(deck, layer) {\n  deck.props.userData.mapboxLayers.delete(layer);\n  updateLayers(deck);\n}\n\nexport function updateLayer(deck, layer) {\n  updateLayers(deck);\n}\n\nexport function drawLayer(deck, map, layer) {\n  let {currentViewport} = deck.props.userData;\n  if (!currentViewport) {\n    // This is the first layer drawn in this render cycle.\n    // Generate viewport from the current map state.\n    currentViewport = getViewport(deck, map, true);\n    deck.props.userData.currentViewport = currentViewport;\n  }\n\n  deck._drawLayers('mapbox-repaint', {\n    viewports: [currentViewport],\n    // TODO - accept layerFilter in drawLayers' renderOptions\n    layers: getLayers(deck, deckLayer => shouldDrawLayer(layer.id, deckLayer)),\n    clearCanvas: false\n  });\n}\n\nfunction getViewState(map) {\n  const {lng, lat} = map.getCenter();\n  return {\n    longitude: lng,\n    latitude: lat,\n    zoom: map.getZoom(),\n    bearing: map.getBearing(),\n    pitch: map.getPitch()\n  };\n}\n\nfunction getViewport(deck, map, useMapboxProjection = true) {\n  return new WebMercatorViewport(\n    Object.assign(\n      {\n        x: 0,\n        y: 0,\n        width: deck.width,\n        height: deck.height\n      },\n      getViewState(map),\n      // https://github.com/mapbox/mapbox-gl-js/issues/7573\n      useMapboxProjection\n        ? {\n            // match mapbox's projection matrix\n            nearZMultiplier: deck.height ? 1 / deck.height : 1,\n            farZMultiplier: 1\n          }\n        : {\n            // use deck.gl's projection matrix\n            nearZMultiplier: 0.1,\n            farZMultiplier: 10\n          }\n    )\n  );\n}\n\nfunction afterRender(deck, map) {\n  const {mapboxLayers, isExternal} = deck.props.userData;\n\n  if (isExternal) {\n    // Draw non-Mapbox layers\n    const mapboxLayerIds = Array.from(mapboxLayers, layer => layer.id);\n    const layers = getLayers(deck, deckLayer => {\n      for (const id of mapboxLayerIds) {\n        if (shouldDrawLayer(id, deckLayer)) {\n          return false;\n        }\n      }\n      return true;\n    });\n    if (layers.length > 0) {\n      deck._drawLayers('mapbox-repaint', {\n        viewports: [getViewport(deck, map, false)],\n        layers,\n        clearCanvas: false\n      });\n    }\n  }\n\n  // End of render cycle, clear generated viewport\n  deck.props.userData.currentViewport = null;\n}\n\nfunction onMapMove(deck, map) {\n  deck.setProps({\n    viewState: getViewState(map)\n  });\n  // Camera changed, will trigger a map repaint right after this\n  // Clear any change flag triggered by setting viewState so that deck does not request\n  // a second repaint\n  deck.needsRedraw({clearRedrawFlags: true});\n}\n\nfunction getLayers(deck, layerFilter) {\n  const layers = deck.layerManager.getLayers();\n  return layers.filter(layerFilter);\n}\n\nfunction shouldDrawLayer(id, layer) {\n  let layerInstance = layer;\n  while (layerInstance) {\n    if (layerInstance.id === id) {\n      return true;\n    }\n    layerInstance = layerInstance.parent;\n  }\n  return false;\n}\n\nfunction updateLayers(deck) {\n  if (deck.props.userData.isExternal) {\n    return;\n  }\n\n  const layers = [];\n  deck.props.userData.mapboxLayers.forEach(deckLayer => {\n    const LayerType = deckLayer.props.type;\n    const layer = new LayerType(deckLayer.props);\n    layers.push(layer);\n  });\n  deck.setProps({layers});\n}\n"],"file":"deck-utils.js"}