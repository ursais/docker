{"version":3,"sources":["../../src/deck-utils.js"],"names":["Deck","WebMercatorViewport","getDeckInstance","map","gl","deck","__deck","customRender","props","_customRender","deckProps","useDevicePixels","triggerRepaint","parameters","depthMask","depthTest","blendFunc","blendEquation","userData","isExternal","mapboxLayers","Set","setProps","Object","assign","width","height","viewState","getViewState","on","onMapMove","finalize","afterRender","addLayer","layer","add","updateLayers","removeLayer","delete","updateLayer","drawLayer","currentViewport","getViewport","_drawLayers","viewports","layers","getLayers","deckLayer","shouldDrawLayer","id","clearCanvas","getCenter","lng","lat","longitude","latitude","zoom","getZoom","bearing","getBearing","pitch","getPitch","useMapboxProjection","x","y","nearZMultiplier","farZMultiplier","mapboxLayerIds","Array","from","length","needsRedraw","clearRedrawFlags","layerFilter","layerManager","filter","layerInstance","parent","forEach","LayerType","type","push"],"mappings":"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","sourcesContent":["import {Deck, WebMercatorViewport} from '@deck.gl/core';\n\nexport function getDeckInstance({map, gl, deck}) {\n  // Only create one deck instance per context\n  if (map.__deck) {\n    return map.__deck;\n  }\n\n  const customRender = deck && deck.props._customRender;\n\n  const deckProps = {\n    useDevicePixels: true,\n    _customRender: () => {\n      map.triggerRepaint();\n      if (customRender) {\n        // customRender may be subscribed by DeckGL React component to update child props\n        // make sure it is still called\n        customRender();\n      }\n    },\n    // TODO: import these defaults from a single source of truth\n    parameters: {\n      depthMask: true,\n      depthTest: true,\n      blendFunc: [gl.SRC_ALPHA, gl.ONE_MINUS_SRC_ALPHA, gl.ONE, gl.ONE_MINUS_SRC_ALPHA],\n      blendEquation: gl.FUNC_ADD\n    },\n    userData: {\n      isExternal: false,\n      mapboxLayers: new Set()\n    }\n  };\n\n  if (deck) {\n    deck.setProps(deckProps);\n    deck.props.userData.isExternal = true;\n  } else {\n    // Using external gl context - do not set css size\n    Object.assign(deckProps, {\n      gl,\n      width: false,\n      height: false,\n      viewState: getViewState(map)\n    });\n    deck = new Deck(deckProps);\n\n    // If deck is externally provided (React use case), we use deck's viewState to\n    // drive the map.\n    // Otherwise (pure JS use case), we use the map's viewState to drive deck.\n    map.on('move', () => onMapMove(deck, map));\n    map.on('remove', () => {\n      deck.finalize();\n      map.__deck = null;\n    });\n  }\n  map.__deck = deck;\n  map.on('render', () => afterRender(deck, map));\n\n  return deck;\n}\n\nexport function addLayer(deck, layer) {\n  deck.props.userData.mapboxLayers.add(layer);\n  updateLayers(deck);\n}\n\nexport function removeLayer(deck, layer) {\n  deck.props.userData.mapboxLayers.delete(layer);\n  updateLayers(deck);\n}\n\nexport function updateLayer(deck, layer) {\n  updateLayers(deck);\n}\n\nexport function drawLayer(deck, map, layer) {\n  let {currentViewport} = deck.props.userData;\n  if (!currentViewport) {\n    // This is the first layer drawn in this render cycle.\n    // Generate viewport from the current map state.\n    currentViewport = getViewport(deck, map, true);\n    deck.props.userData.currentViewport = currentViewport;\n  }\n\n  deck._drawLayers('mapbox-repaint', {\n    viewports: [currentViewport],\n    // TODO - accept layerFilter in drawLayers' renderOptions\n    layers: getLayers(deck, deckLayer => shouldDrawLayer(layer.id, deckLayer)),\n    clearCanvas: false\n  });\n}\n\nfunction getViewState(map) {\n  const {lng, lat} = map.getCenter();\n  return {\n    longitude: lng,\n    latitude: lat,\n    zoom: map.getZoom(),\n    bearing: map.getBearing(),\n    pitch: map.getPitch()\n  };\n}\n\nfunction getViewport(deck, map, useMapboxProjection = true) {\n  return new WebMercatorViewport(\n    Object.assign(\n      {\n        x: 0,\n        y: 0,\n        width: deck.width,\n        height: deck.height\n      },\n      getViewState(map),\n      // https://github.com/mapbox/mapbox-gl-js/issues/7573\n      useMapboxProjection\n        ? {\n            // match mapbox's projection matrix\n            nearZMultiplier: deck.height ? 1 / deck.height : 1,\n            farZMultiplier: 1\n          }\n        : {\n            // use deck.gl's projection matrix\n            nearZMultiplier: 0.1,\n            farZMultiplier: 10\n          }\n    )\n  );\n}\n\nfunction afterRender(deck, map) {\n  const {mapboxLayers, isExternal} = deck.props.userData;\n\n  if (isExternal) {\n    // Draw non-Mapbox layers\n    const mapboxLayerIds = Array.from(mapboxLayers, layer => layer.id);\n    const layers = getLayers(deck, deckLayer => {\n      for (const id of mapboxLayerIds) {\n        if (shouldDrawLayer(id, deckLayer)) {\n          return false;\n        }\n      }\n      return true;\n    });\n    if (layers.length > 0) {\n      deck._drawLayers('mapbox-repaint', {\n        viewports: [getViewport(deck, map, false)],\n        layers,\n        clearCanvas: false\n      });\n    }\n  }\n\n  // End of render cycle, clear generated viewport\n  deck.props.userData.currentViewport = null;\n}\n\nfunction onMapMove(deck, map) {\n  deck.setProps({\n    viewState: getViewState(map)\n  });\n  // Camera changed, will trigger a map repaint right after this\n  // Clear any change flag triggered by setting viewState so that deck does not request\n  // a second repaint\n  deck.needsRedraw({clearRedrawFlags: true});\n}\n\nfunction getLayers(deck, layerFilter) {\n  const layers = deck.layerManager.getLayers();\n  return layers.filter(layerFilter);\n}\n\nfunction shouldDrawLayer(id, layer) {\n  let layerInstance = layer;\n  while (layerInstance) {\n    if (layerInstance.id === id) {\n      return true;\n    }\n    layerInstance = layerInstance.parent;\n  }\n  return false;\n}\n\nfunction updateLayers(deck) {\n  if (deck.props.userData.isExternal) {\n    return;\n  }\n\n  const layers = [];\n  deck.props.userData.mapboxLayers.forEach(deckLayer => {\n    const LayerType = deckLayer.props.type;\n    const layer = new LayerType(deckLayer.props);\n    layers.push(layer);\n  });\n  deck.setProps({layers});\n}\n"],"file":"deck-utils.js"}