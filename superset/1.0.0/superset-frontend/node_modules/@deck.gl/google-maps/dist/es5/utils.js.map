{"version":3,"sources":["../../src/utils.js"],"names":["createDeckInstance","map","overlay","deck","props","userData","_googleMap","destroyDeckInstance","eventListeners","click","mousemove","mouseout","Deck","canvas","createDeckCanvas","initialViewState","longitude","latitude","zoom","controller","_eventListeners","eventType","addListener","evt","handleMouseEvent","container","getPanes","overlayLayer","deckCanvas","document","createElement","Object","assign","style","position","appendChild","remove","finalize","parentNode","removeChild","getViewState","getDiv","firstChild","width","offsetWidth","height","offsetHeight","projection","getProjection","bounds","getBounds","ne","getNorthEast","sw","getSouthWest","topRight","fromLatLngToDivPixel","bottomLeft","nwContainerPx","google","maps","Point","nw","fromContainerPixelToLatLng","nwDivPx","scale","x","Math","log2","getZoom","centerPx","centerContainer","lat","lng","left","top","y","pitch","getTilt","type","event","callback","_lastPointerDownInfo","pickObject","pixel","_onEvent","_onPointerMove","_onPointerLeave","offsetCenter","srcEvent"],"mappings":"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","sourcesContent":["/* global document, google */\nimport {Deck} from '@deck.gl/core';\n\n/**\n * Get a new deck instance\n * @param map (google.maps.Map) - The parent Map instance\n * @param overlay (google.maps.OverlayView) - A maps Overlay instance\n * @param [deck] (Deck) - a previously created instances\n */\nexport function createDeckInstance(map, overlay, deck) {\n  if (deck) {\n    if (deck.props.userData._googleMap === map) {\n      return deck;\n    }\n    // deck instance was created for a different map\n    destroyDeckInstance(deck);\n  }\n\n  const eventListeners = {\n    click: null,\n    mousemove: null,\n    mouseout: null\n  };\n\n  deck = new Deck({\n    canvas: createDeckCanvas(overlay),\n    initialViewState: {\n      longitude: 0,\n      latitude: 0,\n      zoom: 1\n    },\n    controller: false,\n    userData: {\n      _googleMap: map,\n      _eventListeners: eventListeners\n    }\n  });\n\n  // Register event listeners\n  for (const eventType in eventListeners) {\n    eventListeners[eventType] = map.addListener(eventType, evt =>\n      handleMouseEvent(deck, eventType, evt)\n    );\n  }\n\n  return deck;\n}\n\nfunction createDeckCanvas(overlay) {\n  const container = overlay.getPanes().overlayLayer;\n  const deckCanvas = document.createElement('canvas');\n  Object.assign(deckCanvas.style, {\n    // map container position is always non-static\n    position: 'absolute'\n  });\n\n  container.appendChild(deckCanvas);\n  return deckCanvas;\n}\n\n/**\n * Safely remove a deck instance\n * @param deck (Deck) - a previously created instances\n */\nexport function destroyDeckInstance(deck) {\n  const {_eventListeners: eventListeners} = deck.props.userData;\n\n  // Unregister event listeners\n  for (const eventType in eventListeners) {\n    eventListeners[eventType].remove();\n  }\n\n  deck.finalize();\n\n  // Remove canvas\n  deck.canvas.parentNode.removeChild(deck.canvas);\n}\n\n/**\n * Get the current view state\n * @param map (google.maps.Map) - The parent Map instance\n * @param overlay (google.maps.OverlayView) - A maps Overlay instance\n */\nexport function getViewState(map, overlay) {\n  // The map fills the container div unless it's in fullscreen mode\n  // at which point the first child of the container is promoted\n  const container = map.getDiv().firstChild;\n  const width = container.offsetWidth;\n  const height = container.offsetHeight;\n\n  // Canvas position relative to draggable map's container depends on\n  // overlayView's projection, not the map's. Have to use the center of the\n  // map for this, not the top left, for the same reason as above.\n  const projection = overlay.getProjection();\n\n  const bounds = map.getBounds();\n  const ne = bounds.getNorthEast();\n  const sw = bounds.getSouthWest();\n  const topRight = projection.fromLatLngToDivPixel(ne);\n  const bottomLeft = projection.fromLatLngToDivPixel(sw);\n\n  // google maps places overlays in a container anchored at the map center.\n  // the container CSS is manipulated during dragging.\n  // We need to update left/top of the deck canvas to match the base map.\n  const nwContainerPx = new google.maps.Point(0, 0);\n  const nw = projection.fromContainerPixelToLatLng(nwContainerPx);\n  const nwDivPx = projection.fromLatLngToDivPixel(nw);\n\n  // Compute fractional zoom.\n  const scale = (topRight.x - bottomLeft.x) / width;\n  const zoom = Math.log2(scale) + map.getZoom() - 1;\n\n  // Compute fractional center.\n  const centerPx = new google.maps.Point(width / 2, height / 2);\n  const centerContainer = projection.fromContainerPixelToLatLng(centerPx);\n  const latitude = centerContainer.lat();\n  const longitude = centerContainer.lng();\n\n  return {\n    width,\n    height,\n    left: nwDivPx.x,\n    top: nwDivPx.y,\n    zoom,\n    pitch: map.getTilt(),\n    latitude,\n    longitude\n  };\n}\n\n// Triggers picking on a mouse event\nfunction handleMouseEvent(deck, type, event) {\n  let callback;\n  switch (type) {\n    case 'click':\n      // Hack: because we do not listen to pointer down, perform picking now\n      deck._lastPointerDownInfo = deck.pickObject({\n        x: event.pixel.x,\n        y: event.pixel.y\n      });\n      callback = deck._onEvent;\n      break;\n\n    case 'mousemove':\n      callback = deck._onPointerMove;\n      break;\n\n    case 'mouseout':\n      callback = deck._onPointerLeave;\n      break;\n\n    default:\n      return;\n  }\n\n  callback({\n    type,\n    offsetCenter: event.pixel,\n    srcEvent: event\n  });\n}\n"],"file":"utils.js"}