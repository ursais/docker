{"version":3,"sources":["../../../src/parsers/convert-json.js"],"names":["MapView","FirstPersonView","OrbitView","OrthographicView","JSONLayer","get","csvParseRows","DEFAULT_VIEW_CATALOG","DEFAULT_MAP_PROPS","style","convertTopLevelJSON","json","configuration","jsonProps","layers","convertJSONLayers","views","convertJSONViews","viewState","initialViewState","convertJSONMapProps","map","mapStyle","Object","assign","jsonLayers","data","jsonViews","viewCatalog","Array","isArray","jsonView","View","type","viewProps","filter","Boolean","getJSONLayers","layerCatalog","jsonLayer","Layer","props","getJSONLayerProps","fetch","enhancedFetch","replacedProps","propName","propValue","startsWith","getJSONAccessor","object","url","then","response","text","JSON","parse","error","parseCSV","csv","length","shift","row","key","number","parseFloat","Number","isNaN"],"mappings":"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","sourcesContent":["// Converts a JSON payload to a deck.gl props object\n// Lightly processes `json` props, transform string values, and extract `views` and `layers`\n// See: https://github.com/uber/deck.gl/blob/master/dev-docs/RFCs/v6.1/json-layers-rfc.md\n//\n// NOTES:\n// * This is intended to provide minimal necessary processing required to support\n//   existing deck.gl props via JSON. This is not an implementation of alternate JSON schemas.\n// * Optionally, error checking could be applied, but ideally should leverage\n//   non-JSON specific mechanisms like prop types.\n\nimport {MapView, FirstPersonView, OrbitView, OrthographicView} from '@deck.gl/core';\nimport JSONLayer from '../json-layer/json-layer';\nimport {get} from '../utils/get';\nimport {csvParseRows} from 'd3-dsv';\n\n// Support all `@deck.gl/core` Views by default\nconst DEFAULT_VIEW_CATALOG = {MapView, FirstPersonView, OrbitView, OrthographicView};\n\nconst DEFAULT_MAP_PROPS = {\n  style: 'mapbox://styles/mapbox/light-v9'\n};\n\n// Converts JSON to props (\"hydrating\" classes, resolving enums and functions etc).\nexport function convertTopLevelJSON(json, configuration) {\n  // TODO - Currently converts \"in place\", might be clearer to convert to separate structure\n  const jsonProps = json;\n\n  // Convert \"JSON layers\" in `json.layers` into class instances\n  if (jsonProps.layers) {\n    jsonProps.layers = convertJSONLayers(json.layers, configuration);\n  }\n\n  // Convert \"JSON views\" in `json.views` into class instances\n  if (jsonProps.views) {\n    jsonProps.views = convertJSONViews(json.views, configuration);\n  }\n\n  if ('initialViewState' in jsonProps) {\n    jsonProps.viewState = jsonProps.viewState || jsonProps.initialViewState;\n  }\n\n  convertJSONMapProps(jsonProps, configuration);\n\n  return jsonProps;\n}\n\n// Normalizes map/mapStyle etc props to a `map: {style}` object-valued prop\nfunction convertJSONMapProps(jsonProps, configuration) {\n  if (jsonProps.map || jsonProps.mapStyle) {\n    jsonProps.map = Object.assign({}, DEFAULT_MAP_PROPS, jsonProps.map);\n  }\n\n  if (!jsonProps.map) {\n    return;\n  }\n\n  if ('mapStyle' in jsonProps) {\n    jsonProps.map.style = jsonProps.mapStyle;\n    jsonProps.map.mapStyle = jsonProps.mapStyle;\n    delete jsonProps.mapStyle;\n  }\n\n  // TODO - better map handling\n  if ('viewState' in jsonProps) {\n    jsonProps.map.viewState = jsonProps.viewState;\n  }\n}\n\n// Use the composite JSONLayer to render any JSON layers\nfunction convertJSONLayers(jsonLayers, configuration) {\n  return [\n    new JSONLayer({\n      data: jsonLayers,\n      configuration\n    })\n  ];\n}\n\n// Instantiates views: `{type: MapView, ...props}` to `MapView(...props)`\nfunction convertJSONViews(jsonViews, configuration) {\n  if (!jsonViews) {\n    return jsonViews;\n  }\n\n  const viewCatalog = configuration.views || {};\n\n  jsonViews = Array.isArray(jsonViews) ? jsonViews : [jsonViews];\n  return jsonViews\n    .map(jsonView => {\n      // Try to find a view definition\n      const View = viewCatalog[jsonView.type] || DEFAULT_VIEW_CATALOG[jsonView.type];\n      // Instantiate it\n      if (View) {\n        const viewProps = Object.assign({}, jsonView);\n        delete viewProps.type;\n        return new View(viewProps);\n      }\n      return null;\n    })\n    .filter(Boolean);\n}\n\n// LAYERS\n\n// Replaces accessor props\nexport function getJSONLayers(jsonLayers = [], configuration) {\n  // assert(Array.isArray(jsonLayers));\n  const layerCatalog = configuration.layers || {};\n  return jsonLayers.map(jsonLayer => {\n    const Layer = layerCatalog[jsonLayer.type];\n    const props = getJSONLayerProps(jsonLayer, configuration);\n    props.fetch = enhancedFetch;\n    return Layer && new Layer(props);\n  });\n}\n\nfunction getJSONLayerProps(jsonProps, configuration) {\n  const replacedProps = {};\n  for (const propName in jsonProps) {\n    // eslint-disable-line guard-for-in\n    const propValue = jsonProps[propName];\n    // Handle accessors\n    if (propName.startsWith('get')) {\n      replacedProps[propName] = getJSONAccessor(propValue, configuration);\n    } else {\n      replacedProps[propName] = propValue;\n    }\n  }\n  return replacedProps;\n}\n\n// Calculates an accessor function from a JSON string\n// '-' : x => x\n// 'a.b.c': x => x.a.b.c\nfunction getJSONAccessor(propValue, configuration) {\n  if (propValue === '-') {\n    return object => object;\n  }\n  if (typeof propValue === 'string') {\n    return object => {\n      return get(object, propValue);\n    };\n  }\n  return propValue;\n}\n\n// HELPERS\n\nfunction enhancedFetch(url) {\n  /* global fetch */\n  return fetch(url)\n    .then(response => response.text())\n    .then(text => {\n      try {\n        return JSON.parse(text);\n      } catch (error) {\n        return parseCSV(text);\n      }\n    });\n}\n\nfunction parseCSV(text) {\n  const csv = csvParseRows(text);\n\n  // Remove header\n  if (csv.length > 0) {\n    csv.shift();\n  }\n\n  for (const row of csv) {\n    for (const key in row) {\n      const number = parseFloat(row[key]);\n      if (!Number.isNaN(number)) {\n        row[key] = number;\n      }\n    }\n  }\n\n  return csv;\n}\n"],"file":"convert-json.js"}