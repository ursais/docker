{"version":3,"sources":["../../../src/json-converter/json-converter.js"],"names":["shallowEqualObjects","parseJSON","convertTopLevelJSON","JSONConverter","constructor","props","configuration","onJSONChange","setProps","finalize","convertJsonToDeckProps","json","deckProps","parsedJSON","jsonProps","updateViewState","initialViewState","viewState"],"mappings":"AAGA,SAAQA,mBAAR,QAAkC,mCAAlC;AACA,OAAOC,SAAP,MAAsB,uBAAtB;AACA,SAAQC,mBAAR,QAAkC,yBAAlC;AAEA,eAAe,MAAMC,aAAN,CAAoB;AACjCC,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,SAAKC,aAAL,GAAqB,EAArB;;AACA,SAAKC,YAAL,GAAoB,MAAM,CAAE,CAA5B;;AAEA,SAAKC,QAAL,CAAcH,KAAd;AACD;;AAEDI,EAAAA,QAAQ,GAAG,CAAE;;AAEbD,EAAAA,QAAQ,CAACH,KAAD,EAAQ;AAEd,QAAI,mBAAmBA,KAAvB,EAA8B;AAC5B,WAAKC,aAAL,GAAqBD,KAAK,CAACC,aAA3B;AACD;;AAED,QAAI,kBAAkBD,KAAtB,EAA6B;AAC3B,WAAKE,YAAL,GAAoBF,KAAK,CAACE,YAA1B;AACD;AACF;;AAEDG,EAAAA,sBAAsB,CAACC,IAAD,EAAO;AAE3B,QAAI,CAACA,IAAD,IAASA,IAAI,KAAK,KAAKA,IAA3B,EAAiC;AAC/B,aAAO,KAAKC,SAAZ;AACD;;AACD,SAAKD,IAAL,GAAYA,IAAZ;AAGA,UAAME,UAAU,GAAGZ,SAAS,CAACU,IAAD,CAA5B;AAGA,UAAMG,SAAS,GAAGZ,mBAAmB,CAACW,UAAD,EAAa,KAAKP,aAAlB,CAArC;;AAKA,QAAI,sBAAsBQ,SAA1B,EAAqC;AACnC,YAAMC,eAAe,GACnB,CAAC,KAAKC,gBAAN,IACA,CAAChB,mBAAmB,CAACc,SAAS,CAACE,gBAAX,EAA6B,KAAKA,gBAAlC,CAFtB;;AAIA,UAAID,eAAJ,EAAqB;AACnBD,QAAAA,SAAS,CAACG,SAAV,GAAsBH,SAAS,CAACE,gBAAhC;AACA,aAAKA,gBAAL,GAAwBF,SAAS,CAACE,gBAAlC;AACD;;AAED,aAAOF,SAAS,CAACE,gBAAjB;AACD;;AAED,SAAKJ,SAAL,GAAiBE,SAAjB;AACA,WAAOA,SAAP;AACD;;AApDgC","sourcesContent":["// Converts JSON to props (\"hydrating\" classes, resolving enums and functions etc).\n// TODO - Currently converts in place, might be clearer to convert to separate structure\n\nimport {shallowEqualObjects} from '../utils/shallow-equal-objects.js';\nimport parseJSON from '../parsers/parse-json';\nimport {convertTopLevelJSON} from '../parsers/convert-json';\n\nexport default class JSONConverter {\n  constructor(props) {\n    this.configuration = {};\n    this.onJSONChange = () => {};\n    // this._onViewStateChange = this._onViewStateChange.bind(this);\n    this.setProps(props);\n  }\n\n  finalize() {}\n\n  setProps(props) {\n    // HANDLE CONFIGURATION PROPS\n    if ('configuration' in props) {\n      this.configuration = props.configuration;\n    }\n\n    if ('onJSONChange' in props) {\n      this.onJSONChange = props.onJSONChange;\n    }\n  }\n\n  convertJsonToDeckProps(json) {\n    // Use shallow equality to Ensure we only convert once\n    if (!json || json === this.json) {\n      return this.deckProps;\n    }\n    this.json = json;\n\n    // Accept JSON strings by parsing them\n    const parsedJSON = parseJSON(json);\n\n    // Convert the JSON\n    const jsonProps = convertTopLevelJSON(parsedJSON, this.configuration);\n\n    // Handle `json.initialViewState`\n    // If we receive new JSON we need to decide if we should update current view state\n    // Current heuristic is to compare with last `initialViewState` and only update if changed\n    if ('initialViewState' in jsonProps) {\n      const updateViewState =\n        !this.initialViewState ||\n        !shallowEqualObjects(jsonProps.initialViewState, this.initialViewState);\n\n      if (updateViewState) {\n        jsonProps.viewState = jsonProps.initialViewState;\n        this.initialViewState = jsonProps.initialViewState;\n      }\n\n      delete jsonProps.initialViewState;\n    }\n\n    this.deckProps = jsonProps;\n    return jsonProps;\n  }\n}\n"],"file":"json-converter.js"}