"use strict";

exports.__esModule = true;
exports.default = void 0;

var _react = _interopRequireDefault(require("react"));

var _core = require("@superset-ui/core");

var _chartControls = require("@superset-ui/chart-controls");

var _types = require("./types");

var _controls = require("../controls");

var _react2 = require("@emotion/react");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
const {
  labelType,
  numberFormat,
  showLabels,
  emitFilter
} = _types.DEFAULT_FORM_DATA;
const funnelLegendSection = [..._controls.legendSection];
funnelLegendSection.splice(2, 1);
const config = {
  controlPanelSections: [_chartControls.sections.legacyRegularTime, {
    label: (0, _core.t)('Query'),
    expanded: true,
    controlSetRows: [['groupby'], ['metric'], ['adhoc_filters'], [{
      name: 'row_limit',
      config: { ..._chartControls.sharedControls.row_limit,
        default: 10
      }
    }], [{
      name: 'sort_by_metric',
      config: {
        default: true,
        type: 'CheckboxControl',
        label: (0, _core.t)('Sort by metric'),
        description: (0, _core.t)('Whether to sort results by the selected metric in descending order.')
      }
    }]]
  }, {
    label: (0, _core.t)('Chart Options'),
    expanded: true,
    controlSetRows: [['color_scheme'], (0, _core.isFeatureEnabled)(_core.FeatureFlag.DASHBOARD_CROSS_FILTERS) ? [{
      name: 'emit_filter',
      config: {
        type: 'CheckboxControl',
        label: (0, _core.t)('Enable emitting filters'),
        default: emitFilter,
        renderTrigger: true,
        description: (0, _core.t)('Enable emmiting filters.')
      }
    }] : [], ...funnelLegendSection, // eslint-disable-next-line react/jsx-key
    [(0, _react2.jsx)("h1", {
      className: "section-header"
    }, (0, _core.t)('Labels'))], [{
      name: 'label_type',
      config: {
        type: 'SelectControl',
        label: (0, _core.t)('Label Type'),
        default: labelType,
        renderTrigger: true,
        choices: [[_types.EchartsFunnelLabelTypeType.Key, 'Category Name'], [_types.EchartsFunnelLabelTypeType.Value, 'Value'], [_types.EchartsFunnelLabelTypeType.Percent, 'Percentage'], [_types.EchartsFunnelLabelTypeType.KeyValue, 'Category and Value'], [_types.EchartsFunnelLabelTypeType.KeyPercent, 'Category and Percentage'], [_types.EchartsFunnelLabelTypeType.KeyValuePercent, 'Category, Value and Percentage']],
        description: (0, _core.t)('What should be shown on the label?')
      }
    }], [{
      name: 'number_format',
      config: {
        type: 'SelectControl',
        freeForm: true,
        label: (0, _core.t)('Number format'),
        renderTrigger: true,
        default: numberFormat,
        choices: _chartControls.D3_FORMAT_OPTIONS,
        description: `${(0, _core.t)('D3 format syntax: https://github.com/d3/d3-format')} ${(0, _core.t)('Only applies when "Label Type" is set to show values.')}`
      }
    }], [{
      name: 'show_labels',
      config: {
        type: 'CheckboxControl',
        label: (0, _core.t)('Show Labels'),
        renderTrigger: true,
        default: showLabels,
        description: (0, _core.t)('Whether to display the labels.')
      }
    }]]
  }],

  onInit(state) {
    return { ...state,
      row_limit: { ...state.row_limit,
        value: state.row_limit.default
      }
    };
  }

};
var _default = config;
exports.default = _default;