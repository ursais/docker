"use strict";

exports.__esModule = true;
exports.default = void 0;

var _react = _interopRequireDefault(require("react"));

var _core = require("@superset-ui/core");

var _chartControls = require("@superset-ui/chart-controls");

var _types = require("./types");

var _react2 = require("@emotion/react");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
const requiredEntity = { ..._chartControls.sharedControls.entity,
  clearable: false
};
const optionalEntity = { ..._chartControls.sharedControls.entity,
  clearable: true,
  validators: []
};
const controlPanel = {
  controlPanelSections: [_chartControls.sections.legacyRegularTime, {
    label: (0, _core.t)('Query'),
    expanded: true,
    controlSetRows: [[{
      name: 'id',
      config: { ...requiredEntity,
        label: (0, _core.t)('Id'),
        description: (0, _core.t)('Name of the id column')
      }
    }], [{
      name: 'parent',
      config: { ...requiredEntity,
        label: (0, _core.t)('Parent'),
        description: (0, _core.t)('Name of the column containing the id of the parent node')
      }
    }], [{
      name: 'name',
      config: { ...optionalEntity,
        label: (0, _core.t)('Name'),
        description: (0, _core.t)('Optional name of the data column.')
      }
    }], [{
      // TODO: Set renderTrigger to true without getting intermittent errors in echart
      name: 'root_node_id',
      config: { ...optionalEntity,
        type: 'TextControl',
        label: (0, _core.t)('Root node id'),
        description: (0, _core.t)('Id of root node of the tree.')
      }
    }], [{
      name: 'metric',
      config: { ...optionalEntity,
        type: 'MetricsControl',
        label: (0, _core.t)('Metric'),
        description: (0, _core.t)('Metric for node values')
      }
    }], ['adhoc_filters'], ['row_limit']]
  }, {
    label: (0, _core.t)('Chart options'),
    expanded: true,
    controlSetRows: [[(0, _react2.jsx)("h1", {
      className: "section-header"
    }, (0, _core.t)('Layout'))], [{
      name: 'layout',
      config: {
        type: 'RadioButtonControl',
        renderTrigger: true,
        label: (0, _core.t)('Tree layout'),
        default: _types.DEFAULT_FORM_DATA.layout,
        options: [['orthogonal', (0, _core.t)('Orthogonal')], ['radial', (0, _core.t)('Radial')]],
        description: (0, _core.t)('Layout type of tree')
      }
    }], [{
      name: 'orient',
      config: {
        type: 'RadioButtonControl',
        renderTrigger: true,
        label: (0, _core.t)('Tree orientation'),
        default: _types.DEFAULT_FORM_DATA.orient,
        options: [['LR', (0, _core.t)('Left to Right')], ['RL', (0, _core.t)('Right to Left')], ['TB', (0, _core.t)('Top to Bottom')], ['BT', (0, _core.t)('Bottom to Top')]],
        description: (0, _core.t)('Orientation of tree'),

        visibility({
          form_data: {
            layout
          }
        }) {
          return (layout || _types.DEFAULT_FORM_DATA.layout) === 'orthogonal';
        }

      }
    }], [{
      name: 'node_label_position',
      config: {
        type: 'RadioButtonControl',
        renderTrigger: true,
        label: (0, _core.t)('Node label position'),
        default: _types.DEFAULT_FORM_DATA.nodeLabelPosition,
        options: [['left', (0, _core.t)('left')], ['top', (0, _core.t)('top')], ['right', (0, _core.t)('right')], ['bottom', (0, _core.t)('bottom')]],
        description: (0, _core.t)('Position of intermidiate node label on tree')
      }
    }], [{
      name: 'child_label_position',
      config: {
        type: 'RadioButtonControl',
        renderTrigger: true,
        label: (0, _core.t)('Child label position'),
        default: _types.DEFAULT_FORM_DATA.childLabelPosition,
        options: [['left', (0, _core.t)('left')], ['top', (0, _core.t)('top')], ['right', (0, _core.t)('right')], ['bottom', (0, _core.t)('bottom')]],
        description: (0, _core.t)('Position of child node label on tree')
      }
    }], [{
      name: 'emphasis',
      config: {
        type: 'RadioButtonControl',
        renderTrigger: true,
        label: (0, _core.t)('Emphasis'),
        default: _types.DEFAULT_FORM_DATA.emphasis,
        options: [['ancestor', (0, _core.t)('ancestor')], ['descendant', (0, _core.t)('descendant')]],
        description: (0, _core.t)('Which relatives to highlight on hover'),

        visibility({
          form_data: {
            layout
          }
        }) {
          return (layout || _types.DEFAULT_FORM_DATA.layout) === 'orthogonal';
        }

      }
    }], [{
      name: 'symbol',
      config: {
        type: 'SelectControl',
        renderTrigger: true,
        label: (0, _core.t)('Symbol'),
        default: _types.DEFAULT_FORM_DATA.symbol,
        options: [{
          label: (0, _core.t)('Empty circle'),
          value: 'emptyCircle'
        }, {
          label: (0, _core.t)('Circle'),
          value: 'circle'
        }, {
          label: (0, _core.t)('Rectangle'),
          value: 'rect'
        }, {
          label: (0, _core.t)('Triangle'),
          value: 'triangle'
        }, {
          label: (0, _core.t)('Diamond'),
          value: 'diamond'
        }, {
          label: (0, _core.t)('Pin'),
          value: 'pin'
        }, {
          label: (0, _core.t)('Arrow'),
          value: 'arrow'
        }, {
          label: (0, _core.t)('None'),
          value: 'none'
        }],
        description: (0, _core.t)('Layout type of tree')
      }
    }], [{
      name: 'symbolSize',
      config: {
        type: 'SliderControl',
        label: (0, _core.t)('Symbol size'),
        renderTrigger: true,
        min: 5,
        max: 30,
        step: 2,
        default: _types.DEFAULT_FORM_DATA.symbolSize,
        description: (0, _core.t)('Size of edge symbols')
      }
    }], [{
      name: 'roam',
      config: {
        type: 'SelectControl',
        label: (0, _core.t)('Enable graph roaming'),
        renderTrigger: true,
        default: _types.DEFAULT_FORM_DATA.roam,
        choices: [[false, (0, _core.t)('Disabled')], ['scale', (0, _core.t)('Scale only')], ['move', (0, _core.t)('Move only')], [true, (0, _core.t)('Scale and Move')]],
        description: (0, _core.t)('Whether to enable changing graph position and scaling.')
      }
    }]]
  }]
};
var _default = controlPanel;
exports.default = _default;