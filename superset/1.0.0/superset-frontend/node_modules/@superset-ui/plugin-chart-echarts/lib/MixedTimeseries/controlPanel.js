"use strict";

exports.__esModule = true;
exports.default = void 0;

var _react = _interopRequireDefault(require("react"));

var _core = require("@superset-ui/core");

var _chartControls = require("@superset-ui/chart-controls");

var _types = require("./types");

var _types2 = require("../Timeseries/types");

var _controls = require("../controls");

var _react2 = require("@emotion/react");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
const {
  area,
  annotationLayers,
  logAxis,
  markerEnabled,
  markerSize,
  minorSplitLine,
  opacity,
  orderDesc,
  rowLimit,
  seriesType,
  stack,
  truncateYAxis,
  yAxisBounds,
  zoomable,
  xAxisLabelRotation,
  yAxisIndex
} = _types.DEFAULT_FORM_DATA;

function createQuerySection(label, controlSuffix) {
  return {
    label,
    expanded: true,
    controlSetRows: [[{
      name: `metrics${controlSuffix}`,
      config: _chartControls.sharedControls.metrics
    }], [{
      name: `groupby${controlSuffix}`,
      config: _chartControls.sharedControls.groupby
    }], [{
      name: `adhoc_filters${controlSuffix}`,
      config: _chartControls.sharedControls.adhoc_filters
    }], [{
      name: `limit${controlSuffix}`,
      config: _chartControls.sharedControls.limit
    }], [{
      name: `timeseries_limit_metric${controlSuffix}`,
      config: _chartControls.sharedControls.timeseries_limit_metric
    }], [{
      name: `order_desc${controlSuffix}`,
      config: {
        type: 'CheckboxControl',
        label: (0, _core.t)('Sort Descending'),
        default: orderDesc,
        description: (0, _core.t)('Whether to sort descending or ascending')
      }
    }], [{
      name: `row_limit${controlSuffix}`,
      config: { ..._chartControls.sharedControls.row_limit,
        default: rowLimit
      }
    }]]
  };
}

function createCustomizeSection(label, controlSuffix) {
  return [[(0, _react2.jsx)("h1", {
    className: "section-header"
  }, label)], [{
    name: `seriesType${controlSuffix}`,
    config: {
      type: 'SelectControl',
      label: (0, _core.t)('Series type'),
      renderTrigger: true,
      default: seriesType,
      choices: [[_types2.EchartsTimeseriesSeriesType.Line, 'Line'], [_types2.EchartsTimeseriesSeriesType.Scatter, 'Scatter'], [_types2.EchartsTimeseriesSeriesType.Smooth, 'Smooth Line'], [_types2.EchartsTimeseriesSeriesType.Bar, 'Bar'], [_types2.EchartsTimeseriesSeriesType.Start, 'Step - start'], [_types2.EchartsTimeseriesSeriesType.Middle, 'Step - middle'], [_types2.EchartsTimeseriesSeriesType.End, 'Step - end']],
      description: (0, _core.t)('Series chart type (line, bar etc)')
    }
  }], [{
    name: `stack${controlSuffix}`,
    config: {
      type: 'CheckboxControl',
      label: (0, _core.t)('Stack series'),
      renderTrigger: true,
      default: stack,
      description: (0, _core.t)('Stack series on top of each other')
    }
  }], [{
    name: `area${controlSuffix}`,
    config: {
      type: 'CheckboxControl',
      label: (0, _core.t)('Area chart'),
      renderTrigger: true,
      default: area,
      description: (0, _core.t)('Draw area under curves. Only applicable for line types.')
    }
  }], [{
    name: `opacity${controlSuffix}`,
    config: {
      type: 'SliderControl',
      label: (0, _core.t)('Opacity'),
      renderTrigger: true,
      min: 0,
      max: 1,
      step: 0.1,
      default: opacity,
      description: (0, _core.t)('Opacity of area chart.')
    }
  }], [{
    name: `markerEnabled${controlSuffix}`,
    config: {
      type: 'CheckboxControl',
      label: (0, _core.t)('Marker'),
      renderTrigger: true,
      default: markerEnabled,
      description: (0, _core.t)('Draw a marker on data points. Only applicable for line types.')
    }
  }], [{
    name: `markerSize${controlSuffix}`,
    config: {
      type: 'SliderControl',
      label: (0, _core.t)('Marker size'),
      renderTrigger: true,
      min: 0,
      max: 100,
      default: markerSize,
      description: (0, _core.t)('Size of marker. Also applies to forecast observations.')
    }
  }], [{
    name: `yAxisIndex${controlSuffix}`,
    config: {
      type: 'SelectControl',
      label: (0, _core.t)('Y Axis'),
      choices: [[0, (0, _core.t)('Primary')], [1, (0, _core.t)('Secondary')]],
      default: yAxisIndex,
      renderTrigger: true,
      description: (0, _core.t)('Primary or secondary y-axis')
    }
  }]];
}

const config = {
  controlPanelSections: [_chartControls.sections.legacyTimeseriesTime, createQuerySection((0, _core.t)('Query A'), ''), createQuerySection((0, _core.t)('Query B'), '_b'), {
    label: (0, _core.t)('Annotations and Layers'),
    expanded: false,
    controlSetRows: [[{
      name: 'annotation_layers',
      config: {
        type: 'AnnotationLayerControl',
        label: '',
        default: annotationLayers,
        description: 'Annotation Layers'
      }
    }]]
  }, {
    label: (0, _core.t)('Chart Options'),
    expanded: true,
    controlSetRows: [['color_scheme', 'label_colors'], ...createCustomizeSection((0, _core.t)('Query A'), ''), ...createCustomizeSection((0, _core.t)('Query B'), 'B'), [{
      name: 'zoomable',
      config: {
        type: 'CheckboxControl',
        label: (0, _core.t)('Data Zoom'),
        default: zoomable,
        renderTrigger: true,
        description: (0, _core.t)('Enable data zooming controls')
      }
    }], ..._controls.legendSection, [(0, _react2.jsx)("h1", {
      className: "section-header"
    }, (0, _core.t)('X Axis'))], ['x_axis_time_format'], [{
      name: 'xAxisShowMinLabel',
      config: {
        type: 'CheckboxControl',
        label: (0, _core.t)('Show Min Label'),
        default: true,
        renderTrigger: true,
        description: (0, _core.t)('Show Min Label')
      }
    }], [{
      name: 'xAxisShowMaxLabel',
      config: {
        type: 'CheckboxControl',
        label: (0, _core.t)('Show Max Label'),
        default: true,
        renderTrigger: true,
        description: (0, _core.t)('Show Max Label')
      }
    }], [{
      name: 'xAxisLabelRotation',
      config: {
        type: 'SelectControl',
        freeForm: true,
        clearable: false,
        label: (0, _core.t)('Rotate x axis label'),
        choices: [[0, '0°'], [45, '45°']],
        default: xAxisLabelRotation,
        renderTrigger: true,
        description: (0, _core.t)('Input field supports custom rotation. e.g. 30 for 30°')
      }
    }], // eslint-disable-next-line react/jsx-key
    [(0, _react2.jsx)("h1", {
      className: "section-header"
    }, (0, _core.t)('Tooltip'))], [{
      name: 'rich_tooltip',
      config: {
        type: 'CheckboxControl',
        label: (0, _core.t)('Rich tooltip'),
        renderTrigger: true,
        default: true,
        description: (0, _core.t)('Shows a list of all series available at that point in time')
      }
    }], // eslint-disable-next-line react/jsx-key
    [(0, _react2.jsx)("h1", {
      className: "section-header"
    }, (0, _core.t)('Y Axis'))], [{
      name: 'minorSplitLine',
      config: {
        type: 'CheckboxControl',
        label: (0, _core.t)('Minor Split Line'),
        renderTrigger: true,
        default: minorSplitLine,
        description: (0, _core.t)('Draw split lines for minor y-axis ticks')
      }
    }], [{
      name: 'truncateYAxis',
      config: {
        type: 'CheckboxControl',
        label: (0, _core.t)('Truncate Y Axis'),
        default: truncateYAxis,
        renderTrigger: true,
        description: (0, _core.t)('Truncate Y Axis. Can be overridden by specifying a min or max bound.')
      }
    }], [{
      name: 'y_axis_bounds',
      config: {
        type: 'BoundsControl',
        label: (0, _core.t)('Y Axis Bounds'),
        renderTrigger: true,
        default: yAxisBounds,
        description: (0, _core.t)('Bounds for the Y-axis. When left empty, the bounds are ' + 'dynamically defined based on the min/max of the data. Note that ' + "this feature will only expand the axis range. It won't " + "narrow the data's extent.")
      }
    }], [{
      name: `y_axis_format`,
      config: { ..._chartControls.sharedControls.y_axis_format,
        label: (0, _core.t)('Primary y-axis format')
      }
    }], [{
      name: 'yAxisTitle',
      config: {
        type: 'TextControl',
        label: (0, _core.t)('Primary y-axis title'),
        renderTrigger: true,
        default: '',
        description: (0, _core.t)('Title for y-axis')
      }
    }], [{
      name: 'logAxis',
      config: {
        type: 'CheckboxControl',
        label: (0, _core.t)('Logarithmic y-axis'),
        renderTrigger: true,
        default: logAxis,
        description: (0, _core.t)('Logarithmic scale on primary y-axis')
      }
    }], [{
      name: `y_axis_format_secondary`,
      config: { ..._chartControls.sharedControls.y_axis_format,
        label: (0, _core.t)('Secondary y-axis format')
      }
    }], [{
      name: 'yAxisTitleSecondary',
      config: {
        type: 'TextControl',
        label: (0, _core.t)('Secondary y-axis title'),
        renderTrigger: true,
        default: '',
        description: (0, _core.t)('Logarithmic y-axis')
      }
    }], [{
      name: 'logAxisSecondary',
      config: {
        type: 'CheckboxControl',
        label: (0, _core.t)('Logarithmic y-axis'),
        renderTrigger: true,
        default: logAxis,
        description: (0, _core.t)('Logarithmic scale on secondary y-axis')
      }
    }]]
  }]
};
var _default = config;
exports.default = _default;