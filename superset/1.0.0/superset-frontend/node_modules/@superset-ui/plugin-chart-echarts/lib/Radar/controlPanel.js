"use strict";

exports.__esModule = true;
exports.default = void 0;

var _react = _interopRequireDefault(require("react"));

var _core = require("@superset-ui/core");

var _chartControls = require("@superset-ui/chart-controls");

var _types = require("./types");

var _constants = require("../constants");

var _controls = require("../controls");

var _react2 = require("@emotion/react");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
const {
  labelType,
  labelPosition,
  numberFormat,
  showLabels,
  isCircle,
  emitFilter
} = _types.DEFAULT_FORM_DATA;
const radarMetricMaxValue = {
  name: 'radarMetricMaxValue',
  config: {
    controlType: 'InputNumber',
    label: (0, _core.t)('Max'),
    description: (0, _core.t)('The maximum value of metrics. It is an optional configuration'),
    width: 120,
    placeholder: 'auto',
    debounceDelay: 400,
    validators: [_core.validateNumber]
  }
};
const config = {
  controlPanelSections: [_chartControls.sections.legacyRegularTime, {
    label: (0, _core.t)('Query'),
    expanded: true,
    controlSetRows: [['groupby'], ['metrics'], ['timeseries_limit_metric'], ['adhoc_filters'], [{
      name: 'row_limit',
      config: { ..._chartControls.sharedControls.row_limit,
        default: 10
      }
    }]]
  }, {
    label: (0, _core.t)('Chart Options'),
    expanded: true,
    controlSetRows: [['color_scheme'], [(0, _react2.jsx)("h1", {
      className: "section-header"
    }, (0, _core.t)('Legend'))], (0, _core.isFeatureEnabled)(_core.FeatureFlag.DASHBOARD_CROSS_FILTERS) ? [{
      name: 'emit_filter',
      config: {
        type: 'CheckboxControl',
        label: (0, _core.t)('Enable emitting filters'),
        default: emitFilter,
        renderTrigger: true,
        description: (0, _core.t)('Enable emmiting filters.')
      }
    }] : [], ..._controls.legendSection, [(0, _react2.jsx)("h1", {
      className: "section-header"
    }, (0, _core.t)('Labels'))], [{
      name: 'show_labels',
      config: {
        type: 'CheckboxControl',
        label: (0, _core.t)('Show Labels'),
        renderTrigger: true,
        default: showLabels,
        description: (0, _core.t)('Whether to display the labels.')
      }
    }], [{
      name: 'label_type',
      config: {
        type: 'SelectControl',
        label: (0, _core.t)('Label Type'),
        default: labelType,
        renderTrigger: true,
        choices: [['value', 'Value'], ['key_value', 'Category and Value']],
        description: (0, _core.t)('What should be shown on the label?')
      }
    }], [{
      name: 'label_position',
      config: {
        type: 'SelectControl',
        freeForm: false,
        label: (0, _core.t)('Label position'),
        renderTrigger: true,
        choices: _constants.LABEL_POSITION,
        default: labelPosition,
        description: _chartControls.D3_FORMAT_DOCS
      }
    }], [{
      name: 'number_format',
      config: {
        type: 'SelectControl',
        freeForm: true,
        label: (0, _core.t)('Number format'),
        renderTrigger: true,
        default: numberFormat,
        choices: _chartControls.D3_FORMAT_OPTIONS,
        description: `${(0, _core.t)('D3 format syntax: https://github.com/d3/d3-format. ')} ${(0, _core.t)('Only applies when "Label Type" is set to show values.')}`
      }
    }], [{
      name: 'date_format',
      config: {
        type: 'SelectControl',
        freeForm: true,
        label: (0, _core.t)('Date format'),
        renderTrigger: true,
        choices: _chartControls.D3_TIME_FORMAT_OPTIONS,
        default: 'smart_date',
        description: _chartControls.D3_FORMAT_DOCS
      }
    }], [(0, _react2.jsx)("h1", {
      className: "section-header"
    }, (0, _core.t)('Radar'))], [{
      name: 'column_config',
      config: {
        type: 'ColumnConfigControl',
        label: (0, _core.t)('Customize Metrics'),
        description: (0, _core.t)('Further customize how to display each metric'),
        renderTrigger: true,
        configFormLayout: {
          [_core.GenericDataType.NUMERIC]: [[radarMetricMaxValue]]
        },

        mapStateToProps(explore, control, chart) {
          var _ref, _explore$controls, _explore$controls$met, _chart$queriesRespons;

          const values = (_ref = explore == null ? void 0 : (_explore$controls = explore.controls) == null ? void 0 : (_explore$controls$met = _explore$controls.metrics) == null ? void 0 : _explore$controls$met.value) != null ? _ref : [];
          const metricColumn = values.map(value => {
            if (typeof value === 'string') {
              return value;
            }

            return value.label;
          });
          return {
            queryResponse: chart == null ? void 0 : (_chart$queriesRespons = chart.queriesResponse) == null ? void 0 : _chart$queriesRespons[0],
            appliedColumnNames: metricColumn
          };
        }

      }
    }], [{
      name: 'is_circle',
      config: {
        type: 'CheckboxControl',
        label: (0, _core.t)('Circle radar shape'),
        renderTrigger: true,
        default: isCircle,
        description: (0, _core.t)("Radar render type, whether to display 'circle' shape.")
      }
    }]]
  }]
};
var _default = config;
exports.default = _default;