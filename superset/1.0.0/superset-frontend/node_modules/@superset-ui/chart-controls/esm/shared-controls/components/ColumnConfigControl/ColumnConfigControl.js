import { css as _css } from "@emotion/react";
import _pt from "prop-types";

/**
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
import React, { useMemo, useState } from 'react';
import { useTheme, t } from '@superset-ui/core';
import ControlHeader from '../../../components/ControlHeader';
import ColumnConfigItem from './ColumnConfigItem';
import { DEFAULT_CONFIG_FORM_LAYOUT } from './constants';
import { COLUMN_NAME_ALIASES } from '../../../constants';
import { jsx as ___EmotionJSX } from "@emotion/react";

/**
 * Max number of columns to show by default.
 */
const MAX_NUM_COLS = 10;
/**
 * Add per-column config to queried results.
 */

export default function ColumnConfigControl({
  queryResponse,
  appliedColumnNames = [],
  value,
  onChange,
  configFormLayout = DEFAULT_CONFIG_FORM_LAYOUT,
  ...props
}) {
  const {
    colnames: _colnames,
    coltypes: _coltypes
  } = queryResponse || {};
  let colnames = [];
  let coltypes = [];

  if (appliedColumnNames.length === 0) {
    colnames = _colnames || [];
    coltypes = _coltypes || [];
  } else {
    const appliedCol = new Set(appliedColumnNames);
    _colnames == null ? void 0 : _colnames.forEach((col, idx) => {
      if (appliedCol.has(col)) {
        colnames.push(col);
        coltypes.push(_coltypes == null ? void 0 : _coltypes[idx]);
      }
    });
  }

  const theme = useTheme();
  const columnConfigs = useMemo(() => {
    var _colnames2;

    const configs = {};
    (_colnames2 = colnames) == null ? void 0 : _colnames2.forEach((col, idx) => {
      var _coltypes2;

      configs[col] = {
        name: COLUMN_NAME_ALIASES[col] || col,
        type: (_coltypes2 = coltypes) == null ? void 0 : _coltypes2[idx],
        config: (value == null ? void 0 : value[col]) || {}
      };
    });
    return configs;
  }, [value, colnames, coltypes]);
  const [showAllColumns, setShowAllColumns] = useState(false);

  const getColumnInfo = col => columnConfigs[col] || {};

  const setColumnConfig = (col, config) => {
    if (onChange) {
      // Only keep configs for known columns
      const validConfigs = colnames && value ? Object.fromEntries(Object.entries(value).filter(([key]) => colnames.includes(key))) : { ...value
      };
      onChange({ ...validConfigs,
        [col]: config
      });
    }
  };

  if (!colnames || colnames.length === 0) return null;
  const needShowMoreButton = colnames.length > MAX_NUM_COLS + 2;
  const cols = needShowMoreButton && !showAllColumns ? colnames.slice(0, MAX_NUM_COLS) : colnames;
  return ___EmotionJSX(React.Fragment, null, ___EmotionJSX(ControlHeader, props), ___EmotionJSX("div", {
    css: /*#__PURE__*/_css({
      border: `1px solid ${theme.colors.grayscale.light2}`,
      borderRadius: theme.gridUnit
    }, process.env.NODE_ENV === "production" ? "" : ";label:ColumnConfigControl;", process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9zaGFyZWQtY29udHJvbHMvY29tcG9uZW50cy9Db2x1bW5Db25maWdDb250cm9sL0NvbHVtbkNvbmZpZ0NvbnRyb2wudHN4Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQXlHUSIsImZpbGUiOiIuLi8uLi8uLi8uLi9zcmMvc2hhcmVkLWNvbnRyb2xzL2NvbXBvbmVudHMvQ29sdW1uQ29uZmlnQ29udHJvbC9Db2x1bW5Db25maWdDb250cm9sLnRzeCIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogTGljZW5zZWQgdG8gdGhlIEFwYWNoZSBTb2Z0d2FyZSBGb3VuZGF0aW9uIChBU0YpIHVuZGVyIG9uZVxuICogb3IgbW9yZSBjb250cmlidXRvciBsaWNlbnNlIGFncmVlbWVudHMuICBTZWUgdGhlIE5PVElDRSBmaWxlXG4gKiBkaXN0cmlidXRlZCB3aXRoIHRoaXMgd29yayBmb3IgYWRkaXRpb25hbCBpbmZvcm1hdGlvblxuICogcmVnYXJkaW5nIGNvcHlyaWdodCBvd25lcnNoaXAuICBUaGUgQVNGIGxpY2Vuc2VzIHRoaXMgZmlsZVxuICogdG8geW91IHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZVxuICogXCJMaWNlbnNlXCIpOyB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlXG4gKiB3aXRoIHRoZSBMaWNlbnNlLiAgWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsXG4gKiBzb2Z0d2FyZSBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhblxuICogXCJBUyBJU1wiIEJBU0lTLCBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTllcbiAqIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuICBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZVxuICogc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZCBsaW1pdGF0aW9uc1xuICogdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cbmltcG9ydCBSZWFjdCwgeyB1c2VNZW1vLCB1c2VTdGF0ZSB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IENoYXJ0RGF0YVJlc3BvbnNlUmVzdWx0LCB1c2VUaGVtZSwgdCwgR2VuZXJpY0RhdGFUeXBlIH0gZnJvbSAnQHN1cGVyc2V0LXVpL2NvcmUnO1xuaW1wb3J0IENvbnRyb2xIZWFkZXIgZnJvbSAnLi4vLi4vLi4vY29tcG9uZW50cy9Db250cm9sSGVhZGVyJztcbmltcG9ydCB7IENvbnRyb2xDb21wb25lbnRQcm9wcyB9IGZyb20gJy4uL3R5cGVzJztcblxuaW1wb3J0IENvbHVtbkNvbmZpZ0l0ZW0gZnJvbSAnLi9Db2x1bW5Db25maWdJdGVtJztcbmltcG9ydCB7IENvbHVtbkNvbmZpZ0luZm8sIENvbHVtbkNvbmZpZywgQ29sdW1uQ29uZmlnRm9ybUxheW91dCB9IGZyb20gJy4vdHlwZXMnO1xuaW1wb3J0IHsgREVGQVVMVF9DT05GSUdfRk9STV9MQVlPVVQgfSBmcm9tICcuL2NvbnN0YW50cyc7XG5pbXBvcnQgeyBDT0xVTU5fTkFNRV9BTElBU0VTIH0gZnJvbSAnLi4vLi4vLi4vY29uc3RhbnRzJztcblxuZXhwb3J0IHR5cGUgQ29sdW1uQ29uZmlnQ29udHJvbFByb3BzPFQgZXh0ZW5kcyBDb2x1bW5Db25maWc+ID0gQ29udHJvbENvbXBvbmVudFByb3BzPFxuICBSZWNvcmQ8c3RyaW5nLCBUPlxuPiAmIHtcbiAgcXVlcnlSZXNwb25zZT86IENoYXJ0RGF0YVJlc3BvbnNlUmVzdWx0O1xuICBjb25maWdGb3JtTGF5b3V0PzogQ29sdW1uQ29uZmlnRm9ybUxheW91dDtcbiAgYXBwbGllZENvbHVtbk5hbWVzPzogc3RyaW5nW107XG59O1xuXG4vKipcbiAqIE1heCBudW1iZXIgb2YgY29sdW1ucyB0byBzaG93IGJ5IGRlZmF1bHQuXG4gKi9cbmNvbnN0IE1BWF9OVU1fQ09MUyA9IDEwO1xuXG4vKipcbiAqIEFkZCBwZXItY29sdW1uIGNvbmZpZyB0byBxdWVyaWVkIHJlc3VsdHMuXG4gKi9cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIENvbHVtbkNvbmZpZ0NvbnRyb2w8VCBleHRlbmRzIENvbHVtbkNvbmZpZz4oe1xuICBxdWVyeVJlc3BvbnNlLFxuICBhcHBsaWVkQ29sdW1uTmFtZXMgPSBbXSxcbiAgdmFsdWUsXG4gIG9uQ2hhbmdlLFxuICBjb25maWdGb3JtTGF5b3V0ID0gREVGQVVMVF9DT05GSUdfRk9STV9MQVlPVVQsXG4gIC4uLnByb3BzXG59OiBDb2x1bW5Db25maWdDb250cm9sUHJvcHM8VD4pIHtcbiAgY29uc3QgeyBjb2xuYW1lczogX2NvbG5hbWVzLCBjb2x0eXBlczogX2NvbHR5cGVzIH0gPSBxdWVyeVJlc3BvbnNlIHx8IHt9O1xuICBsZXQgY29sbmFtZXM6IHN0cmluZ1tdID0gW107XG4gIGxldCBjb2x0eXBlczogR2VuZXJpY0RhdGFUeXBlW10gPSBbXTtcbiAgaWYgKGFwcGxpZWRDb2x1bW5OYW1lcy5sZW5ndGggPT09IDApIHtcbiAgICBjb2xuYW1lcyA9IF9jb2xuYW1lcyB8fCBbXTtcbiAgICBjb2x0eXBlcyA9IF9jb2x0eXBlcyB8fCBbXTtcbiAgfSBlbHNlIHtcbiAgICBjb25zdCBhcHBsaWVkQ29sID0gbmV3IFNldChhcHBsaWVkQ29sdW1uTmFtZXMpO1xuICAgIF9jb2xuYW1lcz8uZm9yRWFjaCgoY29sLCBpZHgpID0+IHtcbiAgICAgIGlmIChhcHBsaWVkQ29sLmhhcyhjb2wpKSB7XG4gICAgICAgIGNvbG5hbWVzLnB1c2goY29sKTtcbiAgICAgICAgY29sdHlwZXMucHVzaChfY29sdHlwZXM/LltpZHhdIGFzIEdlbmVyaWNEYXRhVHlwZSk7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cbiAgY29uc3QgdGhlbWUgPSB1c2VUaGVtZSgpO1xuICBjb25zdCBjb2x1bW5Db25maWdzID0gdXNlTWVtbygoKSA9PiB7XG4gICAgY29uc3QgY29uZmlnczogUmVjb3JkPHN0cmluZywgQ29sdW1uQ29uZmlnSW5mbz4gPSB7fTtcbiAgICBjb2xuYW1lcz8uZm9yRWFjaCgoY29sLCBpZHgpID0+IHtcbiAgICAgIGNvbmZpZ3NbY29sXSA9IHtcbiAgICAgICAgbmFtZTogQ09MVU1OX05BTUVfQUxJQVNFU1tjb2xdIHx8IGNvbCxcbiAgICAgICAgdHlwZTogY29sdHlwZXM/LltpZHhdLFxuICAgICAgICBjb25maWc6IHZhbHVlPy5bY29sXSB8fCB7fSxcbiAgICAgIH07XG4gICAgfSk7XG4gICAgcmV0dXJuIGNvbmZpZ3M7XG4gIH0sIFt2YWx1ZSwgY29sbmFtZXMsIGNvbHR5cGVzXSk7XG4gIGNvbnN0IFtzaG93QWxsQ29sdW1ucywgc2V0U2hvd0FsbENvbHVtbnNdID0gdXNlU3RhdGUoZmFsc2UpO1xuXG4gIGNvbnN0IGdldENvbHVtbkluZm8gPSAoY29sOiBzdHJpbmcpID0+IGNvbHVtbkNvbmZpZ3NbY29sXSB8fCB7fTtcbiAgY29uc3Qgc2V0Q29sdW1uQ29uZmlnID0gKGNvbDogc3RyaW5nLCBjb25maWc6IFQpID0+IHtcbiAgICBpZiAob25DaGFuZ2UpIHtcbiAgICAgIC8vIE9ubHkga2VlcCBjb25maWdzIGZvciBrbm93biBjb2x1bW5zXG4gICAgICBjb25zdCB2YWxpZENvbmZpZ3M6IFJlY29yZDxzdHJpbmcsIFQ+ID1cbiAgICAgICAgY29sbmFtZXMgJiYgdmFsdWVcbiAgICAgICAgICA/IE9iamVjdC5mcm9tRW50cmllcyhPYmplY3QuZW50cmllcyh2YWx1ZSkuZmlsdGVyKChba2V5XSkgPT4gY29sbmFtZXMuaW5jbHVkZXMoa2V5KSkpXG4gICAgICAgICAgOiB7IC4uLnZhbHVlIH07XG4gICAgICBvbkNoYW5nZSh7XG4gICAgICAgIC4uLnZhbGlkQ29uZmlncyxcbiAgICAgICAgW2NvbF06IGNvbmZpZyxcbiAgICAgIH0pO1xuICAgIH1cbiAgfTtcblxuICBpZiAoIWNvbG5hbWVzIHx8IGNvbG5hbWVzLmxlbmd0aCA9PT0gMCkgcmV0dXJuIG51bGw7XG5cbiAgY29uc3QgbmVlZFNob3dNb3JlQnV0dG9uID0gY29sbmFtZXMubGVuZ3RoID4gTUFYX05VTV9DT0xTICsgMjtcbiAgY29uc3QgY29scyA9IG5lZWRTaG93TW9yZUJ1dHRvbiAmJiAhc2hvd0FsbENvbHVtbnMgPyBjb2xuYW1lcy5zbGljZSgwLCBNQVhfTlVNX0NPTFMpIDogY29sbmFtZXM7XG5cbiAgcmV0dXJuIChcbiAgICA8PlxuICAgICAgPENvbnRyb2xIZWFkZXIgey4uLnByb3BzfSAvPlxuICAgICAgPGRpdlxuICAgICAgICBjc3M9e3tcbiAgICAgICAgICBib3JkZXI6IGAxcHggc29saWQgJHt0aGVtZS5jb2xvcnMuZ3JheXNjYWxlLmxpZ2h0Mn1gLFxuICAgICAgICAgIGJvcmRlclJhZGl1czogdGhlbWUuZ3JpZFVuaXQsXG4gICAgICAgIH19XG4gICAgICA+XG4gICAgICAgIHtjb2xzLm1hcChjb2wgPT4gKFxuICAgICAgICAgIDxDb2x1bW5Db25maWdJdGVtXG4gICAgICAgICAgICBrZXk9e2NvbH1cbiAgICAgICAgICAgIGNvbHVtbj17Z2V0Q29sdW1uSW5mbyhjb2wpfVxuICAgICAgICAgICAgb25DaGFuZ2U9e2NvbmZpZyA9PiBzZXRDb2x1bW5Db25maWcoY29sLCBjb25maWcgYXMgVCl9XG4gICAgICAgICAgICBjb25maWdGb3JtTGF5b3V0PXtjb25maWdGb3JtTGF5b3V0fVxuICAgICAgICAgIC8+XG4gICAgICAgICkpfVxuICAgICAgICB7bmVlZFNob3dNb3JlQnV0dG9uICYmIChcbiAgICAgICAgICA8ZGl2XG4gICAgICAgICAgICByb2xlPVwiYnV0dG9uXCJcbiAgICAgICAgICAgIHRhYkluZGV4PXstMX1cbiAgICAgICAgICAgIGNzcz17e1xuICAgICAgICAgICAgICBwYWRkaW5nOiB0aGVtZS5ncmlkVW5pdCAqIDIsXG4gICAgICAgICAgICAgIHRleHRBbGlnbjogJ2NlbnRlcicsXG4gICAgICAgICAgICAgIGN1cnNvcjogJ3BvaW50ZXInLFxuICAgICAgICAgICAgICB0ZXh0VHJhbnNmb3JtOiAndXBwZXJjYXNlJyxcbiAgICAgICAgICAgICAgZm9udFNpemU6IHRoZW1lLnR5cG9ncmFwaHkuc2l6ZXMueHMsXG4gICAgICAgICAgICAgIGNvbG9yOiB0aGVtZS5jb2xvcnMudGV4dC5sYWJlbCxcbiAgICAgICAgICAgICAgJzpob3Zlcic6IHtcbiAgICAgICAgICAgICAgICBiYWNrZ3JvdW5kQ29sb3I6IHRoZW1lLmNvbG9ycy5ncmF5c2NhbGUubGlnaHQ0LFxuICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgfX1cbiAgICAgICAgICAgIG9uQ2xpY2s9eygpID0+IHNldFNob3dBbGxDb2x1bW5zKCFzaG93QWxsQ29sdW1ucyl9XG4gICAgICAgICAgPlxuICAgICAgICAgICAge3Nob3dBbGxDb2x1bW5zID8gKFxuICAgICAgICAgICAgICA8PlxuICAgICAgICAgICAgICAgIDxpIGNsYXNzTmFtZT1cImZhIGZhLWFuZ2xlLXVwXCIgLz4gJm5ic3A7IHt0KCdTaG93IGxlc3MgY29sdW1ucycpfVxuICAgICAgICAgICAgICA8Lz5cbiAgICAgICAgICAgICkgOiAoXG4gICAgICAgICAgICAgIDw+XG4gICAgICAgICAgICAgICAgPGkgY2xhc3NOYW1lPVwiZmEgZmEtYW5nbGUtZG93blwiIC8+ICZuYnNwO1xuICAgICAgICAgICAgICAgIHt0KCdTaG93IGFsbCBjb2x1bW5zJyl9XG4gICAgICAgICAgICAgIDwvPlxuICAgICAgICAgICAgKX1cbiAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgKX1cbiAgICAgIDwvZGl2PlxuICAgIDwvPlxuICApO1xufVxuIl19 */")
  }, cols.map(col => ___EmotionJSX(ColumnConfigItem, {
    key: col,
    column: getColumnInfo(col),
    onChange: config => setColumnConfig(col, config),
    configFormLayout: configFormLayout
  })), needShowMoreButton && ___EmotionJSX("div", {
    role: "button",
    tabIndex: -1,
    css: /*#__PURE__*/_css({
      padding: theme.gridUnit * 2,
      textAlign: 'center',
      cursor: 'pointer',
      textTransform: 'uppercase',
      fontSize: theme.typography.sizes.xs,
      color: theme.colors.text.label,
      ':hover': {
        backgroundColor: theme.colors.grayscale.light4
      }
    }, process.env.NODE_ENV === "production" ? "" : ";label:ColumnConfigControl;", process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9zaGFyZWQtY29udHJvbHMvY29tcG9uZW50cy9Db2x1bW5Db25maWdDb250cm9sL0NvbHVtbkNvbmZpZ0NvbnRyb2wudHN4Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQTBIWSIsImZpbGUiOiIuLi8uLi8uLi8uLi9zcmMvc2hhcmVkLWNvbnRyb2xzL2NvbXBvbmVudHMvQ29sdW1uQ29uZmlnQ29udHJvbC9Db2x1bW5Db25maWdDb250cm9sLnRzeCIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogTGljZW5zZWQgdG8gdGhlIEFwYWNoZSBTb2Z0d2FyZSBGb3VuZGF0aW9uIChBU0YpIHVuZGVyIG9uZVxuICogb3IgbW9yZSBjb250cmlidXRvciBsaWNlbnNlIGFncmVlbWVudHMuICBTZWUgdGhlIE5PVElDRSBmaWxlXG4gKiBkaXN0cmlidXRlZCB3aXRoIHRoaXMgd29yayBmb3IgYWRkaXRpb25hbCBpbmZvcm1hdGlvblxuICogcmVnYXJkaW5nIGNvcHlyaWdodCBvd25lcnNoaXAuICBUaGUgQVNGIGxpY2Vuc2VzIHRoaXMgZmlsZVxuICogdG8geW91IHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZVxuICogXCJMaWNlbnNlXCIpOyB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlXG4gKiB3aXRoIHRoZSBMaWNlbnNlLiAgWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsXG4gKiBzb2Z0d2FyZSBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhblxuICogXCJBUyBJU1wiIEJBU0lTLCBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTllcbiAqIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuICBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZVxuICogc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZCBsaW1pdGF0aW9uc1xuICogdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cbmltcG9ydCBSZWFjdCwgeyB1c2VNZW1vLCB1c2VTdGF0ZSB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IENoYXJ0RGF0YVJlc3BvbnNlUmVzdWx0LCB1c2VUaGVtZSwgdCwgR2VuZXJpY0RhdGFUeXBlIH0gZnJvbSAnQHN1cGVyc2V0LXVpL2NvcmUnO1xuaW1wb3J0IENvbnRyb2xIZWFkZXIgZnJvbSAnLi4vLi4vLi4vY29tcG9uZW50cy9Db250cm9sSGVhZGVyJztcbmltcG9ydCB7IENvbnRyb2xDb21wb25lbnRQcm9wcyB9IGZyb20gJy4uL3R5cGVzJztcblxuaW1wb3J0IENvbHVtbkNvbmZpZ0l0ZW0gZnJvbSAnLi9Db2x1bW5Db25maWdJdGVtJztcbmltcG9ydCB7IENvbHVtbkNvbmZpZ0luZm8sIENvbHVtbkNvbmZpZywgQ29sdW1uQ29uZmlnRm9ybUxheW91dCB9IGZyb20gJy4vdHlwZXMnO1xuaW1wb3J0IHsgREVGQVVMVF9DT05GSUdfRk9STV9MQVlPVVQgfSBmcm9tICcuL2NvbnN0YW50cyc7XG5pbXBvcnQgeyBDT0xVTU5fTkFNRV9BTElBU0VTIH0gZnJvbSAnLi4vLi4vLi4vY29uc3RhbnRzJztcblxuZXhwb3J0IHR5cGUgQ29sdW1uQ29uZmlnQ29udHJvbFByb3BzPFQgZXh0ZW5kcyBDb2x1bW5Db25maWc+ID0gQ29udHJvbENvbXBvbmVudFByb3BzPFxuICBSZWNvcmQ8c3RyaW5nLCBUPlxuPiAmIHtcbiAgcXVlcnlSZXNwb25zZT86IENoYXJ0RGF0YVJlc3BvbnNlUmVzdWx0O1xuICBjb25maWdGb3JtTGF5b3V0PzogQ29sdW1uQ29uZmlnRm9ybUxheW91dDtcbiAgYXBwbGllZENvbHVtbk5hbWVzPzogc3RyaW5nW107XG59O1xuXG4vKipcbiAqIE1heCBudW1iZXIgb2YgY29sdW1ucyB0byBzaG93IGJ5IGRlZmF1bHQuXG4gKi9cbmNvbnN0IE1BWF9OVU1fQ09MUyA9IDEwO1xuXG4vKipcbiAqIEFkZCBwZXItY29sdW1uIGNvbmZpZyB0byBxdWVyaWVkIHJlc3VsdHMuXG4gKi9cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIENvbHVtbkNvbmZpZ0NvbnRyb2w8VCBleHRlbmRzIENvbHVtbkNvbmZpZz4oe1xuICBxdWVyeVJlc3BvbnNlLFxuICBhcHBsaWVkQ29sdW1uTmFtZXMgPSBbXSxcbiAgdmFsdWUsXG4gIG9uQ2hhbmdlLFxuICBjb25maWdGb3JtTGF5b3V0ID0gREVGQVVMVF9DT05GSUdfRk9STV9MQVlPVVQsXG4gIC4uLnByb3BzXG59OiBDb2x1bW5Db25maWdDb250cm9sUHJvcHM8VD4pIHtcbiAgY29uc3QgeyBjb2xuYW1lczogX2NvbG5hbWVzLCBjb2x0eXBlczogX2NvbHR5cGVzIH0gPSBxdWVyeVJlc3BvbnNlIHx8IHt9O1xuICBsZXQgY29sbmFtZXM6IHN0cmluZ1tdID0gW107XG4gIGxldCBjb2x0eXBlczogR2VuZXJpY0RhdGFUeXBlW10gPSBbXTtcbiAgaWYgKGFwcGxpZWRDb2x1bW5OYW1lcy5sZW5ndGggPT09IDApIHtcbiAgICBjb2xuYW1lcyA9IF9jb2xuYW1lcyB8fCBbXTtcbiAgICBjb2x0eXBlcyA9IF9jb2x0eXBlcyB8fCBbXTtcbiAgfSBlbHNlIHtcbiAgICBjb25zdCBhcHBsaWVkQ29sID0gbmV3IFNldChhcHBsaWVkQ29sdW1uTmFtZXMpO1xuICAgIF9jb2xuYW1lcz8uZm9yRWFjaCgoY29sLCBpZHgpID0+IHtcbiAgICAgIGlmIChhcHBsaWVkQ29sLmhhcyhjb2wpKSB7XG4gICAgICAgIGNvbG5hbWVzLnB1c2goY29sKTtcbiAgICAgICAgY29sdHlwZXMucHVzaChfY29sdHlwZXM/LltpZHhdIGFzIEdlbmVyaWNEYXRhVHlwZSk7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cbiAgY29uc3QgdGhlbWUgPSB1c2VUaGVtZSgpO1xuICBjb25zdCBjb2x1bW5Db25maWdzID0gdXNlTWVtbygoKSA9PiB7XG4gICAgY29uc3QgY29uZmlnczogUmVjb3JkPHN0cmluZywgQ29sdW1uQ29uZmlnSW5mbz4gPSB7fTtcbiAgICBjb2xuYW1lcz8uZm9yRWFjaCgoY29sLCBpZHgpID0+IHtcbiAgICAgIGNvbmZpZ3NbY29sXSA9IHtcbiAgICAgICAgbmFtZTogQ09MVU1OX05BTUVfQUxJQVNFU1tjb2xdIHx8IGNvbCxcbiAgICAgICAgdHlwZTogY29sdHlwZXM/LltpZHhdLFxuICAgICAgICBjb25maWc6IHZhbHVlPy5bY29sXSB8fCB7fSxcbiAgICAgIH07XG4gICAgfSk7XG4gICAgcmV0dXJuIGNvbmZpZ3M7XG4gIH0sIFt2YWx1ZSwgY29sbmFtZXMsIGNvbHR5cGVzXSk7XG4gIGNvbnN0IFtzaG93QWxsQ29sdW1ucywgc2V0U2hvd0FsbENvbHVtbnNdID0gdXNlU3RhdGUoZmFsc2UpO1xuXG4gIGNvbnN0IGdldENvbHVtbkluZm8gPSAoY29sOiBzdHJpbmcpID0+IGNvbHVtbkNvbmZpZ3NbY29sXSB8fCB7fTtcbiAgY29uc3Qgc2V0Q29sdW1uQ29uZmlnID0gKGNvbDogc3RyaW5nLCBjb25maWc6IFQpID0+IHtcbiAgICBpZiAob25DaGFuZ2UpIHtcbiAgICAgIC8vIE9ubHkga2VlcCBjb25maWdzIGZvciBrbm93biBjb2x1bW5zXG4gICAgICBjb25zdCB2YWxpZENvbmZpZ3M6IFJlY29yZDxzdHJpbmcsIFQ+ID1cbiAgICAgICAgY29sbmFtZXMgJiYgdmFsdWVcbiAgICAgICAgICA/IE9iamVjdC5mcm9tRW50cmllcyhPYmplY3QuZW50cmllcyh2YWx1ZSkuZmlsdGVyKChba2V5XSkgPT4gY29sbmFtZXMuaW5jbHVkZXMoa2V5KSkpXG4gICAgICAgICAgOiB7IC4uLnZhbHVlIH07XG4gICAgICBvbkNoYW5nZSh7XG4gICAgICAgIC4uLnZhbGlkQ29uZmlncyxcbiAgICAgICAgW2NvbF06IGNvbmZpZyxcbiAgICAgIH0pO1xuICAgIH1cbiAgfTtcblxuICBpZiAoIWNvbG5hbWVzIHx8IGNvbG5hbWVzLmxlbmd0aCA9PT0gMCkgcmV0dXJuIG51bGw7XG5cbiAgY29uc3QgbmVlZFNob3dNb3JlQnV0dG9uID0gY29sbmFtZXMubGVuZ3RoID4gTUFYX05VTV9DT0xTICsgMjtcbiAgY29uc3QgY29scyA9IG5lZWRTaG93TW9yZUJ1dHRvbiAmJiAhc2hvd0FsbENvbHVtbnMgPyBjb2xuYW1lcy5zbGljZSgwLCBNQVhfTlVNX0NPTFMpIDogY29sbmFtZXM7XG5cbiAgcmV0dXJuIChcbiAgICA8PlxuICAgICAgPENvbnRyb2xIZWFkZXIgey4uLnByb3BzfSAvPlxuICAgICAgPGRpdlxuICAgICAgICBjc3M9e3tcbiAgICAgICAgICBib3JkZXI6IGAxcHggc29saWQgJHt0aGVtZS5jb2xvcnMuZ3JheXNjYWxlLmxpZ2h0Mn1gLFxuICAgICAgICAgIGJvcmRlclJhZGl1czogdGhlbWUuZ3JpZFVuaXQsXG4gICAgICAgIH19XG4gICAgICA+XG4gICAgICAgIHtjb2xzLm1hcChjb2wgPT4gKFxuICAgICAgICAgIDxDb2x1bW5Db25maWdJdGVtXG4gICAgICAgICAgICBrZXk9e2NvbH1cbiAgICAgICAgICAgIGNvbHVtbj17Z2V0Q29sdW1uSW5mbyhjb2wpfVxuICAgICAgICAgICAgb25DaGFuZ2U9e2NvbmZpZyA9PiBzZXRDb2x1bW5Db25maWcoY29sLCBjb25maWcgYXMgVCl9XG4gICAgICAgICAgICBjb25maWdGb3JtTGF5b3V0PXtjb25maWdGb3JtTGF5b3V0fVxuICAgICAgICAgIC8+XG4gICAgICAgICkpfVxuICAgICAgICB7bmVlZFNob3dNb3JlQnV0dG9uICYmIChcbiAgICAgICAgICA8ZGl2XG4gICAgICAgICAgICByb2xlPVwiYnV0dG9uXCJcbiAgICAgICAgICAgIHRhYkluZGV4PXstMX1cbiAgICAgICAgICAgIGNzcz17e1xuICAgICAgICAgICAgICBwYWRkaW5nOiB0aGVtZS5ncmlkVW5pdCAqIDIsXG4gICAgICAgICAgICAgIHRleHRBbGlnbjogJ2NlbnRlcicsXG4gICAgICAgICAgICAgIGN1cnNvcjogJ3BvaW50ZXInLFxuICAgICAgICAgICAgICB0ZXh0VHJhbnNmb3JtOiAndXBwZXJjYXNlJyxcbiAgICAgICAgICAgICAgZm9udFNpemU6IHRoZW1lLnR5cG9ncmFwaHkuc2l6ZXMueHMsXG4gICAgICAgICAgICAgIGNvbG9yOiB0aGVtZS5jb2xvcnMudGV4dC5sYWJlbCxcbiAgICAgICAgICAgICAgJzpob3Zlcic6IHtcbiAgICAgICAgICAgICAgICBiYWNrZ3JvdW5kQ29sb3I6IHRoZW1lLmNvbG9ycy5ncmF5c2NhbGUubGlnaHQ0LFxuICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgfX1cbiAgICAgICAgICAgIG9uQ2xpY2s9eygpID0+IHNldFNob3dBbGxDb2x1bW5zKCFzaG93QWxsQ29sdW1ucyl9XG4gICAgICAgICAgPlxuICAgICAgICAgICAge3Nob3dBbGxDb2x1bW5zID8gKFxuICAgICAgICAgICAgICA8PlxuICAgICAgICAgICAgICAgIDxpIGNsYXNzTmFtZT1cImZhIGZhLWFuZ2xlLXVwXCIgLz4gJm5ic3A7IHt0KCdTaG93IGxlc3MgY29sdW1ucycpfVxuICAgICAgICAgICAgICA8Lz5cbiAgICAgICAgICAgICkgOiAoXG4gICAgICAgICAgICAgIDw+XG4gICAgICAgICAgICAgICAgPGkgY2xhc3NOYW1lPVwiZmEgZmEtYW5nbGUtZG93blwiIC8+ICZuYnNwO1xuICAgICAgICAgICAgICAgIHt0KCdTaG93IGFsbCBjb2x1bW5zJyl9XG4gICAgICAgICAgICAgIDwvPlxuICAgICAgICAgICAgKX1cbiAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgKX1cbiAgICAgIDwvZGl2PlxuICAgIDwvPlxuICApO1xufVxuIl19 */"),
    onClick: () => setShowAllColumns(!showAllColumns)
  }, showAllColumns ? ___EmotionJSX(React.Fragment, null, ___EmotionJSX("i", {
    className: "fa fa-angle-up"
  }), " \xA0 ", t('Show less columns')) : ___EmotionJSX(React.Fragment, null, ___EmotionJSX("i", {
    className: "fa fa-angle-down"
  }), " \xA0", t('Show all columns')))));
}
ColumnConfigControl.propTypes = {
  appliedColumnNames: _pt.arrayOf(_pt.string)
};