{"mappings":"ukBAAA,SAASA,EAAuBC,GAC9B,OAAOA,GAAKA,EAAEC,WAAaD,EAAEE,QAAUF,uxDCQlC,SAASG,EAAWC,GACE,OAAvBA,EAAKC,eAAwBD,EAAKC,cAAcC,YAAYF,GA6B3D,SAASG,EACdC,GAEAA,EAAQC,SAAQ,SAACC,GAAD,OAAUP,EAAWO,EAAKC,YAGrC,SAASC,EACdJ,GAEAA,EAAQC,SAAQ,SAACC,GA7BZ,IACLG,EACAC,EACAC,EAEMC,EAJNH,EA6BeH,EAAKL,cA5BpBS,EA4BmCJ,EAAKC,QA3BxCI,EA2BiDL,EAAKO,SAzBhDD,EAAWH,EAAOK,SAASH,IAAU,KAC3CF,EAAOM,aAAaL,EAAUE,MA4BzB,SAASI,EACdC,EACAC,GAEA,IAAMC,EAAOC,EAAQH,GACfhB,EAAgB,CAAEA,cAAegB,EAAII,MACvCC,EAAS,GACb,OAAQH,GACN,IAAK,SAQHG,EAAS,CANI,CACXf,QAASU,EAAIM,KACbC,SAAUP,EAAIO,SACdX,SAAUI,EAAIJ,SACdZ,cAAegB,EAAII,OAGrB,MACF,IAAK,OAaHC,EAAS,CAZQG,EAAA,CACflB,QAASU,EAAIM,KACbV,SAAUI,EAAIJ,SACdW,SAAUP,EAAIO,UACXvB,GAEYwB,EAAA,CACflB,QAASU,EAAIS,SACbb,SAAUI,EAAIO,SACdA,SAAUP,EAAIJ,UACXZ,IAGL,MACF,IAAK,YACHqB,EAASL,EAAIU,YAAYC,KAAW,SAACtB,EAAMK,GAAP,OAAAc,EAAA,CAClClB,QAASD,EAAKuB,iBACdhB,SAAUP,EAAKK,MACfa,SAAUP,EAAIa,YAAYnB,GAAOA,OAC9BV,MAOT,OA6CK,SACL8B,EACAb,GAKA,OAHmBa,EAChBH,KAAmB,SAACtB,GAAD,OAAAmB,EAAAA,EAAA,GAAgBnB,GAAhB,GAAA,CAAsBiB,KAAML,EAAKZ,EAAKO,eACzDmB,MAAK,SAACpC,EAAGqC,GAAJ,OAAUrC,EAAEiB,SAAWoB,EAAEpB,YApDjBqB,CAAiBZ,EAAQJ,GAcpC,SAASiB,EACdC,EACAlB,GAEA,IAAMmB,EAAOC,EAAOpB,GAKpB,OAJAkB,EACGG,SACAC,UACAnC,SAAQ,SAACC,GAAD,OAAU+B,EAAQI,OAAOnC,EAAKO,SAAU,MAC5CwB,EAGF,SAASK,EACdN,EACAlB,EACAD,EACA0B,GAEA,IAAMN,EAAOC,EAAOpB,GAKpB,OAJAkB,EAAW/B,SAAQ,SAACC,GAClB,IAAMsC,EAAUD,GAAS1B,GAAO0B,EAAMrC,EAAKiB,KAAMN,GACjDoB,EAAQI,OAAOnC,EAAKkB,SAAU,EAAGoB,GAAWtC,EAAKiB,SAE5Cc,EAGF,SAASjB,EAAQH,GACtB,OAAIA,EAAIU,aAAeV,EAAIU,YAAYkB,OAAS,EAAU,YACtD5B,EAAIS,SAAiB,OAClB,moFC1GT,IAAMoB,EAAe,CAAEC,SAAU,MAEpBC,oPAA+CC,oBAS1D,SAAAD,EAAYE,GAA8B,IAAAC,+FAAAC,CAAAC,KAAAL,IACxCG,EAAAG,EAAAC,KAAAF,KAAMH,IAEDM,IAAMC,IAGX,IAAMpB,EAAUa,EAAMhC,KAAKU,KAAI,SAACL,GAAD,OAAAmC,EAAAA,EAAA,GAC1BnC,GAD0B,GAAA,CAE7BoC,QAAQ,EACRC,UAAU,OAT4B,OAYxCV,EAAMW,QAAQxB,EAASc,EAAKW,SAAUhB,GACtCiB,GAEGb,EAAMc,QAFA,kMAb+Bb,2DAwBxC,GAAyB,OAArBE,KAAKG,IAAIS,QAAb,CACA,IAAMC,EAAab,KAAKc,cACxBC,EAASC,OAAOhB,KAAKG,IAAIS,QAASC,qCAGd,IAAAI,EACkBjB,KAAKH,MAAnCqB,EADYD,EACZC,IACFC,EAAe,CAAEC,MAFHH,EACPG,MACiBC,UAFVJ,EACAI,UACqBC,GAFrBL,EACWK,IAK/B,OAAOC,EADSL,GAAe,OAARA,EAAuBA,EAAR,MAClBb,EAAA,CAIhBF,IAAKH,KAAKG,KACPgB,GAELnB,KAAKwB,qDAIa,IAAAC,EAchBzB,KAAKH,MAZPpC,EAFkBgE,EAElBhE,SACAiE,EAHkBD,EAGlBC,WAHkBC,EAAAF,EAIlBG,cAAAA,OAJkB,IAAAD,EAIF,oBAJEA,EAAAE,EAAAJ,EAKlBK,YAAAA,OALkB,IAAAD,EAKJ,kBALIA,EAAAE,GAAAN,EAOlBO,UAPkBP,EAQlBQ,cARkBR,EASlBS,WATkBT,EAUlBU,UAVkBV,EAYlBW,QAAAA,OAZkB,IAAAL,EAYT,kBAZSA,EAalBlE,EAbkB4D,EAalB5D,KAIF,IAAKJ,GAAwB,MAAZA,EAAkB,OAAO,KAC1C,IAAM4E,EAASX,GAAc,UAE7B,OAAOY,EAAS/D,IAAId,GAAiC,SAAC8E,EAAOjF,GAAU,IAAAkF,EAAAC,EAC/DvE,EAAOL,EAAKP,GACCoF,EAAkBH,EAAM1C,MAAnCwB,UAGFsB,EAA6B,iBAAXP,GAAPQ,EAAA,GACdR,EAAOS,QAAQ,IAAK,MAAQ3E,EAAKyE,UAG9BtB,EAAYyB,EAAWJ,EAADrC,GAAAuC,EAAAJ,EAAA,GACzBZ,EAAgB1D,EAAKqC,UADIqC,EAAAJ,EAEzBV,EAAc5D,EAAKoC,QAFMkC,GAGvBG,IAOL,OAAOI,EAAaR,GAADK,EAAAH,EAAA,GAChBJ,EAASE,EAAMS,KADCJ,EAAAH,EAAA,YAEjBpB,GAFiBoB,6CAkBA,IDsBvB5C,ECtBuBoD,EAAAjD,KAmBfa,IDGRhB,ECHyDG,KAAKH,ODQ5DhC,KAwBEgC,EAvBFW,QAuBEX,EAtBFpC,SAsBEoC,EArBFqB,IAqBErB,EApBFuB,MAoBEvB,EAnBFwB,UAmBExB,EAlBFP,MAkBEO,EAhBFqD,MAgBErD,EAfFsD,SAeEtD,EAdFuD,SAcEvD,EAbFwD,QAaExD,EAZFyD,MAYEzD,EAXF0D,SAWE1D,EAVF2D,SAUE3D,EATF4D,OASE5D,EARF6D,QAQE7D,EAPF8D,WAOE9D,EANF+D,SAME/D,EALFgE,OAKEhE,EAJFiE,QAIEjE,EAHFkE,SAGElE,EAFFmE,WA1BgCC,EA4B9BpE,EA5B8B,CAAA,OAAA,UAAA,WAAA,MAAA,QAAA,YAAA,QAAA,QAAA,WAAA,WAAA,UAAA,QAAA,WAAA,WAAA,SAAA,UAAA,aAAA,WAAA,SAAA,UAAA,WAAA,gBCchC,MApC0C,CACxC,QACA,WACA,aACA,QACA,WACA,WACA,UACA,UACA,aACA,YASU7C,SACV,SAACkH,GAAD,OAAWrD,EAAWqD,GAAQjB,EAAKkB,2BAA2BD,MARjB,CAC7C,WACA,UACA,WACA,UAMalH,SACb,SAACkH,GAAD,OAAWrD,EAAWqD,GAAQjB,EAAKmB,qBAAqBF,MAa1D7D,EAAAA,EAAA,GACKQ,GADL,GAAA,CAEEgD,OAXa,SAACjG,EAAgByG,GAAuB,IAC7CR,EAAWZ,EAAKpD,MAAhBgE,OACFS,EAAe1G,EAAI2G,kBAAoB,EAC7C,IAAKV,EAAQ,OAAOS,EACpB,IAAME,EAASX,EAAOjG,EAAKyG,EAAapB,EAAKxC,SAAUhB,GACvD,YAAsB,IAAX+E,GACJA,wDAWTC,GAC8B,IAAAC,EAAA1E,KAC9B,OAAO,SAACpC,GAEN8G,EAAKC,kBAAkB/G,EAAK6G,GAG5BC,EAAKD,GAAS7G,iDAMhB6G,GAC8B,IAAAG,EAAA5E,KAC9B,OAAO,SAACpC,GAENgH,EAAKD,kBAAkB/G,EAAK6G,8CAKd7G,EAAoB6G,GACpC,IAAMI,EAAY7E,KAAKH,MAAM4E,GACzBI,GAAWA,EAAUjH,EAAKoC,KAAKS,SAAUhB,iCAKzC7B,GAA2B,IAAAkH,EACE9E,KAAKH,MAA9BhC,EADuBiH,EACvBjH,KAAM2C,EADiBsE,EACjBtE,QAASlB,EADQwF,EACRxF,MAGjBvC,EAAUgI,EAAcnH,EADfoH,EAAOvF,EAAMC,SAAUG,MAAMhC,OAE5CoH,EAAYlI,GAKZyD,EAJgB0E,EAAenI,EAASc,EAAMD,EAAK0B,GAAOf,KAAI,SAACL,GAAD,OAAAmC,EAAAA,EAAA,GACzDnC,GADyD,GAAA,CAE5DqC,UAAU,OAEKP,KAAKS,SAAUhB,oCAGzB7B,GAA2B,IAAAuH,EAAAnF,KAAAoF,EACRpF,KAAKH,MAAvBhC,EAD0BuH,EAC1BvH,KAAM2C,EADoB4E,EACpB5E,QACR1C,EAAOuH,EAAQzH,GACfb,EAAUgI,EAAcnH,EAAKC,GACnCyH,EAAYvI,GAEZ,IAAIiC,EAAOgG,EAAOnH,GAElB,GAAqB,UAAjBD,EAAI2H,SAAsBvG,EAAUwG,EAAkBzI,EAASiC,OAG9D,CAEH,IAAIyG,EAAe1I,EACnB,OAAQe,GACN,IAAK,YACH2H,EAAe1I,EAAQwB,KAAI,SAACL,EAAMZ,GAAP,OAAA+C,EAAAA,EAAA,GACtBnC,GADsB,GAAA,CAEzBhB,QAASU,EAAI8H,OAAOpI,QAEtB,MACF,IAAK,SACHmI,EAAe1I,EAAQwB,KAAI,SAACL,GAAD,OAAAmC,EAAAA,EAAA,GACtBnC,GADsB,GAAA,CAEzBhB,QAASU,EAAI0B,WAEf,MACF,IAAK,OACL,QACEoB,GACE,EADO,SAAAxB,OAEEpB,EAFF,sFAAAoB,OAE2FpB,EAF3F,aAMbmH,EAAYQ,GAGZ1I,EAAQC,SAAQ,SAACC,GACf,IAAMK,EAAQL,EAAKO,SAEb+B,EAAU4F,EAAKtF,MAAMP,MAAOrC,EAAKiB,KAAMN,GAC7CoB,EAAQI,OAAO9B,EAAO,EAAGiC,MAM7BiB,EADAxB,EAAUA,EAAQT,KAAI,SAACL,GAAD,OAAAmC,EAAAA,EAAA,GAAgBnC,GAAhB,GAAA,CAAsBqC,UAAU,OACrCP,KAAKS,SAAUhB,oCAGzB7B,GAA2B,IAAA+H,EACR3F,KAAKH,MAAvBhC,EAD0B8H,EAC1B9H,KAAM2C,EADoBmF,EACpBnF,QACRzD,EAAUgI,EAAcnH,EAAKC,GAInC,OAHAoH,EAAYlI,GACZuI,EAAYvI,GAELyD,ED9LJ,SACLzB,EACAlB,GAIA,OADUwB,EAAeN,EADfD,EAAkBC,EAAYlB,ICyLtB+H,CAAmB7I,EAASc,GACpBmC,KAAKS,SAAUhB,qCAIvCA,EAAMC,SAAWM,qCAIjBP,EAAMC,SAAW,sCAGV9B,GAA0B,IAAAiI,EACP7F,KAAKH,MAAvBhC,EADyBgI,EACzBhI,MAUR2C,EAXiCqF,EACnBrF,SACE3C,EAAKU,KAAI,SAACL,EAAMZ,GAC9B,OAAIA,IAAUM,EAAIJ,SAChB6C,EAAAA,EAAA,GACKnC,GADL,GAAA,CAEEoC,QAAQ,IAGLpC,KAEQ8B,KAAKS,SAAUhB,sCAGvB7B,GAA0B,IAAAkI,EACT9F,KAAKH,MAAvBhC,EAD2BiI,EAC3BjI,MAUR2C,EAXmCsF,EACrBtF,SACE3C,EAAKU,KAAI,SAACL,EAAMZ,GAC9B,OAAIA,IAAUM,EAAIJ,SAChB6C,EAAAA,EAAA,GACKnC,GADL,GAAA,CAEEoC,QAAQ,IAGLpC,KAEQ8B,KAAKS,SAAUhB,mCAG1B7B,GAA0B,IAAAmI,EACS/F,KAAKH,MAAtCmG,EADwBD,EACxBC,cAAeC,EADSF,EACTE,cACnBD,IAAkBC,GAAeC,EAAWtI,EAAIM,uCAG7CN,GAA2B,IAAAuI,EACRnG,KAAKH,MAAvBhC,EAD0BsI,EAC1BtI,KAAM2C,EADoB2F,EACpB3F,QACRxB,EAAUnB,EAAKU,KAAI,SAACL,GAAD,OAAAmC,EAAAA,EAAA,GAAgBnC,GAAhB,GAAA,CAAsBqC,UAAU,OACzD3C,EAAIa,YAAYzB,SAAQ,SAACC,GACvB,IAAMK,EAAQL,EAAKK,MACnB,IAAe,IAAXA,EAKF,OAJA8I,QAAQC,IAAR,IAAAnH,OACMtB,EAAI0I,KADV,qBAAApH,OACkCjC,EAAKK,MADvC,mEAGA8I,QAAQC,IAAIzI,GAGdoB,EAAQ1B,GAAOiD,UAAW,KAE5BC,EAAQxB,EAASgB,KAAKS,SAAUhB,sCAGvB7B,GAA2B,IAAA2I,EACVvG,KAAKH,MAAvBhC,EAD4B0I,EAC5B1I,KAAM2C,EADsB+F,EACtB/F,QACRxB,EAAUnB,EAAKU,KAAI,SAACL,GAAD,OAAAmC,EAAAA,EAAA,GAAgBnC,GAAhB,GAAA,CAAsBqC,UAAU,OACzD3C,EAAIa,YAAYzB,SAAQ,SAACC,GACvB,IAAMK,EAAQL,EAAKK,OACJ,IAAXA,IACJ0B,EAAQ1B,GAAOiD,UAAW,MAE5BC,EAAQxB,EAASgB,KAAKS,SAAUhB,oCA9NhC,IAAM+G,EAAKxG,KAAKG,IAAIS,QACpB,GAAW,OAAP4F,EAAa,OAAO,KACxB,IAAMxD,EAAMyD,OAAOC,KAAKF,GAAIG,MAAK,SAACC,GAAD,OAAOA,EAAEC,SAAS,eACnD,OAAK7D,EAEEwD,EAAGxD,GAFO,oEA1GRrD,iBAI6C,CACtDL,MAAO,SAACpB,GAAD,OAAUA","sources":["./home/runner/work/react-sortablejs/react-sortablejs/node_modules/@parcel/scope-hoisting/lib/helpers.js","./src/util.ts","./src/react-sortable.tsx"],"sourcesContent":[null,"import { PropsWithChildren } from \"react\";\nimport Sortable, { Options } from \"sortablejs\";\nimport { MultiDragEvent } from \"./react-sortable\";\nimport { AllMethodNames, ItemInterface, ReactSortableProps } from \"./types\";\n\n/**\n * Removes the `node` from the DOM\n * @param node\n */\nexport function removeNode(node: HTMLElement): void {\n  if (node.parentElement !== null) node.parentElement.removeChild(node);\n}\n\n/**\n * Inserts the `newChild` node at the given index in a parent\n * @param parent The parent HTML Element.\n * @param newChild A HTML eement to add as a child of the parent.\n * @param index index of the parent to place the new child in.\n */\nexport function insertNodeAt(\n  parent: HTMLElement,\n  newChild: HTMLElement,\n  index: number\n): void {\n  const refChild = parent.children[index] || null;\n  parent.insertBefore(newChild, refChild);\n}\n\n// @todo - create a dom handler function for arrays or not at all\n\n/** removes stuff from the dom in a nice order */\n// @todo - do I need parenElement?\nexport function handleDOMChanges<T extends ItemInterface>(\n  customs: Normalized<T>[]\n): void {\n  removeNodes(customs);\n  insertNodes(customs);\n}\n\nexport function removeNodes<T extends ItemInterface>(\n  customs: Normalized<T>[]\n): void {\n  customs.forEach((curr) => removeNode(curr.element));\n}\n\nexport function insertNodes<T extends ItemInterface>(\n  customs: Normalized<T>[]\n): void {\n  customs.forEach((curr) => {\n    insertNodeAt(curr.parentElement, curr.element, curr.oldIndex);\n  });\n}\n\nexport function createCustoms<T extends ItemInterface>(\n  evt: MultiDragEvent,\n  list: T[]\n): Normalized<T>[] {\n  const mode = getMode(evt);\n  const parentElement = { parentElement: evt.from };\n  let custom = [];\n  switch (mode) {\n    case \"normal\":\n      /* eslint-disable */\n      const item = {\n        element: evt.item,\n        newIndex: evt.newIndex!,\n        oldIndex: evt.oldIndex!,\n        parentElement: evt.from,\n      };\n      custom = [item];\n      break;\n    case \"swap\":\n      const drag: Input = {\n        element: evt.item,\n        oldIndex: evt.oldIndex!,\n        newIndex: evt.newIndex!,\n        ...parentElement,\n      };\n      const swap: Input = {\n        element: evt.swapItem!,\n        oldIndex: evt.newIndex!,\n        newIndex: evt.oldIndex!,\n        ...parentElement,\n      };\n      custom = [drag, swap];\n      break;\n    case \"multidrag\":\n      custom = evt.oldIndicies.map<Input>((curr, index) => ({\n        element: curr.multiDragElement,\n        oldIndex: curr.index,\n        newIndex: evt.newIndicies[index].index,\n        ...parentElement,\n      }));\n      break;\n  }\n  /* eslint-enable */\n\n  const customs = createNormalized(custom, list);\n  return customs;\n}\n\n/** moves items form old index to new index without breaking anything ideally. */\nexport function handleStateChanges<T extends ItemInterface>(\n  normalized: Normalized<T>[],\n  list: T[]\n): T[] {\n  const a = handleStateRemove(normalized, list);\n  const b = handleStateAdd(normalized, a);\n  return b;\n}\n\nexport function handleStateRemove<T extends ItemInterface>(\n  normalized: Normalized<T>[],\n  list: T[]\n): T[] {\n  const newList = [...list];\n  normalized\n    .concat()\n    .reverse()\n    .forEach((curr) => newList.splice(curr.oldIndex, 1));\n  return newList;\n}\n\nexport function handleStateAdd<T extends ItemInterface>(\n  normalized: Normalized<T>[],\n  list: T[],\n  evt?: Sortable.SortableEvent,\n  clone?: ((currentItem: T, evt: Sortable.SortableEvent) => T) | undefined\n): T[] {\n  const newList = [...list];\n  normalized.forEach((curr) => {\n    const newItem = clone && evt && clone(curr.item, evt);\n    newList.splice(curr.newIndex, 0, newItem || curr.item);\n  });\n  return newList;\n}\n\nexport function getMode(evt: MultiDragEvent): \"multidrag\" | \"swap\" | \"normal\" {\n  if (evt.oldIndicies && evt.oldIndicies.length > 0) return \"multidrag\";\n  if (evt.swapItem) return \"swap\";\n  return \"normal\";\n}\n\nexport function createNormalized<T extends ItemInterface>(\n  inputs: Input[],\n  list: T[]\n): Normalized<T>[] {\n  const normalized = inputs\n    .map<Normalized<T>>((curr) => ({ ...curr, item: list[curr.oldIndex] }))\n    .sort((a, b) => a.oldIndex - b.oldIndex);\n  return normalized;\n}\n\nexport interface Input {\n  parentElement: HTMLElement;\n  element: HTMLElement;\n  oldIndex: number;\n  newIndex: number;\n}\n\nexport interface Normalized<T> extends Input {\n  item: T;\n}\n\n/**\n * Removes the following group of properties from `props`,\n * leaving only `Sortable.Options` without any `on` methods.\n * @param props `ReactSortable.Props`\n */\nexport function destructurePropsForOptions<T>(\n  props: PropsWithChildren<ReactSortableProps<T>>\n): Exclude<Options, AllMethodNames> {\n  /* eslint-disable */\n  const {\n    // react sortable props\n    list,\n    setList,\n    children,\n    tag,\n    style,\n    className,\n    clone,\n    // sortable options that have methods we want to overwrite\n    onAdd,\n    onChange,\n    onChoose,\n    onClone,\n    onEnd,\n    onFilter,\n    onRemove,\n    onSort,\n    onStart,\n    onUnchoose,\n    onUpdate,\n    onMove,\n    onSpill,\n    onSelect,\n    onDeselect,\n    ...options\n  } = props;\n  /* eslint-enable */\n  return options;\n}\n\n/**\n * Construct a type with the properties of T except for those in type K.\n * Including this allows for backwards compatibility with earlier versions of TS.\n */\nexport type Omit<T, K extends keyof T> = Pick<T, Exclude<keyof T, K>>;\n","import classNames from \"classnames\";\nimport {\n  Children,\n  cloneElement,\n  Component,\n  createElement,\n  createRef,\n  ReactElement,\n  RefObject,\n} from \"react\";\nimport Sortable, { MoveEvent, Options, SortableEvent } from \"sortablejs\";\nimport invariant from \"tiny-invariant\";\nimport {\n  AllMethodsExceptMove,\n  HandledMethodNames,\n  ItemInterface,\n  ReactSortableProps,\n  Store,\n  UnHandledMethodNames,\n} from \"./types\";\nimport {\n  createCustoms,\n  destructurePropsForOptions,\n  getMode,\n  handleStateAdd,\n  handleStateChanges,\n  handleStateRemove,\n  insertNodes,\n  removeNode,\n  removeNodes,\n} from \"./util\";\n\n/** Holds a global reference for which react element is being dragged */\n// @todo - use context to manage this. How does one use 2 different providers?\nconst store: Store = { dragging: null };\n\nexport class ReactSortable<T extends ItemInterface> extends Component<\n  ReactSortableProps<T>\n> {\n  /* eslint-disable-next-line */\n  static defaultProps: Partial<ReactSortableProps<any>> = {\n    clone: (item) => item,\n  };\n\n  private ref: RefObject<HTMLElement>;\n  constructor(props: ReactSortableProps<T>) {\n    super(props);\n    // @todo forward ref this component\n    this.ref = createRef<HTMLElement>();\n\n    // make all state false because we can't change sortable unless a mouse gesture is made.\n    const newList = props.list.map((item) => ({\n      ...item,\n      chosen: false,\n      selected: false,\n    }));\n\n    props.setList(newList, this.sortable, store);\n    invariant(\n      //@ts-expect-error: Doesn't exist. Will deprecate soon.\n      !props.plugins,\n      `\nPlugins prop is no longer supported.\nInstead, mount it with \"Sortable.mount(new MultiDrag())\"\nPlease read the updated README.md at https://github.com/SortableJS/react-sortablejs.\n      `\n    );\n  }\n  componentDidMount(): void {\n    if (this.ref.current === null) return;\n    const newOptions = this.makeOptions();\n    Sortable.create(this.ref.current, newOptions);\n  }\n\n  render(): JSX.Element {\n    const { tag, style, className, id } = this.props;\n    const classicProps = { style, className, id };\n\n    // if no tag, default to a `div` element.\n    const newTag = !tag || tag === null ? \"div\" : tag;\n    return createElement(\n      newTag,\n      {\n        // @todo - find a way (perhaps with the callback) to allow AntD components to work\n        ref: this.ref,\n        ...classicProps,\n      },\n      this.getChildren()\n    );\n  }\n\n  private getChildren() {\n    const {\n      children,\n      dataIdAttr,\n      selectedClass = \"sortable-selected\",\n      chosenClass = \"sortable-chosen\",\n      /* eslint-disable */\n      dragClass = \"sortable-drag\",\n      fallbackClass = \"sortable-falback\",\n      ghostClass = \"sortable-ghost\",\n      swapClass = \"sortable-swap-highlight\",\n      /* eslint-enable */\n      filter = \"sortable-filter\",\n      list,\n    } = this.props;\n\n    // if no children, don't do anything.\n    if (!children || children == null) return null;\n    const dataid = dataIdAttr || \"data-id\";\n    /* eslint-disable-next-line */\n    return Children.map(children as ReactElement<any>[], (child, index) => {\n      const item = list[index];\n      const { className: prevClassName } = child.props;\n\n      // @todo - handle the function if avalable. I don't think anyone will be doing this soon.\n      const filtered = typeof filter === \"string\" && {\n        [filter.replace(\".\", \"\")]: !!item.filtered,\n      };\n\n      const className = classNames(prevClassName, {\n        [selectedClass]: item.selected,\n        [chosenClass]: item.chosen,\n        ...filtered,\n        // [dragClass]: true,\n        // [fallbackClass]: true,\n        // [ghostClass]: true,\n        // [swapClass]: true\n      });\n\n      return cloneElement(child, {\n        [dataid]: child.key,\n        className,\n      });\n    });\n  }\n\n  /** Appends the `sortable` property to this component */\n  private get sortable(): Sortable | null {\n    const el = this.ref.current;\n    if (el === null) return null;\n    const key = Object.keys(el).find((k) => k.includes(\"Sortable\"));\n    if (!key) return null;\n    //@ts-expect-error: fix me.\n    return el[key] as Sortable;\n  }\n\n  /** Converts all the props from `ReactSortable` into the `options` object that `Sortable.create(el, [options])` can use. */\n  makeOptions(): Options {\n    const DOMHandlers: HandledMethodNames[] = [\n      \"onAdd\",\n      \"onChoose\",\n      \"onDeselect\",\n      \"onEnd\",\n      \"onRemove\",\n      \"onSelect\",\n      \"onSpill\",\n      \"onStart\",\n      \"onUnchoose\",\n      \"onUpdate\",\n    ];\n    const NonDOMHandlers: UnHandledMethodNames[] = [\n      \"onChange\",\n      \"onClone\",\n      \"onFilter\",\n      \"onSort\",\n    ];\n    const newOptions: Options = destructurePropsForOptions(this.props);\n    DOMHandlers.forEach(\n      (name) => (newOptions[name] = this.prepareOnHandlerPropAndDOM(name))\n    );\n    NonDOMHandlers.forEach(\n      (name) => (newOptions[name] = this.prepareOnHandlerProp(name))\n    );\n\n    /** onMove has 2 arguments and needs to be handled seperately. */\n    const onMove = (evt: MoveEvent, originalEvt: Event) => {\n      const { onMove } = this.props;\n      const defaultValue = evt.willInsertAfter || -1;\n      if (!onMove) return defaultValue;\n      const result = onMove(evt, originalEvt, this.sortable, store);\n      if (typeof result === \"undefined\") return false;\n      return result;\n    };\n\n    return {\n      ...newOptions,\n      onMove,\n    };\n  }\n\n  /** Prepares a method that will be used in the sortable options to call an `on[Handler]` prop & an `on[Handler]` ReactSortable method.  */\n  prepareOnHandlerPropAndDOM(\n    evtName: HandledMethodNames\n  ): (evt: SortableEvent) => void {\n    return (evt) => {\n      // call the component prop\n      this.callOnHandlerProp(evt, evtName);\n      // calls state change\n      //@ts-expect-error: until @types multidrag item is in\n      this[evtName](evt);\n    };\n  }\n\n  /** Prepares a method that will be used in the sortable options to call an `on[Handler]` prop */\n  prepareOnHandlerProp(\n    evtName: Exclude<AllMethodsExceptMove, HandledMethodNames>\n  ): (evt: SortableEvent) => void {\n    return (evt) => {\n      // call the component prop\n      this.callOnHandlerProp(evt, evtName);\n    };\n  }\n\n  /** Calls the `props.on[Handler]` function */\n  callOnHandlerProp(evt: SortableEvent, evtName: AllMethodsExceptMove): void {\n    const propEvent = this.props[evtName];\n    if (propEvent) propEvent(evt, this.sortable, store);\n  }\n\n  // SORTABLE DOM HANDLING\n\n  onAdd(evt: MultiDragEvent): void {\n    const { list, setList, clone } = this.props;\n    /* eslint-disable-next-line */\n    const otherList = [...store.dragging!.props.list];\n    const customs = createCustoms(evt, otherList);\n    removeNodes(customs);\n    const newList = handleStateAdd(customs, list, evt, clone).map((item) => ({\n      ...item,\n      selected: false,\n    }));\n    setList(newList, this.sortable, store);\n  }\n\n  onRemove(evt: MultiDragEvent): void {\n    const { list, setList } = this.props;\n    const mode = getMode(evt);\n    const customs = createCustoms(evt, list);\n    insertNodes(customs);\n\n    let newList = [...list];\n    // remove state if not in clone mode. otherwise, keep.\n    if (evt.pullMode !== \"clone\") newList = handleStateRemove(customs, newList);\n    // if clone, it doesn't really remove. instead it clones in place.\n    // @todo -\n    else {\n      // switch used to get the clone\n      let customClones = customs;\n      switch (mode) {\n        case \"multidrag\":\n          customClones = customs.map((item, index) => ({\n            ...item,\n            element: evt.clones[index],\n          }));\n          break;\n        case \"normal\":\n          customClones = customs.map((item) => ({\n            ...item,\n            element: evt.clone,\n          }));\n          break;\n        case \"swap\":\n        default: {\n          invariant(\n            true,\n            `mode \"${mode}\" cannot clone. Please remove \"props.clone\" from <ReactSortable/> when using the \"${mode}\" plugin`\n          );\n        }\n      }\n      removeNodes(customClones);\n\n      // replace selected items with cloned items\n      customs.forEach((curr) => {\n        const index = curr.oldIndex;\n        /* eslint-disable-next-line */\n        const newItem = this.props.clone!(curr.item, evt);\n        newList.splice(index, 1, newItem);\n      });\n    }\n\n    // remove item.selected from list\n    newList = newList.map((item) => ({ ...item, selected: false }));\n    setList(newList, this.sortable, store);\n  }\n\n  onUpdate(evt: MultiDragEvent): void {\n    const { list, setList } = this.props;\n    const customs = createCustoms(evt, list);\n    removeNodes(customs);\n    insertNodes(customs);\n    const newList = handleStateChanges(customs, list);\n    return setList(newList, this.sortable, store);\n  }\n\n  onStart(): void {\n    store.dragging = this;\n  }\n\n  onEnd(): void {\n    store.dragging = null;\n  }\n\n  onChoose(evt: SortableEvent): void {\n    const { list, setList } = this.props;\n    const newList = list.map((item, index) => {\n      if (index === evt.oldIndex) {\n        return {\n          ...item,\n          chosen: true,\n        };\n      }\n      return item;\n    });\n    setList(newList, this.sortable, store);\n  }\n\n  onUnchoose(evt: SortableEvent): void {\n    const { list, setList } = this.props;\n    const newList = list.map((item, index) => {\n      if (index === evt.oldIndex) {\n        return {\n          ...item,\n          chosen: false,\n        };\n      }\n      return item;\n    });\n    setList(newList, this.sortable, store);\n  }\n\n  onSpill(evt: SortableEvent): void {\n    const { removeOnSpill, revertOnSpill } = this.props;\n    if (removeOnSpill && !revertOnSpill) removeNode(evt.item);\n  }\n\n  onSelect(evt: MultiDragEvent): void {\n    const { list, setList } = this.props;\n    const newList = list.map((item) => ({ ...item, selected: false }));\n    evt.newIndicies.forEach((curr) => {\n      const index = curr.index;\n      if (index === -1) {\n        console.log(\n          `\"${evt.type}\" had indice of \"${curr.index}\", which is probably -1 and doesn't usually happen here.`\n        );\n        console.log(evt);\n        return;\n      }\n      newList[index].selected = true;\n    });\n    setList(newList, this.sortable, store);\n  }\n\n  onDeselect(evt: MultiDragEvent): void {\n    const { list, setList } = this.props;\n    const newList = list.map((item) => ({ ...item, selected: false }));\n    evt.newIndicies.forEach((curr) => {\n      const index = curr.index;\n      if (index === -1) return;\n      newList[index].selected = true;\n    });\n    setList(newList, this.sortable, store);\n  }\n}\n\n// everything below this point can be removed\n// once @types has been merged. PR submited\ninterface MultiIndices {\n  multiDragElement: HTMLElement;\n  index: number;\n}\n\nexport interface MultiDragEvent extends SortableEvent {\n  // @todo - add this to @types\n  clones: HTMLElement[];\n  oldIndicies: MultiIndices[];\n  newIndicies: MultiIndices[];\n  swapItem: HTMLElement | null;\n}\n"],"names":["$parcel$interopDefault","a","__esModule","default","removeNode","node","parentElement","removeChild","removeNodes","customs","forEach","curr","element","insertNodes","parent","newChild","index","refChild","oldIndex","children","insertBefore","createCustoms","evt","list","mode","getMode","from","custom","item","newIndex","$bf037e368b3040002dda64d69d3f$var$_objectSpread","swapItem","oldIndicies","map","multiDragElement","newIndicies","inputs","sort","b","createNormalized","handleStateRemove","normalized","newList","$bf037e368b3040002dda64d69d3f$var$_toConsumableArray","concat","reverse","splice","handleStateAdd","clone","newItem","length","store","dragging","ReactSortable","Component","props","_this","$ff006f4a88ed11a8119708ec3f19c5db$var$_classCallCheck","this","_super","call","ref","createRef","$ff006f4a88ed11a8119708ec3f19c5db$var$_objectSpread","chosen","selected","setList","sortable","invariant","plugins","current","newOptions","makeOptions","Sortable","create","_this$props","tag","classicProps","style","className","id","createElement","getChildren","_this$props2","dataIdAttr","_this$props2$selected","selectedClass","_this$props2$chosenCl","chosenClass","_this$props2$filter","dragClass","fallbackClass","ghostClass","swapClass","filter","dataid","Children","child","_objectSpread2","_cloneElement","prevClassName","filtered","$ff006f4a88ed11a8119708ec3f19c5db$var$_defineProperty","replace","classNames","cloneElement","key","_this2","onAdd","onChange","onChoose","onClone","onEnd","onFilter","onRemove","onSort","onStart","onUnchoose","onUpdate","onMove","onSpill","onSelect","onDeselect","$bf037e368b3040002dda64d69d3f$var$_objectWithoutProperties","name","prepareOnHandlerPropAndDOM","prepareOnHandlerProp","originalEvt","defaultValue","willInsertAfter","result","evtName","_this3","callOnHandlerProp","_this4","propEvent","_this$props3","$bf037e368b3040002dda64d69d3f$export$createCustoms","$ff006f4a88ed11a8119708ec3f19c5db$var$_toConsumableArray","$bf037e368b3040002dda64d69d3f$export$removeNodes","$bf037e368b3040002dda64d69d3f$export$handleStateAdd","_this5","_this$props4","$bf037e368b3040002dda64d69d3f$export$getMode","$bf037e368b3040002dda64d69d3f$export$insertNodes","pullMode","$bf037e368b3040002dda64d69d3f$export$handleStateRemove","customClones","clones","_this$props5","$bf037e368b3040002dda64d69d3f$export$handleStateChanges","_this$props6","_this$props7","_this$props8","removeOnSpill","revertOnSpill","$bf037e368b3040002dda64d69d3f$export$removeNode","_this$props9","console","log","type","_this$props10","el","Object","keys","find","k","includes"],"version":3,"file":"index.js.map"}