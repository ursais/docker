{"ast":null,"code":"import _extends from \"@babel/runtime-corejs3/helpers/extends\";import _filterInstanceProperty from \"@babel/runtime-corejs3/core-js-stable/instance/filter\";import _indexOfInstanceProperty from \"@babel/runtime-corejs3/core-js-stable/instance/index-of\";import _mapInstanceProperty from \"@babel/runtime-corejs3/core-js-stable/instance/map\";import _concatInstanceProperty from \"@babel/runtime-corejs3/core-js-stable/instance/concat\";import _setTimeout from \"@babel/runtime-corejs3/core-js-stable/set-timeout\";import _findInstanceProperty from \"@babel/runtime-corejs3/core-js-stable/instance/find\";import _bindInstanceProperty from \"@babel/runtime-corejs3/core-js-stable/instance/bind\";import _Array$isArray from \"@babel/runtime-corejs3/core-js-stable/array/is-array\";(function () {var enterModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.enterModule : undefined;enterModule && enterModule(module);})();var __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default.signature : function (a) {return a;}; /**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n/* eslint-disable camelcase */\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport Tabs from 'src/components/Tabs';\nimport Button from 'src/components/Button';\nimport { NativeSelect as Select } from 'src/components/Select';\nimport { t, styled } from '@superset-ui/core';\n\nimport { Form, FormItem } from 'src/components/Form';\nimport { SQLEditor } from 'src/components/AsyncAceEditor';\nimport sqlKeywords from 'src/SqlLab/utils/sqlKeywords';\nimport { noOp } from 'src/utils/common';\n\nimport { AGGREGATES_OPTIONS } from 'src/explore/constants';\nimport columnType from 'src/explore/components/controls/MetricControl/columnType';\nimport savedMetricType from 'src/explore/components/controls/MetricControl/savedMetricType';\nimport AdhocMetric, {\nEXPRESSION_TYPES } from\n'src/explore/components/controls/MetricControl/AdhocMetric';\nimport {\nStyledMetricOption,\nStyledColumnOption } from\n'src/explore/components/optionRenderers';import { jsx as ___EmotionJSX } from \"@emotion/react\";\n\nconst propTypes = {\n  onChange: PropTypes.func.isRequired,\n  onClose: PropTypes.func.isRequired,\n  onResize: PropTypes.func.isRequired,\n  getCurrentTab: PropTypes.func,\n  getCurrentLabel: PropTypes.func,\n  adhocMetric: PropTypes.instanceOf(AdhocMetric).isRequired,\n  columns: PropTypes.arrayOf(columnType),\n  savedMetricsOptions: PropTypes.arrayOf(savedMetricType),\n  savedMetric: savedMetricType,\n  datasourceType: PropTypes.string };\n\n\nconst defaultProps = {\n  columns: [],\n  getCurrentTab: noOp };\n\n\nconst StyledSelect = styled(Select)`\n  .metric-option {\n    & > svg {\n      min-width: ${({ theme }) => `${theme.gridUnit * 4}px`};\n    }\n    & > .option-label {\n      overflow: hidden;\n      text-overflow: ellipsis;\n    }\n  }\n`;\n\nexport const SAVED_TAB_KEY = 'SAVED';\n\nconst startingWidth = 320;\nconst startingHeight = 240;\n\nexport default class AdhocMetricEditPopover extends React.PureComponent {\n  // \"Saved\" is a default tab unless there are no saved metrics for dataset\n\n\n\n\n\n\n\n  constructor(props) {var _context, _context2, _context3, _context4, _context5, _context6, _context7, _context8, _context9, _context10, _context11, _context12;\n    super(props);this.defaultActiveTabKey = (this.props.savedMetric.metric_name || this.props.adhocMetric.isNew) && _Array$isArray(this.props.savedMetricsOptions) && this.props.savedMetricsOptions.length > 0 ? SAVED_TAB_KEY : this.props.adhocMetric.expressionType;\n    this.onSave = _bindInstanceProperty(_context = this.onSave).call(_context, this);\n    this.onResetStateAndClose = _bindInstanceProperty(_context2 = this.onResetStateAndClose).call(_context2, this);\n    this.onColumnChange = _bindInstanceProperty(_context3 = this.onColumnChange).call(_context3, this);\n    this.onAggregateChange = _bindInstanceProperty(_context4 = this.onAggregateChange).call(_context4, this);\n    this.onSavedMetricChange = _bindInstanceProperty(_context5 = this.onSavedMetricChange).call(_context5, this);\n    this.onSqlExpressionChange = _bindInstanceProperty(_context6 = this.onSqlExpressionChange).call(_context6, this);\n    this.onDragDown = _bindInstanceProperty(_context7 = this.onDragDown).call(_context7, this);\n    this.onMouseMove = _bindInstanceProperty(_context8 = this.onMouseMove).call(_context8, this);\n    this.onMouseUp = _bindInstanceProperty(_context9 = this.onMouseUp).call(_context9, this);\n    this.onTabChange = _bindInstanceProperty(_context10 = this.onTabChange).call(_context10, this);\n    this.handleAceEditorRef = _bindInstanceProperty(_context11 = this.handleAceEditorRef).call(_context11, this);\n    this.refreshAceEditor = _bindInstanceProperty(_context12 = this.refreshAceEditor).call(_context12, this);\n\n    this.state = {\n      adhocMetric: this.props.adhocMetric,\n      savedMetric: this.props.savedMetric,\n      width: startingWidth,\n      height: startingHeight };\n\n\n    document.addEventListener('mouseup', this.onMouseUp);\n  }\n\n  componentDidMount() {\n    this.props.getCurrentTab(this.defaultActiveTabKey);\n  }\n\n  componentDidUpdate(prevProps, prevState) {var _prevState$adhocMetri, _this$state$adhocMetr, _prevState$adhocMetri2, _this$state$adhocMetr2, _prevState$adhocMetri3, _prevState$adhocMetri4, _this$state$adhocMetr3, _this$state$adhocMetr4, _prevState$savedMetri, _this$state$savedMetr;\n    if (\n    ((_prevState$adhocMetri = prevState.adhocMetric) == null ? void 0 : _prevState$adhocMetri.sqlExpression) !== ((_this$state$adhocMetr =\n    this.state.adhocMetric) == null ? void 0 : _this$state$adhocMetr.sqlExpression) ||\n    ((_prevState$adhocMetri2 = prevState.adhocMetric) == null ? void 0 : _prevState$adhocMetri2.aggregate) !== ((_this$state$adhocMetr2 = this.state.adhocMetric) == null ? void 0 : _this$state$adhocMetr2.aggregate) ||\n    ((_prevState$adhocMetri3 = prevState.adhocMetric) == null ? void 0 : (_prevState$adhocMetri4 = _prevState$adhocMetri3.column) == null ? void 0 : _prevState$adhocMetri4.column_name) !== ((_this$state$adhocMetr3 =\n    this.state.adhocMetric) == null ? void 0 : (_this$state$adhocMetr4 = _this$state$adhocMetr3.column) == null ? void 0 : _this$state$adhocMetr4.column_name) ||\n    ((_prevState$savedMetri = prevState.savedMetric) == null ? void 0 : _prevState$savedMetri.metric_name) !== ((_this$state$savedMetr = this.state.savedMetric) == null ? void 0 : _this$state$savedMetr.metric_name))\n    {var _this$state$savedMetr2, _this$state$savedMetr3, _this$state$adhocMetr5;\n      this.props.getCurrentLabel({\n        savedMetricLabel:\n        ((_this$state$savedMetr2 = this.state.savedMetric) == null ? void 0 : _this$state$savedMetr2.verbose_name) || ((_this$state$savedMetr3 =\n        this.state.savedMetric) == null ? void 0 : _this$state$savedMetr3.metric_name),\n        adhocMetricLabel: (_this$state$adhocMetr5 = this.state.adhocMetric) == null ? void 0 : _this$state$adhocMetr5.getDefaultLabel() });\n\n    }\n  }\n\n  componentWillUnmount() {\n    document.removeEventListener('mouseup', this.onMouseUp);\n    document.removeEventListener('mousemove', this.onMouseMove);\n  }\n\n  onSave() {var _this$props$savedMetr;\n    const { adhocMetric, savedMetric } = this.state;\n\n    const metric = savedMetric != null && savedMetric.metric_name ? savedMetric : adhocMetric;\n    const oldMetric = (_this$props$savedMetr = this.props.savedMetric) != null && _this$props$savedMetr.metric_name ?\n    this.props.savedMetric :\n    this.props.adhocMetric;\n    this.props.onChange(\n    {\n      ...metric },\n\n    oldMetric);\n\n    this.props.onClose();\n  }\n\n  onResetStateAndClose() {\n    this.setState(\n    {\n      adhocMetric: this.props.adhocMetric,\n      savedMetric: this.props.savedMetric },\n\n    this.props.onClose);\n\n  }\n\n  onColumnChange(columnId) {var _context13;\n    const column = _findInstanceProperty(_context13 = this.props.columns).call(_context13, column => column.id === columnId);\n    this.setState(prevState => ({\n      adhocMetric: prevState.adhocMetric.duplicateWith({\n        column,\n        expressionType: EXPRESSION_TYPES.SIMPLE }),\n\n      savedMetric: undefined }));\n\n  }\n\n  onAggregateChange(aggregate) {\n    // we construct this object explicitly to overwrite the value in the case aggregate is null\n    this.setState(prevState => ({\n      adhocMetric: prevState.adhocMetric.duplicateWith({\n        aggregate,\n        expressionType: EXPRESSION_TYPES.SIMPLE }),\n\n      savedMetric: undefined }));\n\n  }\n\n  onSavedMetricChange(savedMetricId) {var _context14;\n    const savedMetric = _findInstanceProperty(_context14 = this.props.savedMetricsOptions).call(_context14,\n    metric => metric.id === savedMetricId);\n\n    this.setState(prevState => ({\n      savedMetric,\n      adhocMetric: prevState.adhocMetric.duplicateWith({\n        column: undefined,\n        aggregate: undefined,\n        sqlExpression: undefined,\n        expressionType: EXPRESSION_TYPES.SIMPLE }) }));\n\n\n  }\n\n  onSqlExpressionChange(sqlExpression) {\n    this.setState(prevState => ({\n      adhocMetric: prevState.adhocMetric.duplicateWith({\n        sqlExpression,\n        expressionType: EXPRESSION_TYPES.SQL }),\n\n      savedMetric: undefined }));\n\n  }\n\n  onDragDown(e) {\n    this.dragStartX = e.clientX;\n    this.dragStartY = e.clientY;\n    this.dragStartWidth = this.state.width;\n    this.dragStartHeight = this.state.height;\n    document.addEventListener('mousemove', this.onMouseMove);\n  }\n\n  onMouseMove(e) {\n    this.props.onResize();\n    this.setState({\n      width: Math.max(\n      this.dragStartWidth + (e.clientX - this.dragStartX),\n      startingWidth),\n\n      height: Math.max(\n      this.dragStartHeight + (e.clientY - this.dragStartY) * 2,\n      startingHeight) });\n\n\n  }\n\n  onMouseUp() {\n    document.removeEventListener('mousemove', this.onMouseMove);\n  }\n\n  onTabChange(tab) {\n    this.refreshAceEditor();\n    this.props.getCurrentTab(tab);\n  }\n\n  handleAceEditorRef(ref) {\n    if (ref) {\n      this.aceEditorRef = ref;\n    }\n  }\n\n  refreshAceEditor() {\n    _setTimeout(() => {\n      if (this.aceEditorRef) {\n        this.aceEditorRef.editor.resize();\n      }\n    }, 0);\n  }\n\n  renderColumnOption(option) {\n    const column = { ...option };\n    if (column.metric_name && !column.verbose_name) {\n      column.verbose_name = column.metric_name;\n    }\n    return ___EmotionJSX(StyledColumnOption, { column: column, showType: true });\n  }\n\n  render() {var _savedMetricsOptions$;\n    const {\n      adhocMetric: propsAdhocMetric,\n      savedMetric: propsSavedMetric,\n      columns,\n      savedMetricsOptions,\n      onChange,\n      onClose,\n      onResize,\n      datasourceType,\n      ...popoverProps } =\n    this.props;\n    const { adhocMetric, savedMetric } = this.state;\n    const keywords = _concatInstanceProperty(sqlKeywords).call(sqlKeywords,\n    _mapInstanceProperty(columns).call(columns, column => ({\n      name: column.column_name,\n      value: column.column_name,\n      score: 50,\n      meta: 'column' })));\n\n\n\n    const columnValue =\n    adhocMetric.column && adhocMetric.column.column_name ||\n    adhocMetric.inferSqlExpressionColumn();\n\n    // autofocus on column if there's no value in column; otherwise autofocus on aggregate\n    const columnSelectProps = {\n      placeholder: t('%s column(s)', columns.length),\n      value: columnValue,\n      onChange: this.onColumnChange,\n      allowClear: true,\n      showSearch: true,\n      autoFocus: !columnValue,\n      filterOption: (input, option) => {var _context15;return (\n          _indexOfInstanceProperty(_context15 = option.filterBy.toLowerCase()).call(_context15, input.toLowerCase()) >= 0);} };\n\n\n    const aggregateSelectProps = {\n      placeholder: t('%s aggregates(s)', AGGREGATES_OPTIONS.length),\n      value: adhocMetric.aggregate || adhocMetric.inferSqlExpressionAggregate(),\n      onChange: this.onAggregateChange,\n      allowClear: true,\n      autoFocus: !!columnValue,\n      showSearch: true };\n\n\n    const savedSelectProps = {\n      placeholder: t('%s saved metric(s)', (_savedMetricsOptions$ = savedMetricsOptions == null ? void 0 : savedMetricsOptions.length) != null ? _savedMetricsOptions$ : 0),\n      value: (savedMetric == null ? void 0 : savedMetric.verbose_name) || (savedMetric == null ? void 0 : savedMetric.metric_name),\n      onChange: this.onSavedMetricChange,\n      allowClear: true,\n      showSearch: true,\n      autoFocus: true,\n      filterOption: (input, option) => {var _context16;return (\n          _indexOfInstanceProperty(_context16 = option.filterBy.toLowerCase()).call(_context16, input.toLowerCase()) >= 0);} };\n\n\n    if (this.props.datasourceType === 'druid' && aggregateSelectProps.options) {var _context17;\n      aggregateSelectProps.options = _filterInstanceProperty(_context17 = aggregateSelectProps.options).call(_context17,\n      aggregate => aggregate !== 'AVG');\n\n    }\n\n    const stateIsValid = adhocMetric.isValid() || (savedMetric == null ? void 0 : savedMetric.metric_name);\n    const hasUnsavedChanges =\n    !adhocMetric.equals(propsAdhocMetric) ||\n    !(\n    typeof (savedMetric == null ? void 0 : savedMetric.metric_name) === 'undefined' &&\n    typeof (propsSavedMetric == null ? void 0 : propsSavedMetric.metric_name) === 'undefined') &&\n\n    (savedMetric == null ? void 0 : savedMetric.metric_name) !== (propsSavedMetric == null ? void 0 : propsSavedMetric.metric_name);\n\n    return (\n      ___EmotionJSX(Form, _extends({\n        layout: \"vertical\",\n        id: \"metrics-edit-popover\",\n        \"data-test\": \"metrics-edit-popover\" },\n      popoverProps),\n\n      ___EmotionJSX(Tabs, {\n        id: \"adhoc-metric-edit-tabs\",\n        \"data-test\": \"adhoc-metric-edit-tabs\",\n        defaultActiveKey: this.defaultActiveTabKey,\n        className: \"adhoc-metric-edit-tabs\",\n        style: { height: this.state.height, width: this.state.width },\n        onChange: this.onTabChange,\n        allowOverflow: true },\n\n      ___EmotionJSX(Tabs.TabPane, { key: SAVED_TAB_KEY, tab: t('Saved') },\n      ___EmotionJSX(FormItem, { label: t('Saved metric') },\n      ___EmotionJSX(StyledSelect, _extends({},\n      savedSelectProps, {\n        name: \"select-saved\",\n        getPopupContainer: triggerNode => triggerNode.parentNode }),\n\n      _Array$isArray(savedMetricsOptions) &&\n      _mapInstanceProperty(savedMetricsOptions).call(savedMetricsOptions, (savedMetric) =>\n      ___EmotionJSX(Select.Option, {\n        value: savedMetric.id,\n        filterBy:\n        savedMetric.verbose_name || savedMetric.metric_name,\n\n        key: savedMetric.id },\n\n      ___EmotionJSX(StyledMetricOption, { metric: savedMetric, showType: true })))))),\n\n\n\n\n\n      ___EmotionJSX(Tabs.TabPane, { key: EXPRESSION_TYPES.SIMPLE, tab: t('Simple') },\n      ___EmotionJSX(FormItem, { label: t('column') },\n      ___EmotionJSX(Select, _extends({},\n      columnSelectProps, {\n        name: \"select-column\",\n        getPopupContainer: triggerNode => triggerNode.parentNode }),\n\n      _mapInstanceProperty(columns).call(columns, (column) =>\n      ___EmotionJSX(Select.Option, {\n        value: column.id,\n        filterBy: column.verbose_name || column.column_name,\n        key: column.id },\n\n      this.renderColumnOption(column))))),\n\n\n\n\n      ___EmotionJSX(FormItem, { label: t('aggregate') },\n      ___EmotionJSX(Select, _extends({},\n      aggregateSelectProps, {\n        name: \"select-aggregate\",\n        getPopupContainer: triggerNode => triggerNode.parentNode }),\n\n      _mapInstanceProperty(AGGREGATES_OPTIONS).call(AGGREGATES_OPTIONS, (option) =>\n      ___EmotionJSX(Select.Option, { value: option, key: option },\n      option))))),\n\n\n\n\n\n      ___EmotionJSX(Tabs.TabPane, {\n        key: EXPRESSION_TYPES.SQL,\n        tab: t('Custom SQL'),\n        \"data-test\": \"adhoc-metric-edit-tab#custom\" },\n\n      this.props.datasourceType !== 'druid' ?\n      ___EmotionJSX(SQLEditor, {\n        \"data-test\": \"sql-editor\",\n        showLoadingForImport: true,\n        ref: this.handleAceEditorRef,\n        keywords: keywords,\n        height: `${this.state.height - 80}px`,\n        onChange: this.onSqlExpressionChange,\n        width: \"100%\",\n        showGutter: false,\n        value:\n        adhocMetric.sqlExpression || adhocMetric.translateToSql(),\n\n        editorProps: { $blockScrolling: true },\n        enableLiveAutocompletion: true,\n        className: \"filter-sql-editor\",\n        wrapEnabled: true }) :\n\n\n      ___EmotionJSX(\"div\", { className: \"custom-sql-disabled-message\" }, \"Custom SQL Metrics are not available on druid datasources\"))),\n\n\n\n\n\n      ___EmotionJSX(\"div\", null,\n      ___EmotionJSX(Button, {\n        buttonSize: \"small\",\n        onClick: this.onResetStateAndClose,\n        \"data-test\": \"AdhocMetricEdit#cancel\",\n        cta: true },\n\n      t('Close')),\n\n      ___EmotionJSX(Button, {\n        disabled: !stateIsValid,\n        buttonStyle:\n        hasUnsavedChanges && stateIsValid ? 'primary' : 'default',\n\n        buttonSize: \"small\",\n        \"data-test\": \"AdhocMetricEdit#save\",\n        onClick: this.onSave,\n        cta: true },\n\n      t('Save')),\n\n      ___EmotionJSX(\"i\", {\n        role: \"button\",\n        \"aria-label\": \"Resize\",\n        tabIndex: 0,\n        onMouseDown: this.onDragDown,\n        className: \"fa fa-expand edit-popover-resize text-muted\" }))));\n\n\n\n\n  } // @ts-ignore\n  __reactstandin__regenerateByEval(key, code) {// @ts-ignore\n    this[key] = eval(code);}}AdhocMetricEditPopover.propTypes = propTypes;\nAdhocMetricEditPopover.defaultProps = defaultProps;;(function () {var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined;if (!reactHotLoader) {return;}reactHotLoader.register(propTypes, \"propTypes\", \"/app/superset-frontend/src/explore/components/controls/MetricControl/AdhocMetricEditPopover/index.jsx\");reactHotLoader.register(defaultProps, \"defaultProps\", \"/app/superset-frontend/src/explore/components/controls/MetricControl/AdhocMetricEditPopover/index.jsx\");reactHotLoader.register(StyledSelect, \"StyledSelect\", \"/app/superset-frontend/src/explore/components/controls/MetricControl/AdhocMetricEditPopover/index.jsx\");reactHotLoader.register(SAVED_TAB_KEY, \"SAVED_TAB_KEY\", \"/app/superset-frontend/src/explore/components/controls/MetricControl/AdhocMetricEditPopover/index.jsx\");reactHotLoader.register(startingWidth, \"startingWidth\", \"/app/superset-frontend/src/explore/components/controls/MetricControl/AdhocMetricEditPopover/index.jsx\");reactHotLoader.register(startingHeight, \"startingHeight\", \"/app/superset-frontend/src/explore/components/controls/MetricControl/AdhocMetricEditPopover/index.jsx\");reactHotLoader.register(AdhocMetricEditPopover, \"AdhocMetricEditPopover\", \"/app/superset-frontend/src/explore/components/controls/MetricControl/AdhocMetricEditPopover/index.jsx\");})();;(function () {var leaveModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.leaveModule : undefined;leaveModule && leaveModule(module);})();","map":{"version":3,"sources":["/app/superset-frontend/src/explore/components/controls/MetricControl/AdhocMetricEditPopover/index.jsx"],"names":["React","PropTypes","Tabs","Button","NativeSelect","Select","t","styled","Form","FormItem","SQLEditor","sqlKeywords","noOp","AGGREGATES_OPTIONS","columnType","savedMetricType","AdhocMetric","EXPRESSION_TYPES","StyledMetricOption","StyledColumnOption","propTypes","onChange","func","isRequired","onClose","onResize","getCurrentTab","getCurrentLabel","adhocMetric","instanceOf","columns","arrayOf","savedMetricsOptions","savedMetric","datasourceType","string","defaultProps","StyledSelect","theme","gridUnit","SAVED_TAB_KEY","startingWidth","startingHeight","AdhocMetricEditPopover","PureComponent","constructor","props","defaultActiveTabKey","metric_name","isNew","length","expressionType","onSave","onResetStateAndClose","onColumnChange","onAggregateChange","onSavedMetricChange","onSqlExpressionChange","onDragDown","onMouseMove","onMouseUp","onTabChange","handleAceEditorRef","refreshAceEditor","state","width","height","document","addEventListener","componentDidMount","componentDidUpdate","prevProps","prevState","sqlExpression","aggregate","column","column_name","savedMetricLabel","verbose_name","adhocMetricLabel","getDefaultLabel","componentWillUnmount","removeEventListener","metric","oldMetric","setState","columnId","id","duplicateWith","SIMPLE","undefined","savedMetricId","SQL","e","dragStartX","clientX","dragStartY","clientY","dragStartWidth","dragStartHeight","Math","max","tab","ref","aceEditorRef","editor","resize","renderColumnOption","option","render","propsAdhocMetric","propsSavedMetric","popoverProps","keywords","name","value","score","meta","columnValue","inferSqlExpressionColumn","columnSelectProps","placeholder","allowClear","showSearch","autoFocus","filterOption","input","filterBy","toLowerCase","aggregateSelectProps","inferSqlExpressionAggregate","savedSelectProps","options","stateIsValid","isValid","hasUnsavedChanges","equals","triggerNode","parentNode","translateToSql","$blockScrolling"],"mappings":"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","sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n/* eslint-disable camelcase */\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport Tabs from 'src/components/Tabs';\nimport Button from 'src/components/Button';\nimport { NativeSelect as Select } from 'src/components/Select';\nimport { t, styled } from '@superset-ui/core';\n\nimport { Form, FormItem } from 'src/components/Form';\nimport { SQLEditor } from 'src/components/AsyncAceEditor';\nimport sqlKeywords from 'src/SqlLab/utils/sqlKeywords';\nimport { noOp } from 'src/utils/common';\n\nimport { AGGREGATES_OPTIONS } from 'src/explore/constants';\nimport columnType from 'src/explore/components/controls/MetricControl/columnType';\nimport savedMetricType from 'src/explore/components/controls/MetricControl/savedMetricType';\nimport AdhocMetric, {\n  EXPRESSION_TYPES,\n} from 'src/explore/components/controls/MetricControl/AdhocMetric';\nimport {\n  StyledMetricOption,\n  StyledColumnOption,\n} from 'src/explore/components/optionRenderers';\n\nconst propTypes = {\n  onChange: PropTypes.func.isRequired,\n  onClose: PropTypes.func.isRequired,\n  onResize: PropTypes.func.isRequired,\n  getCurrentTab: PropTypes.func,\n  getCurrentLabel: PropTypes.func,\n  adhocMetric: PropTypes.instanceOf(AdhocMetric).isRequired,\n  columns: PropTypes.arrayOf(columnType),\n  savedMetricsOptions: PropTypes.arrayOf(savedMetricType),\n  savedMetric: savedMetricType,\n  datasourceType: PropTypes.string,\n};\n\nconst defaultProps = {\n  columns: [],\n  getCurrentTab: noOp,\n};\n\nconst StyledSelect = styled(Select)`\n  .metric-option {\n    & > svg {\n      min-width: ${({ theme }) => `${theme.gridUnit * 4}px`};\n    }\n    & > .option-label {\n      overflow: hidden;\n      text-overflow: ellipsis;\n    }\n  }\n`;\n\nexport const SAVED_TAB_KEY = 'SAVED';\n\nconst startingWidth = 320;\nconst startingHeight = 240;\n\nexport default class AdhocMetricEditPopover extends React.PureComponent {\n  // \"Saved\" is a default tab unless there are no saved metrics for dataset\n  defaultActiveTabKey =\n    (this.props.savedMetric.metric_name || this.props.adhocMetric.isNew) &&\n    Array.isArray(this.props.savedMetricsOptions) &&\n    this.props.savedMetricsOptions.length > 0\n      ? SAVED_TAB_KEY\n      : this.props.adhocMetric.expressionType;\n\n  constructor(props) {\n    super(props);\n    this.onSave = this.onSave.bind(this);\n    this.onResetStateAndClose = this.onResetStateAndClose.bind(this);\n    this.onColumnChange = this.onColumnChange.bind(this);\n    this.onAggregateChange = this.onAggregateChange.bind(this);\n    this.onSavedMetricChange = this.onSavedMetricChange.bind(this);\n    this.onSqlExpressionChange = this.onSqlExpressionChange.bind(this);\n    this.onDragDown = this.onDragDown.bind(this);\n    this.onMouseMove = this.onMouseMove.bind(this);\n    this.onMouseUp = this.onMouseUp.bind(this);\n    this.onTabChange = this.onTabChange.bind(this);\n    this.handleAceEditorRef = this.handleAceEditorRef.bind(this);\n    this.refreshAceEditor = this.refreshAceEditor.bind(this);\n\n    this.state = {\n      adhocMetric: this.props.adhocMetric,\n      savedMetric: this.props.savedMetric,\n      width: startingWidth,\n      height: startingHeight,\n    };\n\n    document.addEventListener('mouseup', this.onMouseUp);\n  }\n\n  componentDidMount() {\n    this.props.getCurrentTab(this.defaultActiveTabKey);\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    if (\n      prevState.adhocMetric?.sqlExpression !==\n        this.state.adhocMetric?.sqlExpression ||\n      prevState.adhocMetric?.aggregate !== this.state.adhocMetric?.aggregate ||\n      prevState.adhocMetric?.column?.column_name !==\n        this.state.adhocMetric?.column?.column_name ||\n      prevState.savedMetric?.metric_name !== this.state.savedMetric?.metric_name\n    ) {\n      this.props.getCurrentLabel({\n        savedMetricLabel:\n          this.state.savedMetric?.verbose_name ||\n          this.state.savedMetric?.metric_name,\n        adhocMetricLabel: this.state.adhocMetric?.getDefaultLabel(),\n      });\n    }\n  }\n\n  componentWillUnmount() {\n    document.removeEventListener('mouseup', this.onMouseUp);\n    document.removeEventListener('mousemove', this.onMouseMove);\n  }\n\n  onSave() {\n    const { adhocMetric, savedMetric } = this.state;\n\n    const metric = savedMetric?.metric_name ? savedMetric : adhocMetric;\n    const oldMetric = this.props.savedMetric?.metric_name\n      ? this.props.savedMetric\n      : this.props.adhocMetric;\n    this.props.onChange(\n      {\n        ...metric,\n      },\n      oldMetric,\n    );\n    this.props.onClose();\n  }\n\n  onResetStateAndClose() {\n    this.setState(\n      {\n        adhocMetric: this.props.adhocMetric,\n        savedMetric: this.props.savedMetric,\n      },\n      this.props.onClose,\n    );\n  }\n\n  onColumnChange(columnId) {\n    const column = this.props.columns.find(column => column.id === columnId);\n    this.setState(prevState => ({\n      adhocMetric: prevState.adhocMetric.duplicateWith({\n        column,\n        expressionType: EXPRESSION_TYPES.SIMPLE,\n      }),\n      savedMetric: undefined,\n    }));\n  }\n\n  onAggregateChange(aggregate) {\n    // we construct this object explicitly to overwrite the value in the case aggregate is null\n    this.setState(prevState => ({\n      adhocMetric: prevState.adhocMetric.duplicateWith({\n        aggregate,\n        expressionType: EXPRESSION_TYPES.SIMPLE,\n      }),\n      savedMetric: undefined,\n    }));\n  }\n\n  onSavedMetricChange(savedMetricId) {\n    const savedMetric = this.props.savedMetricsOptions.find(\n      metric => metric.id === savedMetricId,\n    );\n    this.setState(prevState => ({\n      savedMetric,\n      adhocMetric: prevState.adhocMetric.duplicateWith({\n        column: undefined,\n        aggregate: undefined,\n        sqlExpression: undefined,\n        expressionType: EXPRESSION_TYPES.SIMPLE,\n      }),\n    }));\n  }\n\n  onSqlExpressionChange(sqlExpression) {\n    this.setState(prevState => ({\n      adhocMetric: prevState.adhocMetric.duplicateWith({\n        sqlExpression,\n        expressionType: EXPRESSION_TYPES.SQL,\n      }),\n      savedMetric: undefined,\n    }));\n  }\n\n  onDragDown(e) {\n    this.dragStartX = e.clientX;\n    this.dragStartY = e.clientY;\n    this.dragStartWidth = this.state.width;\n    this.dragStartHeight = this.state.height;\n    document.addEventListener('mousemove', this.onMouseMove);\n  }\n\n  onMouseMove(e) {\n    this.props.onResize();\n    this.setState({\n      width: Math.max(\n        this.dragStartWidth + (e.clientX - this.dragStartX),\n        startingWidth,\n      ),\n      height: Math.max(\n        this.dragStartHeight + (e.clientY - this.dragStartY) * 2,\n        startingHeight,\n      ),\n    });\n  }\n\n  onMouseUp() {\n    document.removeEventListener('mousemove', this.onMouseMove);\n  }\n\n  onTabChange(tab) {\n    this.refreshAceEditor();\n    this.props.getCurrentTab(tab);\n  }\n\n  handleAceEditorRef(ref) {\n    if (ref) {\n      this.aceEditorRef = ref;\n    }\n  }\n\n  refreshAceEditor() {\n    setTimeout(() => {\n      if (this.aceEditorRef) {\n        this.aceEditorRef.editor.resize();\n      }\n    }, 0);\n  }\n\n  renderColumnOption(option) {\n    const column = { ...option };\n    if (column.metric_name && !column.verbose_name) {\n      column.verbose_name = column.metric_name;\n    }\n    return <StyledColumnOption column={column} showType />;\n  }\n\n  render() {\n    const {\n      adhocMetric: propsAdhocMetric,\n      savedMetric: propsSavedMetric,\n      columns,\n      savedMetricsOptions,\n      onChange,\n      onClose,\n      onResize,\n      datasourceType,\n      ...popoverProps\n    } = this.props;\n    const { adhocMetric, savedMetric } = this.state;\n    const keywords = sqlKeywords.concat(\n      columns.map(column => ({\n        name: column.column_name,\n        value: column.column_name,\n        score: 50,\n        meta: 'column',\n      })),\n    );\n\n    const columnValue =\n      (adhocMetric.column && adhocMetric.column.column_name) ||\n      adhocMetric.inferSqlExpressionColumn();\n\n    // autofocus on column if there's no value in column; otherwise autofocus on aggregate\n    const columnSelectProps = {\n      placeholder: t('%s column(s)', columns.length),\n      value: columnValue,\n      onChange: this.onColumnChange,\n      allowClear: true,\n      showSearch: true,\n      autoFocus: !columnValue,\n      filterOption: (input, option) =>\n        option.filterBy.toLowerCase().indexOf(input.toLowerCase()) >= 0,\n    };\n\n    const aggregateSelectProps = {\n      placeholder: t('%s aggregates(s)', AGGREGATES_OPTIONS.length),\n      value: adhocMetric.aggregate || adhocMetric.inferSqlExpressionAggregate(),\n      onChange: this.onAggregateChange,\n      allowClear: true,\n      autoFocus: !!columnValue,\n      showSearch: true,\n    };\n\n    const savedSelectProps = {\n      placeholder: t('%s saved metric(s)', savedMetricsOptions?.length ?? 0),\n      value: savedMetric?.verbose_name || savedMetric?.metric_name,\n      onChange: this.onSavedMetricChange,\n      allowClear: true,\n      showSearch: true,\n      autoFocus: true,\n      filterOption: (input, option) =>\n        option.filterBy.toLowerCase().indexOf(input.toLowerCase()) >= 0,\n    };\n\n    if (this.props.datasourceType === 'druid' && aggregateSelectProps.options) {\n      aggregateSelectProps.options = aggregateSelectProps.options.filter(\n        aggregate => aggregate !== 'AVG',\n      );\n    }\n\n    const stateIsValid = adhocMetric.isValid() || savedMetric?.metric_name;\n    const hasUnsavedChanges =\n      !adhocMetric.equals(propsAdhocMetric) ||\n      (!(\n        typeof savedMetric?.metric_name === 'undefined' &&\n        typeof propsSavedMetric?.metric_name === 'undefined'\n      ) &&\n        savedMetric?.metric_name !== propsSavedMetric?.metric_name);\n\n    return (\n      <Form\n        layout=\"vertical\"\n        id=\"metrics-edit-popover\"\n        data-test=\"metrics-edit-popover\"\n        {...popoverProps}\n      >\n        <Tabs\n          id=\"adhoc-metric-edit-tabs\"\n          data-test=\"adhoc-metric-edit-tabs\"\n          defaultActiveKey={this.defaultActiveTabKey}\n          className=\"adhoc-metric-edit-tabs\"\n          style={{ height: this.state.height, width: this.state.width }}\n          onChange={this.onTabChange}\n          allowOverflow\n        >\n          <Tabs.TabPane key={SAVED_TAB_KEY} tab={t('Saved')}>\n            <FormItem label={t('Saved metric')}>\n              <StyledSelect\n                {...savedSelectProps}\n                name=\"select-saved\"\n                getPopupContainer={triggerNode => triggerNode.parentNode}\n              >\n                {Array.isArray(savedMetricsOptions) &&\n                  savedMetricsOptions.map(savedMetric => (\n                    <Select.Option\n                      value={savedMetric.id}\n                      filterBy={\n                        savedMetric.verbose_name || savedMetric.metric_name\n                      }\n                      key={savedMetric.id}\n                    >\n                      <StyledMetricOption metric={savedMetric} showType />\n                    </Select.Option>\n                  ))}\n              </StyledSelect>\n            </FormItem>\n          </Tabs.TabPane>\n          <Tabs.TabPane key={EXPRESSION_TYPES.SIMPLE} tab={t('Simple')}>\n            <FormItem label={t('column')}>\n              <Select\n                {...columnSelectProps}\n                name=\"select-column\"\n                getPopupContainer={triggerNode => triggerNode.parentNode}\n              >\n                {columns.map(column => (\n                  <Select.Option\n                    value={column.id}\n                    filterBy={column.verbose_name || column.column_name}\n                    key={column.id}\n                  >\n                    {this.renderColumnOption(column)}\n                  </Select.Option>\n                ))}\n              </Select>\n            </FormItem>\n            <FormItem label={t('aggregate')}>\n              <Select\n                {...aggregateSelectProps}\n                name=\"select-aggregate\"\n                getPopupContainer={triggerNode => triggerNode.parentNode}\n              >\n                {AGGREGATES_OPTIONS.map(option => (\n                  <Select.Option value={option} key={option}>\n                    {option}\n                  </Select.Option>\n                ))}\n              </Select>\n            </FormItem>\n          </Tabs.TabPane>\n          <Tabs.TabPane\n            key={EXPRESSION_TYPES.SQL}\n            tab={t('Custom SQL')}\n            data-test=\"adhoc-metric-edit-tab#custom\"\n          >\n            {this.props.datasourceType !== 'druid' ? (\n              <SQLEditor\n                data-test=\"sql-editor\"\n                showLoadingForImport\n                ref={this.handleAceEditorRef}\n                keywords={keywords}\n                height={`${this.state.height - 80}px`}\n                onChange={this.onSqlExpressionChange}\n                width=\"100%\"\n                showGutter={false}\n                value={\n                  adhocMetric.sqlExpression || adhocMetric.translateToSql()\n                }\n                editorProps={{ $blockScrolling: true }}\n                enableLiveAutocompletion\n                className=\"filter-sql-editor\"\n                wrapEnabled\n              />\n            ) : (\n              <div className=\"custom-sql-disabled-message\">\n                Custom SQL Metrics are not available on druid datasources\n              </div>\n            )}\n          </Tabs.TabPane>\n        </Tabs>\n        <div>\n          <Button\n            buttonSize=\"small\"\n            onClick={this.onResetStateAndClose}\n            data-test=\"AdhocMetricEdit#cancel\"\n            cta\n          >\n            {t('Close')}\n          </Button>\n          <Button\n            disabled={!stateIsValid}\n            buttonStyle={\n              hasUnsavedChanges && stateIsValid ? 'primary' : 'default'\n            }\n            buttonSize=\"small\"\n            data-test=\"AdhocMetricEdit#save\"\n            onClick={this.onSave}\n            cta\n          >\n            {t('Save')}\n          </Button>\n          <i\n            role=\"button\"\n            aria-label=\"Resize\"\n            tabIndex={0}\n            onMouseDown={this.onDragDown}\n            className=\"fa fa-expand edit-popover-resize text-muted\"\n          />\n        </div>\n      </Form>\n    );\n  }\n}\nAdhocMetricEditPopover.propTypes = propTypes;\nAdhocMetricEditPopover.defaultProps = defaultProps;\n"]},"metadata":{},"sourceType":"module"}