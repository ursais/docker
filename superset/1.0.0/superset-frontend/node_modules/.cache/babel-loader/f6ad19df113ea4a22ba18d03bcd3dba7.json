{"ast":null,"code":"import \"core-js/modules/web.dom-collections.iterator.js\";import _Object$keys from \"@babel/runtime-corejs3/core-js-stable/object/keys\";import _debounce from \"lodash/debounce\";(function () {var enterModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.enterModule : undefined;enterModule && enterModule(module);})();var __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default.signature : function (a) {return a;}; /**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React, { useState, useEffect } from 'react';\nimport Badge from 'src/components/Badge';\nimport { t, styled } from '@superset-ui/core';\nimport { InfoTooltipWithTrigger } from '@superset-ui/chart-controls';\n\nimport ModalTrigger from 'src/components/ModalTrigger';\nimport { ConfigEditor } from 'src/components/AsyncAceEditor';\nimport { FAST_DEBOUNCE } from 'src/constants';\nimport { Tooltip } from 'src/components/Tooltip';import { jsx as ___EmotionJSX } from \"@emotion/react\";\nconst StyledConfigEditor = styled(ConfigEditor)`\n  &.ace_editor {\n    border: 1px solid ${({ theme }) => theme.colors.grayscale.light2};\n  }\n`;\nfunction TemplateParamsEditor({ code = '{}', language, onChange = () => {} }) {\n  const [parsedJSON, setParsedJSON] = useState({});\n  const [isValid, setIsValid] = useState(true);\n  useEffect(() => {\n    try {\n      setParsedJSON(JSON.parse(code));\n      setIsValid(true);\n    }\n    catch {\n      setParsedJSON({});\n      setIsValid(false);\n    }\n  }, [code]);\n  const modalBody = ___EmotionJSX(\"div\", null,\n  ___EmotionJSX(\"p\", null, \"Assign a set of parameters as\",\n\n  ___EmotionJSX(\"code\", null, \"JSON\"), \"below (example:\",\n\n  ___EmotionJSX(\"code\", null, '{\"my_table\": \"foo\"}'), \"), and they become available in your SQL (example:\",\n\n  ___EmotionJSX(\"code\", null, \"SELECT * FROM \", '{{ my_table }}', \" \"), \") by using\\xA0\",\n  ___EmotionJSX(\"a\", { href: \"https://superset.apache.org/sqllab.html#templating-with-jinja\", target: \"_blank\", rel: \"noopener noreferrer\" }, \"Jinja templating\"),\n\n  ' ', \"syntax.\"),\n\n\n  ___EmotionJSX(StyledConfigEditor, { keywords: [], mode: language, minLines: 25, maxLines: 50, onChange: _debounce(onChange, FAST_DEBOUNCE), width: \"100%\", editorProps: { $blockScrolling: true }, enableLiveAutocompletion: true, value: code }));\n\n  const paramCount = parsedJSON ? _Object$keys(parsedJSON).length : 0;\n  return ___EmotionJSX(ModalTrigger, { modalTitle: t('Template parameters'), triggerNode: ___EmotionJSX(Tooltip, { id: \"parameters-tooltip\", placement: \"top\", title: t('Edit template parameters'), trigger: ['hover'] },\n    ___EmotionJSX(\"div\", { role: \"button\" },\n    `${t('Parameters')} `,\n    ___EmotionJSX(Badge, { count: paramCount }),\n    !isValid && ___EmotionJSX(InfoTooltipWithTrigger, { icon: \"exclamation-triangle\", bsStyle: \"danger\", tooltip: t('Invalid JSON'), label: \"invalid-json\" }))),\n\n    modalBody: modalBody });\n}__signature__(TemplateParamsEditor, \"useState{[parsedJSON, setParsedJSON]({})}\\nuseState{[isValid, setIsValid](true)}\\nuseEffect{}\");const _default =\nTemplateParamsEditor;export default _default;;(function () {var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined;if (!reactHotLoader) {return;}reactHotLoader.register(StyledConfigEditor, \"StyledConfigEditor\", \"/app/superset-frontend/src/SqlLab/components/TemplateParamsEditor.tsx\");reactHotLoader.register(TemplateParamsEditor, \"TemplateParamsEditor\", \"/app/superset-frontend/src/SqlLab/components/TemplateParamsEditor.tsx\");reactHotLoader.register(_default, \"default\", \"/app/superset-frontend/src/SqlLab/components/TemplateParamsEditor.tsx\");})();;(function () {var leaveModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.leaveModule : undefined;leaveModule && leaveModule(module);})();","map":{"version":3,"sources":["/app/superset-frontend/src/SqlLab/components/TemplateParamsEditor.tsx"],"names":[],"mappings":"sdAAA;;;;;;;;;;;;;;;;;AAiBG;AACH,OAAO,KAAP,IAAgB,QAAhB,EAA0B,SAA1B,QAA2C,OAA3C;AACA,OAAO,KAAP,MAAkB,sBAAlB;AACA,SAAS,CAAT,EAAY,MAAZ,QAA0B,mBAA1B;AACA,SAAS,sBAAT,QAAuC,6BAAvC;;AAGA,OAAO,YAAP,MAAyB,6BAAzB;AACA,SAAS,YAAT,QAA6B,+BAA7B;AACA,SAAS,aAAT,QAA8B,eAA9B;AACA,SAAS,OAAT,QAAwB,wBAAxB,C;AAEA,MAAM,kBAAkB,GAAG,MAAM,CAAC,YAAD,CAAc;;wBAEvB,CAAC,EAAE,KAAF,EAAD,KAAe,KAAK,CAAC,MAAN,CAAa,SAAb,CAAuB,MAAM;;AAEnE,CAJD;AAMA,SAAS,oBAAT,CAA8B,EAC5B,IAAI,GAAG,IADqB,EAE5B,QAF4B,EAG5B,QAAQ,GAAG,MAAK,CAAG,CAHS,EAA9B,EAQC;AACC,QAAM,CAAC,UAAD,EAAa,aAAb,IAA8B,QAAQ,CAAC,EAAD,CAA5C;AACA,QAAM,CAAC,OAAD,EAAU,UAAV,IAAwB,QAAQ,CAAC,IAAD,CAAtC;AAEA,EAAA,SAAS,CAAC,MAAK;AACb,QAAI;AACF,MAAA,aAAa,CAAC,IAAI,CAAC,KAAL,CAAW,IAAX,CAAD,CAAb;AACA,MAAA,UAAU,CAAC,IAAD,CAAV;AACD;AAAC,UAAM;AACN,MAAA,aAAa,CAAC,EAAD,CAAb;AACA,MAAA,UAAU,CAAC,KAAD,CAAV;AACD;AACF,GARQ,EAQN,CAAC,IAAD,CARM,CAAT;AAUA,QAAM,SAAS,GACb;AACE;;AAEE,qCAFF;;AAIE,8BAAO,qBAAP,CAJF;;AAME,gDAAqB,gBAArB,MANF;AAOE,uBACE,IAAI,EAAC,+DADP,EAEE,MAAM,EAAC,QAFT,EAGE,GAAG,EAAC,qBAHN,uBAPF;;AAaO,KAbP,YADF;;;AAiBE,gBAAC,kBAAD,IACE,QAAQ,EAAE,EADZ,EAEE,IAAI,EAAE,QAFR,EAGE,QAAQ,EAAE,EAHZ,EAIE,QAAQ,EAAE,EAJZ,EAKE,QAAQ,EAAE,UAAS,QAAT,EAAmB,aAAnB,CALZ,EAME,KAAK,EAAC,MANR,EAOE,WAAW,EAAE,EAAE,eAAe,EAAE,IAAnB,EAPf,EAQE,wBAAwB,MAR1B,EASE,KAAK,EAAE,IATT,GAjBF,CADF;;AAgCA,QAAM,UAAU,GAAG,UAAU,GAAG,aAAY,UAAZ,EAAwB,MAA3B,GAAoC,CAAjE;AAEA,SACE,cAAC,YAAD,IACE,UAAU,EAAE,CAAC,CAAC,qBAAD,CADf,EAEE,WAAW,EACT,cAAC,OAAD,IACE,EAAE,EAAC,oBADL,EAEE,SAAS,EAAC,KAFZ,EAGE,KAAK,EAAE,CAAC,CAAC,0BAAD,CAHV,EAIE,OAAO,EAAE,CAAC,OAAD,CAJX;AAME,2BAAK,IAAI,EAAC,QAAV;AACG,OAAG,CAAC,CAAC,YAAD,CAAc,GADrB;AAEE,kBAAC,KAAD,IAAO,KAAK,EAAE,UAAd,GAFF;AAGG,KAAC,OAAD,IACC,cAAC,sBAAD,IACE,IAAI,EAAC,sBADP,EAEE,OAAO,EAAC,QAFV,EAGE,OAAO,EAAE,CAAC,CAAC,cAAD,CAHZ,EAIE,KAAK,EAAC,cAJR,GAJJ,CANF,CAHJ;;AAuBE,IAAA,SAAS,EAAE,SAvBb,GADF;AA2BD,C,cAnFQ,oB;AAqFM,oB,CAAf,wB,iLA3FM,kB,yHAMG,oB","sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React, { useState, useEffect } from 'react';\nimport Badge from 'src/components/Badge';\nimport { t, styled } from '@superset-ui/core';\nimport { InfoTooltipWithTrigger } from '@superset-ui/chart-controls';\nimport { debounce } from 'lodash';\n\nimport ModalTrigger from 'src/components/ModalTrigger';\nimport { ConfigEditor } from 'src/components/AsyncAceEditor';\nimport { FAST_DEBOUNCE } from 'src/constants';\nimport { Tooltip } from 'src/components/Tooltip';\n\nconst StyledConfigEditor = styled(ConfigEditor)`\n  &.ace_editor {\n    border: 1px solid ${({ theme }) => theme.colors.grayscale.light2};\n  }\n`;\n\nfunction TemplateParamsEditor({\n  code = '{}',\n  language,\n  onChange = () => {},\n}: {\n  code: string;\n  language: 'yaml' | 'json';\n  onChange: () => void;\n}) {\n  const [parsedJSON, setParsedJSON] = useState({});\n  const [isValid, setIsValid] = useState(true);\n\n  useEffect(() => {\n    try {\n      setParsedJSON(JSON.parse(code));\n      setIsValid(true);\n    } catch {\n      setParsedJSON({} as any);\n      setIsValid(false);\n    }\n  }, [code]);\n\n  const modalBody = (\n    <div>\n      <p>\n        Assign a set of parameters as\n        <code>JSON</code>\n        below (example:\n        <code>{'{\"my_table\": \"foo\"}'}</code>\n        ), and they become available in your SQL (example:\n        <code>SELECT * FROM {'{{ my_table }}'} </code>) by using&nbsp;\n        <a\n          href=\"https://superset.apache.org/sqllab.html#templating-with-jinja\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Jinja templating\n        </a>{' '}\n        syntax.\n      </p>\n      <StyledConfigEditor\n        keywords={[]}\n        mode={language}\n        minLines={25}\n        maxLines={50}\n        onChange={debounce(onChange, FAST_DEBOUNCE)}\n        width=\"100%\"\n        editorProps={{ $blockScrolling: true }}\n        enableLiveAutocompletion\n        value={code}\n      />\n    </div>\n  );\n\n  const paramCount = parsedJSON ? Object.keys(parsedJSON).length : 0;\n\n  return (\n    <ModalTrigger\n      modalTitle={t('Template parameters')}\n      triggerNode={\n        <Tooltip\n          id=\"parameters-tooltip\"\n          placement=\"top\"\n          title={t('Edit template parameters')}\n          trigger={['hover']}\n        >\n          <div role=\"button\">\n            {`${t('Parameters')} `}\n            <Badge count={paramCount} />\n            {!isValid && (\n              <InfoTooltipWithTrigger\n                icon=\"exclamation-triangle\"\n                bsStyle=\"danger\"\n                tooltip={t('Invalid JSON')}\n                label=\"invalid-json\"\n              />\n            )}\n          </div>\n        </Tooltip>\n      }\n      modalBody={modalBody}\n    />\n  );\n}\n\nexport default TemplateParamsEditor;\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}