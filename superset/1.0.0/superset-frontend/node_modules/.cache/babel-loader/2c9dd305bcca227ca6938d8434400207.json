{"ast":null,"code":"import \"core-js/modules/es.promise.finally.js\";import \"core-js/modules/web.dom-collections.iterator.js\";import _filterInstanceProperty from \"@babel/runtime-corejs3/core-js-stable/instance/filter\";import _reduceInstanceProperty from \"@babel/runtime-corejs3/core-js-stable/instance/reduce\";import _JSON$stringify from \"@babel/runtime-corejs3/core-js-stable/json/stringify\";import _concatInstanceProperty from \"@babel/runtime-corejs3/core-js-stable/instance/concat\";import _findInstanceProperty from \"@babel/runtime-corejs3/core-js-stable/instance/find\";import _Array$isArray from \"@babel/runtime-corejs3/core-js-stable/array/is-array\";import _Object$entries from \"@babel/runtime-corejs3/core-js-stable/object/entries\";import _mapInstanceProperty from \"@babel/runtime-corejs3/core-js-stable/instance/map\";(function () {var enterModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.enterModule : undefined;enterModule && enterModule(module);})();var __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default.signature : function (a) {return a;}; /**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport rison from 'rison';\nimport { useState, useEffect, useCallback } from 'react';\nimport { makeApi, SupersetClient, t } from '@superset-ui/core';\nimport { createErrorHandler, getAlreadyExists, getPasswordsNeeded, hasTerminalValidation } from 'src/views/CRUD/utils';\nimport copyTextToClipboard from 'src/utils/copy';\nimport { getClientErrorObject } from 'src/utils/getClientErrorObject';\nconst parsedErrorMessage = errorMessage => {var _context;\n  if (typeof errorMessage === 'string') {\n    return errorMessage;\n  }\n  return _mapInstanceProperty(_context = _Object$entries(errorMessage)).call(_context,\n  ([key, value]) => {\n    if (_Array$isArray(value)) {\n      return `(${key}) ${value.join(', ')}`;\n    }\n    return `(${key}) ${value}`;\n  }).\n  join('\\n');\n};\nexport function useListViewResource(resource, resourceLabel, // resourceLabel for translations\nhandleErrorMsg, infoEnable = true, defaultCollectionValue = [], baseFilters, // must be memoized\ninitialLoadingState = true) {\n  const [state, setState] = useState({\n    count: 0,\n    collection: defaultCollectionValue,\n    loading: initialLoadingState,\n    lastFetchDataConfig: null,\n    permissions: [],\n    bulkSelectEnabled: false });\n\n  function updateState(update) {\n    setState(currentState => ({ ...currentState, ...update }));\n  }\n  function toggleBulkSelect() {\n    updateState({ bulkSelectEnabled: !state.bulkSelectEnabled });\n  }\n  useEffect(() => {\n    if (!infoEnable)\n    return;\n    SupersetClient.get({\n      endpoint: `/api/v1/${resource}/_info?q=${rison.encode({\n        keys: ['permissions'] })\n      }` }).\n    then(({ json: infoJson = {} }) => {\n      updateState({\n        permissions: infoJson.permissions });\n\n    }, createErrorHandler(errMsg => handleErrorMsg(t('An error occurred while fetching %s info: %s', resourceLabel, errMsg))));\n  }, []);\n  function hasPerm(perm) {var _context2;\n    if (!state.permissions.length) {\n      return false;\n    }\n    return Boolean(_findInstanceProperty(_context2 = state.permissions).call(_context2, p => p === perm));\n  }\n  const fetchData = useCallback(({ pageIndex, pageSize, sortBy, filters: filterValues }) => {var _context3, _context4;\n    // set loading state, cache the last config for refreshing data.\n    updateState({\n      lastFetchDataConfig: {\n        filters: filterValues,\n        pageIndex,\n        pageSize,\n        sortBy },\n\n      loading: true });\n\n    const filterExps = _mapInstanceProperty(_context3 = _concatInstanceProperty(_context4 = baseFilters || []).call(_context4,\n    filterValues)).call(_context3,\n    ({ id, operator: opr, value }) => ({\n      col: id,\n      opr,\n      value }));\n\n    const queryParams = rison.encode({\n      order_column: sortBy[0].id,\n      order_direction: sortBy[0].desc ? 'desc' : 'asc',\n      page: pageIndex,\n      page_size: pageSize,\n      ...(filterExps.length ? { filters: filterExps } : {}) });\n\n    return SupersetClient.get({\n      endpoint: `/api/v1/${resource}/?q=${queryParams}` }).\n\n    then(({ json = {} }) => {\n      updateState({\n        collection: json.result,\n        count: json.count,\n        lastFetched: new Date().toISOString() });\n\n    }, createErrorHandler(errMsg => handleErrorMsg(t('An error occurred while fetching %ss: %s', resourceLabel, errMsg)))).\n    finally(() => {\n      updateState({ loading: false });\n    });\n  }, [baseFilters]);\n  return {\n    state: {\n      loading: state.loading,\n      resourceCount: state.count,\n      resourceCollection: state.collection,\n      bulkSelectEnabled: state.bulkSelectEnabled,\n      lastFetched: state.lastFetched },\n\n    setResourceCollection: update => updateState({\n      collection: update }),\n\n    hasPerm,\n    fetchData,\n    toggleBulkSelect,\n    refreshData: provideConfig => {\n      if (state.lastFetchDataConfig) {\n        return fetchData(state.lastFetchDataConfig);\n      }\n      if (provideConfig) {\n        return fetchData(provideConfig);\n      }\n      return null;\n    } };\n\n}__signature__(useListViewResource, \"useState{[state, setState]({\\n        count: 0,\\n        collection: defaultCollectionValue,\\n        loading: initialLoadingState,\\n        lastFetchDataConfig: null,\\n        permissions: [],\\n        bulkSelectEnabled: false,\\n    })}\\nuseEffect{}\\nuseCallback{fetchData}\");\nexport function useSingleViewResource(resourceName, resourceLabel, // resourceLabel for translations\nhandleErrorMsg) {\n  const [state, setState] = useState({\n    loading: false,\n    resource: null,\n    error: null });\n\n  function updateState(update) {\n    setState(currentState => ({ ...currentState, ...update }));\n  }\n  const fetchResource = useCallback(resourceID => {\n    // Set loading state\n    updateState({\n      loading: true });\n\n    return SupersetClient.get({\n      endpoint: `/api/v1/${resourceName}/${resourceID}` }).\n\n    then(({ json = {} }) => {\n      updateState({\n        resource: json.result,\n        error: null });\n\n      return json.result;\n    }, createErrorHandler(errMsg => {\n      handleErrorMsg(t('An error occurred while fetching %ss: %s', resourceLabel, parsedErrorMessage(errMsg)));\n      updateState({\n        error: errMsg });\n\n    })).\n    finally(() => {\n      updateState({ loading: false });\n    });\n  }, [handleErrorMsg, resourceName, resourceLabel]);\n  const createResource = useCallback(resource => {\n    // Set loading state\n    updateState({\n      loading: true });\n\n    return SupersetClient.post({\n      endpoint: `/api/v1/${resourceName}/`,\n      body: _JSON$stringify(resource),\n      headers: { 'Content-Type': 'application/json' } }).\n\n    then(({ json = {} }) => {\n      updateState({\n        resource: { id: json.id, ...json.result },\n        error: null });\n\n      return json.id;\n    }, createErrorHandler(errMsg => {\n      handleErrorMsg(t('An error occurred while creating %ss: %s', resourceLabel, parsedErrorMessage(errMsg)));\n      updateState({\n        error: errMsg });\n\n    })).\n    finally(() => {\n      updateState({ loading: false });\n    });\n  }, [handleErrorMsg, resourceName, resourceLabel]);\n  const updateResource = useCallback((resourceID, resource) => {\n    // Set loading state\n    updateState({\n      loading: true });\n\n    return SupersetClient.put({\n      endpoint: `/api/v1/${resourceName}/${resourceID}`,\n      body: _JSON$stringify(resource),\n      headers: { 'Content-Type': 'application/json' } }).\n\n    then(({ json = {} }) => {\n      updateState({\n        resource: json.result,\n        error: null });\n\n      return json.result;\n    }, createErrorHandler(errMsg => {\n      handleErrorMsg(t('An error occurred while fetching %ss: %s', resourceLabel, _JSON$stringify(errMsg)));\n      updateState({\n        error: errMsg });\n\n      return errMsg;\n    })).\n    finally(() => {\n      updateState({ loading: false });\n    });\n  }, [handleErrorMsg, resourceName, resourceLabel]);\n  const clearError = () => updateState({\n    error: null });\n\n  return {\n    state,\n    setResource: update => updateState({\n      resource: update }),\n\n    fetchResource,\n    createResource,\n    updateResource,\n    clearError };\n\n}__signature__(useSingleViewResource, \"useState{[state, setState]({\\n        loading: false,\\n        resource: null,\\n        error: null,\\n    })}\\nuseCallback{fetchResource}\\nuseCallback{createResource}\\nuseCallback{updateResource}\");\nexport function useImportResource(resourceName, resourceLabel, // resourceLabel for translations\nhandleErrorMsg) {\n  const [state, setState] = useState({\n    loading: false,\n    passwordsNeeded: [],\n    alreadyExists: [] });\n\n  function updateState(update) {\n    setState(currentState => ({ ...currentState, ...update }));\n  }\n  const importResource = useCallback((bundle, databasePasswords = {}, overwrite = false) => {\n    // Set loading state\n    updateState({\n      loading: true });\n\n    const formData = new FormData();\n    formData.append('formData', bundle);\n    /* The import bundle never contains database passwords; if required\n     * they should be provided by the user during import.\n     */\n    if (databasePasswords) {\n      formData.append('passwords', _JSON$stringify(databasePasswords));\n    }\n    /* If the imported model already exists the user needs to confirm\n     * that they want to overwrite it.\n     */\n    if (overwrite) {\n      formData.append('overwrite', 'true');\n    }\n    return SupersetClient.post({\n      endpoint: `/api/v1/${resourceName}/import/`,\n      body: formData }).\n\n    then(() => true).\n    catch(response => getClientErrorObject(response).then(error => {\n      if (!error.errors) {\n        handleErrorMsg(t('An error occurred while importing %s: %s', resourceLabel, error.message || error.error));\n        return false;\n      }\n      if (hasTerminalValidation(error.errors)) {var _context5;\n        handleErrorMsg(t('An error occurred while importing %s: %s', resourceLabel, _mapInstanceProperty(_context5 = error.errors).call(_context5, payload => payload.message).join('\\n')));\n      } else\n      {\n        updateState({\n          passwordsNeeded: getPasswordsNeeded(error.errors),\n          alreadyExists: getAlreadyExists(error.errors) });\n\n      }\n      return false;\n    })).\n    finally(() => {\n      updateState({ loading: false });\n    });\n  }, []);\n  return { state, importResource };\n}__signature__(useImportResource, \"useState{[state, setState]({\\n        loading: false,\\n        passwordsNeeded: [],\\n        alreadyExists: [],\\n    })}\\nuseCallback{importResource}\");\nvar FavStarClassName;\n(function (FavStarClassName) {\n  FavStarClassName[\"CHART\"] = \"slice\";\n  FavStarClassName[\"DASHBOARD\"] = \"Dashboard\";\n})(FavStarClassName || (FavStarClassName = {}));\nconst favoriteApis = {\n  chart: makeApi({\n    requestType: 'rison',\n    method: 'GET',\n    endpoint: '/api/v1/chart/favorite_status/' }),\n\n  dashboard: makeApi({\n    requestType: 'rison',\n    method: 'GET',\n    endpoint: '/api/v1/dashboard/favorite_status/' }) };\n\n\nexport function useFavoriteStatus(type, ids, handleErrorMsg) {\n  const [favoriteStatus, setFavoriteStatus] = useState({});\n  const updateFavoriteStatus = update => setFavoriteStatus(currentState => ({ ...currentState, ...update }));\n  useEffect(() => {\n    if (!ids.length) {\n      return;\n    }\n    favoriteApis[type](ids).then(({ result }) => {\n      const update = _reduceInstanceProperty(result).call(result, (acc, element) => {\n        acc[element.id] = element.value;\n        return acc;\n      }, {});\n      updateFavoriteStatus(update);\n    }, createErrorHandler(errMsg => handleErrorMsg(t('There was an error fetching the favorite status: %s', errMsg))));\n  }, [ids, type, handleErrorMsg]);\n  const saveFaveStar = useCallback((id, isStarred) => {\n    const urlSuffix = isStarred ? 'unselect' : 'select';\n    SupersetClient.get({\n      endpoint: `/superset/favstar/${type === 'chart' ? FavStarClassName.CHART : FavStarClassName.DASHBOARD}/${id}/${urlSuffix}/` }).\n    then(({ json }) => {\n      updateFavoriteStatus({\n        [id]: (json == null ? void 0 : json.count) > 0 });\n\n    }, createErrorHandler(errMsg => handleErrorMsg(t('There was an error saving the favorite status: %s', errMsg))));\n  }, [type]);\n  return [saveFaveStar, favoriteStatus];\n}__signature__(useFavoriteStatus, \"useState{[favoriteStatus, setFavoriteStatus]({})}\\nuseEffect{}\\nuseCallback{saveFaveStar}\");\nexport const useChartEditModal = (setCharts, charts) => {\n  const [sliceCurrentlyEditing, setSliceCurrentlyEditing] = useState(null);\n  function openChartEditModal(chart) {\n    setSliceCurrentlyEditing({\n      slice_id: chart.id,\n      slice_name: chart.slice_name,\n      description: chart.description,\n      cache_timeout: chart.cache_timeout });\n\n  }\n  function closeChartEditModal() {\n    setSliceCurrentlyEditing(null);\n  }\n  function handleChartUpdated(edits) {\n    // update the chart in our state with the edited info\n    const newCharts = _mapInstanceProperty(charts).call(charts, chart => chart.id === edits.id ? { ...chart, ...edits } : chart);\n    setCharts(newCharts);\n  }\n  return {\n    sliceCurrentlyEditing,\n    handleChartUpdated,\n    openChartEditModal,\n    closeChartEditModal };\n\n};__signature__(useChartEditModal, \"useState{[sliceCurrentlyEditing, setSliceCurrentlyEditing,](null)}\");\nexport const copyQueryLink = (id, addDangerToast, addSuccessToast) => {\n  copyTextToClipboard(`${window.location.origin}/superset/sqllab?savedQueryId=${id}`).\n  then(() => {\n    addSuccessToast(t('Link Copied!'));\n  }).\n  catch(() => {\n    addDangerToast(t('Sorry, your browser does not support copying.'));\n  });\n};\nexport const testDatabaseConnection = (connection, handleErrorMsg, addSuccessToast) => {\n  SupersetClient.post({\n    endpoint: 'api/v1/database/test_connection',\n    body: _JSON$stringify(connection),\n    headers: { 'Content-Type': 'application/json' } }).\n  then(() => {\n    addSuccessToast(t('Connection looks good!'));\n  }, createErrorHandler(errMsg => {\n    handleErrorMsg(t(`${t('ERROR: ')}${parsedErrorMessage(errMsg)}`));\n  }));\n};\nexport function useAvailableDatabases() {\n  const [availableDbs, setAvailableDbs] = useState(null);\n  const getAvailable = useCallback(() => {\n    SupersetClient.get({\n      endpoint: `/api/v1/database/available` }).\n    then(({ json }) => {\n      setAvailableDbs(json);\n    });\n  }, [setAvailableDbs]);\n  return [availableDbs, getAvailable];\n}__signature__(useAvailableDatabases, \"useState{[availableDbs, setAvailableDbs](null)}\\nuseCallback{getAvailable}\");\nexport function useDatabaseValidation() {\n  const [validationErrors, setValidationErrors] = useState(null);\n  const getValidation = useCallback(database => {\n    SupersetClient.post({\n      endpoint: '/api/v1/database/validate_parameters',\n      body: _JSON$stringify(database),\n      headers: { 'Content-Type': 'application/json' } }).\n\n    then(() => {\n      setValidationErrors(null);\n    }).\n    catch(e => {\n      if (typeof e.json === 'function') {\n        e.json().then(({ errors = [] }) => {var _context6;\n          const parsedErrors = _reduceInstanceProperty(_context6 = _filterInstanceProperty(errors).call(errors,\n          error => error.error_type !== 'CONNECTION_MISSING_PARAMETERS_ERROR')).call(_context6,\n          (obj, { extra, message }) => {\n            // if extra.invalid doesn't exist then the\n            // error can't be mapped to a parameter\n            // so leave it alone\n            if (extra.invalid) {\n              return { ...obj, [extra.invalid[0]]: message };\n            }\n            return obj;\n          }, {});\n          setValidationErrors(parsedErrors);\n        });\n      } else\n      {\n        // eslint-disable-next-line no-console\n        console.error(e);\n      }\n    });\n  }, [setValidationErrors]);\n  return [validationErrors, getValidation];\n}__signature__(useDatabaseValidation, \"useState{[validationErrors, setValidationErrors](null)}\\nuseCallback{getValidation}\");;(function () {var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined;if (!reactHotLoader) {return;}reactHotLoader.register(parsedErrorMessage, \"parsedErrorMessage\", \"/app/superset-frontend/src/views/CRUD/hooks.ts\");reactHotLoader.register(useListViewResource, \"useListViewResource\", \"/app/superset-frontend/src/views/CRUD/hooks.ts\");reactHotLoader.register(useSingleViewResource, \"useSingleViewResource\", \"/app/superset-frontend/src/views/CRUD/hooks.ts\");reactHotLoader.register(useImportResource, \"useImportResource\", \"/app/superset-frontend/src/views/CRUD/hooks.ts\");reactHotLoader.register(FavStarClassName, \"FavStarClassName\", \"/app/superset-frontend/src/views/CRUD/hooks.ts\");reactHotLoader.register(favoriteApis, \"favoriteApis\", \"/app/superset-frontend/src/views/CRUD/hooks.ts\");reactHotLoader.register(useFavoriteStatus, \"useFavoriteStatus\", \"/app/superset-frontend/src/views/CRUD/hooks.ts\");reactHotLoader.register(useChartEditModal, \"useChartEditModal\", \"/app/superset-frontend/src/views/CRUD/hooks.ts\");reactHotLoader.register(copyQueryLink, \"copyQueryLink\", \"/app/superset-frontend/src/views/CRUD/hooks.ts\");reactHotLoader.register(testDatabaseConnection, \"testDatabaseConnection\", \"/app/superset-frontend/src/views/CRUD/hooks.ts\");reactHotLoader.register(useAvailableDatabases, \"useAvailableDatabases\", \"/app/superset-frontend/src/views/CRUD/hooks.ts\");reactHotLoader.register(useDatabaseValidation, \"useDatabaseValidation\", \"/app/superset-frontend/src/views/CRUD/hooks.ts\");})();;(function () {var leaveModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.leaveModule : undefined;leaveModule && leaveModule(module);})();","map":{"version":3,"sources":["/app/superset-frontend/src/views/CRUD/hooks.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport rison from 'rison';\nimport { useState, useEffect, useCallback } from 'react';\nimport { makeApi, SupersetClient, t, JsonObject } from '@superset-ui/core';\n\nimport {\n  createErrorHandler,\n  getAlreadyExists,\n  getPasswordsNeeded,\n  hasTerminalValidation,\n} from 'src/views/CRUD/utils';\nimport { FetchDataConfig } from 'src/components/ListView';\nimport { FilterValue } from 'src/components/ListView/types';\nimport Chart, { Slice } from 'src/types/Chart';\nimport copyTextToClipboard from 'src/utils/copy';\nimport { getClientErrorObject } from 'src/utils/getClientErrorObject';\nimport { FavoriteStatus, ImportResourceName, DatabaseObject } from './types';\n\ninterface ListViewResourceState<D extends object = any> {\n  loading: boolean;\n  collection: D[];\n  count: number;\n  permissions: string[];\n  lastFetchDataConfig: FetchDataConfig | null;\n  bulkSelectEnabled: boolean;\n  lastFetched?: string;\n}\n\nconst parsedErrorMessage = (\n  errorMessage: Record<string, string[] | string> | string,\n) => {\n  if (typeof errorMessage === 'string') {\n    return errorMessage;\n  }\n  return Object.entries(errorMessage)\n    .map(([key, value]) => {\n      if (Array.isArray(value)) {\n        return `(${key}) ${value.join(', ')}`;\n      }\n      return `(${key}) ${value}`;\n    })\n    .join('\\n');\n};\n\nexport function useListViewResource<D extends object = any>(\n  resource: string,\n  resourceLabel: string, // resourceLabel for translations\n  handleErrorMsg: (errorMsg: string) => void,\n  infoEnable = true,\n  defaultCollectionValue: D[] = [],\n  baseFilters?: FilterValue[], // must be memoized\n  initialLoadingState = true,\n) {\n  const [state, setState] = useState<ListViewResourceState<D>>({\n    count: 0,\n    collection: defaultCollectionValue,\n    loading: initialLoadingState,\n    lastFetchDataConfig: null,\n    permissions: [],\n    bulkSelectEnabled: false,\n  });\n\n  function updateState(update: Partial<ListViewResourceState<D>>) {\n    setState(currentState => ({ ...currentState, ...update }));\n  }\n\n  function toggleBulkSelect() {\n    updateState({ bulkSelectEnabled: !state.bulkSelectEnabled });\n  }\n\n  useEffect(() => {\n    if (!infoEnable) return;\n    SupersetClient.get({\n      endpoint: `/api/v1/${resource}/_info?q=${rison.encode({\n        keys: ['permissions'],\n      })}`,\n    }).then(\n      ({ json: infoJson = {} }) => {\n        updateState({\n          permissions: infoJson.permissions,\n        });\n      },\n      createErrorHandler(errMsg =>\n        handleErrorMsg(\n          t(\n            'An error occurred while fetching %s info: %s',\n            resourceLabel,\n            errMsg,\n          ),\n        ),\n      ),\n    );\n  }, []);\n\n  function hasPerm(perm: string) {\n    if (!state.permissions.length) {\n      return false;\n    }\n\n    return Boolean(state.permissions.find(p => p === perm));\n  }\n\n  const fetchData = useCallback(\n    ({\n      pageIndex,\n      pageSize,\n      sortBy,\n      filters: filterValues,\n    }: FetchDataConfig) => {\n      // set loading state, cache the last config for refreshing data.\n      updateState({\n        lastFetchDataConfig: {\n          filters: filterValues,\n          pageIndex,\n          pageSize,\n          sortBy,\n        },\n        loading: true,\n      });\n\n      const filterExps = (baseFilters || [])\n        .concat(filterValues)\n        .map(({ id, operator: opr, value }) => ({\n          col: id,\n          opr,\n          value,\n        }));\n\n      const queryParams = rison.encode({\n        order_column: sortBy[0].id,\n        order_direction: sortBy[0].desc ? 'desc' : 'asc',\n        page: pageIndex,\n        page_size: pageSize,\n        ...(filterExps.length ? { filters: filterExps } : {}),\n      });\n\n      return SupersetClient.get({\n        endpoint: `/api/v1/${resource}/?q=${queryParams}`,\n      })\n        .then(\n          ({ json = {} }) => {\n            updateState({\n              collection: json.result,\n              count: json.count,\n              lastFetched: new Date().toISOString(),\n            });\n          },\n          createErrorHandler(errMsg =>\n            handleErrorMsg(\n              t(\n                'An error occurred while fetching %ss: %s',\n                resourceLabel,\n                errMsg,\n              ),\n            ),\n          ),\n        )\n        .finally(() => {\n          updateState({ loading: false });\n        });\n    },\n    [baseFilters],\n  );\n\n  return {\n    state: {\n      loading: state.loading,\n      resourceCount: state.count,\n      resourceCollection: state.collection,\n      bulkSelectEnabled: state.bulkSelectEnabled,\n      lastFetched: state.lastFetched,\n    },\n    setResourceCollection: (update: D[]) =>\n      updateState({\n        collection: update,\n      }),\n    hasPerm,\n    fetchData,\n    toggleBulkSelect,\n    refreshData: (provideConfig?: FetchDataConfig) => {\n      if (state.lastFetchDataConfig) {\n        return fetchData(state.lastFetchDataConfig);\n      }\n      if (provideConfig) {\n        return fetchData(provideConfig);\n      }\n      return null;\n    },\n  };\n}\n\n// In the same vein as above, a hook for viewing a single instance of a resource (given id)\ninterface SingleViewResourceState<D extends object = any> {\n  loading: boolean;\n  resource: D | null;\n  error: string | Record<string, string[] | string> | null;\n}\n\nexport function useSingleViewResource<D extends object = any>(\n  resourceName: string,\n  resourceLabel: string, // resourceLabel for translations\n  handleErrorMsg: (errorMsg: string) => void,\n) {\n  const [state, setState] = useState<SingleViewResourceState<D>>({\n    loading: false,\n    resource: null,\n    error: null,\n  });\n\n  function updateState(update: Partial<SingleViewResourceState<D>>) {\n    setState(currentState => ({ ...currentState, ...update }));\n  }\n\n  const fetchResource = useCallback(\n    (resourceID: number) => {\n      // Set loading state\n      updateState({\n        loading: true,\n      });\n\n      return SupersetClient.get({\n        endpoint: `/api/v1/${resourceName}/${resourceID}`,\n      })\n        .then(\n          ({ json = {} }) => {\n            updateState({\n              resource: json.result,\n              error: null,\n            });\n            return json.result;\n          },\n          createErrorHandler((errMsg: Record<string, string[] | string>) => {\n            handleErrorMsg(\n              t(\n                'An error occurred while fetching %ss: %s',\n                resourceLabel,\n                parsedErrorMessage(errMsg),\n              ),\n            );\n\n            updateState({\n              error: errMsg,\n            });\n          }),\n        )\n        .finally(() => {\n          updateState({ loading: false });\n        });\n    },\n    [handleErrorMsg, resourceName, resourceLabel],\n  );\n\n  const createResource = useCallback(\n    (resource: D) => {\n      // Set loading state\n      updateState({\n        loading: true,\n      });\n\n      return SupersetClient.post({\n        endpoint: `/api/v1/${resourceName}/`,\n        body: JSON.stringify(resource),\n        headers: { 'Content-Type': 'application/json' },\n      })\n        .then(\n          ({ json = {} }) => {\n            updateState({\n              resource: { id: json.id, ...json.result },\n              error: null,\n            });\n            return json.id;\n          },\n          createErrorHandler((errMsg: Record<string, string[] | string>) => {\n            handleErrorMsg(\n              t(\n                'An error occurred while creating %ss: %s',\n                resourceLabel,\n                parsedErrorMessage(errMsg),\n              ),\n            );\n\n            updateState({\n              error: errMsg,\n            });\n          }),\n        )\n        .finally(() => {\n          updateState({ loading: false });\n        });\n    },\n    [handleErrorMsg, resourceName, resourceLabel],\n  );\n\n  const updateResource = useCallback(\n    (resourceID: number, resource: D) => {\n      // Set loading state\n      updateState({\n        loading: true,\n      });\n\n      return SupersetClient.put({\n        endpoint: `/api/v1/${resourceName}/${resourceID}`,\n        body: JSON.stringify(resource),\n        headers: { 'Content-Type': 'application/json' },\n      })\n        .then(\n          ({ json = {} }) => {\n            updateState({\n              resource: json.result,\n              error: null,\n            });\n            return json.result;\n          },\n          createErrorHandler(errMsg => {\n            handleErrorMsg(\n              t(\n                'An error occurred while fetching %ss: %s',\n                resourceLabel,\n                JSON.stringify(errMsg),\n              ),\n            );\n\n            updateState({\n              error: errMsg,\n            });\n\n            return errMsg;\n          }),\n        )\n        .finally(() => {\n          updateState({ loading: false });\n        });\n    },\n    [handleErrorMsg, resourceName, resourceLabel],\n  );\n  const clearError = () =>\n    updateState({\n      error: null,\n    });\n\n  return {\n    state,\n    setResource: (update: D) =>\n      updateState({\n        resource: update,\n      }),\n    fetchResource,\n    createResource,\n    updateResource,\n    clearError,\n  };\n}\n\ninterface ImportResourceState {\n  loading: boolean;\n  passwordsNeeded: string[];\n  alreadyExists: string[];\n}\n\nexport function useImportResource(\n  resourceName: ImportResourceName,\n  resourceLabel: string, // resourceLabel for translations\n  handleErrorMsg: (errorMsg: string) => void,\n) {\n  const [state, setState] = useState<ImportResourceState>({\n    loading: false,\n    passwordsNeeded: [],\n    alreadyExists: [],\n  });\n\n  function updateState(update: Partial<ImportResourceState>) {\n    setState(currentState => ({ ...currentState, ...update }));\n  }\n\n  const importResource = useCallback(\n    (\n      bundle: File,\n      databasePasswords: Record<string, string> = {},\n      overwrite = false,\n    ) => {\n      // Set loading state\n      updateState({\n        loading: true,\n      });\n\n      const formData = new FormData();\n      formData.append('formData', bundle);\n\n      /* The import bundle never contains database passwords; if required\n       * they should be provided by the user during import.\n       */\n      if (databasePasswords) {\n        formData.append('passwords', JSON.stringify(databasePasswords));\n      }\n      /* If the imported model already exists the user needs to confirm\n       * that they want to overwrite it.\n       */\n      if (overwrite) {\n        formData.append('overwrite', 'true');\n      }\n\n      return SupersetClient.post({\n        endpoint: `/api/v1/${resourceName}/import/`,\n        body: formData,\n      })\n        .then(() => true)\n        .catch(response =>\n          getClientErrorObject(response).then(error => {\n            if (!error.errors) {\n              handleErrorMsg(\n                t(\n                  'An error occurred while importing %s: %s',\n                  resourceLabel,\n                  error.message || error.error,\n                ),\n              );\n              return false;\n            }\n            if (hasTerminalValidation(error.errors)) {\n              handleErrorMsg(\n                t(\n                  'An error occurred while importing %s: %s',\n                  resourceLabel,\n                  error.errors.map(payload => payload.message).join('\\n'),\n                ),\n              );\n            } else {\n              updateState({\n                passwordsNeeded: getPasswordsNeeded(error.errors),\n                alreadyExists: getAlreadyExists(error.errors),\n              });\n            }\n            return false;\n          }),\n        )\n        .finally(() => {\n          updateState({ loading: false });\n        });\n    },\n    [],\n  );\n\n  return { state, importResource };\n}\n\nenum FavStarClassName {\n  CHART = 'slice',\n  DASHBOARD = 'Dashboard',\n}\n\ntype FavoriteStatusResponse = {\n  result: Array<{\n    id: string;\n    value: boolean;\n  }>;\n};\n\nconst favoriteApis = {\n  chart: makeApi<Array<string | number>, FavoriteStatusResponse>({\n    requestType: 'rison',\n    method: 'GET',\n    endpoint: '/api/v1/chart/favorite_status/',\n  }),\n  dashboard: makeApi<Array<string | number>, FavoriteStatusResponse>({\n    requestType: 'rison',\n    method: 'GET',\n    endpoint: '/api/v1/dashboard/favorite_status/',\n  }),\n};\n\nexport function useFavoriteStatus(\n  type: 'chart' | 'dashboard',\n  ids: Array<string | number>,\n  handleErrorMsg: (message: string) => void,\n) {\n  const [favoriteStatus, setFavoriteStatus] = useState<FavoriteStatus>({});\n\n  const updateFavoriteStatus = (update: FavoriteStatus) =>\n    setFavoriteStatus(currentState => ({ ...currentState, ...update }));\n\n  useEffect(() => {\n    if (!ids.length) {\n      return;\n    }\n    favoriteApis[type](ids).then(\n      ({ result }) => {\n        const update = result.reduce((acc, element) => {\n          acc[element.id] = element.value;\n          return acc;\n        }, {});\n        updateFavoriteStatus(update);\n      },\n      createErrorHandler(errMsg =>\n        handleErrorMsg(\n          t('There was an error fetching the favorite status: %s', errMsg),\n        ),\n      ),\n    );\n  }, [ids, type, handleErrorMsg]);\n\n  const saveFaveStar = useCallback(\n    (id: number, isStarred: boolean) => {\n      const urlSuffix = isStarred ? 'unselect' : 'select';\n      SupersetClient.get({\n        endpoint: `/superset/favstar/${\n          type === 'chart' ? FavStarClassName.CHART : FavStarClassName.DASHBOARD\n        }/${id}/${urlSuffix}/`,\n      }).then(\n        ({ json }) => {\n          updateFavoriteStatus({\n            [id]: (json as { count: number })?.count > 0,\n          });\n        },\n        createErrorHandler(errMsg =>\n          handleErrorMsg(\n            t('There was an error saving the favorite status: %s', errMsg),\n          ),\n        ),\n      );\n    },\n    [type],\n  );\n\n  return [saveFaveStar, favoriteStatus] as const;\n}\n\nexport const useChartEditModal = (\n  setCharts: (charts: Array<Chart>) => void,\n  charts: Array<Chart>,\n) => {\n  const [\n    sliceCurrentlyEditing,\n    setSliceCurrentlyEditing,\n  ] = useState<Slice | null>(null);\n\n  function openChartEditModal(chart: Chart) {\n    setSliceCurrentlyEditing({\n      slice_id: chart.id,\n      slice_name: chart.slice_name,\n      description: chart.description,\n      cache_timeout: chart.cache_timeout,\n    });\n  }\n\n  function closeChartEditModal() {\n    setSliceCurrentlyEditing(null);\n  }\n\n  function handleChartUpdated(edits: Chart) {\n    // update the chart in our state with the edited info\n    const newCharts = charts.map((chart: Chart) =>\n      chart.id === edits.id ? { ...chart, ...edits } : chart,\n    );\n    setCharts(newCharts);\n  }\n\n  return {\n    sliceCurrentlyEditing,\n    handleChartUpdated,\n    openChartEditModal,\n    closeChartEditModal,\n  };\n};\n\nexport const copyQueryLink = (\n  id: number,\n  addDangerToast: (arg0: string) => void,\n  addSuccessToast: (arg0: string) => void,\n) => {\n  copyTextToClipboard(\n    `${window.location.origin}/superset/sqllab?savedQueryId=${id}`,\n  )\n    .then(() => {\n      addSuccessToast(t('Link Copied!'));\n    })\n    .catch(() => {\n      addDangerToast(t('Sorry, your browser does not support copying.'));\n    });\n};\n\nexport const testDatabaseConnection = (\n  connection: DatabaseObject,\n  handleErrorMsg: (errorMsg: string) => void,\n  addSuccessToast: (arg0: string) => void,\n) => {\n  SupersetClient.post({\n    endpoint: 'api/v1/database/test_connection',\n    body: JSON.stringify(connection),\n    headers: { 'Content-Type': 'application/json' },\n  }).then(\n    () => {\n      addSuccessToast(t('Connection looks good!'));\n    },\n    createErrorHandler((errMsg: Record<string, string[] | string> | string) => {\n      handleErrorMsg(t(`${t('ERROR: ')}${parsedErrorMessage(errMsg)}`));\n    }),\n  );\n};\n\nexport function useAvailableDatabases() {\n  const [availableDbs, setAvailableDbs] = useState<JsonObject | null>(null);\n\n  const getAvailable = useCallback(() => {\n    SupersetClient.get({\n      endpoint: `/api/v1/database/available`,\n    }).then(({ json }) => {\n      setAvailableDbs(json);\n    });\n  }, [setAvailableDbs]);\n\n  return [availableDbs, getAvailable] as const;\n}\n\nexport function useDatabaseValidation() {\n  const [validationErrors, setValidationErrors] = useState<JsonObject | null>(\n    null,\n  );\n  const getValidation = useCallback(\n    (database: Partial<DatabaseObject> | null) => {\n      SupersetClient.post({\n        endpoint: '/api/v1/database/validate_parameters',\n        body: JSON.stringify(database),\n        headers: { 'Content-Type': 'application/json' },\n      })\n        .then(() => {\n          setValidationErrors(null);\n        })\n        .catch(e => {\n          if (typeof e.json === 'function') {\n            e.json().then(({ errors = [] }: JsonObject) => {\n              const parsedErrors = errors\n                .filter(\n                  (error: { error_type: string }) =>\n                    error.error_type !== 'CONNECTION_MISSING_PARAMETERS_ERROR',\n                )\n                .reduce(\n                  (\n                    obj: {},\n                    {\n                      extra,\n                      message,\n                    }: {\n                      extra: { invalid?: string[] };\n                      message: string;\n                    },\n                  ) => {\n                    // if extra.invalid doesn't exist then the\n                    // error can't be mapped to a parameter\n                    // so leave it alone\n                    if (extra.invalid) {\n                      return { ...obj, [extra.invalid[0]]: message };\n                    }\n                    return obj;\n                  },\n                  {},\n                );\n              setValidationErrors(parsedErrors);\n            });\n          } else {\n            // eslint-disable-next-line no-console\n            console.error(e);\n          }\n        });\n    },\n    [setValidationErrors],\n  );\n\n  return [validationErrors, getValidation] as const;\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}