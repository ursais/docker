{"ast":null,"code":"import _forEachInstanceProperty from \"@babel/runtime-corejs3/core-js-stable/instance/for-each\";(function () {var enterModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.enterModule : undefined;enterModule && enterModule(module);})();var __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default.signature : function (a) {return a;}; /**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport memoize from 'lodash/memoize';\nimport { getChartControlPanelRegistry } from '@superset-ui/core';\nimport { controls } from '../explore/controls';\n\nconst memoizedControls = memoize((vizType, controlPanel) => {var _context;\n  const controlsMap = {};\n  _forEachInstanceProperty(_context = (controlPanel == null ? void 0 : controlPanel.controlPanelSections) || []).call(_context, section => {var _context2;\n    _forEachInstanceProperty(_context2 = section.controlSetRows).call(_context2, row => {\n      _forEachInstanceProperty(row).call(row, control => {\n        if (!control) return;\n        if (typeof control === 'string') {\n          // For now, we have to look in controls.jsx to get the config for some controls.\n          // Once everything is migrated out, delete this if statement.\n          controlsMap[control] = controls[control];\n        } else if (control.name && control.config) {\n          // condition needed because there are elements, e.g. <hr /> in some control configs (I'm looking at you, FilterBox!)\n          controlsMap[control.name] = control.config;\n        }\n      });\n    });\n  });\n  return controlsMap;\n});\n\nconst getControlsForVizType = vizType => {\n  const controlPanel = getChartControlPanelRegistry().get(vizType);\n  return memoizedControls(vizType, controlPanel);\n};const _default =\n\ngetControlsForVizType;export default _default;;(function () {var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined;if (!reactHotLoader) {return;}reactHotLoader.register(memoizedControls, \"memoizedControls\", \"/app/superset-frontend/src/utils/getControlsForVizType.js\");reactHotLoader.register(getControlsForVizType, \"getControlsForVizType\", \"/app/superset-frontend/src/utils/getControlsForVizType.js\");reactHotLoader.register(_default, \"default\", \"/app/superset-frontend/src/utils/getControlsForVizType.js\");})();;(function () {var leaveModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.leaveModule : undefined;leaveModule && leaveModule(module);})();","map":{"version":3,"sources":["/app/superset-frontend/src/utils/getControlsForVizType.js"],"names":["memoize","getChartControlPanelRegistry","controls","memoizedControls","vizType","controlPanel","controlsMap","controlPanelSections","section","controlSetRows","row","control","name","config","getControlsForVizType","get"],"mappings":"uYAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAOA,OAAP,MAAoB,gBAApB;AACA,SAASC,4BAAT,QAA6C,mBAA7C;AACA,SAASC,QAAT,QAAyB,qBAAzB;;AAEA,MAAMC,gBAAgB,GAAGH,OAAO,CAAC,CAACI,OAAD,EAAUC,YAAV,KAA2B;AAC1D,QAAMC,WAAW,GAAG,EAApB;AACA,sCAAC,CAAAD,YAAY,QAAZ,YAAAA,YAAY,CAAEE,oBAAd,KAAsC,EAAvC,iBAAmDC,OAAO,IAAI;AAC5D,yCAAAA,OAAO,CAACC,cAAR,kBAA+BC,GAAG,IAAI;AACpC,+BAAAA,GAAG,MAAH,CAAAA,GAAG,EAASC,OAAO,IAAI;AACrB,YAAI,CAACA,OAAL,EAAc;AACd,YAAI,OAAOA,OAAP,KAAmB,QAAvB,EAAiC;AAC/B;AACA;AACAL,UAAAA,WAAW,CAACK,OAAD,CAAX,GAAuBT,QAAQ,CAACS,OAAD,CAA/B;AACD,SAJD,MAIO,IAAIA,OAAO,CAACC,IAAR,IAAgBD,OAAO,CAACE,MAA5B,EAAoC;AACzC;AACAP,UAAAA,WAAW,CAACK,OAAO,CAACC,IAAT,CAAX,GAA4BD,OAAO,CAACE,MAApC;AACD;AACF,OAVE,CAAH;AAWD,KAZD;AAaD,GAdD;AAeA,SAAOP,WAAP;AACD,CAlB+B,CAAhC;;AAoBA,MAAMQ,qBAAqB,GAAGV,OAAO,IAAI;AACvC,QAAMC,YAAY,GAAGJ,4BAA4B,GAAGc,GAA/B,CAAmCX,OAAnC,CAArB;AACA,SAAOD,gBAAgB,CAACC,OAAD,EAAUC,YAAV,CAAvB;AACD,CAHD,C;;AAKeS,qB,CAAf,wB,iLAzBMX,gB,2GAoBAW,qB","sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport memoize from 'lodash/memoize';\nimport { getChartControlPanelRegistry } from '@superset-ui/core';\nimport { controls } from '../explore/controls';\n\nconst memoizedControls = memoize((vizType, controlPanel) => {\n  const controlsMap = {};\n  (controlPanel?.controlPanelSections || []).forEach(section => {\n    section.controlSetRows.forEach(row => {\n      row.forEach(control => {\n        if (!control) return;\n        if (typeof control === 'string') {\n          // For now, we have to look in controls.jsx to get the config for some controls.\n          // Once everything is migrated out, delete this if statement.\n          controlsMap[control] = controls[control];\n        } else if (control.name && control.config) {\n          // condition needed because there are elements, e.g. <hr /> in some control configs (I'm looking at you, FilterBox!)\n          controlsMap[control.name] = control.config;\n        }\n      });\n    });\n  });\n  return controlsMap;\n});\n\nconst getControlsForVizType = vizType => {\n  const controlPanel = getChartControlPanelRegistry().get(vizType);\n  return memoizedControls(vizType, controlPanel);\n};\n\nexport default getControlsForVizType;\n"]},"metadata":{},"sourceType":"module"}