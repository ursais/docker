{"ast":null,"code":"(function () {var enterModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.enterModule : undefined;enterModule && enterModule(module);})();var __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default.signature : function (a) {return a;}; /**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { t } from '@superset-ui/core';\n\nimport {\nFETCH_ALL_SLICES_FAILED,\nFETCH_ALL_SLICES_STARTED,\nSET_ALL_SLICES } from\n'../actions/sliceEntities';\nimport { HYDRATE_DASHBOARD } from '../actions/hydrate';\n\nexport const initSliceEntities = {\n  slices: {},\n  isLoading: true,\n  errorMessage: null,\n  lastUpdated: 0 };\n\n\nexport default function sliceEntitiesReducer(\nstate = initSliceEntities,\naction)\n{\n  const actionHandlers = {\n    [HYDRATE_DASHBOARD]() {\n      return {\n        ...action.data.sliceEntities };\n\n    },\n    [FETCH_ALL_SLICES_STARTED]() {\n      return {\n        ...state,\n        isLoading: true };\n\n    },\n    [SET_ALL_SLICES]() {\n      return {\n        ...state,\n        isLoading: false,\n        slices: { ...state.slices, ...action.payload.slices },\n        lastUpdated: new Date().getTime() };\n\n    },\n    [FETCH_ALL_SLICES_FAILED]() {\n      return {\n        ...state,\n        isLoading: false,\n        lastUpdated: new Date().getTime(),\n        errorMessage:\n        action.payload.error || t('Could not fetch all saved charts') };\n\n    } };\n\n\n  if (action.type in actionHandlers) {\n    return actionHandlers[action.type]();\n  }\n  return state;\n};(function () {var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined;if (!reactHotLoader) {return;}reactHotLoader.register(initSliceEntities, \"initSliceEntities\", \"/app/superset-frontend/src/dashboard/reducers/sliceEntities.js\");reactHotLoader.register(sliceEntitiesReducer, \"sliceEntitiesReducer\", \"/app/superset-frontend/src/dashboard/reducers/sliceEntities.js\");})();;(function () {var leaveModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.leaveModule : undefined;leaveModule && leaveModule(module);})();","map":{"version":3,"sources":["/app/superset-frontend/src/dashboard/reducers/sliceEntities.js"],"names":["t","FETCH_ALL_SLICES_FAILED","FETCH_ALL_SLICES_STARTED","SET_ALL_SLICES","HYDRATE_DASHBOARD","initSliceEntities","slices","isLoading","errorMessage","lastUpdated","sliceEntitiesReducer","state","action","actionHandlers","data","sliceEntities","payload","Date","getTime","error","type"],"mappings":"wSAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASA,CAAT,QAAkB,mBAAlB;;AAEA;AACEC,uBADF;AAEEC,wBAFF;AAGEC,cAHF;AAIO,0BAJP;AAKA,SAASC,iBAAT,QAAkC,oBAAlC;;AAEA,OAAO,MAAMC,iBAAiB,GAAG;AAC/BC,EAAAA,MAAM,EAAE,EADuB;AAE/BC,EAAAA,SAAS,EAAE,IAFoB;AAG/BC,EAAAA,YAAY,EAAE,IAHiB;AAI/BC,EAAAA,WAAW,EAAE,CAJkB,EAA1B;;;AAOP,eAAe,SAASC,oBAAT;AACbC,KAAK,GAAGN,iBADK;AAEbO,MAFa;AAGb;AACA,QAAMC,cAAc,GAAG;AACrB,KAACT,iBAAD,IAAsB;AACpB,aAAO;AACL,WAAGQ,MAAM,CAACE,IAAP,CAAYC,aADV,EAAP;;AAGD,KALoB;AAMrB,KAACb,wBAAD,IAA6B;AAC3B,aAAO;AACL,WAAGS,KADE;AAELJ,QAAAA,SAAS,EAAE,IAFN,EAAP;;AAID,KAXoB;AAYrB,KAACJ,cAAD,IAAmB;AACjB,aAAO;AACL,WAAGQ,KADE;AAELJ,QAAAA,SAAS,EAAE,KAFN;AAGLD,QAAAA,MAAM,EAAE,EAAE,GAAGK,KAAK,CAACL,MAAX,EAAmB,GAAGM,MAAM,CAACI,OAAP,CAAeV,MAArC,EAHH;AAILG,QAAAA,WAAW,EAAE,IAAIQ,IAAJ,GAAWC,OAAX,EAJR,EAAP;;AAMD,KAnBoB;AAoBrB,KAACjB,uBAAD,IAA4B;AAC1B,aAAO;AACL,WAAGU,KADE;AAELJ,QAAAA,SAAS,EAAE,KAFN;AAGLE,QAAAA,WAAW,EAAE,IAAIQ,IAAJ,GAAWC,OAAX,EAHR;AAILV,QAAAA,YAAY;AACVI,QAAAA,MAAM,CAACI,OAAP,CAAeG,KAAf,IAAwBnB,CAAC,CAAC,kCAAD,CALtB,EAAP;;AAOD,KA5BoB,EAAvB;;;AA+BA,MAAIY,MAAM,CAACQ,IAAP,IAAeP,cAAnB,EAAmC;AACjC,WAAOA,cAAc,CAACD,MAAM,CAACQ,IAAR,CAAd,EAAP;AACD;AACD,SAAOT,KAAP;AACD,C,iLA9CYN,iB,iHAOWK,oB","sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { t } from '@superset-ui/core';\n\nimport {\n  FETCH_ALL_SLICES_FAILED,\n  FETCH_ALL_SLICES_STARTED,\n  SET_ALL_SLICES,\n} from '../actions/sliceEntities';\nimport { HYDRATE_DASHBOARD } from '../actions/hydrate';\n\nexport const initSliceEntities = {\n  slices: {},\n  isLoading: true,\n  errorMessage: null,\n  lastUpdated: 0,\n};\n\nexport default function sliceEntitiesReducer(\n  state = initSliceEntities,\n  action,\n) {\n  const actionHandlers = {\n    [HYDRATE_DASHBOARD]() {\n      return {\n        ...action.data.sliceEntities,\n      };\n    },\n    [FETCH_ALL_SLICES_STARTED]() {\n      return {\n        ...state,\n        isLoading: true,\n      };\n    },\n    [SET_ALL_SLICES]() {\n      return {\n        ...state,\n        isLoading: false,\n        slices: { ...state.slices, ...action.payload.slices },\n        lastUpdated: new Date().getTime(),\n      };\n    },\n    [FETCH_ALL_SLICES_FAILED]() {\n      return {\n        ...state,\n        isLoading: false,\n        lastUpdated: new Date().getTime(),\n        errorMessage:\n          action.payload.error || t('Could not fetch all saved charts'),\n      };\n    },\n  };\n\n  if (action.type in actionHandlers) {\n    return actionHandlers[action.type]();\n  }\n  return state;\n}\n"]},"metadata":{},"sourceType":"module"}