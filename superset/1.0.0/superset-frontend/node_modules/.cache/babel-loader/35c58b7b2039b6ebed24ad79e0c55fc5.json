{"ast":null,"code":"import \"core-js/modules/web.dom-collections.iterator.js\";import _mapInstanceProperty from \"@babel/runtime-corejs3/core-js-stable/instance/map\";import _forEachInstanceProperty from \"@babel/runtime-corejs3/core-js-stable/instance/for-each\";import _reduceInstanceProperty from \"@babel/runtime-corejs3/core-js-stable/instance/reduce\";import _includesInstanceProperty from \"@babel/runtime-corejs3/core-js-stable/instance/includes\";import _Promise from \"@babel/runtime-corejs3/core-js-stable/promise\";import _Object$keys from \"@babel/runtime-corejs3/core-js-stable/object/keys\";import _JSON$stringify from \"@babel/runtime-corejs3/core-js-stable/json/stringify\";(function () {var enterModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.enterModule : undefined;enterModule && enterModule(module);})();var __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default.signature : function (a) {return a;}; /**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n/* eslint no-undef: 'error' */\n/* eslint no-param-reassign: [\"error\", { \"props\": false }] */\nimport moment from 'moment';\nimport { t, SupersetClient } from '@superset-ui/core';\nimport { getControlsState } from 'src/explore/store';\nimport { isFeatureEnabled, FeatureFlag } from '../featureFlags';\nimport {\ngetAnnotationJsonUrl,\ngetExploreUrl,\ngetLegacyEndpointType,\nbuildV1ChartDataPayload,\npostForm,\nshouldUseLegacyApi,\ngetChartDataUri } from\n'../explore/exploreUtils';\nimport {\nrequiresQuery,\nANNOTATION_SOURCE_TYPES } from\n'../modules/AnnotationTypes';\n\nimport { addDangerToast } from '../messageToasts/actions';\nimport { logEvent } from '../logger/actions';\nimport { Logger, LOG_ACTIONS_LOAD_CHART } from '../logger/LogUtils';\nimport { getClientErrorObject } from '../utils/getClientErrorObject';\nimport { allowCrossDomain as domainShardingEnabled } from '../utils/hostNamesConfig';\nimport { updateDataMask } from '../dataMask/actions';\nimport { waitForAsyncData } from '../middleware/asyncEvent';\n\nexport const CHART_UPDATE_STARTED = 'CHART_UPDATE_STARTED';\nexport function chartUpdateStarted(queryController, latestQueryFormData, key) {\n  return {\n    type: CHART_UPDATE_STARTED,\n    queryController,\n    latestQueryFormData,\n    key };\n\n}\n\nexport const CHART_UPDATE_SUCCEEDED = 'CHART_UPDATE_SUCCEEDED';\nexport function chartUpdateSucceeded(queriesResponse, key) {\n  return { type: CHART_UPDATE_SUCCEEDED, queriesResponse, key };\n}\n\nexport const CHART_UPDATE_STOPPED = 'CHART_UPDATE_STOPPED';\nexport function chartUpdateStopped(key) {\n  return { type: CHART_UPDATE_STOPPED, key };\n}\n\nexport const CHART_UPDATE_FAILED = 'CHART_UPDATE_FAILED';\nexport function chartUpdateFailed(queriesResponse, key) {\n  return { type: CHART_UPDATE_FAILED, queriesResponse, key };\n}\n\nexport const CHART_RENDERING_FAILED = 'CHART_RENDERING_FAILED';\nexport function chartRenderingFailed(error, key, stackTrace) {\n  return { type: CHART_RENDERING_FAILED, error, key, stackTrace };\n}\n\nexport const CHART_RENDERING_SUCCEEDED = 'CHART_RENDERING_SUCCEEDED';\nexport function chartRenderingSucceeded(key) {\n  return { type: CHART_RENDERING_SUCCEEDED, key };\n}\n\nexport const REMOVE_CHART = 'REMOVE_CHART';\nexport function removeChart(key) {\n  return { type: REMOVE_CHART, key };\n}\n\nexport const ANNOTATION_QUERY_SUCCESS = 'ANNOTATION_QUERY_SUCCESS';\nexport function annotationQuerySuccess(annotation, queryResponse, key) {\n  return { type: ANNOTATION_QUERY_SUCCESS, annotation, queryResponse, key };\n}\n\nexport const ANNOTATION_QUERY_STARTED = 'ANNOTATION_QUERY_STARTED';\nexport function annotationQueryStarted(annotation, queryController, key) {\n  return { type: ANNOTATION_QUERY_STARTED, annotation, queryController, key };\n}\n\nexport const ANNOTATION_QUERY_FAILED = 'ANNOTATION_QUERY_FAILED';\nexport function annotationQueryFailed(annotation, queryResponse, key) {\n  return { type: ANNOTATION_QUERY_FAILED, annotation, queryResponse, key };\n}\n\nexport const DYNAMIC_PLUGIN_CONTROLS_READY = 'DYNAMIC_PLUGIN_CONTROLS_READY';\nexport const dynamicPluginControlsReady = () => (dispatch, getState) => {\n  const state = getState();\n  const controlsState = getControlsState(\n  state.explore,\n  state.explore.form_data);\n\n  dispatch({\n    type: DYNAMIC_PLUGIN_CONTROLS_READY,\n    key: controlsState.slice_id.value,\n    controlsState });\n\n};\n\nconst legacyChartDataRequest = async (\nformData,\nresultFormat,\nresultType,\nforce,\nmethod = 'POST',\nrequestParams = {}) =>\n{\n  const endpointType = getLegacyEndpointType({ resultFormat, resultType });\n  const allowDomainSharding =\n  // eslint-disable-next-line camelcase\n  domainShardingEnabled && (requestParams == null ? void 0 : requestParams.dashboard_id);\n  const url = getExploreUrl({\n    formData,\n    endpointType,\n    force,\n    allowDomainSharding,\n    method,\n    requestParams: requestParams.dashboard_id ?\n    { dashboard_id: requestParams.dashboard_id } :\n    {} });\n\n  const querySettings = {\n    ...requestParams,\n    url,\n    postPayload: { form_data: formData } };\n\n\n  const clientMethod =\n  'GET' && isFeatureEnabled(FeatureFlag.CLIENT_CACHE) ?\n  SupersetClient.get :\n  SupersetClient.post;\n  return clientMethod(querySettings).then(({ json }) => (\n  // Make the legacy endpoint return a payload that corresponds to the\n  // V1 chart data endpoint response signature.\n  {\n    result: [json] }));\n\n\n};\n\nconst v1ChartDataRequest = async (\nformData,\nresultFormat,\nresultType,\nforce,\nrequestParams,\nsetDataMask,\nownState) =>\n{\n  const payload = buildV1ChartDataPayload({\n    formData,\n    resultType,\n    resultFormat,\n    force,\n    setDataMask,\n    ownState });\n\n\n  // The dashboard id is added to query params for tracking purposes\n  const { slice_id: sliceId } = formData;\n  const { dashboard_id: dashboardId } = requestParams;\n\n  const qs = {};\n  if (sliceId !== undefined) qs.form_data = `{\"slice_id\":${sliceId}}`;\n  if (dashboardId !== undefined) qs.dashboard_id = dashboardId;\n  if (force !== false) qs.force = force;\n\n  const allowDomainSharding =\n  // eslint-disable-next-line camelcase\n  domainShardingEnabled && (requestParams == null ? void 0 : requestParams.dashboard_id);\n  const url = getChartDataUri({\n    path: '/api/v1/chart/data',\n    qs,\n    allowDomainSharding }).\n  toString();\n\n  const querySettings = {\n    ...requestParams,\n    url,\n    headers: { 'Content-Type': 'application/json' },\n    body: _JSON$stringify(payload) };\n\n  return SupersetClient.post(querySettings).then(({ json }) => json);\n};\n\nexport async function getChartDataRequest({\n  formData,\n  setDataMask = () => {},\n  resultFormat = 'json',\n  resultType = 'full',\n  force = false,\n  method = 'POST',\n  requestParams = {},\n  ownState = {} })\n{\n  let querySettings = {\n    ...requestParams };\n\n\n  if (domainShardingEnabled) {\n    querySettings = {\n      ...querySettings,\n      mode: 'cors',\n      credentials: 'include' };\n\n  }\n\n  if (shouldUseLegacyApi(formData)) {\n    return legacyChartDataRequest(\n    formData,\n    resultFormat,\n    resultType,\n    force,\n    method,\n    querySettings);\n\n  }\n  return v1ChartDataRequest(\n  formData,\n  resultFormat,\n  resultType,\n  force,\n  querySettings,\n  setDataMask,\n  ownState);\n\n}\n\nexport function runAnnotationQuery(\nannotation,\ntimeout = 60,\nformData = null,\nkey,\nisDashboardRequest = false,\nforce = false)\n{\n  return function (dispatch, getState) {var _context;\n    const sliceKey = key || _Object$keys(getState().charts)[0];\n    // make a copy of formData, not modifying original formData\n    const fd = {\n      ...(formData || getState().charts[sliceKey].latestQueryFormData) };\n\n\n    if (!requiresQuery(annotation.sourceType)) {\n      return _Promise.resolve();\n    }\n\n    const granularity = fd.time_grain_sqla || fd.granularity;\n    fd.time_grain_sqla = granularity;\n    fd.granularity = granularity;\n    const overridesKeys = _Object$keys(annotation.overrides);\n    if (_includesInstanceProperty(overridesKeys).call(overridesKeys, 'since') || _includesInstanceProperty(overridesKeys).call(overridesKeys, 'until')) {\n      annotation.overrides = {\n        ...annotation.overrides,\n        time_range: null };\n\n    }\n    const sliceFormData = _reduceInstanceProperty(_context = _Object$keys(annotation.overrides)).call(_context,\n    (d, k) => ({\n      ...d,\n      [k]: annotation.overrides[k] || fd[k] }),\n\n    {});\n\n\n    if (!isDashboardRequest && fd) {\n      const hasExtraFilters = fd.extra_filters && fd.extra_filters.length > 0;\n      sliceFormData.extra_filters = hasExtraFilters ?\n      fd.extra_filters :\n      undefined;\n    }\n\n    const isNative = annotation.sourceType === ANNOTATION_SOURCE_TYPES.NATIVE;\n    const url = getAnnotationJsonUrl(\n    annotation.value,\n    sliceFormData,\n    isNative,\n    force);\n\n    const controller = new AbortController();\n    const { signal } = controller;\n\n    dispatch(annotationQueryStarted(annotation, controller, sliceKey));\n\n    return SupersetClient.get({\n      url,\n      signal,\n      timeout: timeout * 1000 }).\n\n    then(({ json }) =>\n    dispatch(annotationQuerySuccess(annotation, json, sliceKey))).\n\n    catch((response) =>\n    getClientErrorObject(response).then(err => {var _context2;\n      if (err.statusText === 'timeout') {\n        dispatch(\n        annotationQueryFailed(\n        annotation,\n        { error: 'Query timeout' },\n        sliceKey));\n\n\n      } else if (_includesInstanceProperty(_context2 = (err.error || '').toLowerCase()).call(_context2, 'no data')) {\n        dispatch(annotationQuerySuccess(annotation, err, sliceKey));\n      } else if (err.statusText !== 'abort') {\n        dispatch(annotationQueryFailed(annotation, err, sliceKey));\n      }\n    }));\n\n  };\n}\n\nexport const TRIGGER_QUERY = 'TRIGGER_QUERY';\nexport function triggerQuery(value = true, key) {\n  return { type: TRIGGER_QUERY, value, key };\n}\n\n// this action is used for forced re-render without fetch data\nexport const RENDER_TRIGGERED = 'RENDER_TRIGGERED';\nexport function renderTriggered(value, key) {\n  return { type: RENDER_TRIGGERED, value, key };\n}\n\nexport const UPDATE_QUERY_FORM_DATA = 'UPDATE_QUERY_FORM_DATA';\nexport function updateQueryFormData(value, key) {\n  return { type: UPDATE_QUERY_FORM_DATA, value, key };\n}\n\n// in the sql lab -> explore flow, user can inline edit chart title,\n// then the chart will be assigned a new slice_id\nexport const UPDATE_CHART_ID = 'UPDATE_CHART_ID';\nexport function updateChartId(newId, key = 0) {\n  return { type: UPDATE_CHART_ID, newId, key };\n}\n\nexport const ADD_CHART = 'ADD_CHART';\nexport function addChart(chart, key) {\n  return { type: ADD_CHART, chart, key };\n}\n\nexport function exploreJSON(\nformData,\nforce = false,\ntimeout = 60,\nkey,\nmethod,\ndashboardId,\nownState)\n{\n  return async dispatch => {\n    const logStart = Logger.getTimestamp();\n    const controller = new AbortController();\n\n    const requestParams = {\n      signal: controller.signal,\n      timeout: timeout * 1000 };\n\n    if (dashboardId) requestParams.dashboard_id = dashboardId;\n\n    const setDataMask = dataMask => {\n      dispatch(updateDataMask(formData.slice_id, dataMask));\n    };\n    const chartDataRequest = getChartDataRequest({\n      setDataMask,\n      formData,\n      resultFormat: 'json',\n      resultType: 'full',\n      force,\n      method,\n      requestParams,\n      ownState });\n\n\n    dispatch(chartUpdateStarted(controller, formData, key));\n\n    const chartDataRequestCaught = chartDataRequest.\n    then(response => {\n      const queriesResponse = response.result;\n      if (isFeatureEnabled(FeatureFlag.GLOBAL_ASYNC_QUERIES)) {\n        // deal with getChartDataRequest transforming the response data\n        const result = 'result' in response ? response.result[0] : response;\n        return waitForAsyncData(result);\n      }\n      return queriesResponse;\n    }).\n    then(queriesResponse => {\n      _forEachInstanceProperty(queriesResponse).call(queriesResponse, (resultItem) =>\n      dispatch(\n      logEvent(LOG_ACTIONS_LOAD_CHART, {\n        slice_id: key,\n        applied_filters: resultItem.applied_filters,\n        is_cached: resultItem.is_cached,\n        force_refresh: force,\n        row_count: resultItem.rowcount,\n        datasource: formData.datasource,\n        start_offset: logStart,\n        ts: new Date().getTime(),\n        duration: Logger.getTimestamp() - logStart,\n        has_extra_filters:\n        formData.extra_filters && formData.extra_filters.length > 0,\n        viz_type: formData.viz_type,\n        data_age: resultItem.is_cached ?\n        moment(new Date()).diff(moment.utc(resultItem.cached_dttm)) :\n        null })));\n\n\n\n      return dispatch(chartUpdateSucceeded(queriesResponse, key));\n    }).\n    catch(response => {\n      if (isFeatureEnabled(FeatureFlag.GLOBAL_ASYNC_QUERIES)) {\n        return dispatch(chartUpdateFailed([response], key));\n      }\n\n      const appendErrorLog = (errorDetails, isCached) => {\n        dispatch(\n        logEvent(LOG_ACTIONS_LOAD_CHART, {\n          slice_id: key,\n          has_err: true,\n          is_cached: isCached,\n          error_details: errorDetails,\n          datasource: formData.datasource,\n          start_offset: logStart,\n          ts: new Date().getTime(),\n          duration: Logger.getTimestamp() - logStart }));\n\n\n      };\n      if (response.name === 'AbortError') {\n        appendErrorLog('abort');\n        return dispatch(chartUpdateStopped(key));\n      }\n      return getClientErrorObject(response).then(parsedResponse => {\n        if (response.statusText === 'timeout') {\n          appendErrorLog('timeout');\n        } else {\n          appendErrorLog(parsedResponse.error, parsedResponse.is_cached);\n        }\n        return dispatch(chartUpdateFailed([parsedResponse], key));\n      });\n    });\n\n    // only retrieve annotations when calling the legacy API\n    const annotationLayers = shouldUseLegacyApi(formData) ?\n    formData.annotation_layers || [] :\n    [];\n    const isDashboardRequest = dashboardId > 0;\n\n    return _Promise.all([\n    chartDataRequestCaught,\n    dispatch(triggerQuery(false, key)),\n    dispatch(updateQueryFormData(formData, key)),\n    ..._mapInstanceProperty(annotationLayers).call(annotationLayers, (x) =>\n    dispatch(\n    runAnnotationQuery(\n    x,\n    timeout,\n    formData,\n    key,\n    isDashboardRequest,\n    force)))]);\n\n\n\n\n  };\n}\n\nexport const GET_SAVED_CHART = 'GET_SAVED_CHART';\nexport function getSavedChart(\nformData,\nforce = false,\ntimeout = 60,\nkey,\ndashboardId,\nownState)\n{\n  /*\n   * Perform a GET request to `/explore_json`.\n   *\n   * This will return the payload of a saved chart, optionally filtered by\n   * ad-hoc or extra filters from dashboards. Eg:\n   *\n   *  GET  /explore_json?{\"chart_id\":1}\n   *  GET  /explore_json?{\"chart_id\":1,\"extra_filters\":\"...\"}\n   *\n   */\n  return exploreJSON(\n  formData,\n  force,\n  timeout,\n  key,\n  'GET',\n  dashboardId,\n  ownState);\n\n}\n\nexport const POST_CHART_FORM_DATA = 'POST_CHART_FORM_DATA';\nexport function postChartFormData(\nformData,\nforce = false,\ntimeout = 60,\nkey,\ndashboardId,\nownState)\n{\n  /*\n   * Perform a POST request to `/explore_json`.\n   *\n   * This will post the form data to the endpoint, returning a new chart.\n   *\n   */\n  return exploreJSON(\n  formData,\n  force,\n  timeout,\n  key,\n  'POST',\n  dashboardId,\n  ownState);\n\n}\n\nexport function redirectSQLLab(formData) {\n  return dispatch => {\n    getChartDataRequest({ formData, resultFormat: 'json', resultType: 'query' }).\n    then(({ result }) => {\n      const redirectUrl = '/superset/sqllab/';\n      const payload = {\n        datasourceKey: formData.datasource,\n        sql: result[0].query };\n\n      postForm(redirectUrl, payload);\n    }).\n    catch(() =>\n    dispatch(addDangerToast(t('An error occurred while loading the SQL'))));\n\n  };\n}\n\nexport function refreshChart(chartKey, force, dashboardId) {\n  return (dispatch, getState) => {var _getState$dataMask$ch;\n    const chart = (getState().charts || {})[chartKey];\n    const timeout = getState().dashboardInfo.common.conf.\n    SUPERSET_WEBSERVER_TIMEOUT;\n\n    if (\n    !chart.latestQueryFormData ||\n    _Object$keys(chart.latestQueryFormData).length === 0)\n    {\n      return;\n    }\n    dispatch(\n    postChartFormData(\n    chart.latestQueryFormData,\n    force,\n    timeout,\n    chart.id,\n    dashboardId, (_getState$dataMask$ch =\n    getState().dataMask[chart.id]) == null ? void 0 : _getState$dataMask$ch.ownState));\n\n\n  };\n};(function () {var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined;if (!reactHotLoader) {return;}reactHotLoader.register(CHART_UPDATE_STARTED, \"CHART_UPDATE_STARTED\", \"/app/superset-frontend/src/chart/chartAction.js\");reactHotLoader.register(chartUpdateStarted, \"chartUpdateStarted\", \"/app/superset-frontend/src/chart/chartAction.js\");reactHotLoader.register(CHART_UPDATE_SUCCEEDED, \"CHART_UPDATE_SUCCEEDED\", \"/app/superset-frontend/src/chart/chartAction.js\");reactHotLoader.register(chartUpdateSucceeded, \"chartUpdateSucceeded\", \"/app/superset-frontend/src/chart/chartAction.js\");reactHotLoader.register(CHART_UPDATE_STOPPED, \"CHART_UPDATE_STOPPED\", \"/app/superset-frontend/src/chart/chartAction.js\");reactHotLoader.register(chartUpdateStopped, \"chartUpdateStopped\", \"/app/superset-frontend/src/chart/chartAction.js\");reactHotLoader.register(CHART_UPDATE_FAILED, \"CHART_UPDATE_FAILED\", \"/app/superset-frontend/src/chart/chartAction.js\");reactHotLoader.register(chartUpdateFailed, \"chartUpdateFailed\", \"/app/superset-frontend/src/chart/chartAction.js\");reactHotLoader.register(CHART_RENDERING_FAILED, \"CHART_RENDERING_FAILED\", \"/app/superset-frontend/src/chart/chartAction.js\");reactHotLoader.register(chartRenderingFailed, \"chartRenderingFailed\", \"/app/superset-frontend/src/chart/chartAction.js\");reactHotLoader.register(CHART_RENDERING_SUCCEEDED, \"CHART_RENDERING_SUCCEEDED\", \"/app/superset-frontend/src/chart/chartAction.js\");reactHotLoader.register(chartRenderingSucceeded, \"chartRenderingSucceeded\", \"/app/superset-frontend/src/chart/chartAction.js\");reactHotLoader.register(REMOVE_CHART, \"REMOVE_CHART\", \"/app/superset-frontend/src/chart/chartAction.js\");reactHotLoader.register(removeChart, \"removeChart\", \"/app/superset-frontend/src/chart/chartAction.js\");reactHotLoader.register(ANNOTATION_QUERY_SUCCESS, \"ANNOTATION_QUERY_SUCCESS\", \"/app/superset-frontend/src/chart/chartAction.js\");reactHotLoader.register(annotationQuerySuccess, \"annotationQuerySuccess\", \"/app/superset-frontend/src/chart/chartAction.js\");reactHotLoader.register(ANNOTATION_QUERY_STARTED, \"ANNOTATION_QUERY_STARTED\", \"/app/superset-frontend/src/chart/chartAction.js\");reactHotLoader.register(annotationQueryStarted, \"annotationQueryStarted\", \"/app/superset-frontend/src/chart/chartAction.js\");reactHotLoader.register(ANNOTATION_QUERY_FAILED, \"ANNOTATION_QUERY_FAILED\", \"/app/superset-frontend/src/chart/chartAction.js\");reactHotLoader.register(annotationQueryFailed, \"annotationQueryFailed\", \"/app/superset-frontend/src/chart/chartAction.js\");reactHotLoader.register(DYNAMIC_PLUGIN_CONTROLS_READY, \"DYNAMIC_PLUGIN_CONTROLS_READY\", \"/app/superset-frontend/src/chart/chartAction.js\");reactHotLoader.register(dynamicPluginControlsReady, \"dynamicPluginControlsReady\", \"/app/superset-frontend/src/chart/chartAction.js\");reactHotLoader.register(legacyChartDataRequest, \"legacyChartDataRequest\", \"/app/superset-frontend/src/chart/chartAction.js\");reactHotLoader.register(v1ChartDataRequest, \"v1ChartDataRequest\", \"/app/superset-frontend/src/chart/chartAction.js\");reactHotLoader.register(getChartDataRequest, \"getChartDataRequest\", \"/app/superset-frontend/src/chart/chartAction.js\");reactHotLoader.register(runAnnotationQuery, \"runAnnotationQuery\", \"/app/superset-frontend/src/chart/chartAction.js\");reactHotLoader.register(TRIGGER_QUERY, \"TRIGGER_QUERY\", \"/app/superset-frontend/src/chart/chartAction.js\");reactHotLoader.register(triggerQuery, \"triggerQuery\", \"/app/superset-frontend/src/chart/chartAction.js\");reactHotLoader.register(RENDER_TRIGGERED, \"RENDER_TRIGGERED\", \"/app/superset-frontend/src/chart/chartAction.js\");reactHotLoader.register(renderTriggered, \"renderTriggered\", \"/app/superset-frontend/src/chart/chartAction.js\");reactHotLoader.register(UPDATE_QUERY_FORM_DATA, \"UPDATE_QUERY_FORM_DATA\", \"/app/superset-frontend/src/chart/chartAction.js\");reactHotLoader.register(updateQueryFormData, \"updateQueryFormData\", \"/app/superset-frontend/src/chart/chartAction.js\");reactHotLoader.register(UPDATE_CHART_ID, \"UPDATE_CHART_ID\", \"/app/superset-frontend/src/chart/chartAction.js\");reactHotLoader.register(updateChartId, \"updateChartId\", \"/app/superset-frontend/src/chart/chartAction.js\");reactHotLoader.register(ADD_CHART, \"ADD_CHART\", \"/app/superset-frontend/src/chart/chartAction.js\");reactHotLoader.register(addChart, \"addChart\", \"/app/superset-frontend/src/chart/chartAction.js\");reactHotLoader.register(exploreJSON, \"exploreJSON\", \"/app/superset-frontend/src/chart/chartAction.js\");reactHotLoader.register(GET_SAVED_CHART, \"GET_SAVED_CHART\", \"/app/superset-frontend/src/chart/chartAction.js\");reactHotLoader.register(getSavedChart, \"getSavedChart\", \"/app/superset-frontend/src/chart/chartAction.js\");reactHotLoader.register(POST_CHART_FORM_DATA, \"POST_CHART_FORM_DATA\", \"/app/superset-frontend/src/chart/chartAction.js\");reactHotLoader.register(postChartFormData, \"postChartFormData\", \"/app/superset-frontend/src/chart/chartAction.js\");reactHotLoader.register(redirectSQLLab, \"redirectSQLLab\", \"/app/superset-frontend/src/chart/chartAction.js\");reactHotLoader.register(refreshChart, \"refreshChart\", \"/app/superset-frontend/src/chart/chartAction.js\");})();;(function () {var leaveModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.leaveModule : undefined;leaveModule && leaveModule(module);})();","map":{"version":3,"sources":["/app/superset-frontend/src/chart/chartAction.js"],"names":["moment","t","SupersetClient","getControlsState","isFeatureEnabled","FeatureFlag","getAnnotationJsonUrl","getExploreUrl","getLegacyEndpointType","buildV1ChartDataPayload","postForm","shouldUseLegacyApi","getChartDataUri","requiresQuery","ANNOTATION_SOURCE_TYPES","addDangerToast","logEvent","Logger","LOG_ACTIONS_LOAD_CHART","getClientErrorObject","allowCrossDomain","domainShardingEnabled","updateDataMask","waitForAsyncData","CHART_UPDATE_STARTED","chartUpdateStarted","queryController","latestQueryFormData","key","type","CHART_UPDATE_SUCCEEDED","chartUpdateSucceeded","queriesResponse","CHART_UPDATE_STOPPED","chartUpdateStopped","CHART_UPDATE_FAILED","chartUpdateFailed","CHART_RENDERING_FAILED","chartRenderingFailed","error","stackTrace","CHART_RENDERING_SUCCEEDED","chartRenderingSucceeded","REMOVE_CHART","removeChart","ANNOTATION_QUERY_SUCCESS","annotationQuerySuccess","annotation","queryResponse","ANNOTATION_QUERY_STARTED","annotationQueryStarted","ANNOTATION_QUERY_FAILED","annotationQueryFailed","DYNAMIC_PLUGIN_CONTROLS_READY","dynamicPluginControlsReady","dispatch","getState","state","controlsState","explore","form_data","slice_id","value","legacyChartDataRequest","formData","resultFormat","resultType","force","method","requestParams","endpointType","allowDomainSharding","dashboard_id","url","querySettings","postPayload","clientMethod","CLIENT_CACHE","get","post","then","json","result","v1ChartDataRequest","setDataMask","ownState","payload","sliceId","dashboardId","qs","undefined","path","toString","headers","body","getChartDataRequest","mode","credentials","runAnnotationQuery","timeout","isDashboardRequest","sliceKey","charts","fd","sourceType","resolve","granularity","time_grain_sqla","overridesKeys","overrides","time_range","sliceFormData","d","k","hasExtraFilters","extra_filters","length","isNative","NATIVE","controller","AbortController","signal","catch","response","err","statusText","toLowerCase","TRIGGER_QUERY","triggerQuery","RENDER_TRIGGERED","renderTriggered","UPDATE_QUERY_FORM_DATA","updateQueryFormData","UPDATE_CHART_ID","updateChartId","newId","ADD_CHART","addChart","chart","exploreJSON","logStart","getTimestamp","dataMask","chartDataRequest","chartDataRequestCaught","GLOBAL_ASYNC_QUERIES","resultItem","applied_filters","is_cached","force_refresh","row_count","rowcount","datasource","start_offset","ts","Date","getTime","duration","has_extra_filters","viz_type","data_age","diff","utc","cached_dttm","appendErrorLog","errorDetails","isCached","has_err","error_details","name","parsedResponse","annotationLayers","annotation_layers","all","x","GET_SAVED_CHART","getSavedChart","POST_CHART_FORM_DATA","postChartFormData","redirectSQLLab","redirectUrl","datasourceKey","sql","query","refreshChart","chartKey","dashboardInfo","common","conf","SUPERSET_WEBSERVER_TIMEOUT","id"],"mappings":"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","sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n/* eslint no-undef: 'error' */\n/* eslint no-param-reassign: [\"error\", { \"props\": false }] */\nimport moment from 'moment';\nimport { t, SupersetClient } from '@superset-ui/core';\nimport { getControlsState } from 'src/explore/store';\nimport { isFeatureEnabled, FeatureFlag } from '../featureFlags';\nimport {\n  getAnnotationJsonUrl,\n  getExploreUrl,\n  getLegacyEndpointType,\n  buildV1ChartDataPayload,\n  postForm,\n  shouldUseLegacyApi,\n  getChartDataUri,\n} from '../explore/exploreUtils';\nimport {\n  requiresQuery,\n  ANNOTATION_SOURCE_TYPES,\n} from '../modules/AnnotationTypes';\n\nimport { addDangerToast } from '../messageToasts/actions';\nimport { logEvent } from '../logger/actions';\nimport { Logger, LOG_ACTIONS_LOAD_CHART } from '../logger/LogUtils';\nimport { getClientErrorObject } from '../utils/getClientErrorObject';\nimport { allowCrossDomain as domainShardingEnabled } from '../utils/hostNamesConfig';\nimport { updateDataMask } from '../dataMask/actions';\nimport { waitForAsyncData } from '../middleware/asyncEvent';\n\nexport const CHART_UPDATE_STARTED = 'CHART_UPDATE_STARTED';\nexport function chartUpdateStarted(queryController, latestQueryFormData, key) {\n  return {\n    type: CHART_UPDATE_STARTED,\n    queryController,\n    latestQueryFormData,\n    key,\n  };\n}\n\nexport const CHART_UPDATE_SUCCEEDED = 'CHART_UPDATE_SUCCEEDED';\nexport function chartUpdateSucceeded(queriesResponse, key) {\n  return { type: CHART_UPDATE_SUCCEEDED, queriesResponse, key };\n}\n\nexport const CHART_UPDATE_STOPPED = 'CHART_UPDATE_STOPPED';\nexport function chartUpdateStopped(key) {\n  return { type: CHART_UPDATE_STOPPED, key };\n}\n\nexport const CHART_UPDATE_FAILED = 'CHART_UPDATE_FAILED';\nexport function chartUpdateFailed(queriesResponse, key) {\n  return { type: CHART_UPDATE_FAILED, queriesResponse, key };\n}\n\nexport const CHART_RENDERING_FAILED = 'CHART_RENDERING_FAILED';\nexport function chartRenderingFailed(error, key, stackTrace) {\n  return { type: CHART_RENDERING_FAILED, error, key, stackTrace };\n}\n\nexport const CHART_RENDERING_SUCCEEDED = 'CHART_RENDERING_SUCCEEDED';\nexport function chartRenderingSucceeded(key) {\n  return { type: CHART_RENDERING_SUCCEEDED, key };\n}\n\nexport const REMOVE_CHART = 'REMOVE_CHART';\nexport function removeChart(key) {\n  return { type: REMOVE_CHART, key };\n}\n\nexport const ANNOTATION_QUERY_SUCCESS = 'ANNOTATION_QUERY_SUCCESS';\nexport function annotationQuerySuccess(annotation, queryResponse, key) {\n  return { type: ANNOTATION_QUERY_SUCCESS, annotation, queryResponse, key };\n}\n\nexport const ANNOTATION_QUERY_STARTED = 'ANNOTATION_QUERY_STARTED';\nexport function annotationQueryStarted(annotation, queryController, key) {\n  return { type: ANNOTATION_QUERY_STARTED, annotation, queryController, key };\n}\n\nexport const ANNOTATION_QUERY_FAILED = 'ANNOTATION_QUERY_FAILED';\nexport function annotationQueryFailed(annotation, queryResponse, key) {\n  return { type: ANNOTATION_QUERY_FAILED, annotation, queryResponse, key };\n}\n\nexport const DYNAMIC_PLUGIN_CONTROLS_READY = 'DYNAMIC_PLUGIN_CONTROLS_READY';\nexport const dynamicPluginControlsReady = () => (dispatch, getState) => {\n  const state = getState();\n  const controlsState = getControlsState(\n    state.explore,\n    state.explore.form_data,\n  );\n  dispatch({\n    type: DYNAMIC_PLUGIN_CONTROLS_READY,\n    key: controlsState.slice_id.value,\n    controlsState,\n  });\n};\n\nconst legacyChartDataRequest = async (\n  formData,\n  resultFormat,\n  resultType,\n  force,\n  method = 'POST',\n  requestParams = {},\n) => {\n  const endpointType = getLegacyEndpointType({ resultFormat, resultType });\n  const allowDomainSharding =\n    // eslint-disable-next-line camelcase\n    domainShardingEnabled && requestParams?.dashboard_id;\n  const url = getExploreUrl({\n    formData,\n    endpointType,\n    force,\n    allowDomainSharding,\n    method,\n    requestParams: requestParams.dashboard_id\n      ? { dashboard_id: requestParams.dashboard_id }\n      : {},\n  });\n  const querySettings = {\n    ...requestParams,\n    url,\n    postPayload: { form_data: formData },\n  };\n\n  const clientMethod =\n    'GET' && isFeatureEnabled(FeatureFlag.CLIENT_CACHE)\n      ? SupersetClient.get\n      : SupersetClient.post;\n  return clientMethod(querySettings).then(({ json }) =>\n    // Make the legacy endpoint return a payload that corresponds to the\n    // V1 chart data endpoint response signature.\n    ({\n      result: [json],\n    }),\n  );\n};\n\nconst v1ChartDataRequest = async (\n  formData,\n  resultFormat,\n  resultType,\n  force,\n  requestParams,\n  setDataMask,\n  ownState,\n) => {\n  const payload = buildV1ChartDataPayload({\n    formData,\n    resultType,\n    resultFormat,\n    force,\n    setDataMask,\n    ownState,\n  });\n\n  // The dashboard id is added to query params for tracking purposes\n  const { slice_id: sliceId } = formData;\n  const { dashboard_id: dashboardId } = requestParams;\n\n  const qs = {};\n  if (sliceId !== undefined) qs.form_data = `{\"slice_id\":${sliceId}}`;\n  if (dashboardId !== undefined) qs.dashboard_id = dashboardId;\n  if (force !== false) qs.force = force;\n\n  const allowDomainSharding =\n    // eslint-disable-next-line camelcase\n    domainShardingEnabled && requestParams?.dashboard_id;\n  const url = getChartDataUri({\n    path: '/api/v1/chart/data',\n    qs,\n    allowDomainSharding,\n  }).toString();\n\n  const querySettings = {\n    ...requestParams,\n    url,\n    headers: { 'Content-Type': 'application/json' },\n    body: JSON.stringify(payload),\n  };\n  return SupersetClient.post(querySettings).then(({ json }) => json);\n};\n\nexport async function getChartDataRequest({\n  formData,\n  setDataMask = () => {},\n  resultFormat = 'json',\n  resultType = 'full',\n  force = false,\n  method = 'POST',\n  requestParams = {},\n  ownState = {},\n}) {\n  let querySettings = {\n    ...requestParams,\n  };\n\n  if (domainShardingEnabled) {\n    querySettings = {\n      ...querySettings,\n      mode: 'cors',\n      credentials: 'include',\n    };\n  }\n\n  if (shouldUseLegacyApi(formData)) {\n    return legacyChartDataRequest(\n      formData,\n      resultFormat,\n      resultType,\n      force,\n      method,\n      querySettings,\n    );\n  }\n  return v1ChartDataRequest(\n    formData,\n    resultFormat,\n    resultType,\n    force,\n    querySettings,\n    setDataMask,\n    ownState,\n  );\n}\n\nexport function runAnnotationQuery(\n  annotation,\n  timeout = 60,\n  formData = null,\n  key,\n  isDashboardRequest = false,\n  force = false,\n) {\n  return function (dispatch, getState) {\n    const sliceKey = key || Object.keys(getState().charts)[0];\n    // make a copy of formData, not modifying original formData\n    const fd = {\n      ...(formData || getState().charts[sliceKey].latestQueryFormData),\n    };\n\n    if (!requiresQuery(annotation.sourceType)) {\n      return Promise.resolve();\n    }\n\n    const granularity = fd.time_grain_sqla || fd.granularity;\n    fd.time_grain_sqla = granularity;\n    fd.granularity = granularity;\n    const overridesKeys = Object.keys(annotation.overrides);\n    if (overridesKeys.includes('since') || overridesKeys.includes('until')) {\n      annotation.overrides = {\n        ...annotation.overrides,\n        time_range: null,\n      };\n    }\n    const sliceFormData = Object.keys(annotation.overrides).reduce(\n      (d, k) => ({\n        ...d,\n        [k]: annotation.overrides[k] || fd[k],\n      }),\n      {},\n    );\n\n    if (!isDashboardRequest && fd) {\n      const hasExtraFilters = fd.extra_filters && fd.extra_filters.length > 0;\n      sliceFormData.extra_filters = hasExtraFilters\n        ? fd.extra_filters\n        : undefined;\n    }\n\n    const isNative = annotation.sourceType === ANNOTATION_SOURCE_TYPES.NATIVE;\n    const url = getAnnotationJsonUrl(\n      annotation.value,\n      sliceFormData,\n      isNative,\n      force,\n    );\n    const controller = new AbortController();\n    const { signal } = controller;\n\n    dispatch(annotationQueryStarted(annotation, controller, sliceKey));\n\n    return SupersetClient.get({\n      url,\n      signal,\n      timeout: timeout * 1000,\n    })\n      .then(({ json }) =>\n        dispatch(annotationQuerySuccess(annotation, json, sliceKey)),\n      )\n      .catch(response =>\n        getClientErrorObject(response).then(err => {\n          if (err.statusText === 'timeout') {\n            dispatch(\n              annotationQueryFailed(\n                annotation,\n                { error: 'Query timeout' },\n                sliceKey,\n              ),\n            );\n          } else if ((err.error || '').toLowerCase().includes('no data')) {\n            dispatch(annotationQuerySuccess(annotation, err, sliceKey));\n          } else if (err.statusText !== 'abort') {\n            dispatch(annotationQueryFailed(annotation, err, sliceKey));\n          }\n        }),\n      );\n  };\n}\n\nexport const TRIGGER_QUERY = 'TRIGGER_QUERY';\nexport function triggerQuery(value = true, key) {\n  return { type: TRIGGER_QUERY, value, key };\n}\n\n// this action is used for forced re-render without fetch data\nexport const RENDER_TRIGGERED = 'RENDER_TRIGGERED';\nexport function renderTriggered(value, key) {\n  return { type: RENDER_TRIGGERED, value, key };\n}\n\nexport const UPDATE_QUERY_FORM_DATA = 'UPDATE_QUERY_FORM_DATA';\nexport function updateQueryFormData(value, key) {\n  return { type: UPDATE_QUERY_FORM_DATA, value, key };\n}\n\n// in the sql lab -> explore flow, user can inline edit chart title,\n// then the chart will be assigned a new slice_id\nexport const UPDATE_CHART_ID = 'UPDATE_CHART_ID';\nexport function updateChartId(newId, key = 0) {\n  return { type: UPDATE_CHART_ID, newId, key };\n}\n\nexport const ADD_CHART = 'ADD_CHART';\nexport function addChart(chart, key) {\n  return { type: ADD_CHART, chart, key };\n}\n\nexport function exploreJSON(\n  formData,\n  force = false,\n  timeout = 60,\n  key,\n  method,\n  dashboardId,\n  ownState,\n) {\n  return async dispatch => {\n    const logStart = Logger.getTimestamp();\n    const controller = new AbortController();\n\n    const requestParams = {\n      signal: controller.signal,\n      timeout: timeout * 1000,\n    };\n    if (dashboardId) requestParams.dashboard_id = dashboardId;\n\n    const setDataMask = dataMask => {\n      dispatch(updateDataMask(formData.slice_id, dataMask));\n    };\n    const chartDataRequest = getChartDataRequest({\n      setDataMask,\n      formData,\n      resultFormat: 'json',\n      resultType: 'full',\n      force,\n      method,\n      requestParams,\n      ownState,\n    });\n\n    dispatch(chartUpdateStarted(controller, formData, key));\n\n    const chartDataRequestCaught = chartDataRequest\n      .then(response => {\n        const queriesResponse = response.result;\n        if (isFeatureEnabled(FeatureFlag.GLOBAL_ASYNC_QUERIES)) {\n          // deal with getChartDataRequest transforming the response data\n          const result = 'result' in response ? response.result[0] : response;\n          return waitForAsyncData(result);\n        }\n        return queriesResponse;\n      })\n      .then(queriesResponse => {\n        queriesResponse.forEach(resultItem =>\n          dispatch(\n            logEvent(LOG_ACTIONS_LOAD_CHART, {\n              slice_id: key,\n              applied_filters: resultItem.applied_filters,\n              is_cached: resultItem.is_cached,\n              force_refresh: force,\n              row_count: resultItem.rowcount,\n              datasource: formData.datasource,\n              start_offset: logStart,\n              ts: new Date().getTime(),\n              duration: Logger.getTimestamp() - logStart,\n              has_extra_filters:\n                formData.extra_filters && formData.extra_filters.length > 0,\n              viz_type: formData.viz_type,\n              data_age: resultItem.is_cached\n                ? moment(new Date()).diff(moment.utc(resultItem.cached_dttm))\n                : null,\n            }),\n          ),\n        );\n        return dispatch(chartUpdateSucceeded(queriesResponse, key));\n      })\n      .catch(response => {\n        if (isFeatureEnabled(FeatureFlag.GLOBAL_ASYNC_QUERIES)) {\n          return dispatch(chartUpdateFailed([response], key));\n        }\n\n        const appendErrorLog = (errorDetails, isCached) => {\n          dispatch(\n            logEvent(LOG_ACTIONS_LOAD_CHART, {\n              slice_id: key,\n              has_err: true,\n              is_cached: isCached,\n              error_details: errorDetails,\n              datasource: formData.datasource,\n              start_offset: logStart,\n              ts: new Date().getTime(),\n              duration: Logger.getTimestamp() - logStart,\n            }),\n          );\n        };\n        if (response.name === 'AbortError') {\n          appendErrorLog('abort');\n          return dispatch(chartUpdateStopped(key));\n        }\n        return getClientErrorObject(response).then(parsedResponse => {\n          if (response.statusText === 'timeout') {\n            appendErrorLog('timeout');\n          } else {\n            appendErrorLog(parsedResponse.error, parsedResponse.is_cached);\n          }\n          return dispatch(chartUpdateFailed([parsedResponse], key));\n        });\n      });\n\n    // only retrieve annotations when calling the legacy API\n    const annotationLayers = shouldUseLegacyApi(formData)\n      ? formData.annotation_layers || []\n      : [];\n    const isDashboardRequest = dashboardId > 0;\n\n    return Promise.all([\n      chartDataRequestCaught,\n      dispatch(triggerQuery(false, key)),\n      dispatch(updateQueryFormData(formData, key)),\n      ...annotationLayers.map(x =>\n        dispatch(\n          runAnnotationQuery(\n            x,\n            timeout,\n            formData,\n            key,\n            isDashboardRequest,\n            force,\n          ),\n        ),\n      ),\n    ]);\n  };\n}\n\nexport const GET_SAVED_CHART = 'GET_SAVED_CHART';\nexport function getSavedChart(\n  formData,\n  force = false,\n  timeout = 60,\n  key,\n  dashboardId,\n  ownState,\n) {\n  /*\n   * Perform a GET request to `/explore_json`.\n   *\n   * This will return the payload of a saved chart, optionally filtered by\n   * ad-hoc or extra filters from dashboards. Eg:\n   *\n   *  GET  /explore_json?{\"chart_id\":1}\n   *  GET  /explore_json?{\"chart_id\":1,\"extra_filters\":\"...\"}\n   *\n   */\n  return exploreJSON(\n    formData,\n    force,\n    timeout,\n    key,\n    'GET',\n    dashboardId,\n    ownState,\n  );\n}\n\nexport const POST_CHART_FORM_DATA = 'POST_CHART_FORM_DATA';\nexport function postChartFormData(\n  formData,\n  force = false,\n  timeout = 60,\n  key,\n  dashboardId,\n  ownState,\n) {\n  /*\n   * Perform a POST request to `/explore_json`.\n   *\n   * This will post the form data to the endpoint, returning a new chart.\n   *\n   */\n  return exploreJSON(\n    formData,\n    force,\n    timeout,\n    key,\n    'POST',\n    dashboardId,\n    ownState,\n  );\n}\n\nexport function redirectSQLLab(formData) {\n  return dispatch => {\n    getChartDataRequest({ formData, resultFormat: 'json', resultType: 'query' })\n      .then(({ result }) => {\n        const redirectUrl = '/superset/sqllab/';\n        const payload = {\n          datasourceKey: formData.datasource,\n          sql: result[0].query,\n        };\n        postForm(redirectUrl, payload);\n      })\n      .catch(() =>\n        dispatch(addDangerToast(t('An error occurred while loading the SQL'))),\n      );\n  };\n}\n\nexport function refreshChart(chartKey, force, dashboardId) {\n  return (dispatch, getState) => {\n    const chart = (getState().charts || {})[chartKey];\n    const timeout = getState().dashboardInfo.common.conf\n      .SUPERSET_WEBSERVER_TIMEOUT;\n\n    if (\n      !chart.latestQueryFormData ||\n      Object.keys(chart.latestQueryFormData).length === 0\n    ) {\n      return;\n    }\n    dispatch(\n      postChartFormData(\n        chart.latestQueryFormData,\n        force,\n        timeout,\n        chart.id,\n        dashboardId,\n        getState().dataMask[chart.id]?.ownState,\n      ),\n    );\n  };\n}\n"]},"metadata":{},"sourceType":"module"}