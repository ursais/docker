{"ast":null,"code":"import _someInstanceProperty from \"@babel/runtime-corejs3/core-js-stable/instance/some\";(function () {var enterModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.enterModule : undefined;enterModule && enterModule(module);})();var __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default.signature : function (a) {return a;}; /**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { getChartIdAndColumnFromFilterKey } from './getDashboardFilterKey';\n\nexport default function getSelectedChartIdForFilterScopeTree({\n  activeFilterField,\n  checkedFilterFields })\n{\n  // we don't apply filter on filter_box itself, so we will disable\n  // checkbox in filter scope selector.\n  // this function returns chart id based on current filter scope selector local state:\n  // 1. if in single-edit mode, return the chart id for selected filter field.\n  // 2. if in multi-edit mode, if all filter fields are from same chart id,\n  // return the single chart id.\n  // otherwise, there is no chart to disable.\n  if (activeFilterField) {\n    return getChartIdAndColumnFromFilterKey(activeFilterField).chartId;\n  }\n\n  if (checkedFilterFields.length) {\n    const { chartId } = getChartIdAndColumnFromFilterKey(\n    checkedFilterFields[0]);\n\n\n    if (\n    _someInstanceProperty(checkedFilterFields).call(checkedFilterFields,\n    (filterKey) =>\n    getChartIdAndColumnFromFilterKey(filterKey).chartId !== chartId))\n\n    {\n      return null;\n    }\n    return chartId;\n  }\n\n  return null;\n};(function () {var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined;if (!reactHotLoader) {return;}reactHotLoader.register(getSelectedChartIdForFilterScopeTree, \"getSelectedChartIdForFilterScopeTree\", \"/app/superset-frontend/src/dashboard/util/getSelectedChartIdForFilterScopeTree.js\");})();;(function () {var leaveModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.leaveModule : undefined;leaveModule && leaveModule(module);})();","map":{"version":3,"sources":["/app/superset-frontend/src/dashboard/util/getSelectedChartIdForFilterScopeTree.js"],"names":["getChartIdAndColumnFromFilterKey","getSelectedChartIdForFilterScopeTree","activeFilterField","checkedFilterFields","chartId","length","filterKey"],"mappings":"gYAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASA,gCAAT,QAAiD,yBAAjD;;AAEA,eAAe,SAASC,oCAAT,CAA8C;AAC3DC,EAAAA,iBAD2D;AAE3DC,EAAAA,mBAF2D,EAA9C;AAGZ;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAID,iBAAJ,EAAuB;AACrB,WAAOF,gCAAgC,CAACE,iBAAD,CAAhC,CAAoDE,OAA3D;AACD;;AAED,MAAID,mBAAmB,CAACE,MAAxB,EAAgC;AAC9B,UAAM,EAAED,OAAF,KAAcJ,gCAAgC;AAClDG,IAAAA,mBAAmB,CAAC,CAAD,CAD+B,CAApD;;;AAIA;AACE,0BAAAA,mBAAmB,MAAnB,CAAAA,mBAAmB;AACjB,KAAAG,SAAS;AACPN,IAAAA,gCAAgC,CAACM,SAAD,CAAhC,CAA4CF,OAA5C,KAAwDA,OAFzC,CADrB;;AAKE;AACA,aAAO,IAAP;AACD;AACD,WAAOA,OAAP;AACD;;AAED,SAAO,IAAP;AACD,C,iLAhCuBH,oC","sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { getChartIdAndColumnFromFilterKey } from './getDashboardFilterKey';\n\nexport default function getSelectedChartIdForFilterScopeTree({\n  activeFilterField,\n  checkedFilterFields,\n}) {\n  // we don't apply filter on filter_box itself, so we will disable\n  // checkbox in filter scope selector.\n  // this function returns chart id based on current filter scope selector local state:\n  // 1. if in single-edit mode, return the chart id for selected filter field.\n  // 2. if in multi-edit mode, if all filter fields are from same chart id,\n  // return the single chart id.\n  // otherwise, there is no chart to disable.\n  if (activeFilterField) {\n    return getChartIdAndColumnFromFilterKey(activeFilterField).chartId;\n  }\n\n  if (checkedFilterFields.length) {\n    const { chartId } = getChartIdAndColumnFromFilterKey(\n      checkedFilterFields[0],\n    );\n\n    if (\n      checkedFilterFields.some(\n        filterKey =>\n          getChartIdAndColumnFromFilterKey(filterKey).chartId !== chartId,\n      )\n    ) {\n      return null;\n    }\n    return chartId;\n  }\n\n  return null;\n}\n"]},"metadata":{},"sourceType":"module"}