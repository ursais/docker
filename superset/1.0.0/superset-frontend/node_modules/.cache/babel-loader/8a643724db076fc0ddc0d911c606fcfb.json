{"ast":null,"code":"import _forEachInstanceProperty from \"@babel/runtime-corejs3/core-js-stable/instance/for-each\";(function () {var enterModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.enterModule : undefined;enterModule && enterModule(module);})();var __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default.signature : function (a) {return a;}; /**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { SAVE_FILTER_SETS, SET_FILTER_CONFIG_COMPLETE, SET_IN_SCOPE_STATUS_OF_FILTERS, SET_FILTER_SETS_CONFIG_COMPLETE, SET_FOCUSED_NATIVE_FILTER, UNSET_FOCUSED_NATIVE_FILTER } from 'src/dashboard/actions/nativeFilters';\nimport { HYDRATE_DASHBOARD } from '../actions/hydrate';\nexport function getInitialState({ filterSetsConfig, filterConfig, state: prevState }) {\n  const state = {};\n  const filters = {};\n  if (filterConfig) {\n    _forEachInstanceProperty(filterConfig).call(filterConfig, filter => {\n      const { id } = filter;\n      filters[id] = filter;\n    });\n    state.filters = filters;\n  } else\n  {var _prevState$filters;\n    state.filters = (_prevState$filters = prevState == null ? void 0 : prevState.filters) != null ? _prevState$filters : {};\n  }\n  if (filterSetsConfig) {\n    const filterSets = {};\n    _forEachInstanceProperty(filterSetsConfig).call(filterSetsConfig, filtersSet => {\n      const { id } = filtersSet;\n      filterSets[id] = filtersSet;\n    });\n    state.filterSets = filterSets;\n  } else\n  {var _prevState$filterSets;\n    state.filterSets = (_prevState$filterSets = prevState == null ? void 0 : prevState.filterSets) != null ? _prevState$filterSets : {};\n  }\n  state.focusedFilterId = undefined;\n  return state;\n}\nexport default function nativeFilterReducer(state = {\n  filters: {},\n  filterSets: {} },\naction) {\n  const { filterSets } = state;\n  switch (action.type) {\n    case HYDRATE_DASHBOARD:\n      return {\n        filters: action.data.nativeFilters.filters,\n        filterSets: action.data.nativeFilters.filterSets };\n\n    case SAVE_FILTER_SETS:\n      return {\n        ...state,\n        filterSets: {\n          ...filterSets,\n          [action.filtersSetId]: {\n            id: action.filtersSetId,\n            name: action.name,\n            dataMask: action.dataMask } } };\n\n\n\n    case SET_FILTER_CONFIG_COMPLETE:\n    case SET_IN_SCOPE_STATUS_OF_FILTERS:\n      return getInitialState({ filterConfig: action.filterConfig, state });\n    case SET_FILTER_SETS_CONFIG_COMPLETE:\n      return getInitialState({\n        filterSetsConfig: action.filterSetsConfig,\n        state });\n\n    case SET_FOCUSED_NATIVE_FILTER:\n      return {\n        ...state,\n        focusedFilterId: action.id };\n\n    case UNSET_FOCUSED_NATIVE_FILTER:\n      return {\n        ...state,\n        focusedFilterId: undefined };\n\n    // TODO handle SET_FILTER_CONFIG_FAIL action\n    default:\n      return state;}\n\n};(function () {var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined;if (!reactHotLoader) {return;}reactHotLoader.register(getInitialState, \"getInitialState\", \"/app/superset-frontend/src/dashboard/reducers/nativeFilters.ts\");reactHotLoader.register(nativeFilterReducer, \"nativeFilterReducer\", \"/app/superset-frontend/src/dashboard/reducers/nativeFilters.ts\");})();;(function () {var leaveModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.leaveModule : undefined;leaveModule && leaveModule(module);})();","map":{"version":3,"sources":["/app/superset-frontend/src/dashboard/reducers/nativeFilters.ts"],"names":[],"mappings":"uYAAA;;;;;;;;;;;;;;;;;AAiBG;AACH,SAEE,gBAFF,EAGE,0BAHF,EAIE,8BAJF,EAKE,+BALF,EAME,yBANF,EAOE,2BAPF,QAQO,qCARP;AAWA,SAAS,iBAAT,QAAkC,oBAAlC;AAEA,OAAM,SAAU,eAAV,CAA0B,EAC9B,gBAD8B,EAE9B,YAF8B,EAG9B,KAAK,EAAE,SAHuB,EAA1B,EAQL;AACC,QAAM,KAAK,GAAgC,EAA3C;AAEA,QAAM,OAAO,GAAG,EAAhB;AACA,MAAI,YAAJ,EAAkB;AAChB,6BAAA,YAAY,MAAZ,CAAA,YAAY,EAAS,MAAM,IAAG;AAC5B,YAAM,EAAE,EAAF,KAAS,MAAf;AACA,MAAA,OAAO,CAAC,EAAD,CAAP,GAAc,MAAd;AACD,KAHW,CAAZ;AAIA,IAAA,KAAK,CAAC,OAAN,GAAgB,OAAhB;AACD,GAND;AAMO;AACL,IAAA,KAAK,CAAC,OAAN,yBAAgB,SAAhB,oBAAgB,SAAS,CAAE,OAA3B,iCAAsC,EAAtC;AACD;AAED,MAAI,gBAAJ,EAAsB;AACpB,UAAM,UAAU,GAAG,EAAnB;AACA,6BAAA,gBAAgB,MAAhB,CAAA,gBAAgB,EAAS,UAAU,IAAG;AACpC,YAAM,EAAE,EAAF,KAAS,UAAf;AACA,MAAA,UAAU,CAAC,EAAD,CAAV,GAAiB,UAAjB;AACD,KAHe,CAAhB;AAIA,IAAA,KAAK,CAAC,UAAN,GAAmB,UAAnB;AACD,GAPD;AAOO;AACL,IAAA,KAAK,CAAC,UAAN,4BAAmB,SAAnB,oBAAmB,SAAS,CAAE,UAA9B,oCAA4C,EAA5C;AACD;AACD,EAAA,KAAK,CAAC,eAAN,GAAwB,SAAxB;AACA,SAAO,KAAP;AACD;AAED,eAAc,SAAU,mBAAV,CACZ,KAAA,GAA4B;AAC1B,EAAA,OAAO,EAAE,EADiB;AAE1B,EAAA,UAAU,EAAE,EAFc,EADhB;AAKZ,MALY,EAKW;AAEvB,QAAM,EAAE,UAAF,KAAiB,KAAvB;AACA,UAAQ,MAAM,CAAC,IAAf;AACE,SAAK,iBAAL;AACE,aAAO;AACL,QAAA,OAAO,EAAE,MAAM,CAAC,IAAP,CAAY,aAAZ,CAA0B,OAD9B;AAEL,QAAA,UAAU,EAAE,MAAM,CAAC,IAAP,CAAY,aAAZ,CAA0B,UAFjC,EAAP;;AAIF,SAAK,gBAAL;AACE,aAAO;AACL,WAAG,KADE;AAEL,QAAA,UAAU,EAAE;AACV,aAAG,UADO;AAEV,WAAC,MAAM,CAAC,YAAR,GAAuB;AACrB,YAAA,EAAE,EAAE,MAAM,CAAC,YADU;AAErB,YAAA,IAAI,EAAE,MAAM,CAAC,IAFQ;AAGrB,YAAA,QAAQ,EAAE,MAAM,CAAC,QAHI,EAFb,EAFP,EAAP;;;;AAYF,SAAK,0BAAL;AACA,SAAK,8BAAL;AACE,aAAO,eAAe,CAAC,EAAE,YAAY,EAAE,MAAM,CAAC,YAAvB,EAAqC,KAArC,EAAD,CAAtB;AAEF,SAAK,+BAAL;AACE,aAAO,eAAe,CAAC;AACrB,QAAA,gBAAgB,EAAE,MAAM,CAAC,gBADJ;AAErB,QAAA,KAFqB,EAAD,CAAtB;;AAKF,SAAK,yBAAL;AACE,aAAO;AACL,WAAG,KADE;AAEL,QAAA,eAAe,EAAE,MAAM,CAAC,EAFnB,EAAP;;AAKF,SAAK,2BAAL;AACE,aAAO;AACL,WAAG,KADE;AAEL,QAAA,eAAe,EAAE,SAFZ,EAAP;;AAIF;AACA;AACE,aAAO,KAAP,CA1CJ;;AA4CD,C,iLAxFe,e,+GAoCQ,mB","sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport {\n  AnyFilterAction,\n  SAVE_FILTER_SETS,\n  SET_FILTER_CONFIG_COMPLETE,\n  SET_IN_SCOPE_STATUS_OF_FILTERS,\n  SET_FILTER_SETS_CONFIG_COMPLETE,\n  SET_FOCUSED_NATIVE_FILTER,\n  UNSET_FOCUSED_NATIVE_FILTER,\n} from 'src/dashboard/actions/nativeFilters';\nimport { FilterSet, NativeFiltersState } from './types';\nimport { FilterConfiguration } from '../components/nativeFilters/types';\nimport { HYDRATE_DASHBOARD } from '../actions/hydrate';\n\nexport function getInitialState({\n  filterSetsConfig,\n  filterConfig,\n  state: prevState,\n}: {\n  filterSetsConfig?: FilterSet[];\n  filterConfig?: FilterConfiguration;\n  state?: NativeFiltersState;\n}): NativeFiltersState {\n  const state: Partial<NativeFiltersState> = {};\n\n  const filters = {};\n  if (filterConfig) {\n    filterConfig.forEach(filter => {\n      const { id } = filter;\n      filters[id] = filter;\n    });\n    state.filters = filters;\n  } else {\n    state.filters = prevState?.filters ?? {};\n  }\n\n  if (filterSetsConfig) {\n    const filterSets = {};\n    filterSetsConfig.forEach(filtersSet => {\n      const { id } = filtersSet;\n      filterSets[id] = filtersSet;\n    });\n    state.filterSets = filterSets;\n  } else {\n    state.filterSets = prevState?.filterSets ?? {};\n  }\n  state.focusedFilterId = undefined;\n  return state as NativeFiltersState;\n}\n\nexport default function nativeFilterReducer(\n  state: NativeFiltersState = {\n    filters: {},\n    filterSets: {},\n  },\n  action: AnyFilterAction,\n) {\n  const { filterSets } = state;\n  switch (action.type) {\n    case HYDRATE_DASHBOARD:\n      return {\n        filters: action.data.nativeFilters.filters,\n        filterSets: action.data.nativeFilters.filterSets,\n      };\n    case SAVE_FILTER_SETS:\n      return {\n        ...state,\n        filterSets: {\n          ...filterSets,\n          [action.filtersSetId]: {\n            id: action.filtersSetId,\n            name: action.name,\n            dataMask: action.dataMask,\n          },\n        },\n      };\n\n    case SET_FILTER_CONFIG_COMPLETE:\n    case SET_IN_SCOPE_STATUS_OF_FILTERS:\n      return getInitialState({ filterConfig: action.filterConfig, state });\n\n    case SET_FILTER_SETS_CONFIG_COMPLETE:\n      return getInitialState({\n        filterSetsConfig: action.filterSetsConfig,\n        state,\n      });\n\n    case SET_FOCUSED_NATIVE_FILTER:\n      return {\n        ...state,\n        focusedFilterId: action.id,\n      };\n\n    case UNSET_FOCUSED_NATIVE_FILTER:\n      return {\n        ...state,\n        focusedFilterId: undefined,\n      };\n    // TODO handle SET_FILTER_CONFIG_FAIL action\n    default:\n      return state;\n  }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}