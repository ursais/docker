{"ast":null,"code":"import \"core-js/modules/web.dom-collections.iterator.js\";(function () {var enterModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.enterModule : undefined;enterModule && enterModule(module);})();var __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default.signature : function (a) {return a;}; /**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React, { useState } from 'react';\nimport { styled } from '@superset-ui/core';\nimport { Checkbox } from 'src/common/components';import { jsx as ___EmotionJSX } from \"@emotion/react\";\nconst StyledContainer = styled.div`\n  width: 100%;\n  display: flex;\n  flex-direction: column;\n  align-items: flex-start;\n  min-height: ${({ theme }) => theme.gridUnit * 10}px;\n  padding-top: ${({ theme }) => theme.gridUnit * 2 + 2}px;\n\n  .checkbox {\n    margin-bottom: ${({ theme, checked }) => checked ? theme.gridUnit : 0}px;\n  }\n\n  & > div {\n    margin-bottom: ${({ theme }) => theme.gridUnit * 2}px;\n  }\n`;\nconst CollapsibleControl = props => {\n  const { checked = false, title, children, onChange } = props;\n  const [isChecked, setIsChecked] = useState(checked);\n  return ___EmotionJSX(StyledContainer, { checked: isChecked },\n  ___EmotionJSX(Checkbox, { className: \"checkbox\", checked: isChecked, onChange: e => {\n      const value = e.target.checked;\n      setIsChecked(value);\n      if (onChange) {\n        onChange(value);\n      }\n    } },\n  title),\n\n  isChecked && children);\n\n};__signature__(CollapsibleControl, \"useState{[isChecked, setIsChecked](checked)}\");\nexport { CollapsibleControl };;(function () {var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined;if (!reactHotLoader) {return;}reactHotLoader.register(StyledContainer, \"StyledContainer\", \"/app/superset-frontend/src/dashboard/components/nativeFilters/FiltersConfigModal/FiltersConfigForm/CollapsibleControl.tsx\");reactHotLoader.register(CollapsibleControl, \"CollapsibleControl\", \"/app/superset-frontend/src/dashboard/components/nativeFilters/FiltersConfigModal/FiltersConfigForm/CollapsibleControl.tsx\");})();;(function () {var leaveModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.leaveModule : undefined;leaveModule && leaveModule(module);})();","map":{"version":3,"sources":["/app/superset-frontend/src/dashboard/components/nativeFilters/FiltersConfigModal/FiltersConfigForm/CollapsibleControl.tsx"],"names":[],"mappings":"iWAAA;;;;;;;;;;;;;;;;;AAiBG;AACH,OAAO,KAAP,IAA2B,QAA3B,QAA2C,OAA3C;AACA,SAAS,MAAT,QAAuB,mBAAvB;AACA,SAAS,QAAT,QAAyB,uBAAzB,C;AASA,MAAM,eAAe,GAAG,MAAM,CAAC,GAAyB;;;;;gBAKxC,CAAC,EAAE,KAAF,EAAD,KAAe,KAAK,CAAC,QAAN,GAAiB,EAAE;iBACjC,CAAC,EAAE,KAAF,EAAD,KAAe,KAAK,CAAC,QAAN,GAAiB,CAAjB,GAAqB,CAAC;;;qBAGjC,CAAC,EAAE,KAAF,EAAS,OAAT,EAAD,KAAyB,OAAO,GAAG,KAAK,CAAC,QAAT,GAAoB,CAAE;;;;qBAItD,CAAC,EAAE,KAAF,EAAD,KAAe,KAAK,CAAC,QAAN,GAAiB,CAAC;;AAErD,CAfD;AAiBA,MAAM,kBAAkB,GAAI,KAAD,IAAmC;AAC5D,QAAM,EAAE,OAAO,GAAG,KAAZ,EAAmB,KAAnB,EAA0B,QAA1B,EAAoC,QAApC,KAAiD,KAAvD;AACA,QAAM,CAAC,SAAD,EAAY,YAAZ,IAA4B,QAAQ,CAAC,OAAD,CAA1C;AACA,SACE,cAAC,eAAD,IAAiB,OAAO,EAAE,SAA1B;AACE,gBAAC,QAAD,IACE,SAAS,EAAC,UADZ,EAEE,OAAO,EAAE,SAFX,EAGE,QAAQ,EAAE,CAAC,IAAG;AACZ,YAAM,KAAK,GAAG,CAAC,CAAC,MAAF,CAAS,OAAvB;AACA,MAAA,YAAY,CAAC,KAAD,CAAZ;AACA,UAAI,QAAJ,EAAc;AACZ,QAAA,QAAQ,CAAC,KAAD,CAAR;AACD;AACF,KATH;AAWG,EAAA,KAXH,CADF;;AAcG,EAAA,SAAS,IAAI,QAdhB,CADF;;AAkBD,CArBD,C,cAAM,kB;AAuBN,SAAS,kBAAT,G,iLAxCM,e,0KAiBA,kB","sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React, { ReactNode, useState } from 'react';\nimport { styled } from '@superset-ui/core';\nimport { Checkbox } from 'src/common/components';\n\ninterface CollapsibleControlProps {\n  checked?: boolean;\n  title: string;\n  children: ReactNode;\n  onChange?: (checked: boolean) => void;\n}\n\nconst StyledContainer = styled.div<{ checked: boolean }>`\n  width: 100%;\n  display: flex;\n  flex-direction: column;\n  align-items: flex-start;\n  min-height: ${({ theme }) => theme.gridUnit * 10}px;\n  padding-top: ${({ theme }) => theme.gridUnit * 2 + 2}px;\n\n  .checkbox {\n    margin-bottom: ${({ theme, checked }) => (checked ? theme.gridUnit : 0)}px;\n  }\n\n  & > div {\n    margin-bottom: ${({ theme }) => theme.gridUnit * 2}px;\n  }\n`;\n\nconst CollapsibleControl = (props: CollapsibleControlProps) => {\n  const { checked = false, title, children, onChange } = props;\n  const [isChecked, setIsChecked] = useState(checked);\n  return (\n    <StyledContainer checked={isChecked}>\n      <Checkbox\n        className=\"checkbox\"\n        checked={isChecked}\n        onChange={e => {\n          const value = e.target.checked;\n          setIsChecked(value);\n          if (onChange) {\n            onChange(value);\n          }\n        }}\n      >\n        {title}\n      </Checkbox>\n      {isChecked && children}\n    </StyledContainer>\n  );\n};\n\nexport { CollapsibleControl, CollapsibleControlProps };\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}