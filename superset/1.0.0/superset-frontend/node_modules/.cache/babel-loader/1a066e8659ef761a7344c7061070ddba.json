{"ast":null,"code":"import \"core-js/modules/web.dom-collections.iterator.js\";import _Array$isArray from \"@babel/runtime-corejs3/core-js-stable/array/is-array\";import _indexOfInstanceProperty from \"@babel/runtime-corejs3/core-js-stable/instance/index-of\";import _mapInstanceProperty from \"@babel/runtime-corejs3/core-js-stable/instance/map\";var _context;(function () {var enterModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.enterModule : undefined;enterModule && enterModule(module);})();var __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default.signature : function (a) {return a;}; /**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport {\nCUSTOM_OPERATORS,\nOperators,\nOPERATOR_ENUM_TO_OPERATOR_TYPE } from\n'src/explore/constants';\nimport { getSimpleSQLExpression } from 'src/explore/exploreUtils';\n\nexport const EXPRESSION_TYPES = {\n  SIMPLE: 'SIMPLE',\n  SQL: 'SQL' };\n\n\nexport const CLAUSES = {\n  HAVING: 'HAVING',\n  WHERE: 'WHERE' };\n\n\nconst OPERATORS_TO_SQL = {\n  '==': '=',\n  '!=': '<>',\n  '>': '>',\n  '<': '<',\n  '>=': '>=',\n  '<=': '<=',\n  IN: 'IN',\n  'NOT IN': 'NOT IN',\n  LIKE: 'LIKE',\n  ILIKE: 'ILIKE',\n  REGEX: 'REGEX',\n  'IS NOT NULL': 'IS NOT NULL',\n  'IS NULL': 'IS NULL',\n  'IS TRUE': 'IS TRUE',\n  'IS FALSE': 'IS FALSE',\n  'LATEST PARTITION': ({ datasource }) =>\n  `= '{{ presto.latest_partition('${datasource.schema}.${datasource.datasource_name}') }}'` };\n\n\nconst CUSTOM_OPERATIONS = _mapInstanceProperty(_context = [...CUSTOM_OPERATORS]).call(_context,\nop => OPERATOR_ENUM_TO_OPERATOR_TYPE[op].operation);\n\n\nfunction translateToSql(adhocMetric, { useSimple } = {}) {\n  if (adhocMetric.expressionType === EXPRESSION_TYPES.SIMPLE || useSimple) {\n    const { subject, comparator } = adhocMetric;\n    const operator =\n    adhocMetric.operator &&\n    _indexOfInstanceProperty(CUSTOM_OPERATIONS).call(CUSTOM_OPERATIONS, adhocMetric.operator) >= 0 ?\n    OPERATORS_TO_SQL[adhocMetric.operator](adhocMetric) :\n    OPERATORS_TO_SQL[adhocMetric.operator];\n    return getSimpleSQLExpression(subject, operator, comparator);\n  }\n  if (adhocMetric.expressionType === EXPRESSION_TYPES.SQL) {\n    return adhocMetric.sqlExpression;\n  }\n  return '';\n}\n\nexport default class AdhocFilter {\n  constructor(adhocFilter) {\n    this.expressionType = adhocFilter.expressionType || EXPRESSION_TYPES.SIMPLE;\n    if (this.expressionType === EXPRESSION_TYPES.SIMPLE) {var _adhocFilter$operator, _context2, _context3;\n      this.subject = adhocFilter.subject;\n      this.operator = (_adhocFilter$operator = adhocFilter.operator) == null ? void 0 : _adhocFilter$operator.toUpperCase();\n      this.operatorId = adhocFilter.operatorId;\n      this.comparator = adhocFilter.comparator;\n      if (\n      _indexOfInstanceProperty(_context2 = [Operators.IS_TRUE, Operators.IS_FALSE]).call(_context2,\n      adhocFilter.operatorId) >=\n      0)\n      {\n        this.comparator = adhocFilter.operatorId === Operators.IS_TRUE;\n      }\n      if (\n      _indexOfInstanceProperty(_context3 = [Operators.IS_NULL, Operators.IS_NOT_NULL]).call(_context3,\n      adhocFilter.operatorId) >=\n      0)\n      {\n        this.comparator = null;\n      }\n      this.clause = adhocFilter.clause || CLAUSES.WHERE;\n      this.sqlExpression = null;\n    } else if (this.expressionType === EXPRESSION_TYPES.SQL) {\n      this.sqlExpression =\n      typeof adhocFilter.sqlExpression === 'string' ?\n      adhocFilter.sqlExpression :\n      translateToSql(adhocFilter, { useSimple: true });\n      this.clause = adhocFilter.clause;\n      if (\n      adhocFilter.operator &&\n      _indexOfInstanceProperty(CUSTOM_OPERATIONS).call(CUSTOM_OPERATIONS, adhocFilter.operator) >= 0)\n      {\n        this.subject = adhocFilter.subject;\n        this.operator = adhocFilter.operator;\n        this.operatorId = adhocFilter.operatorId;\n      } else {\n        this.subject = null;\n        this.operator = null;\n      }\n      this.comparator = null;\n    }\n    this.isExtra = !!adhocFilter.isExtra;\n    this.isNew = !!adhocFilter.isNew;\n\n    this.filterOptionName =\n    adhocFilter.filterOptionName ||\n    `filter_${Math.random().\n    toString(36).\n    substring(2, 15)}_${Math.random().toString(36).substring(2, 15)}`;\n  }\n\n  duplicateWith(nextFields) {\n    return new AdhocFilter({\n      ...this,\n      // all duplicated fields are not new (i.e. will not open popup automatically)\n      isNew: false,\n      ...nextFields });\n\n  }\n\n  equals(adhocFilter) {\n    return (\n      adhocFilter.expressionType === this.expressionType &&\n      adhocFilter.sqlExpression === this.sqlExpression &&\n      adhocFilter.operator === this.operator &&\n      adhocFilter.operatorId === this.operatorId &&\n      adhocFilter.comparator === this.comparator &&\n      adhocFilter.subject === this.subject);\n\n  }\n\n  isValid() {var _context4, _context5;\n    const nullCheckOperators = _mapInstanceProperty(_context4 = [Operators.IS_NOT_NULL, Operators.IS_NULL]).call(_context4,\n    op => OPERATOR_ENUM_TO_OPERATOR_TYPE[op].operation);\n\n    const truthCheckOperators = _mapInstanceProperty(_context5 = [Operators.IS_TRUE, Operators.IS_FALSE]).call(_context5,\n    op => OPERATOR_ENUM_TO_OPERATOR_TYPE[op].operation);\n\n    if (this.expressionType === EXPRESSION_TYPES.SIMPLE) {\n      if (_indexOfInstanceProperty(nullCheckOperators).call(nullCheckOperators, this.operator) >= 0) {\n        return !!(this.operator && this.subject);\n      }\n      if (_indexOfInstanceProperty(truthCheckOperators).call(truthCheckOperators, this.operator) >= 0) {\n        return !!(this.subject && this.comparator !== null);\n      }\n      if (this.operator && this.subject && this.clause) {\n        if (_Array$isArray(this.comparator)) {\n          if (this.comparator.length > 0) {\n            // A non-empty array of values ('IN' or 'NOT IN' clauses)\n            return true;\n          }\n        } else if (this.comparator !== null) {\n          // A value has been selected or typed\n          return true;\n        }\n      }\n    } else if (this.expressionType === EXPRESSION_TYPES.SQL) {\n      return !!(this.sqlExpression && this.clause);\n    }\n    return false;\n  }\n\n  getDefaultLabel() {\n    const label = this.translateToSql();\n    return label.length < 43 ? label : `${label.substring(0, 40)}...`;\n  }\n\n  getTooltipTitle() {\n    return this.translateToSql();\n  }\n\n  translateToSql() {\n    return translateToSql(this);\n  } // @ts-ignore\n  __reactstandin__regenerateByEval(key, code) {// @ts-ignore\n    this[key] = eval(code);}};(function () {var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined;if (!reactHotLoader) {return;}reactHotLoader.register(EXPRESSION_TYPES, \"EXPRESSION_TYPES\", \"/app/superset-frontend/src/explore/components/controls/FilterControl/AdhocFilter/index.js\");reactHotLoader.register(CLAUSES, \"CLAUSES\", \"/app/superset-frontend/src/explore/components/controls/FilterControl/AdhocFilter/index.js\");reactHotLoader.register(OPERATORS_TO_SQL, \"OPERATORS_TO_SQL\", \"/app/superset-frontend/src/explore/components/controls/FilterControl/AdhocFilter/index.js\");reactHotLoader.register(CUSTOM_OPERATIONS, \"CUSTOM_OPERATIONS\", \"/app/superset-frontend/src/explore/components/controls/FilterControl/AdhocFilter/index.js\");reactHotLoader.register(translateToSql, \"translateToSql\", \"/app/superset-frontend/src/explore/components/controls/FilterControl/AdhocFilter/index.js\");reactHotLoader.register(AdhocFilter, \"AdhocFilter\", \"/app/superset-frontend/src/explore/components/controls/FilterControl/AdhocFilter/index.js\");})();;(function () {var leaveModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.leaveModule : undefined;leaveModule && leaveModule(module);})();","map":{"version":3,"sources":["/app/superset-frontend/src/explore/components/controls/FilterControl/AdhocFilter/index.js"],"names":["CUSTOM_OPERATORS","Operators","OPERATOR_ENUM_TO_OPERATOR_TYPE","getSimpleSQLExpression","EXPRESSION_TYPES","SIMPLE","SQL","CLAUSES","HAVING","WHERE","OPERATORS_TO_SQL","IN","LIKE","ILIKE","REGEX","datasource","schema","datasource_name","CUSTOM_OPERATIONS","op","operation","translateToSql","adhocMetric","useSimple","expressionType","subject","comparator","operator","sqlExpression","AdhocFilter","constructor","adhocFilter","toUpperCase","operatorId","IS_TRUE","IS_FALSE","IS_NULL","IS_NOT_NULL","clause","isExtra","isNew","filterOptionName","Math","random","toString","substring","duplicateWith","nextFields","equals","isValid","nullCheckOperators","truthCheckOperators","length","getDefaultLabel","label","getTooltipTitle"],"mappings":"qnBAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACEA,gBADF;AAEEC,SAFF;AAGEC,8BAHF;AAIO,uBAJP;AAKA,SAASC,sBAAT,QAAuC,0BAAvC;;AAEA,OAAO,MAAMC,gBAAgB,GAAG;AAC9BC,EAAAA,MAAM,EAAE,QADsB;AAE9BC,EAAAA,GAAG,EAAE,KAFyB,EAAzB;;;AAKP,OAAO,MAAMC,OAAO,GAAG;AACrBC,EAAAA,MAAM,EAAE,QADa;AAErBC,EAAAA,KAAK,EAAE,OAFc,EAAhB;;;AAKP,MAAMC,gBAAgB,GAAG;AACvB,QAAM,GADiB;AAEvB,QAAM,IAFiB;AAGvB,OAAK,GAHkB;AAIvB,OAAK,GAJkB;AAKvB,QAAM,IALiB;AAMvB,QAAM,IANiB;AAOvBC,EAAAA,EAAE,EAAE,IAPmB;AAQvB,YAAU,QARa;AASvBC,EAAAA,IAAI,EAAE,MATiB;AAUvBC,EAAAA,KAAK,EAAE,OAVgB;AAWvBC,EAAAA,KAAK,EAAE,OAXgB;AAYvB,iBAAe,aAZQ;AAavB,aAAW,SAbY;AAcvB,aAAW,SAdY;AAevB,cAAY,UAfW;AAgBvB,sBAAoB,CAAC,EAAEC,UAAF,EAAD;AACjB,oCAAiCA,UAAU,CAACC,MAAO,IAAGD,UAAU,CAACE,eAAgB,QAjB7D,EAAzB;;;AAoBA,MAAMC,iBAAiB,GAAG,iCAAC,GAAGlB,gBAAJ;AACxBmB,EAAE,IAAIjB,8BAA8B,CAACiB,EAAD,CAA9B,CAAmCC,SADjB,CAA1B;;;AAIA,SAASC,cAAT,CAAwBC,WAAxB,EAAqC,EAAEC,SAAF,KAAgB,EAArD,EAAyD;AACvD,MAAID,WAAW,CAACE,cAAZ,KAA+BpB,gBAAgB,CAACC,MAAhD,IAA0DkB,SAA9D,EAAyE;AACvE,UAAM,EAAEE,OAAF,EAAWC,UAAX,KAA0BJ,WAAhC;AACA,UAAMK,QAAQ;AACZL,IAAAA,WAAW,CAACK,QAAZ;AACA,6BAAAT,iBAAiB,MAAjB,CAAAA,iBAAiB,EAASI,WAAW,CAACK,QAArB,CAAjB,IAAmD,CADnD;AAEIjB,IAAAA,gBAAgB,CAACY,WAAW,CAACK,QAAb,CAAhB,CAAuCL,WAAvC,CAFJ;AAGIZ,IAAAA,gBAAgB,CAACY,WAAW,CAACK,QAAb,CAJtB;AAKA,WAAOxB,sBAAsB,CAACsB,OAAD,EAAUE,QAAV,EAAoBD,UAApB,CAA7B;AACD;AACD,MAAIJ,WAAW,CAACE,cAAZ,KAA+BpB,gBAAgB,CAACE,GAApD,EAAyD;AACvD,WAAOgB,WAAW,CAACM,aAAnB;AACD;AACD,SAAO,EAAP;AACD;;AAED,eAAe,MAAMC,WAAN,CAAkB;AAC/BC,EAAAA,WAAW,CAACC,WAAD,EAAc;AACvB,SAAKP,cAAL,GAAsBO,WAAW,CAACP,cAAZ,IAA8BpB,gBAAgB,CAACC,MAArE;AACA,QAAI,KAAKmB,cAAL,KAAwBpB,gBAAgB,CAACC,MAA7C,EAAqD;AACnD,WAAKoB,OAAL,GAAeM,WAAW,CAACN,OAA3B;AACA,WAAKE,QAAL,4BAAgBI,WAAW,CAACJ,QAA5B,qBAAgB,sBAAsBK,WAAtB,EAAhB;AACA,WAAKC,UAAL,GAAkBF,WAAW,CAACE,UAA9B;AACA,WAAKP,UAAL,GAAkBK,WAAW,CAACL,UAA9B;AACA;AACE,4CAACzB,SAAS,CAACiC,OAAX,EAAoBjC,SAAS,CAACkC,QAA9B;AACEJ,MAAAA,WAAW,CAACE,UADd;AAEK,OAHP;AAIE;AACA,aAAKP,UAAL,GAAkBK,WAAW,CAACE,UAAZ,KAA2BhC,SAAS,CAACiC,OAAvD;AACD;AACD;AACE,4CAACjC,SAAS,CAACmC,OAAX,EAAoBnC,SAAS,CAACoC,WAA9B;AACEN,MAAAA,WAAW,CAACE,UADd;AAEK,OAHP;AAIE;AACA,aAAKP,UAAL,GAAkB,IAAlB;AACD;AACD,WAAKY,MAAL,GAAcP,WAAW,CAACO,MAAZ,IAAsB/B,OAAO,CAACE,KAA5C;AACA,WAAKmB,aAAL,GAAqB,IAArB;AACD,KArBD,MAqBO,IAAI,KAAKJ,cAAL,KAAwBpB,gBAAgB,CAACE,GAA7C,EAAkD;AACvD,WAAKsB,aAAL;AACE,aAAOG,WAAW,CAACH,aAAnB,KAAqC,QAArC;AACIG,MAAAA,WAAW,CAACH,aADhB;AAEIP,MAAAA,cAAc,CAACU,WAAD,EAAc,EAAER,SAAS,EAAE,IAAb,EAAd,CAHpB;AAIA,WAAKe,MAAL,GAAcP,WAAW,CAACO,MAA1B;AACA;AACEP,MAAAA,WAAW,CAACJ,QAAZ;AACA,+BAAAT,iBAAiB,MAAjB,CAAAA,iBAAiB,EAASa,WAAW,CAACJ,QAArB,CAAjB,IAAmD,CAFrD;AAGE;AACA,aAAKF,OAAL,GAAeM,WAAW,CAACN,OAA3B;AACA,aAAKE,QAAL,GAAgBI,WAAW,CAACJ,QAA5B;AACA,aAAKM,UAAL,GAAkBF,WAAW,CAACE,UAA9B;AACD,OAPD,MAOO;AACL,aAAKR,OAAL,GAAe,IAAf;AACA,aAAKE,QAAL,GAAgB,IAAhB;AACD;AACD,WAAKD,UAAL,GAAkB,IAAlB;AACD;AACD,SAAKa,OAAL,GAAe,CAAC,CAACR,WAAW,CAACQ,OAA7B;AACA,SAAKC,KAAL,GAAa,CAAC,CAACT,WAAW,CAACS,KAA3B;;AAEA,SAAKC,gBAAL;AACEV,IAAAA,WAAW,CAACU,gBAAZ;AACC,cAASC,IAAI,CAACC,MAAL;AACPC,IAAAA,QADO,CACE,EADF;AAEPC,IAAAA,SAFO,CAEG,CAFH,EAEM,EAFN,CAEU,IAAGH,IAAI,CAACC,MAAL,GAAcC,QAAd,CAAuB,EAAvB,EAA2BC,SAA3B,CAAqC,CAArC,EAAwC,EAAxC,CAA4C,EAJrE;AAKD;;AAEDC,EAAAA,aAAa,CAACC,UAAD,EAAa;AACxB,WAAO,IAAIlB,WAAJ,CAAgB;AACrB,SAAG,IADkB;AAErB;AACAW,MAAAA,KAAK,EAAE,KAHc;AAIrB,SAAGO,UAJkB,EAAhB,CAAP;;AAMD;;AAEDC,EAAAA,MAAM,CAACjB,WAAD,EAAc;AAClB;AACEA,MAAAA,WAAW,CAACP,cAAZ,KAA+B,KAAKA,cAApC;AACAO,MAAAA,WAAW,CAACH,aAAZ,KAA8B,KAAKA,aADnC;AAEAG,MAAAA,WAAW,CAACJ,QAAZ,KAAyB,KAAKA,QAF9B;AAGAI,MAAAA,WAAW,CAACE,UAAZ,KAA2B,KAAKA,UAHhC;AAIAF,MAAAA,WAAW,CAACL,UAAZ,KAA2B,KAAKA,UAJhC;AAKAK,MAAAA,WAAW,CAACN,OAAZ,KAAwB,KAAKA,OAN/B;;AAQD;;AAEDwB,EAAAA,OAAO,GAAG;AACR,UAAMC,kBAAkB,GAAG,kCAACjD,SAAS,CAACoC,WAAX,EAAwBpC,SAAS,CAACmC,OAAlC;AACzBjB,IAAAA,EAAE,IAAIjB,8BAA8B,CAACiB,EAAD,CAA9B,CAAmCC,SADhB,CAA3B;;AAGA,UAAM+B,mBAAmB,GAAG,kCAAClD,SAAS,CAACiC,OAAX,EAAoBjC,SAAS,CAACkC,QAA9B;AAC1BhB,IAAAA,EAAE,IAAIjB,8BAA8B,CAACiB,EAAD,CAA9B,CAAmCC,SADf,CAA5B;;AAGA,QAAI,KAAKI,cAAL,KAAwBpB,gBAAgB,CAACC,MAA7C,EAAqD;AACnD,UAAI,yBAAA6C,kBAAkB,MAAlB,CAAAA,kBAAkB,EAAS,KAAKvB,QAAd,CAAlB,IAA6C,CAAjD,EAAoD;AAClD,eAAO,CAAC,EAAE,KAAKA,QAAL,IAAiB,KAAKF,OAAxB,CAAR;AACD;AACD,UAAI,yBAAA0B,mBAAmB,MAAnB,CAAAA,mBAAmB,EAAS,KAAKxB,QAAd,CAAnB,IAA8C,CAAlD,EAAqD;AACnD,eAAO,CAAC,EAAE,KAAKF,OAAL,IAAgB,KAAKC,UAAL,KAAoB,IAAtC,CAAR;AACD;AACD,UAAI,KAAKC,QAAL,IAAiB,KAAKF,OAAtB,IAAiC,KAAKa,MAA1C,EAAkD;AAChD,YAAI,eAAc,KAAKZ,UAAnB,CAAJ,EAAoC;AAClC,cAAI,KAAKA,UAAL,CAAgB0B,MAAhB,GAAyB,CAA7B,EAAgC;AAC9B;AACA,mBAAO,IAAP;AACD;AACF,SALD,MAKO,IAAI,KAAK1B,UAAL,KAAoB,IAAxB,EAA8B;AACnC;AACA,iBAAO,IAAP;AACD;AACF;AACF,KAlBD,MAkBO,IAAI,KAAKF,cAAL,KAAwBpB,gBAAgB,CAACE,GAA7C,EAAkD;AACvD,aAAO,CAAC,EAAE,KAAKsB,aAAL,IAAsB,KAAKU,MAA7B,CAAR;AACD;AACD,WAAO,KAAP;AACD;;AAEDe,EAAAA,eAAe,GAAG;AAChB,UAAMC,KAAK,GAAG,KAAKjC,cAAL,EAAd;AACA,WAAOiC,KAAK,CAACF,MAAN,GAAe,EAAf,GAAoBE,KAApB,GAA6B,GAAEA,KAAK,CAACT,SAAN,CAAgB,CAAhB,EAAmB,EAAnB,CAAuB,KAA7D;AACD;;AAEDU,EAAAA,eAAe,GAAG;AAChB,WAAO,KAAKlC,cAAL,EAAP;AACD;;AAEDA,EAAAA,cAAc,GAAG;AACf,WAAOA,cAAc,CAAC,IAAD,CAArB;AACD,GAnH8B;AAAA;AAAA,6B,iLAlDpBjB,gB,2IAKAG,O,kIAKPG,gB,2IAoBAQ,iB,4IAIGG,c,yIAgBYQ,W","sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport {\n  CUSTOM_OPERATORS,\n  Operators,\n  OPERATOR_ENUM_TO_OPERATOR_TYPE,\n} from 'src/explore/constants';\nimport { getSimpleSQLExpression } from 'src/explore/exploreUtils';\n\nexport const EXPRESSION_TYPES = {\n  SIMPLE: 'SIMPLE',\n  SQL: 'SQL',\n};\n\nexport const CLAUSES = {\n  HAVING: 'HAVING',\n  WHERE: 'WHERE',\n};\n\nconst OPERATORS_TO_SQL = {\n  '==': '=',\n  '!=': '<>',\n  '>': '>',\n  '<': '<',\n  '>=': '>=',\n  '<=': '<=',\n  IN: 'IN',\n  'NOT IN': 'NOT IN',\n  LIKE: 'LIKE',\n  ILIKE: 'ILIKE',\n  REGEX: 'REGEX',\n  'IS NOT NULL': 'IS NOT NULL',\n  'IS NULL': 'IS NULL',\n  'IS TRUE': 'IS TRUE',\n  'IS FALSE': 'IS FALSE',\n  'LATEST PARTITION': ({ datasource }) =>\n    `= '{{ presto.latest_partition('${datasource.schema}.${datasource.datasource_name}') }}'`,\n};\n\nconst CUSTOM_OPERATIONS = [...CUSTOM_OPERATORS].map(\n  op => OPERATOR_ENUM_TO_OPERATOR_TYPE[op].operation,\n);\n\nfunction translateToSql(adhocMetric, { useSimple } = {}) {\n  if (adhocMetric.expressionType === EXPRESSION_TYPES.SIMPLE || useSimple) {\n    const { subject, comparator } = adhocMetric;\n    const operator =\n      adhocMetric.operator &&\n      CUSTOM_OPERATIONS.indexOf(adhocMetric.operator) >= 0\n        ? OPERATORS_TO_SQL[adhocMetric.operator](adhocMetric)\n        : OPERATORS_TO_SQL[adhocMetric.operator];\n    return getSimpleSQLExpression(subject, operator, comparator);\n  }\n  if (adhocMetric.expressionType === EXPRESSION_TYPES.SQL) {\n    return adhocMetric.sqlExpression;\n  }\n  return '';\n}\n\nexport default class AdhocFilter {\n  constructor(adhocFilter) {\n    this.expressionType = adhocFilter.expressionType || EXPRESSION_TYPES.SIMPLE;\n    if (this.expressionType === EXPRESSION_TYPES.SIMPLE) {\n      this.subject = adhocFilter.subject;\n      this.operator = adhocFilter.operator?.toUpperCase();\n      this.operatorId = adhocFilter.operatorId;\n      this.comparator = adhocFilter.comparator;\n      if (\n        [Operators.IS_TRUE, Operators.IS_FALSE].indexOf(\n          adhocFilter.operatorId,\n        ) >= 0\n      ) {\n        this.comparator = adhocFilter.operatorId === Operators.IS_TRUE;\n      }\n      if (\n        [Operators.IS_NULL, Operators.IS_NOT_NULL].indexOf(\n          adhocFilter.operatorId,\n        ) >= 0\n      ) {\n        this.comparator = null;\n      }\n      this.clause = adhocFilter.clause || CLAUSES.WHERE;\n      this.sqlExpression = null;\n    } else if (this.expressionType === EXPRESSION_TYPES.SQL) {\n      this.sqlExpression =\n        typeof adhocFilter.sqlExpression === 'string'\n          ? adhocFilter.sqlExpression\n          : translateToSql(adhocFilter, { useSimple: true });\n      this.clause = adhocFilter.clause;\n      if (\n        adhocFilter.operator &&\n        CUSTOM_OPERATIONS.indexOf(adhocFilter.operator) >= 0\n      ) {\n        this.subject = adhocFilter.subject;\n        this.operator = adhocFilter.operator;\n        this.operatorId = adhocFilter.operatorId;\n      } else {\n        this.subject = null;\n        this.operator = null;\n      }\n      this.comparator = null;\n    }\n    this.isExtra = !!adhocFilter.isExtra;\n    this.isNew = !!adhocFilter.isNew;\n\n    this.filterOptionName =\n      adhocFilter.filterOptionName ||\n      `filter_${Math.random()\n        .toString(36)\n        .substring(2, 15)}_${Math.random().toString(36).substring(2, 15)}`;\n  }\n\n  duplicateWith(nextFields) {\n    return new AdhocFilter({\n      ...this,\n      // all duplicated fields are not new (i.e. will not open popup automatically)\n      isNew: false,\n      ...nextFields,\n    });\n  }\n\n  equals(adhocFilter) {\n    return (\n      adhocFilter.expressionType === this.expressionType &&\n      adhocFilter.sqlExpression === this.sqlExpression &&\n      adhocFilter.operator === this.operator &&\n      adhocFilter.operatorId === this.operatorId &&\n      adhocFilter.comparator === this.comparator &&\n      adhocFilter.subject === this.subject\n    );\n  }\n\n  isValid() {\n    const nullCheckOperators = [Operators.IS_NOT_NULL, Operators.IS_NULL].map(\n      op => OPERATOR_ENUM_TO_OPERATOR_TYPE[op].operation,\n    );\n    const truthCheckOperators = [Operators.IS_TRUE, Operators.IS_FALSE].map(\n      op => OPERATOR_ENUM_TO_OPERATOR_TYPE[op].operation,\n    );\n    if (this.expressionType === EXPRESSION_TYPES.SIMPLE) {\n      if (nullCheckOperators.indexOf(this.operator) >= 0) {\n        return !!(this.operator && this.subject);\n      }\n      if (truthCheckOperators.indexOf(this.operator) >= 0) {\n        return !!(this.subject && this.comparator !== null);\n      }\n      if (this.operator && this.subject && this.clause) {\n        if (Array.isArray(this.comparator)) {\n          if (this.comparator.length > 0) {\n            // A non-empty array of values ('IN' or 'NOT IN' clauses)\n            return true;\n          }\n        } else if (this.comparator !== null) {\n          // A value has been selected or typed\n          return true;\n        }\n      }\n    } else if (this.expressionType === EXPRESSION_TYPES.SQL) {\n      return !!(this.sqlExpression && this.clause);\n    }\n    return false;\n  }\n\n  getDefaultLabel() {\n    const label = this.translateToSql();\n    return label.length < 43 ? label : `${label.substring(0, 40)}...`;\n  }\n\n  getTooltipTitle() {\n    return this.translateToSql();\n  }\n\n  translateToSql() {\n    return translateToSql(this);\n  }\n}\n"]},"metadata":{},"sourceType":"module"}