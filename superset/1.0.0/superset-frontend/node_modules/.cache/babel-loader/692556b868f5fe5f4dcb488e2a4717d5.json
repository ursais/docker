{"ast":null,"code":"(function () {var enterModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.enterModule : undefined;enterModule && enterModule(module);})();var __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default.signature : function (a) {return a;}; /**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport { DASHBOARD_INFO_UPDATED } from '../actions/dashboardInfo';\nimport { HYDRATE_DASHBOARD } from '../actions/hydrate';\n\nexport default function dashboardStateReducer(state = {}, action) {\n  switch (action.type) {\n    case DASHBOARD_INFO_UPDATED:\n      return {\n        ...state,\n        ...action.newInfo,\n        // server-side compare last_modified_time in second level\n        last_modified_time: Math.round(new Date().getTime() / 1000) };\n\n    case HYDRATE_DASHBOARD:\n      return {\n        ...state,\n        ...action.data.dashboardInfo\n        // set async api call data\n      };\n    default:\n      return state;}\n\n};(function () {var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined;if (!reactHotLoader) {return;}reactHotLoader.register(dashboardStateReducer, \"dashboardStateReducer\", \"/app/superset-frontend/src/dashboard/reducers/dashboardInfo.js\");})();;(function () {var leaveModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.leaveModule : undefined;leaveModule && leaveModule(module);})();","map":{"version":3,"sources":["/app/superset-frontend/src/dashboard/reducers/dashboardInfo.js"],"names":["DASHBOARD_INFO_UPDATED","HYDRATE_DASHBOARD","dashboardStateReducer","state","action","type","newInfo","last_modified_time","Math","round","Date","getTime","data","dashboardInfo"],"mappings":"wSAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,SAASA,sBAAT,QAAuC,0BAAvC;AACA,SAASC,iBAAT,QAAkC,oBAAlC;;AAEA,eAAe,SAASC,qBAAT,CAA+BC,KAAK,GAAG,EAAvC,EAA2CC,MAA3C,EAAmD;AAChE,UAAQA,MAAM,CAACC,IAAf;AACE,SAAKL,sBAAL;AACE,aAAO;AACL,WAAGG,KADE;AAEL,WAAGC,MAAM,CAACE,OAFL;AAGL;AACAC,QAAAA,kBAAkB,EAAEC,IAAI,CAACC,KAAL,CAAW,IAAIC,IAAJ,GAAWC,OAAX,KAAuB,IAAlC,CAJf,EAAP;;AAMF,SAAKV,iBAAL;AACE,aAAO;AACL,WAAGE,KADE;AAEL,WAAGC,MAAM,CAACQ,IAAP,CAAYC;AACf;AAHK,OAAP;AAKF;AACE,aAAOV,KAAP,CAfJ;;AAiBD,C,iLAlBuBD,qB","sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport { DASHBOARD_INFO_UPDATED } from '../actions/dashboardInfo';\nimport { HYDRATE_DASHBOARD } from '../actions/hydrate';\n\nexport default function dashboardStateReducer(state = {}, action) {\n  switch (action.type) {\n    case DASHBOARD_INFO_UPDATED:\n      return {\n        ...state,\n        ...action.newInfo,\n        // server-side compare last_modified_time in second level\n        last_modified_time: Math.round(new Date().getTime() / 1000),\n      };\n    case HYDRATE_DASHBOARD:\n      return {\n        ...state,\n        ...action.data.dashboardInfo,\n        // set async api call data\n      };\n    default:\n      return state;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}