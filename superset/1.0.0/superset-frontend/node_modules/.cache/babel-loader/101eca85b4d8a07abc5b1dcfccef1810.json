{"ast":null,"code":"var _container$getAttribu;(function () {var enterModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.enterModule : undefined;enterModule && enterModule(module);})();var __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default.signature : function (a) {return a;}; /**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { applyMiddleware, combineReducers, compose, createStore } from 'redux';\nimport thunk from 'redux-thunk';\nimport messageToastReducer from 'src/messageToasts/reducers';\nimport { initEnhancer } from 'src/reduxUtils';\nimport charts from 'src/chart/chartReducer';\nimport dataMask from 'src/dataMask/reducer';\nimport dashboardInfo from 'src/dashboard/reducers/dashboardInfo';\nimport dashboardState from 'src/dashboard/reducers/dashboardState';\nimport dashboardFilters from 'src/dashboard/reducers/dashboardFilters';\nimport nativeFilters from 'src/dashboard/reducers/nativeFilters';\nimport datasources from 'src/dashboard/reducers/datasources';\nimport sliceEntities from 'src/dashboard/reducers/sliceEntities';\nimport dashboardLayout from 'src/dashboard/reducers/undoableDashboardLayout';\nimport logger from 'src/middleware/loggerMiddleware';\nimport shortid from 'shortid';\n// Some reducers don't do anything, and redux is just used to reference the initial \"state\".\n// This may change later, as the client application takes on more responsibilities.\nconst noopReducer = initialState => (state = initialState) => state;\nconst container = document.getElementById('app');\nconst bootstrap = JSON.parse((_container$getAttribu = container == null ? void 0 : container.getAttribute('data-bootstrap')) != null ? _container$getAttribu : '{}');\n// reducers used only in the dashboard page\nconst dashboardReducers = {\n  charts,\n  datasources,\n  dashboardInfo,\n  dashboardFilters,\n  dataMask,\n  nativeFilters,\n  dashboardState,\n  dashboardLayout,\n  sliceEntities };\n\n// exported for tests\nexport const rootReducer = combineReducers({\n  messageToasts: messageToastReducer,\n  common: noopReducer(bootstrap.common || {}),\n  user: noopReducer(bootstrap.user || {}),\n  impressionId: noopReducer(shortid.generate()),\n  ...dashboardReducers });\n\nexport const store = createStore(rootReducer, {}, compose(applyMiddleware(thunk, logger), initEnhancer(false)));;(function () {var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined;if (!reactHotLoader) {return;}reactHotLoader.register(noopReducer, \"noopReducer\", \"/app/superset-frontend/src/views/store.ts\");reactHotLoader.register(container, \"container\", \"/app/superset-frontend/src/views/store.ts\");reactHotLoader.register(bootstrap, \"bootstrap\", \"/app/superset-frontend/src/views/store.ts\");reactHotLoader.register(dashboardReducers, \"dashboardReducers\", \"/app/superset-frontend/src/views/store.ts\");reactHotLoader.register(rootReducer, \"rootReducer\", \"/app/superset-frontend/src/views/store.ts\");reactHotLoader.register(store, \"store\", \"/app/superset-frontend/src/views/store.ts\");})();;(function () {var leaveModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.leaveModule : undefined;leaveModule && leaveModule(module);})();","map":{"version":3,"sources":["/app/superset-frontend/src/views/store.ts"],"names":[],"mappings":"kUAAA;;;;;;;;;;;;;;;;;AAiBG;AACH,SAAS,eAAT,EAA0B,eAA1B,EAA2C,OAA3C,EAAoD,WAApD,QAAuE,OAAvE;AACA,OAAO,KAAP,MAAkB,aAAlB;AACA,OAAO,mBAAP,MAAgC,4BAAhC;AACA,SAAS,YAAT,QAA6B,gBAA7B;AACA,OAAO,MAAP,MAAmB,wBAAnB;AACA,OAAO,QAAP,MAAqB,sBAArB;AACA,OAAO,aAAP,MAA0B,sCAA1B;AACA,OAAO,cAAP,MAA2B,uCAA3B;AACA,OAAO,gBAAP,MAA6B,yCAA7B;AACA,OAAO,aAAP,MAA0B,sCAA1B;AACA,OAAO,WAAP,MAAwB,oCAAxB;AACA,OAAO,aAAP,MAA0B,sCAA1B;AACA,OAAO,eAAP,MAA4B,gDAA5B;AACA,OAAO,MAAP,MAAmB,iCAAnB;AACA,OAAO,OAAP,MAAoB,SAApB;AAEA;AACA;AACA,MAAM,WAAW,GAAqB,YAAlB,IAA0C,CAC5D,KAAA,GAAe,YAD6C,KAEzD,KAFL;AAIA,MAAM,SAAS,GAAG,QAAQ,CAAC,cAAT,CAAwB,KAAxB,CAAlB;AACA,MAAM,SAAS,GAAG,IAAI,CAAC,KAAL,0BAAW,SAAX,oBAAW,SAAS,CAAE,YAAX,CAAwB,gBAAxB,CAAX,oCAAwD,IAAxD,CAAlB;AAEA;AACA,MAAM,iBAAiB,GAAG;AACxB,EAAA,MADwB;AAExB,EAAA,WAFwB;AAGxB,EAAA,aAHwB;AAIxB,EAAA,gBAJwB;AAKxB,EAAA,QALwB;AAMxB,EAAA,aANwB;AAOxB,EAAA,cAPwB;AAQxB,EAAA,eARwB;AASxB,EAAA,aATwB,EAA1B;;AAYA;AACA,OAAO,MAAM,WAAW,GAAG,eAAe,CAAC;AACzC,EAAA,aAAa,EAAE,mBAD0B;AAEzC,EAAA,MAAM,EAAE,WAAW,CAAC,SAAS,CAAC,MAAV,IAAoB,EAArB,CAFsB;AAGzC,EAAA,IAAI,EAAE,WAAW,CAAC,SAAS,CAAC,IAAV,IAAkB,EAAnB,CAHwB;AAIzC,EAAA,YAAY,EAAE,WAAW,CAAC,OAAO,CAAC,QAAR,EAAD,CAJgB;AAKzC,KAAG,iBALsC,EAAD,CAAnC;;AAQP,OAAO,MAAM,KAAK,GAAG,WAAW,CAC9B,WAD8B,EAE9B,EAF8B,EAG9B,OAAO,CAAC,eAAe,CAAC,KAAD,EAAQ,MAAR,CAAhB,EAAiC,YAAY,CAAC,KAAD,CAA7C,CAHuB,CAAzB,C,iLA7BD,W,sFAIA,S,oFACA,S,oFAGA,iB,4FAaO,W,sFAQA,K","sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { applyMiddleware, combineReducers, compose, createStore } from 'redux';\nimport thunk from 'redux-thunk';\nimport messageToastReducer from 'src/messageToasts/reducers';\nimport { initEnhancer } from 'src/reduxUtils';\nimport charts from 'src/chart/chartReducer';\nimport dataMask from 'src/dataMask/reducer';\nimport dashboardInfo from 'src/dashboard/reducers/dashboardInfo';\nimport dashboardState from 'src/dashboard/reducers/dashboardState';\nimport dashboardFilters from 'src/dashboard/reducers/dashboardFilters';\nimport nativeFilters from 'src/dashboard/reducers/nativeFilters';\nimport datasources from 'src/dashboard/reducers/datasources';\nimport sliceEntities from 'src/dashboard/reducers/sliceEntities';\nimport dashboardLayout from 'src/dashboard/reducers/undoableDashboardLayout';\nimport logger from 'src/middleware/loggerMiddleware';\nimport shortid from 'shortid';\n\n// Some reducers don't do anything, and redux is just used to reference the initial \"state\".\n// This may change later, as the client application takes on more responsibilities.\nconst noopReducer = <STATE = unknown>(initialState: STATE) => (\n  state: STATE = initialState,\n) => state;\n\nconst container = document.getElementById('app');\nconst bootstrap = JSON.parse(container?.getAttribute('data-bootstrap') ?? '{}');\n\n// reducers used only in the dashboard page\nconst dashboardReducers = {\n  charts,\n  datasources,\n  dashboardInfo,\n  dashboardFilters,\n  dataMask,\n  nativeFilters,\n  dashboardState,\n  dashboardLayout,\n  sliceEntities,\n};\n\n// exported for tests\nexport const rootReducer = combineReducers({\n  messageToasts: messageToastReducer,\n  common: noopReducer(bootstrap.common || {}),\n  user: noopReducer(bootstrap.user || {}),\n  impressionId: noopReducer(shortid.generate()),\n  ...dashboardReducers,\n});\n\nexport const store = createStore(\n  rootReducer,\n  {},\n  compose(applyMiddleware(thunk, logger), initEnhancer(false)),\n);\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}