{"ast":null,"code":"import \"core-js/modules/web.dom-collections.iterator.js\";import _includesInstanceProperty from \"@babel/runtime-corejs3/core-js-stable/instance/includes\";import _concatInstanceProperty from \"@babel/runtime-corejs3/core-js-stable/instance/concat\";import _filterInstanceProperty from \"@babel/runtime-corejs3/core-js-stable/instance/filter\";import _mapInstanceProperty from \"@babel/runtime-corejs3/core-js-stable/instance/map\";import _Object$entries from \"@babel/runtime-corejs3/core-js-stable/object/entries\";import _forEachInstanceProperty from \"@babel/runtime-corejs3/core-js-stable/instance/for-each\";(function () {var enterModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.enterModule : undefined;enterModule && enterModule(module);})();var __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default.signature : function (a) {return a;}; /**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport memoizeOne from 'memoize-one';\nimport { getChartControlPanelRegistry } from '@superset-ui/core';\nimport { expandControlConfig } from '@superset-ui/chart-controls';\nimport * as SECTIONS from 'src/explore/controlPanels/sections';\nconst getMemoizedSectionsToRender = memoizeOne((datasourceType, controlPanelConfig) => {var _context, _context2, _context3, _context4;\n  const { sectionOverrides = {}, controlOverrides, controlPanelSections = [] } = controlPanelConfig;\n  // default control panel sections\n  const sections = { ...SECTIONS };\n  // apply section overrides\n  _forEachInstanceProperty(_context = _Object$entries(sectionOverrides)).call(_context, ([section, overrides]) => {\n    if (typeof overrides === 'object' && overrides.constructor === Object) {\n      sections[section] = {\n        ...sections[section],\n        ...overrides };\n\n    } else\n    {\n      sections[section] = overrides;\n    }\n  });\n  const { datasourceAndVizType } = sections;\n  // list of datasource-specific controls that should be removed\n  const invalidControls = datasourceType === 'table' ?\n  ['granularity', 'druid_time_origin'] :\n  ['granularity_sqla', 'time_grain_sqla'];\n  return _mapInstanceProperty(_context2 = _filterInstanceProperty(_context3 = _concatInstanceProperty(_context4 = [datasourceAndVizType]).call(_context4,\n  controlPanelSections)).call(_context3,\n  section => !!section)).call(_context2,\n  section => {\n    const { controlSetRows } = section;\n    return {\n      ...section,\n      controlSetRows: (controlSetRows == null ? void 0 : _mapInstanceProperty(controlSetRows).call(controlSetRows, row => {var _context5;return _mapInstanceProperty(_context5 = _filterInstanceProperty(row).call(row,\n        control => typeof control !== 'string' ||\n        !_includesInstanceProperty(invalidControls).call(invalidControls, control))).call(_context5,\n        item => expandControlConfig(item, controlOverrides));})) || [] };\n\n  });\n});\n/**\n * Get the clean and processed control panel sections\n */\nexport function getSectionsToRender(vizType, datasourceType) {\n  const controlPanelConfig =\n  // TODO: update `chartControlPanelRegistry` type to use ControlPanelConfig\n  getChartControlPanelRegistry().get(vizType) || {};\n  return getMemoizedSectionsToRender(datasourceType, controlPanelConfig);\n};(function () {var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined;if (!reactHotLoader) {return;}reactHotLoader.register(getMemoizedSectionsToRender, \"getMemoizedSectionsToRender\", \"/app/superset-frontend/src/explore/controlUtils/getSectionsToRender.ts\");reactHotLoader.register(getSectionsToRender, \"getSectionsToRender\", \"/app/superset-frontend/src/explore/controlUtils/getSectionsToRender.ts\");})();;(function () {var leaveModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.leaveModule : undefined;leaveModule && leaveModule(module);})();","map":{"version":3,"sources":["/app/superset-frontend/src/explore/controlUtils/getSectionsToRender.ts"],"names":[],"mappings":"i4BAAA;;;;;;;;;;;;;;;;;AAiBG;AACH,OAAO,UAAP,MAAuB,aAAvB;AACA,SAEE,4BAFF,QAGO,mBAHP;AAIA,SAEE,mBAFF,QAGO,6BAHP;AAKA,OAAO,KAAK,QAAZ,MAA0B,oCAA1B;AAEA,MAAM,2BAA2B,GAAG,UAAU,CAC5C,CAAC,cAAD,EAAiC,kBAAjC,KAA2E;AACzE,QAAM,EACJ,gBAAgB,GAAG,EADf,EAEJ,gBAFI,EAGJ,oBAAoB,GAAG,EAHnB,KAIF,kBAJJ;AAMA;AACA,QAAM,QAAQ,GAAG,EAAE,GAAG,QAAL,EAAjB;AAEA;AACA,sDAAe,gBAAf,kBAAyC,CAAC,CAAC,OAAD,EAAU,SAAV,CAAD,KAAyB;AAChE,QAAI,OAAO,SAAP,KAAqB,QAArB,IAAiC,SAAS,CAAC,WAAV,KAA0B,MAA/D,EAAuE;AACrE,MAAA,QAAQ,CAAC,OAAD,CAAR,GAAoB;AAClB,WAAG,QAAQ,CAAC,OAAD,CADO;AAElB,WAAG,SAFe,EAApB;;AAID,KALD;AAKO;AACL,MAAA,QAAQ,CAAC,OAAD,CAAR,GAAoB,SAApB;AACD;AACF,GATD;AAWA,QAAM,EAAE,oBAAF,KAA2B,QAAjC;AAEA;AACA,QAAM,eAAe,GACnB,cAAc,KAAK,OAAnB;AACI,GAAC,aAAD,EAAgB,mBAAhB,CADJ;AAEI,GAAC,kBAAD,EAAqB,iBAArB,CAHN;AAKA,SAAO,0GAAC,oBAAD;AACG,EAAA,oBADH;AAEG,EAAA,OAAO,IAAI,CAAC,CAAC,OAFhB;AAGA,EAAA,OAAO,IAAG;AACb,UAAM,EAAE,cAAF,KAAqB,OAA3B;AACA,WAAO;AACL,SAAG,OADE;AAEL,MAAA,cAAc,EACZ,CAAA,cAAc,QAAd,iCAAA,cAAc,MAAd,CAAA,cAAc,EAAM,GAAG,0BACrB,yDAAA,GAAG,MAAH,CAAA,GAAG;AAEC,QAAA,OAAO,IACL,OAAO,OAAP,KAAmB,QAAnB;AACA,SAAC,0BAAA,eAAe,MAAf,CAAA,eAAe,EAAU,OAAV,CAJnB,CAAH;AAMO,QAAA,IAAI,IAAI,mBAAmB,CAAC,IAAD,EAAO,gBAAP,CANlC,CADqB,EAAT,CAAd,KAQK,EAXF,EAAP;;AAaD,GAlBI,CAAP;AAmBD,CAlD2C,CAA9C;AAqDA;;AAEG;AACH,OAAM,SAAU,mBAAV,CACJ,OADI,EAEJ,cAFI,EAE0B;AAE9B,QAAM,kBAAkB;AACtB;AACC,EAAA,4BAA4B,GAAG,GAA/B,CAAmC,OAAnC,KAAsE,EAFzE;AAGA,SAAO,2BAA2B,CAAC,cAAD,EAAiB,kBAAjB,CAAlC;AACD,C,iLAhEK,2B,mIAwDU,mB","sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport memoizeOne from 'memoize-one';\nimport {\n  DatasourceType,\n  getChartControlPanelRegistry,\n} from '@superset-ui/core';\nimport {\n  ControlPanelConfig,\n  expandControlConfig,\n} from '@superset-ui/chart-controls';\n\nimport * as SECTIONS from 'src/explore/controlPanels/sections';\n\nconst getMemoizedSectionsToRender = memoizeOne(\n  (datasourceType: DatasourceType, controlPanelConfig: ControlPanelConfig) => {\n    const {\n      sectionOverrides = {},\n      controlOverrides,\n      controlPanelSections = [],\n    } = controlPanelConfig;\n\n    // default control panel sections\n    const sections = { ...SECTIONS };\n\n    // apply section overrides\n    Object.entries(sectionOverrides).forEach(([section, overrides]) => {\n      if (typeof overrides === 'object' && overrides.constructor === Object) {\n        sections[section] = {\n          ...sections[section],\n          ...overrides,\n        };\n      } else {\n        sections[section] = overrides;\n      }\n    });\n\n    const { datasourceAndVizType } = sections;\n\n    // list of datasource-specific controls that should be removed\n    const invalidControls =\n      datasourceType === 'table'\n        ? ['granularity', 'druid_time_origin']\n        : ['granularity_sqla', 'time_grain_sqla'];\n\n    return [datasourceAndVizType]\n      .concat(controlPanelSections)\n      .filter(section => !!section)\n      .map(section => {\n        const { controlSetRows } = section;\n        return {\n          ...section,\n          controlSetRows:\n            controlSetRows?.map(row =>\n              row\n                .filter(\n                  control =>\n                    typeof control !== 'string' ||\n                    !invalidControls.includes(control),\n                )\n                .map(item => expandControlConfig(item, controlOverrides)),\n            ) || [],\n        };\n      });\n  },\n);\n\n/**\n * Get the clean and processed control panel sections\n */\nexport function getSectionsToRender(\n  vizType: string,\n  datasourceType: DatasourceType,\n) {\n  const controlPanelConfig =\n    // TODO: update `chartControlPanelRegistry` type to use ControlPanelConfig\n    (getChartControlPanelRegistry().get(vizType) as ControlPanelConfig) || {};\n  return getMemoizedSectionsToRender(datasourceType, controlPanelConfig);\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}