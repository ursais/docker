{"ast":null,"code":"import \"core-js/modules/web.dom-collections.iterator.js\";import _extends from \"@babel/runtime-corejs3/helpers/extends\";(function () {var enterModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.enterModule : undefined;enterModule && enterModule(module);})();var __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default.signature : function (a) {return a;}; /**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React, { useRef } from 'react';\nimport { useDrag, useDrop } from 'react-dnd';\nimport { DragContainer } from 'src/explore/components/controls/OptionControls';\nimport Option from './Option';import { jsx as ___EmotionJSX } from \"@emotion/react\";\nexport default function OptionWrapper(props) {\n  const { index, type, onShiftOptions, clickClose, withCaret, isExtra, children, ...rest } = props;\n  const ref = useRef(null);\n  const item = {\n    dragIndex: index,\n    type };\n\n  const [, drag] = useDrag({\n    item,\n    collect: monitor => ({\n      isDragging: monitor.isDragging() }) });\n\n\n  const [, drop] = useDrop({\n    accept: type,\n    hover: (item, monitor) => {var _ref$current;\n      if (!ref.current) {\n        return;\n      }\n      const { dragIndex } = item;\n      const hoverIndex = index;\n      // Don't replace items with themselves\n      if (dragIndex === hoverIndex) {\n        return;\n      }\n      // Determine rectangle on screen\n      const hoverBoundingRect = (_ref$current = ref.current) == null ? void 0 : _ref$current.getBoundingClientRect();\n      // Get vertical middle\n      const hoverMiddleY = (hoverBoundingRect.bottom - hoverBoundingRect.top) / 2;\n      // Determine mouse position\n      const clientOffset = monitor.getClientOffset();\n      // Get pixels to the top\n      const hoverClientY = clientOffset != null && clientOffset.y ?\n      (clientOffset == null ? void 0 : clientOffset.y) - hoverBoundingRect.top :\n      0;\n      // Only perform the move when the mouse has crossed half of the items height\n      // When dragging downwards, only move when the cursor is below 50%\n      // When dragging upwards, only move when the cursor is above 50%\n      // Dragging downwards\n      if (dragIndex < hoverIndex && hoverClientY < hoverMiddleY) {\n        return;\n      }\n      // Dragging upwards\n      if (dragIndex > hoverIndex && hoverClientY > hoverMiddleY) {\n        return;\n      }\n      // Time to actually perform the action\n      onShiftOptions(dragIndex, hoverIndex);\n      // eslint-disable-next-line no-param-reassign\n      item.dragIndex = hoverIndex;\n    } });\n\n  drag(drop(ref));\n  return ___EmotionJSX(DragContainer, _extends({ ref: ref }, rest),\n  ___EmotionJSX(Option, { index: index, clickClose: clickClose, withCaret: withCaret, isExtra: isExtra },\n  children));\n\n\n}__signature__(OptionWrapper, \"useRef{ref}\\nuseDrag{[, drag]}\\nuseDrop{[, drop]}\", () => [useDrag, useDrop]);;(function () {var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined;if (!reactHotLoader) {return;}reactHotLoader.register(OptionWrapper, \"OptionWrapper\", \"/app/superset-frontend/src/explore/components/controls/DndColumnSelectControl/OptionWrapper.tsx\");})();;(function () {var leaveModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.leaveModule : undefined;leaveModule && leaveModule(module);})();","map":{"version":3,"sources":["/app/superset-frontend/src/explore/components/controls/DndColumnSelectControl/OptionWrapper.tsx"],"names":[],"mappings":"+ZAAA;;;;;;;;;;;;;;;;;AAiBG;AACH,OAAO,KAAP,IAAgB,MAAhB,QAA8B,OAA9B;AACA,SACE,OADF,EAEE,OAFF,QAKO,WALP;AAMA,SAAS,aAAT,QAA8B,gDAA9B;AAMA,OAAO,MAAP,MAAmB,UAAnB,C;AAEA,eAAc,SAAU,aAAV,CACZ,KADY,EAIX;AAED,QAAM,EACJ,KADI,EAEJ,IAFI,EAGJ,cAHI,EAIJ,UAJI,EAKJ,SALI,EAMJ,OANI,EAOJ,QAPI,EAQJ,GAAG,IARC,KASF,KATJ;AAUA,QAAM,GAAG,GAAG,MAAM,CAAiB,IAAjB,CAAlB;AAEA,QAAM,IAAI,GAAwB;AAChC,IAAA,SAAS,EAAE,KADqB;AAEhC,IAAA,IAFgC,EAAlC;;AAIA,QAAM,GAAG,IAAH,IAAW,OAAO,CAAC;AACvB,IAAA,IADuB;AAEvB,IAAA,OAAO,EAAG,OAAD,KAAiC;AACxC,MAAA,UAAU,EAAE,OAAO,CAAC,UAAR,EAD4B,EAAjC,CAFc,EAAD,CAAxB;;;AAOA,QAAM,GAAG,IAAH,IAAW,OAAO,CAAC;AACvB,IAAA,MAAM,EAAE,IADe;AAGvB,IAAA,KAAK,EAAE,CAAC,IAAD,EAA4B,OAA5B,KAA0D;AAC/D,UAAI,CAAC,GAAG,CAAC,OAAT,EAAkB;AAChB;AACD;AACD,YAAM,EAAE,SAAF,KAAgB,IAAtB;AACA,YAAM,UAAU,GAAG,KAAnB;AAEA;AACA,UAAI,SAAS,KAAK,UAAlB,EAA8B;AAC5B;AACD;AACD;AACA,YAAM,iBAAiB,mBAAG,GAAG,CAAC,OAAP,qBAAG,aAAa,qBAAb,EAA1B;AACA;AACA,YAAM,YAAY,GAChB,CAAC,iBAAiB,CAAC,MAAlB,GAA2B,iBAAiB,CAAC,GAA9C,IAAqD,CADvD;AAEA;AACA,YAAM,YAAY,GAAG,OAAO,CAAC,eAAR,EAArB;AACA;AACA,YAAM,YAAY,GAAG,YAAY,QAAZ,IAAA,YAAY,CAAE,CAAd;AACjB,OAAA,YAAY,QAAZ,YAAA,YAAY,CAAE,CAAd,IAAkB,iBAAiB,CAAC,GADnB;AAEjB,OAFJ;AAGA;AACA;AACA;AACA;AACA,UAAI,SAAS,GAAG,UAAZ,IAA0B,YAAY,GAAG,YAA7C,EAA2D;AACzD;AACD;AACD;AACA,UAAI,SAAS,GAAG,UAAZ,IAA0B,YAAY,GAAG,YAA7C,EAA2D;AACzD;AACD;AAED;AACA,MAAA,cAAc,CAAC,SAAD,EAAY,UAAZ,CAAd;AACA;AACA,MAAA,IAAI,CAAC,SAAL,GAAiB,UAAjB;AACD,KAzCsB,EAAD,CAAxB;;AA4CA,EAAA,IAAI,CAAC,IAAI,CAAC,GAAD,CAAL,CAAJ;AAEA,SACE,cAAC,aAAD,aAAe,GAAG,EAAE,GAApB,IAA6B,IAA7B;AACE,gBAAC,MAAD,IACE,KAAK,EAAE,KADT,EAEE,UAAU,EAAE,UAFd,EAGE,SAAS,EAAE,SAHb,EAIE,OAAO,EAAE,OAJX;AAMG,EAAA,QANH,CADF,CADF;;;AAYD,C,cAvFuB,a,8DAsBL,O,EAOA,O,oLA7BK,a","sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React, { useRef } from 'react';\nimport {\n  useDrag,\n  useDrop,\n  DropTargetMonitor,\n  DragSourceMonitor,\n} from 'react-dnd';\nimport { DragContainer } from 'src/explore/components/controls/OptionControls';\nimport { DndItemType } from 'src/explore/components/DndItemType';\nimport {\n  OptionProps,\n  OptionItemInterface,\n} from 'src/explore/components/controls/DndColumnSelectControl/types';\nimport Option from './Option';\n\nexport default function OptionWrapper(\n  props: OptionProps & {\n    type: DndItemType;\n    onShiftOptions: (dragIndex: number, hoverIndex: number) => void;\n  },\n) {\n  const {\n    index,\n    type,\n    onShiftOptions,\n    clickClose,\n    withCaret,\n    isExtra,\n    children,\n    ...rest\n  } = props;\n  const ref = useRef<HTMLDivElement>(null);\n\n  const item: OptionItemInterface = {\n    dragIndex: index,\n    type,\n  };\n  const [, drag] = useDrag({\n    item,\n    collect: (monitor: DragSourceMonitor) => ({\n      isDragging: monitor.isDragging(),\n    }),\n  });\n\n  const [, drop] = useDrop({\n    accept: type,\n\n    hover: (item: OptionItemInterface, monitor: DropTargetMonitor) => {\n      if (!ref.current) {\n        return;\n      }\n      const { dragIndex } = item;\n      const hoverIndex = index;\n\n      // Don't replace items with themselves\n      if (dragIndex === hoverIndex) {\n        return;\n      }\n      // Determine rectangle on screen\n      const hoverBoundingRect = ref.current?.getBoundingClientRect();\n      // Get vertical middle\n      const hoverMiddleY =\n        (hoverBoundingRect.bottom - hoverBoundingRect.top) / 2;\n      // Determine mouse position\n      const clientOffset = monitor.getClientOffset();\n      // Get pixels to the top\n      const hoverClientY = clientOffset?.y\n        ? clientOffset?.y - hoverBoundingRect.top\n        : 0;\n      // Only perform the move when the mouse has crossed half of the items height\n      // When dragging downwards, only move when the cursor is below 50%\n      // When dragging upwards, only move when the cursor is above 50%\n      // Dragging downwards\n      if (dragIndex < hoverIndex && hoverClientY < hoverMiddleY) {\n        return;\n      }\n      // Dragging upwards\n      if (dragIndex > hoverIndex && hoverClientY > hoverMiddleY) {\n        return;\n      }\n\n      // Time to actually perform the action\n      onShiftOptions(dragIndex, hoverIndex);\n      // eslint-disable-next-line no-param-reassign\n      item.dragIndex = hoverIndex;\n    },\n  });\n\n  drag(drop(ref));\n\n  return (\n    <DragContainer ref={ref} {...rest}>\n      <Option\n        index={index}\n        clickClose={clickClose}\n        withCaret={withCaret}\n        isExtra={isExtra}\n      >\n        {children}\n      </Option>\n    </DragContainer>\n  );\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}