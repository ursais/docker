{"ast":null,"code":"import _Set from \"@babel/runtime-corejs3/core-js-stable/set\";import _Object$values from \"@babel/runtime-corejs3/core-js-stable/object/values\";(function () {var enterModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.enterModule : undefined;enterModule && enterModule(module);})();var __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default.signature : function (a) {return a;}; /**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { t } from '@superset-ui/core';\nexport const AGGREGATES = {\n  AVG: 'AVG',\n  COUNT: 'COUNT',\n  COUNT_DISTINCT: 'COUNT_DISTINCT',\n  MAX: 'MAX',\n  MIN: 'MIN',\n  SUM: 'SUM' };\n\nexport const AGGREGATES_OPTIONS = _Object$values(AGGREGATES);\nexport var Operators;\n(function (Operators) {\n  Operators[\"EQUALS\"] = \"EQUALS\";\n  Operators[\"NOT_EQUALS\"] = \"NOT_EQUALS\";\n  Operators[\"LESS_THAN\"] = \"LESS_THAN\";\n  Operators[\"GREATER_THAN\"] = \"GREATER_THAN\";\n  Operators[\"LESS_THAN_OR_EQUAL\"] = \"LESS_THAN_OR_EQUAL\";\n  Operators[\"GREATER_THAN_OR_EQUAL\"] = \"GREATER_THAN_OR_EQUAL\";\n  Operators[\"IN\"] = \"IN\";\n  Operators[\"NOT_IN\"] = \"NOT_IN\";\n  Operators[\"ILIKE\"] = \"ILIKE\";\n  Operators[\"LIKE\"] = \"LIKE\";\n  Operators[\"REGEX\"] = \"REGEX\";\n  Operators[\"IS_NOT_NULL\"] = \"IS_NOT_NULL\";\n  Operators[\"IS_NULL\"] = \"IS_NULL\";\n  Operators[\"LATEST_PARTITION\"] = \"LATEST_PARTITION\";\n  Operators[\"IS_TRUE\"] = \"IS_TRUE\";\n  Operators[\"IS_FALSE\"] = \"IS_FALSE\";\n})(Operators || (Operators = {}));\nexport const OPERATOR_ENUM_TO_OPERATOR_TYPE = {\n  [Operators.EQUALS]: { display: 'equals', operation: '==' },\n  [Operators.NOT_EQUALS]: { display: 'not equals', operation: '!=' },\n  [Operators.GREATER_THAN]: { display: '>', operation: '>' },\n  [Operators.LESS_THAN]: { display: '<', operation: '<' },\n  [Operators.GREATER_THAN_OR_EQUAL]: { display: '>=', operation: '>=' },\n  [Operators.LESS_THAN_OR_EQUAL]: { display: '<=', operation: '<=' },\n  [Operators.IN]: { display: 'IN', operation: 'IN' },\n  [Operators.NOT_IN]: { display: 'NOT IN', operation: 'NOT IN' },\n  [Operators.LIKE]: { display: 'LIKE', operation: 'LIKE' },\n  [Operators.ILIKE]: { display: 'LIKE (case insensitive)', operation: 'ILIKE' },\n  [Operators.REGEX]: { display: 'REGEX', operation: 'REGEX' },\n  [Operators.IS_NOT_NULL]: { display: 'IS NOT NULL', operation: 'IS NOT NULL' },\n  [Operators.IS_NULL]: { display: 'IS NULL', operation: 'IS NULL' },\n  [Operators.LATEST_PARTITION]: {\n    display: 'use latest_partition template',\n    operation: 'LATEST PARTITION' },\n\n  [Operators.IS_TRUE]: { display: 'IS TRUE', operation: '==' },\n  [Operators.IS_FALSE]: { display: 'IS FALSE', operation: '==' } };\n\nexport const OPERATORS_OPTIONS = _Object$values(Operators);\nexport const TABLE_ONLY_OPERATORS = [Operators.LIKE, Operators.ILIKE];\nexport const DRUID_ONLY_OPERATORS = [Operators.REGEX];\nexport const HAVING_OPERATORS = [\nOperators.EQUALS,\nOperators.NOT_EQUALS,\nOperators.GREATER_THAN,\nOperators.LESS_THAN,\nOperators.GREATER_THAN_OR_EQUAL,\nOperators.LESS_THAN_OR_EQUAL];\n\nexport const MULTI_OPERATORS = new _Set([Operators.IN, Operators.NOT_IN]);\n// CUSTOM_OPERATORS will show operator in simple mode,\n// but will generate customized sqlExpression\nexport const CUSTOM_OPERATORS = new _Set([Operators.LATEST_PARTITION]);\n// DISABLE_INPUT_OPERATORS will disable filter value input\n// in adhocFilter control\nexport const DISABLE_INPUT_OPERATORS = [\nOperators.IS_NOT_NULL,\nOperators.IS_NULL,\nOperators.LATEST_PARTITION,\nOperators.IS_TRUE,\nOperators.IS_FALSE];\n\nexport const sqlaAutoGeneratedMetricNameRegex = /^(sum|min|max|avg|count|count_distinct)__.*$/i;\nexport const sqlaAutoGeneratedMetricRegex = /^(LONG|DOUBLE|FLOAT)?(SUM|AVG|MAX|MIN|COUNT)\\([A-Z0-9_.\"]*\\)$/i;\nexport const druidAutoGeneratedMetricRegex = /^(LONG|DOUBLE|FLOAT)?(SUM|MAX|MIN|COUNT)\\([A-Z0-9_.\"]*\\)$/i;\nexport const TIME_FILTER_LABELS = {\n  time_range: t('Time range'),\n  granularity_sqla: t('Time column'),\n  time_grain_sqla: t('Time grain'),\n  druid_time_origin: t('Origin'),\n  granularity: t('Time granularity') };\n\nexport const FILTER_CONFIG_ATTRIBUTES = {\n  DEFAULT_VALUE: 'defaultValue',\n  MULTIPLE: 'multiple',\n  SEARCH_ALL_OPTIONS: 'searchAllOptions',\n  CLEARABLE: 'clearable' };\n\nexport const FILTER_OPTIONS_LIMIT = 1000;\n/**\n * Map control names to their key in extra_filters\n */\nexport const TIME_FILTER_MAP = {\n  time_range: '__time_range',\n  granularity_sqla: '__time_col',\n  time_grain_sqla: '__time_grain',\n  druid_time_origin: '__time_origin',\n  granularity: '__granularity' };\n\n// TODO: make this configurable per Superset installation\nexport const DEFAULT_TIME_RANGE = 'No filter';\nexport const NO_TIME_RANGE = 'No filter';;(function () {var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined;if (!reactHotLoader) {return;}reactHotLoader.register(AGGREGATES, \"AGGREGATES\", \"/app/superset-frontend/src/explore/constants.ts\");reactHotLoader.register(AGGREGATES_OPTIONS, \"AGGREGATES_OPTIONS\", \"/app/superset-frontend/src/explore/constants.ts\");reactHotLoader.register(Operators, \"Operators\", \"/app/superset-frontend/src/explore/constants.ts\");reactHotLoader.register(OPERATOR_ENUM_TO_OPERATOR_TYPE, \"OPERATOR_ENUM_TO_OPERATOR_TYPE\", \"/app/superset-frontend/src/explore/constants.ts\");reactHotLoader.register(OPERATORS_OPTIONS, \"OPERATORS_OPTIONS\", \"/app/superset-frontend/src/explore/constants.ts\");reactHotLoader.register(TABLE_ONLY_OPERATORS, \"TABLE_ONLY_OPERATORS\", \"/app/superset-frontend/src/explore/constants.ts\");reactHotLoader.register(DRUID_ONLY_OPERATORS, \"DRUID_ONLY_OPERATORS\", \"/app/superset-frontend/src/explore/constants.ts\");reactHotLoader.register(HAVING_OPERATORS, \"HAVING_OPERATORS\", \"/app/superset-frontend/src/explore/constants.ts\");reactHotLoader.register(MULTI_OPERATORS, \"MULTI_OPERATORS\", \"/app/superset-frontend/src/explore/constants.ts\");reactHotLoader.register(CUSTOM_OPERATORS, \"CUSTOM_OPERATORS\", \"/app/superset-frontend/src/explore/constants.ts\");reactHotLoader.register(DISABLE_INPUT_OPERATORS, \"DISABLE_INPUT_OPERATORS\", \"/app/superset-frontend/src/explore/constants.ts\");reactHotLoader.register(sqlaAutoGeneratedMetricNameRegex, \"sqlaAutoGeneratedMetricNameRegex\", \"/app/superset-frontend/src/explore/constants.ts\");reactHotLoader.register(sqlaAutoGeneratedMetricRegex, \"sqlaAutoGeneratedMetricRegex\", \"/app/superset-frontend/src/explore/constants.ts\");reactHotLoader.register(druidAutoGeneratedMetricRegex, \"druidAutoGeneratedMetricRegex\", \"/app/superset-frontend/src/explore/constants.ts\");reactHotLoader.register(TIME_FILTER_LABELS, \"TIME_FILTER_LABELS\", \"/app/superset-frontend/src/explore/constants.ts\");reactHotLoader.register(FILTER_CONFIG_ATTRIBUTES, \"FILTER_CONFIG_ATTRIBUTES\", \"/app/superset-frontend/src/explore/constants.ts\");reactHotLoader.register(FILTER_OPTIONS_LIMIT, \"FILTER_OPTIONS_LIMIT\", \"/app/superset-frontend/src/explore/constants.ts\");reactHotLoader.register(TIME_FILTER_MAP, \"TIME_FILTER_MAP\", \"/app/superset-frontend/src/explore/constants.ts\");reactHotLoader.register(DEFAULT_TIME_RANGE, \"DEFAULT_TIME_RANGE\", \"/app/superset-frontend/src/explore/constants.ts\");reactHotLoader.register(NO_TIME_RANGE, \"NO_TIME_RANGE\", \"/app/superset-frontend/src/explore/constants.ts\");})();;(function () {var leaveModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.leaveModule : undefined;leaveModule && leaveModule(module);})();","map":{"version":3,"sources":["/app/superset-frontend/src/explore/constants.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { t } from '@superset-ui/core';\n\nexport const AGGREGATES = {\n  AVG: 'AVG',\n  COUNT: 'COUNT',\n  COUNT_DISTINCT: 'COUNT_DISTINCT',\n  MAX: 'MAX',\n  MIN: 'MIN',\n  SUM: 'SUM',\n};\nexport const AGGREGATES_OPTIONS = Object.values(AGGREGATES);\n\nexport enum Operators {\n  EQUALS = 'EQUALS',\n  NOT_EQUALS = 'NOT_EQUALS',\n  LESS_THAN = 'LESS_THAN',\n  GREATER_THAN = 'GREATER_THAN',\n  LESS_THAN_OR_EQUAL = 'LESS_THAN_OR_EQUAL',\n  GREATER_THAN_OR_EQUAL = 'GREATER_THAN_OR_EQUAL',\n  IN = 'IN',\n  NOT_IN = 'NOT_IN',\n  ILIKE = 'ILIKE',\n  LIKE = 'LIKE',\n  REGEX = 'REGEX',\n  IS_NOT_NULL = 'IS_NOT_NULL',\n  IS_NULL = 'IS_NULL',\n  LATEST_PARTITION = 'LATEST_PARTITION',\n  IS_TRUE = 'IS_TRUE',\n  IS_FALSE = 'IS_FALSE',\n}\n\nexport interface OperatorType {\n  display: string;\n  operation: string;\n}\n\nexport const OPERATOR_ENUM_TO_OPERATOR_TYPE: {\n  [key in Operators]: OperatorType;\n} = {\n  [Operators.EQUALS]: { display: 'equals', operation: '==' },\n  [Operators.NOT_EQUALS]: { display: 'not equals', operation: '!=' },\n  [Operators.GREATER_THAN]: { display: '>', operation: '>' },\n  [Operators.LESS_THAN]: { display: '<', operation: '<' },\n  [Operators.GREATER_THAN_OR_EQUAL]: { display: '>=', operation: '>=' },\n  [Operators.LESS_THAN_OR_EQUAL]: { display: '<=', operation: '<=' },\n  [Operators.IN]: { display: 'IN', operation: 'IN' },\n  [Operators.NOT_IN]: { display: 'NOT IN', operation: 'NOT IN' },\n  [Operators.LIKE]: { display: 'LIKE', operation: 'LIKE' },\n  [Operators.ILIKE]: { display: 'LIKE (case insensitive)', operation: 'ILIKE' },\n  [Operators.REGEX]: { display: 'REGEX', operation: 'REGEX' },\n  [Operators.IS_NOT_NULL]: { display: 'IS NOT NULL', operation: 'IS NOT NULL' },\n  [Operators.IS_NULL]: { display: 'IS NULL', operation: 'IS NULL' },\n  [Operators.LATEST_PARTITION]: {\n    display: 'use latest_partition template',\n    operation: 'LATEST PARTITION',\n  },\n  [Operators.IS_TRUE]: { display: 'IS TRUE', operation: '==' },\n  [Operators.IS_FALSE]: { display: 'IS FALSE', operation: '==' },\n};\n\nexport const OPERATORS_OPTIONS = Object.values(Operators) as Operators[];\n\nexport const TABLE_ONLY_OPERATORS = [Operators.LIKE, Operators.ILIKE];\nexport const DRUID_ONLY_OPERATORS = [Operators.REGEX];\nexport const HAVING_OPERATORS = [\n  Operators.EQUALS,\n  Operators.NOT_EQUALS,\n  Operators.GREATER_THAN,\n  Operators.LESS_THAN,\n  Operators.GREATER_THAN_OR_EQUAL,\n  Operators.LESS_THAN_OR_EQUAL,\n];\nexport const MULTI_OPERATORS = new Set([Operators.IN, Operators.NOT_IN]);\n// CUSTOM_OPERATORS will show operator in simple mode,\n// but will generate customized sqlExpression\nexport const CUSTOM_OPERATORS = new Set([Operators.LATEST_PARTITION]);\n// DISABLE_INPUT_OPERATORS will disable filter value input\n// in adhocFilter control\nexport const DISABLE_INPUT_OPERATORS = [\n  Operators.IS_NOT_NULL,\n  Operators.IS_NULL,\n  Operators.LATEST_PARTITION,\n  Operators.IS_TRUE,\n  Operators.IS_FALSE,\n];\n\nexport const sqlaAutoGeneratedMetricNameRegex = /^(sum|min|max|avg|count|count_distinct)__.*$/i;\nexport const sqlaAutoGeneratedMetricRegex = /^(LONG|DOUBLE|FLOAT)?(SUM|AVG|MAX|MIN|COUNT)\\([A-Z0-9_.\"]*\\)$/i;\nexport const druidAutoGeneratedMetricRegex = /^(LONG|DOUBLE|FLOAT)?(SUM|MAX|MIN|COUNT)\\([A-Z0-9_.\"]*\\)$/i;\n\nexport const TIME_FILTER_LABELS = {\n  time_range: t('Time range'),\n  granularity_sqla: t('Time column'),\n  time_grain_sqla: t('Time grain'),\n  druid_time_origin: t('Origin'),\n  granularity: t('Time granularity'),\n};\n\nexport const FILTER_CONFIG_ATTRIBUTES = {\n  DEFAULT_VALUE: 'defaultValue',\n  MULTIPLE: 'multiple',\n  SEARCH_ALL_OPTIONS: 'searchAllOptions',\n  CLEARABLE: 'clearable',\n};\n\nexport const FILTER_OPTIONS_LIMIT = 1000;\n\n/**\n * Map control names to their key in extra_filters\n */\nexport const TIME_FILTER_MAP = {\n  time_range: '__time_range',\n  granularity_sqla: '__time_col',\n  time_grain_sqla: '__time_grain',\n  druid_time_origin: '__time_origin',\n  granularity: '__granularity',\n};\n\n// TODO: make this configurable per Superset installation\nexport const DEFAULT_TIME_RANGE = 'No filter';\nexport const NO_TIME_RANGE = 'No filter';\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}