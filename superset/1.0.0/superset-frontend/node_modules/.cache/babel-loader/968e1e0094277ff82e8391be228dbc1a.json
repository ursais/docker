{"ast":null,"code":"import \"core-js/modules/es.string.replace.js\";import \"core-js/modules/web.dom-collections.iterator.js\";import _extends from \"@babel/runtime-corejs3/helpers/extends\";import _parseInt from \"@babel/runtime-corejs3/core-js-stable/parse-int\";import _Number$isNaN from \"@babel/runtime-corejs3/core-js-stable/number/is-nan\";import _startsWithInstanceProperty from \"@babel/runtime-corejs3/core-js-stable/instance/starts-with\";import _findInstanceProperty from \"@babel/runtime-corejs3/core-js-stable/instance/find\";import _mapInstanceProperty from \"@babel/runtime-corejs3/core-js-stable/instance/map\";import _Promise from \"@babel/runtime-corejs3/core-js-stable/promise\";(function () {var enterModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.enterModule : undefined;enterModule && enterModule(module);})();var __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default.signature : function (a) {return a;}; /**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React from 'react';\nimport AsyncEsmComponent from 'src/components/AsyncEsmComponent';\n/**\n * Async loaders to import brace modules. Must manually create call `import(...)`\n * promises because webpack can only analyze asycn imports statically.\n */import { jsx as ___EmotionJSX } from \"@emotion/react\";\nconst aceModuleLoaders = {\n  'mode/sql': () => import('brace/mode/sql'),\n  'mode/markdown': () => import('brace/mode/markdown'),\n  'mode/css': () => import('brace/mode/css'),\n  'mode/json': () => import('brace/mode/json'),\n  'mode/yaml': () => import('brace/mode/yaml'),\n  'mode/html': () => import('brace/mode/html'),\n  'mode/javascript': () => import('brace/mode/javascript'),\n  'theme/textmate': () => import('brace/theme/textmate'),\n  'theme/github': () => import('brace/theme/github'),\n  'ext/language_tools': () => import('brace/ext/language_tools') };\n\n/**\n * Get an async AceEditor with automatical loading of specified ace modules.\n */\nexport default function AsyncAceEditor(aceModules, { defaultMode, defaultTheme, defaultTabSize = 2, placeholder } = {}) {\n  return AsyncEsmComponent(async () => {var _aceModules$find, _aceModules$find2;\n    const { default: ace } = await import('brace');\n    const { default: ReactAceEditor } = await import('react-ace');\n    await _Promise.all(_mapInstanceProperty(aceModules).call(aceModules, x => aceModuleLoaders[x]()));\n    const inferredMode = defaultMode || ((_aceModules$find =\n    _findInstanceProperty(aceModules).call(aceModules, x => _startsWithInstanceProperty(x).call(x, 'mode/'))) == null ? void 0 : _aceModules$find.replace('mode/', ''));\n    const inferredTheme = defaultTheme || ((_aceModules$find2 =\n    _findInstanceProperty(aceModules).call(aceModules, x => _startsWithInstanceProperty(x).call(x, 'theme/'))) == null ? void 0 : _aceModules$find2.replace('theme/', ''));\n    return /*#__PURE__*/React.forwardRef(function ExtendedAceEditor({ keywords, mode = inferredMode, theme = inferredTheme, tabSize = defaultTabSize, defaultValue = '', value = '', ...props }, ref) {\n      if (keywords) {\n        const langTools = ace.acequire('ace/ext/language_tools');\n        const completer = {\n          getCompletions: (editor, session, pos, prefix, callback) => {\n            // If the prefix starts with a number, don't try to autocomplete\n            if (!_Number$isNaN(_parseInt(prefix, 10))) {\n              return;\n            }\n            if (session.getMode().$id === `ace/mode/${mode}`) {\n              callback(null, keywords);\n            }\n          } };\n\n        langTools.setCompleters([completer]);\n      }\n      return ___EmotionJSX(ReactAceEditor, _extends({ ref: ref, mode: mode, theme: theme, tabSize: tabSize, defaultValue: defaultValue, value: value || '' }, props));\n    });\n  }, placeholder);\n}\nexport const SQLEditor = AsyncAceEditor([\n'mode/sql',\n'theme/github',\n'ext/language_tools']);\n\nexport const FullSQLEditor = AsyncAceEditor(['mode/sql', 'theme/github', 'ext/language_tools'], {\n  // a custom placeholder in SQL lab for less jumpy re-renders\n  placeholder: () => {\n    const gutterBackground = '#e8e8e8'; // from ace-github theme\n    return ___EmotionJSX(\"div\", { style: {\n        height: '100%' } },\n\n    ___EmotionJSX(\"div\", { style: { width: 41, height: '100%', background: gutterBackground } }),\n\n    ___EmotionJSX(\"div\", { className: \"ace_content\" }));\n\n  } });\n\nexport const MarkdownEditor = AsyncAceEditor([\n'mode/markdown',\n'theme/textmate']);\n\nexport const TextAreaEditor = AsyncAceEditor([\n'mode/markdown',\n'mode/sql',\n'mode/json',\n'mode/html',\n'mode/javascript',\n'theme/textmate']);\n\nexport const CssEditor = AsyncAceEditor(['mode/css', 'theme/github']);\nexport const JsonEditor = AsyncAceEditor(['mode/json', 'theme/github']);\n/**\n * JSON or Yaml config editor.\n */\nexport const ConfigEditor = AsyncAceEditor([\n'mode/json',\n'mode/yaml',\n'theme/github']);;(function () {var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined;if (!reactHotLoader) {return;}reactHotLoader.register(aceModuleLoaders, \"aceModuleLoaders\", \"/app/superset-frontend/src/components/AsyncAceEditor/index.tsx\");reactHotLoader.register(AsyncAceEditor, \"AsyncAceEditor\", \"/app/superset-frontend/src/components/AsyncAceEditor/index.tsx\");reactHotLoader.register(SQLEditor, \"SQLEditor\", \"/app/superset-frontend/src/components/AsyncAceEditor/index.tsx\");reactHotLoader.register(FullSQLEditor, \"FullSQLEditor\", \"/app/superset-frontend/src/components/AsyncAceEditor/index.tsx\");reactHotLoader.register(MarkdownEditor, \"MarkdownEditor\", \"/app/superset-frontend/src/components/AsyncAceEditor/index.tsx\");reactHotLoader.register(TextAreaEditor, \"TextAreaEditor\", \"/app/superset-frontend/src/components/AsyncAceEditor/index.tsx\");reactHotLoader.register(CssEditor, \"CssEditor\", \"/app/superset-frontend/src/components/AsyncAceEditor/index.tsx\");reactHotLoader.register(JsonEditor, \"JsonEditor\", \"/app/superset-frontend/src/components/AsyncAceEditor/index.tsx\");reactHotLoader.register(ConfigEditor, \"ConfigEditor\", \"/app/superset-frontend/src/components/AsyncAceEditor/index.tsx\");})();;(function () {var leaveModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.leaveModule : undefined;leaveModule && leaveModule(module);})();","map":{"version":3,"sources":["/app/superset-frontend/src/components/AsyncAceEditor/index.tsx"],"names":[],"mappings":"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","sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React from 'react';\nimport {\n  Editor as OrigEditor,\n  IEditSession,\n  Position,\n  TextMode as OrigTextMode,\n} from 'brace';\nimport AceEditor, { AceEditorProps } from 'react-ace';\nimport AsyncEsmComponent, {\n  PlaceholderProps,\n} from 'src/components/AsyncEsmComponent';\n\nexport interface AceCompleterKeywordData {\n  name: string;\n  value: string;\n  score: number;\n  meta: string;\n}\n\nexport type TextMode = OrigTextMode & { $id: string };\n\nexport interface AceCompleter {\n  insertMatch: (\n    data?: Editor | { value: string } | string,\n    options?: AceCompleterKeywordData,\n  ) => void;\n}\n\nexport type Editor = OrigEditor & {\n  completer: AceCompleter;\n  completers: AceCompleter[];\n};\n\nexport interface AceCompleterKeyword extends AceCompleterKeywordData {\n  completer?: AceCompleter;\n}\n\n/**\n * Async loaders to import brace modules. Must manually create call `import(...)`\n * promises because webpack can only analyze asycn imports statically.\n */\nconst aceModuleLoaders = {\n  'mode/sql': () => import('brace/mode/sql'),\n  'mode/markdown': () => import('brace/mode/markdown'),\n  'mode/css': () => import('brace/mode/css'),\n  'mode/json': () => import('brace/mode/json'),\n  'mode/yaml': () => import('brace/mode/yaml'),\n  'mode/html': () => import('brace/mode/html'),\n  'mode/javascript': () => import('brace/mode/javascript'),\n  'theme/textmate': () => import('brace/theme/textmate'),\n  'theme/github': () => import('brace/theme/github'),\n  'ext/language_tools': () => import('brace/ext/language_tools'),\n};\n\nexport type AceModule = keyof typeof aceModuleLoaders;\n\nexport type AsyncAceEditorProps = AceEditorProps & {\n  keywords?: AceCompleterKeyword[];\n};\n\nexport type AceEditorMode = 'sql';\nexport type AceEditorTheme = 'textmate' | 'github';\nexport type AsyncAceEditorOptions = {\n  defaultMode?: AceEditorMode;\n  defaultTheme?: AceEditorTheme;\n  defaultTabSize?: number;\n  placeholder?: React.ComponentType<\n    PlaceholderProps & Partial<AceEditorProps>\n  > | null;\n};\n\n/**\n * Get an async AceEditor with automatical loading of specified ace modules.\n */\nexport default function AsyncAceEditor(\n  aceModules: AceModule[],\n  {\n    defaultMode,\n    defaultTheme,\n    defaultTabSize = 2,\n    placeholder,\n  }: AsyncAceEditorOptions = {},\n) {\n  return AsyncEsmComponent(async () => {\n    const { default: ace } = await import('brace');\n    const { default: ReactAceEditor } = await import('react-ace');\n\n    await Promise.all(aceModules.map(x => aceModuleLoaders[x]()));\n\n    const inferredMode =\n      defaultMode ||\n      aceModules.find(x => x.startsWith('mode/'))?.replace('mode/', '');\n    const inferredTheme =\n      defaultTheme ||\n      aceModules.find(x => x.startsWith('theme/'))?.replace('theme/', '');\n\n    return React.forwardRef<AceEditor, AsyncAceEditorProps>(\n      function ExtendedAceEditor(\n        {\n          keywords,\n          mode = inferredMode,\n          theme = inferredTheme,\n          tabSize = defaultTabSize,\n          defaultValue = '',\n          value = '',\n          ...props\n        },\n        ref,\n      ) {\n        if (keywords) {\n          const langTools = ace.acequire('ace/ext/language_tools');\n          const completer = {\n            getCompletions: (\n              editor: AceEditor,\n              session: IEditSession,\n              pos: Position,\n              prefix: string,\n              callback: (error: null, wordList: object[]) => void,\n            ) => {\n              // If the prefix starts with a number, don't try to autocomplete\n              if (!Number.isNaN(parseInt(prefix, 10))) {\n                return;\n              }\n              if ((session.getMode() as TextMode).$id === `ace/mode/${mode}`) {\n                callback(null, keywords);\n              }\n            },\n          };\n          langTools.setCompleters([completer]);\n        }\n        return (\n          <ReactAceEditor\n            ref={ref}\n            mode={mode}\n            theme={theme}\n            tabSize={tabSize}\n            defaultValue={defaultValue}\n            value={value || ''}\n            {...props}\n          />\n        );\n      },\n    );\n  }, placeholder);\n}\n\nexport const SQLEditor = AsyncAceEditor([\n  'mode/sql',\n  'theme/github',\n  'ext/language_tools',\n]);\n\nexport const FullSQLEditor = AsyncAceEditor(\n  ['mode/sql', 'theme/github', 'ext/language_tools'],\n  {\n    // a custom placeholder in SQL lab for less jumpy re-renders\n    placeholder: () => {\n      const gutterBackground = '#e8e8e8'; // from ace-github theme\n      return (\n        <div\n          style={{\n            height: '100%',\n          }}\n        >\n          <div\n            style={{ width: 41, height: '100%', background: gutterBackground }}\n          />\n          {/* make it possible to resize the placeholder */}\n          <div className=\"ace_content\" />\n        </div>\n      );\n    },\n  },\n);\n\nexport const MarkdownEditor = AsyncAceEditor([\n  'mode/markdown',\n  'theme/textmate',\n]);\n\nexport const TextAreaEditor = AsyncAceEditor([\n  'mode/markdown',\n  'mode/sql',\n  'mode/json',\n  'mode/html',\n  'mode/javascript',\n  'theme/textmate',\n]);\n\nexport const CssEditor = AsyncAceEditor(['mode/css', 'theme/github']);\n\nexport const JsonEditor = AsyncAceEditor(['mode/json', 'theme/github']);\n\n/**\n * JSON or Yaml config editor.\n */\nexport const ConfigEditor = AsyncAceEditor([\n  'mode/json',\n  'mode/yaml',\n  'theme/github',\n]);\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}