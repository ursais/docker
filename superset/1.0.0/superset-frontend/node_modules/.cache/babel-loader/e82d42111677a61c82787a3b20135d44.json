{"ast":null,"code":"import \"core-js/modules/web.dom-collections.iterator.js\";import _trimInstanceProperty from \"@babel/runtime-corejs3/core-js-stable/instance/trim\";(function () {var enterModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.enterModule : undefined;enterModule && enterModule(module);})();var __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default.signature : function (a) {return a;}; /**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React, { useEffect, useState, useRef } from 'react';\nimport cx from 'classnames';\nimport { t } from '@superset-ui/core';\nimport { Tooltip } from 'src/components/Tooltip';import { jsx as ___EmotionJSX } from \"@emotion/react\";\nexport default function EditableTitle({ canEdit = false, editing = false, extraClasses, multiLine = false, noPermitTooltip, onSaveTitle, showTooltip = true, style, title = '', defaultTitle = '', placeholder = '' }) {\n  const [isEditing, setIsEditing] = useState(editing);\n  const [currentTitle, setCurrentTitle] = useState(title);\n  const [lastTitle, setLastTitle] = useState(title);\n  const [contentBoundingRect, setContentBoundingRect] = useState(null);\n  // Used so we can access the DOM element if a user clicks on this component.\n  const contentRef = useRef();\n  useEffect(() => {\n    if (title !== currentTitle) {\n      setLastTitle(currentTitle);\n      setCurrentTitle(title);\n    }\n  }, [title]);\n  useEffect(() => {\n    if (isEditing) {\n      contentRef.current.focus();\n    }\n  }, [isEditing]);\n  function handleClick() {\n    if (!canEdit || isEditing) {\n      return;\n    }\n    // For multi-line values, save the actual rendered size of the displayed text.\n    // Later, if a textarea is constructed for editing the value, we'll need this.\n    const contentBounding = contentRef.current ?\n    contentRef.current.getBoundingClientRect() :\n    null;\n    setIsEditing(true);\n    setContentBoundingRect(contentBounding);\n  }\n  function handleBlur() {\n    const formattedTitle = _trimInstanceProperty(currentTitle).call(currentTitle);\n    if (!canEdit) {\n      return;\n    }\n    setIsEditing(false);\n    if (!formattedTitle.length) {\n      setCurrentTitle(lastTitle);\n      return;\n    }\n    if (lastTitle !== formattedTitle) {\n      setLastTitle(formattedTitle);\n    }\n    if (title !== formattedTitle) {\n      onSaveTitle(formattedTitle);\n    }\n  }\n  // tl;dr when a EditableTitle is being edited, typically the Tab that wraps it has been\n  // clicked and is focused/active. For accessibility, when the focused tab anchor intercepts\n  // the ' ' key (among others, including all arrows) the onChange() doesn't fire. Somehow\n  // keydown is still called so we can detect this and manually add a ' ' to the current title\n  function handleKeyDown(event) {\n    if (event.key === ' ') {\n      event.stopPropagation();\n    }\n    if (event.key === 'Enter') {\n      event.preventDefault();\n      handleBlur();\n    }\n  }\n  function handleChange(ev) {\n    if (!canEdit) {\n      return;\n    }\n    setCurrentTitle(ev.target.value);\n  }\n  function handleKeyPress(ev) {\n    if (ev.key === 'Enter') {\n      ev.preventDefault();\n      handleBlur();\n    }\n  }\n  let value;\n  value = currentTitle;\n  if (!isEditing && !currentTitle) {\n    value = defaultTitle || title;\n  }\n  // Construct an inline style based on previously-saved height of the rendered label. Only\n  // used in multi-line contexts.\n  const editStyle = isEditing && contentBoundingRect ?\n  { height: `${contentBoundingRect.height}px` } :\n  undefined;\n  // Create a textarea when we're editing a multi-line value, otherwise create an input (which may\n  // be text or a button).\n  let titleComponent = multiLine && isEditing ? ___EmotionJSX(\"textarea\", { \"data-test\": \"editable-title-input\", ref: contentRef, value: value, className: !title ? 'text-muted' : undefined, onKeyDown: handleKeyDown, onChange: handleChange, onBlur: handleBlur, onClick: handleClick, onKeyPress: handleKeyPress, placeholder: placeholder, style: editStyle }) : ___EmotionJSX(\"input\", { \"data-test\": \"editable-title-input\", ref: contentRef, type: isEditing ? 'text' : 'button', value: value, className: !title ? 'text-muted' : undefined, onKeyDown: handleKeyDown, onChange: handleChange, onBlur: handleBlur, onClick: handleClick, onKeyPress: handleKeyPress, placeholder: placeholder });\n  if (showTooltip && !isEditing) {\n    titleComponent = ___EmotionJSX(Tooltip, { id: \"title-tooltip\", title: canEdit ?\n      t('Click to edit') :\n      noPermitTooltip ||\n      t(\"You don't have the rights to alter this title.\") },\n    titleComponent);\n\n  }\n  if (!canEdit) {\n    // don't actually want an input in this case\n    titleComponent = ___EmotionJSX(\"span\", { \"data-test\": \"editable-title-input\", title: value },\n    value);\n\n  }\n  return ___EmotionJSX(\"span\", { \"data-test\": \"editable-title\", className: cx('editable-title', extraClasses, canEdit && 'editable-title--editable', isEditing && 'editable-title--editing'), style: style },\n  titleComponent);\n\n}__signature__(EditableTitle, \"useState{[isEditing, setIsEditing](editing)}\\nuseState{[currentTitle, setCurrentTitle](title)}\\nuseState{[lastTitle, setLastTitle](title)}\\nuseState{[contentBoundingRect, setContentBoundingRect,](null)}\\nuseRef{contentRef}\\nuseEffect{}\\nuseEffect{}\");;(function () {var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined;if (!reactHotLoader) {return;}reactHotLoader.register(EditableTitle, \"EditableTitle\", \"/app/superset-frontend/src/components/EditableTitle/index.tsx\");})();;(function () {var leaveModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.leaveModule : undefined;leaveModule && leaveModule(module);})();","map":{"version":3,"sources":["/app/superset-frontend/src/components/EditableTitle/index.tsx"],"names":[],"mappings":"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","sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React, { useEffect, useState, useRef } from 'react';\nimport cx from 'classnames';\nimport { t } from '@superset-ui/core';\nimport { Tooltip } from 'src/components/Tooltip';\n\nexport interface EditableTitleProps {\n  canEdit?: boolean;\n  editing?: boolean;\n  emptyText?: string;\n  extraClasses?: Array<string> | string;\n  multiLine?: boolean;\n  noPermitTooltip?: string;\n  onSaveTitle: (arg0: string) => void;\n  showTooltip?: boolean;\n  style?: object;\n  title?: string;\n  defaultTitle?: string;\n  placeholder?: string;\n}\n\nexport default function EditableTitle({\n  canEdit = false,\n  editing = false,\n  extraClasses,\n  multiLine = false,\n  noPermitTooltip,\n  onSaveTitle,\n  showTooltip = true,\n  style,\n  title = '',\n  defaultTitle = '',\n  placeholder = '',\n}: EditableTitleProps) {\n  const [isEditing, setIsEditing] = useState(editing);\n  const [currentTitle, setCurrentTitle] = useState(title);\n  const [lastTitle, setLastTitle] = useState(title);\n  const [\n    contentBoundingRect,\n    setContentBoundingRect,\n  ] = useState<DOMRect | null>(null);\n  // Used so we can access the DOM element if a user clicks on this component.\n\n  const contentRef = useRef<any | HTMLInputElement | HTMLTextAreaElement>();\n\n  useEffect(() => {\n    if (title !== currentTitle) {\n      setLastTitle(currentTitle);\n      setCurrentTitle(title);\n    }\n  }, [title]);\n\n  useEffect(() => {\n    if (isEditing) {\n      contentRef.current.focus();\n    }\n  }, [isEditing]);\n\n  function handleClick() {\n    if (!canEdit || isEditing) {\n      return;\n    }\n\n    // For multi-line values, save the actual rendered size of the displayed text.\n    // Later, if a textarea is constructed for editing the value, we'll need this.\n    const contentBounding = contentRef.current\n      ? contentRef.current.getBoundingClientRect()\n      : null;\n    setIsEditing(true);\n    setContentBoundingRect(contentBounding);\n  }\n\n  function handleBlur() {\n    const formattedTitle = currentTitle.trim();\n\n    if (!canEdit) {\n      return;\n    }\n\n    setIsEditing(false);\n\n    if (!formattedTitle.length) {\n      setCurrentTitle(lastTitle);\n      return;\n    }\n\n    if (lastTitle !== formattedTitle) {\n      setLastTitle(formattedTitle);\n    }\n\n    if (title !== formattedTitle) {\n      onSaveTitle(formattedTitle);\n    }\n  }\n\n  // tl;dr when a EditableTitle is being edited, typically the Tab that wraps it has been\n  // clicked and is focused/active. For accessibility, when the focused tab anchor intercepts\n  // the ' ' key (among others, including all arrows) the onChange() doesn't fire. Somehow\n  // keydown is still called so we can detect this and manually add a ' ' to the current title\n  function handleKeyDown(event: any) {\n    if (event.key === ' ') {\n      event.stopPropagation();\n    }\n    if (event.key === 'Enter') {\n      event.preventDefault();\n      handleBlur();\n    }\n  }\n\n  function handleChange(ev: any) {\n    if (!canEdit) {\n      return;\n    }\n    setCurrentTitle(ev.target.value);\n  }\n\n  function handleKeyPress(ev: any) {\n    if (ev.key === 'Enter') {\n      ev.preventDefault();\n      handleBlur();\n    }\n  }\n\n  let value: string | undefined;\n  value = currentTitle;\n  if (!isEditing && !currentTitle) {\n    value = defaultTitle || title;\n  }\n\n  // Construct an inline style based on previously-saved height of the rendered label. Only\n  // used in multi-line contexts.\n  const editStyle =\n    isEditing && contentBoundingRect\n      ? { height: `${contentBoundingRect.height}px` }\n      : undefined;\n\n  // Create a textarea when we're editing a multi-line value, otherwise create an input (which may\n  // be text or a button).\n  let titleComponent =\n    multiLine && isEditing ? (\n      <textarea\n        data-test=\"editable-title-input\"\n        ref={contentRef}\n        value={value}\n        className={!title ? 'text-muted' : undefined}\n        onKeyDown={handleKeyDown}\n        onChange={handleChange}\n        onBlur={handleBlur}\n        onClick={handleClick}\n        onKeyPress={handleKeyPress}\n        placeholder={placeholder}\n        style={editStyle}\n      />\n    ) : (\n      <input\n        data-test=\"editable-title-input\"\n        ref={contentRef}\n        type={isEditing ? 'text' : 'button'}\n        value={value}\n        className={!title ? 'text-muted' : undefined}\n        onKeyDown={handleKeyDown}\n        onChange={handleChange}\n        onBlur={handleBlur}\n        onClick={handleClick}\n        onKeyPress={handleKeyPress}\n        placeholder={placeholder}\n      />\n    );\n  if (showTooltip && !isEditing) {\n    titleComponent = (\n      <Tooltip\n        id=\"title-tooltip\"\n        title={\n          canEdit\n            ? t('Click to edit')\n            : noPermitTooltip ||\n              t(\"You don't have the rights to alter this title.\")\n        }\n      >\n        {titleComponent}\n      </Tooltip>\n    );\n  }\n  if (!canEdit) {\n    // don't actually want an input in this case\n    titleComponent = (\n      <span data-test=\"editable-title-input\" title={value}>\n        {value}\n      </span>\n    );\n  }\n  return (\n    <span\n      data-test=\"editable-title\"\n      className={cx(\n        'editable-title',\n        extraClasses,\n        canEdit && 'editable-title--editable',\n        isEditing && 'editable-title--editing',\n      )}\n      style={style}\n    >\n      {titleComponent}\n    </span>\n  );\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}