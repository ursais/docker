{"ast":null,"code":"(function () {var enterModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.enterModule : undefined;enterModule && enterModule(module);})();var __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default.signature : function (a) {return a;}; /**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { DragLayer } from 'react-dnd';\n\nimport AddSliceCard from '../AddSliceCard';\nimport { slicePropShape } from '../../util/propShapes';\nimport {\nNEW_COMPONENT_SOURCE_TYPE,\nCHART_TYPE } from\n'../../util/componentTypes';import { jsx as ___EmotionJSX } from \"@emotion/react\";\n\nconst staticCardStyles = {\n  position: 'fixed',\n  pointerEvents: 'none',\n  top: 0,\n  left: 0,\n  zIndex: 101, // this should be higher than top-level tabs\n  width: 376 - 2 * 16 };\n\n\nconst propTypes = {\n  dragItem: PropTypes.shape({\n    index: PropTypes.number.isRequired }),\n\n  slices: PropTypes.arrayOf(slicePropShape),\n  isDragging: PropTypes.bool.isRequired,\n  currentOffset: PropTypes.shape({\n    x: PropTypes.number.isRequired,\n    y: PropTypes.number.isRequired }) };\n\n\n\nconst defaultProps = {\n  currentOffset: null,\n  dragItem: null,\n  slices: null };\n\n\nfunction AddSliceDragPreview({ dragItem, slices, isDragging, currentOffset }) {\n  if (!isDragging || !currentOffset || !dragItem || !slices) return null;\n\n  const slice = slices[dragItem.index];\n\n  // make sure it's a new component and a chart\n  const shouldRender =\n  slice &&\n  dragItem.parentType === NEW_COMPONENT_SOURCE_TYPE &&\n  dragItem.type === CHART_TYPE;\n\n  return !shouldRender ? null :\n  ___EmotionJSX(AddSliceCard, {\n    style: {\n      ...staticCardStyles,\n      transform: `translate(${currentOffset.x}px, ${currentOffset.y}px)` },\n\n    sliceName: slice.slice_name,\n    lastModified: slice.changed_on_humanized,\n    visType: slice.viz_type,\n    datasourceUrl: slice.datasource_url,\n    datasourceName: slice.datasource_name });\n\n\n}\n\nAddSliceDragPreview.propTypes = propTypes;\nAddSliceDragPreview.defaultProps = defaultProps;\n\n// This injects these props into the component\nconst _default = DragLayer(monitor => ({\n  dragItem: monitor.getItem(),\n  currentOffset: monitor.getSourceClientOffset(),\n  isDragging: monitor.isDragging() }))(\nAddSliceDragPreview);export default _default;;(function () {var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined;if (!reactHotLoader) {return;}reactHotLoader.register(staticCardStyles, \"staticCardStyles\", \"/app/superset-frontend/src/dashboard/components/dnd/AddSliceDragPreview.jsx\");reactHotLoader.register(propTypes, \"propTypes\", \"/app/superset-frontend/src/dashboard/components/dnd/AddSliceDragPreview.jsx\");reactHotLoader.register(defaultProps, \"defaultProps\", \"/app/superset-frontend/src/dashboard/components/dnd/AddSliceDragPreview.jsx\");reactHotLoader.register(AddSliceDragPreview, \"AddSliceDragPreview\", \"/app/superset-frontend/src/dashboard/components/dnd/AddSliceDragPreview.jsx\");reactHotLoader.register(_default, \"default\", \"/app/superset-frontend/src/dashboard/components/dnd/AddSliceDragPreview.jsx\");})();;(function () {var leaveModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.leaveModule : undefined;leaveModule && leaveModule(module);})();","map":{"version":3,"sources":["/app/superset-frontend/src/dashboard/components/dnd/AddSliceDragPreview.jsx"],"names":["React","PropTypes","DragLayer","AddSliceCard","slicePropShape","NEW_COMPONENT_SOURCE_TYPE","CHART_TYPE","staticCardStyles","position","pointerEvents","top","left","zIndex","width","propTypes","dragItem","shape","index","number","isRequired","slices","arrayOf","isDragging","bool","currentOffset","x","y","defaultProps","AddSliceDragPreview","slice","shouldRender","parentType","type","transform","slice_name","changed_on_humanized","viz_type","datasource_url","datasource_name","monitor","getItem","getSourceClientOffset"],"mappings":"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","sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { DragLayer } from 'react-dnd';\n\nimport AddSliceCard from '../AddSliceCard';\nimport { slicePropShape } from '../../util/propShapes';\nimport {\n  NEW_COMPONENT_SOURCE_TYPE,\n  CHART_TYPE,\n} from '../../util/componentTypes';\n\nconst staticCardStyles = {\n  position: 'fixed',\n  pointerEvents: 'none',\n  top: 0,\n  left: 0,\n  zIndex: 101, // this should be higher than top-level tabs\n  width: 376 - 2 * 16,\n};\n\nconst propTypes = {\n  dragItem: PropTypes.shape({\n    index: PropTypes.number.isRequired,\n  }),\n  slices: PropTypes.arrayOf(slicePropShape),\n  isDragging: PropTypes.bool.isRequired,\n  currentOffset: PropTypes.shape({\n    x: PropTypes.number.isRequired,\n    y: PropTypes.number.isRequired,\n  }),\n};\n\nconst defaultProps = {\n  currentOffset: null,\n  dragItem: null,\n  slices: null,\n};\n\nfunction AddSliceDragPreview({ dragItem, slices, isDragging, currentOffset }) {\n  if (!isDragging || !currentOffset || !dragItem || !slices) return null;\n\n  const slice = slices[dragItem.index];\n\n  // make sure it's a new component and a chart\n  const shouldRender =\n    slice &&\n    dragItem.parentType === NEW_COMPONENT_SOURCE_TYPE &&\n    dragItem.type === CHART_TYPE;\n\n  return !shouldRender ? null : (\n    <AddSliceCard\n      style={{\n        ...staticCardStyles,\n        transform: `translate(${currentOffset.x}px, ${currentOffset.y}px)`,\n      }}\n      sliceName={slice.slice_name}\n      lastModified={slice.changed_on_humanized}\n      visType={slice.viz_type}\n      datasourceUrl={slice.datasource_url}\n      datasourceName={slice.datasource_name}\n    />\n  );\n}\n\nAddSliceDragPreview.propTypes = propTypes;\nAddSliceDragPreview.defaultProps = defaultProps;\n\n// This injects these props into the component\nexport default DragLayer(monitor => ({\n  dragItem: monitor.getItem(),\n  currentOffset: monitor.getSourceClientOffset(),\n  isDragging: monitor.isDragging(),\n}))(AddSliceDragPreview);\n"]},"metadata":{},"sourceType":"module"}