{"ast":null,"code":"import _findInstanceProperty from \"@babel/runtime-corejs3/core-js-stable/instance/find\";(function () {var enterModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.enterModule : undefined;enterModule && enterModule(module);})();var __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default.signature : function (a) {return a;}; /**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport columnType from './columnType';\nimport AdhocMetricOption from './AdhocMetricOption';\nimport AdhocMetric from './AdhocMetric';\nimport savedMetricType from './savedMetricType';import { jsx as ___EmotionJSX } from \"@emotion/react\";\n\nconst propTypes = {\n  option: PropTypes.oneOfType([PropTypes.object, PropTypes.string]).isRequired,\n  index: PropTypes.number.isRequired,\n  onMetricEdit: PropTypes.func,\n  onRemoveMetric: PropTypes.func,\n  onMoveLabel: PropTypes.func,\n  onDropLabel: PropTypes.func,\n  columns: PropTypes.arrayOf(columnType),\n  savedMetrics: PropTypes.arrayOf(savedMetricType),\n  savedMetricsOptions: PropTypes.arrayOf(savedMetricType),\n  multi: PropTypes.bool,\n  datasourceType: PropTypes.string };\n\n\nexport default function MetricDefinitionValue({\n  option,\n  onMetricEdit,\n  onRemoveMetric,\n  columns,\n  savedMetrics,\n  savedMetricsOptions,\n  datasourceType,\n  onMoveLabel,\n  onDropLabel,\n  index })\n{\n  const getSavedMetricByName = (metricName) =>\n  _findInstanceProperty(savedMetrics).call(savedMetrics, metric => metric.metric_name === metricName);\n\n  let savedMetric;\n  if (typeof option === 'string') {\n    savedMetric = getSavedMetricByName(option);\n  } else if (option.metric_name) {\n    savedMetric = option;\n  }\n\n  if (option instanceof AdhocMetric || savedMetric) {var _savedMetric;\n    const adhocMetric =\n    option instanceof AdhocMetric ? option : new AdhocMetric({ isNew: true });\n\n    const metricOptionProps = {\n      onMetricEdit,\n      onRemoveMetric,\n      columns,\n      savedMetricsOptions,\n      datasourceType,\n      adhocMetric,\n      onMoveLabel,\n      onDropLabel,\n      index,\n      savedMetric: (_savedMetric = savedMetric) != null ? _savedMetric : {} };\n\n\n    return ___EmotionJSX(AdhocMetricOption, metricOptionProps);\n  }\n  return null;\n}\nMetricDefinitionValue.propTypes = propTypes;;(function () {var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined;if (!reactHotLoader) {return;}reactHotLoader.register(propTypes, \"propTypes\", \"/app/superset-frontend/src/explore/components/controls/MetricControl/MetricDefinitionValue.jsx\");reactHotLoader.register(MetricDefinitionValue, \"MetricDefinitionValue\", \"/app/superset-frontend/src/explore/components/controls/MetricControl/MetricDefinitionValue.jsx\");})();;(function () {var leaveModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.leaveModule : undefined;leaveModule && leaveModule(module);})();","map":{"version":3,"sources":["/app/superset-frontend/src/explore/components/controls/MetricControl/MetricDefinitionValue.jsx"],"names":["React","PropTypes","columnType","AdhocMetricOption","AdhocMetric","savedMetricType","propTypes","option","oneOfType","object","string","isRequired","index","number","onMetricEdit","func","onRemoveMetric","onMoveLabel","onDropLabel","columns","arrayOf","savedMetrics","savedMetricsOptions","multi","bool","datasourceType","MetricDefinitionValue","getSavedMetricByName","metricName","metric","metric_name","savedMetric","adhocMetric","isNew","metricOptionProps"],"mappings":"gYAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,OAAOC,UAAP,MAAuB,cAAvB;AACA,OAAOC,iBAAP,MAA8B,qBAA9B;AACA,OAAOC,WAAP,MAAwB,eAAxB;AACA,OAAOC,eAAP,MAA4B,mBAA5B,C;;AAEA,MAAMC,SAAS,GAAG;AAChBC,EAAAA,MAAM,EAAEN,SAAS,CAACO,SAAV,CAAoB,CAACP,SAAS,CAACQ,MAAX,EAAmBR,SAAS,CAACS,MAA7B,CAApB,EAA0DC,UADlD;AAEhBC,EAAAA,KAAK,EAAEX,SAAS,CAACY,MAAV,CAAiBF,UAFR;AAGhBG,EAAAA,YAAY,EAAEb,SAAS,CAACc,IAHR;AAIhBC,EAAAA,cAAc,EAAEf,SAAS,CAACc,IAJV;AAKhBE,EAAAA,WAAW,EAAEhB,SAAS,CAACc,IALP;AAMhBG,EAAAA,WAAW,EAAEjB,SAAS,CAACc,IANP;AAOhBI,EAAAA,OAAO,EAAElB,SAAS,CAACmB,OAAV,CAAkBlB,UAAlB,CAPO;AAQhBmB,EAAAA,YAAY,EAAEpB,SAAS,CAACmB,OAAV,CAAkBf,eAAlB,CARE;AAShBiB,EAAAA,mBAAmB,EAAErB,SAAS,CAACmB,OAAV,CAAkBf,eAAlB,CATL;AAUhBkB,EAAAA,KAAK,EAAEtB,SAAS,CAACuB,IAVD;AAWhBC,EAAAA,cAAc,EAAExB,SAAS,CAACS,MAXV,EAAlB;;;AAcA,eAAe,SAASgB,qBAAT,CAA+B;AAC5CnB,EAAAA,MAD4C;AAE5CO,EAAAA,YAF4C;AAG5CE,EAAAA,cAH4C;AAI5CG,EAAAA,OAJ4C;AAK5CE,EAAAA,YAL4C;AAM5CC,EAAAA,mBAN4C;AAO5CG,EAAAA,cAP4C;AAQ5CR,EAAAA,WAR4C;AAS5CC,EAAAA,WAT4C;AAU5CN,EAAAA,KAV4C,EAA/B;AAWZ;AACD,QAAMe,oBAAoB,GAAG,CAAAC,UAAU;AACrC,wBAAAP,YAAY,MAAZ,CAAAA,YAAY,EAAMQ,MAAM,IAAIA,MAAM,CAACC,WAAP,KAAuBF,UAAvC,CADd;;AAGA,MAAIG,WAAJ;AACA,MAAI,OAAOxB,MAAP,KAAkB,QAAtB,EAAgC;AAC9BwB,IAAAA,WAAW,GAAGJ,oBAAoB,CAACpB,MAAD,CAAlC;AACD,GAFD,MAEO,IAAIA,MAAM,CAACuB,WAAX,EAAwB;AAC7BC,IAAAA,WAAW,GAAGxB,MAAd;AACD;;AAED,MAAIA,MAAM,YAAYH,WAAlB,IAAiC2B,WAArC,EAAkD;AAChD,UAAMC,WAAW;AACfzB,IAAAA,MAAM,YAAYH,WAAlB,GAAgCG,MAAhC,GAAyC,IAAIH,WAAJ,CAAgB,EAAE6B,KAAK,EAAE,IAAT,EAAhB,CAD3C;;AAGA,UAAMC,iBAAiB,GAAG;AACxBpB,MAAAA,YADwB;AAExBE,MAAAA,cAFwB;AAGxBG,MAAAA,OAHwB;AAIxBG,MAAAA,mBAJwB;AAKxBG,MAAAA,cALwB;AAMxBO,MAAAA,WANwB;AAOxBf,MAAAA,WAPwB;AAQxBC,MAAAA,WARwB;AASxBN,MAAAA,KATwB;AAUxBmB,MAAAA,WAAW,kBAAEA,WAAF,2BAAiB,EAVJ,EAA1B;;;AAaA,WAAO,cAAC,iBAAD,EAAuBG,iBAAvB,CAAP;AACD;AACD,SAAO,IAAP;AACD;AACDR,qBAAqB,CAACpB,SAAtB,GAAkCA,SAAlC,C,iLAzDMA,S,yIAckBoB,qB","sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport columnType from './columnType';\nimport AdhocMetricOption from './AdhocMetricOption';\nimport AdhocMetric from './AdhocMetric';\nimport savedMetricType from './savedMetricType';\n\nconst propTypes = {\n  option: PropTypes.oneOfType([PropTypes.object, PropTypes.string]).isRequired,\n  index: PropTypes.number.isRequired,\n  onMetricEdit: PropTypes.func,\n  onRemoveMetric: PropTypes.func,\n  onMoveLabel: PropTypes.func,\n  onDropLabel: PropTypes.func,\n  columns: PropTypes.arrayOf(columnType),\n  savedMetrics: PropTypes.arrayOf(savedMetricType),\n  savedMetricsOptions: PropTypes.arrayOf(savedMetricType),\n  multi: PropTypes.bool,\n  datasourceType: PropTypes.string,\n};\n\nexport default function MetricDefinitionValue({\n  option,\n  onMetricEdit,\n  onRemoveMetric,\n  columns,\n  savedMetrics,\n  savedMetricsOptions,\n  datasourceType,\n  onMoveLabel,\n  onDropLabel,\n  index,\n}) {\n  const getSavedMetricByName = metricName =>\n    savedMetrics.find(metric => metric.metric_name === metricName);\n\n  let savedMetric;\n  if (typeof option === 'string') {\n    savedMetric = getSavedMetricByName(option);\n  } else if (option.metric_name) {\n    savedMetric = option;\n  }\n\n  if (option instanceof AdhocMetric || savedMetric) {\n    const adhocMetric =\n      option instanceof AdhocMetric ? option : new AdhocMetric({ isNew: true });\n\n    const metricOptionProps = {\n      onMetricEdit,\n      onRemoveMetric,\n      columns,\n      savedMetricsOptions,\n      datasourceType,\n      adhocMetric,\n      onMoveLabel,\n      onDropLabel,\n      index,\n      savedMetric: savedMetric ?? {},\n    };\n\n    return <AdhocMetricOption {...metricOptionProps} />;\n  }\n  return null;\n}\nMetricDefinitionValue.propTypes = propTypes;\n"]},"metadata":{},"sourceType":"module"}