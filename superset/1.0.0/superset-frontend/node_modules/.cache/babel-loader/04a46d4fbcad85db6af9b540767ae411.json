{"ast":null,"code":"import _Promise from \"@babel/runtime-corejs3/core-js-stable/promise\";import _indexOfInstanceProperty from \"@babel/runtime-corejs3/core-js-stable/instance/index-of\";(function () {var enterModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.enterModule : undefined;enterModule && enterModule(module);})();var __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default.signature : function (a) {return a;}; /**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { t } from '@superset-ui/core';\nimport { ErrorTypeEnum } from 'src/components/ErrorMessage/types';\nimport COMMON_ERR_MESSAGES from './errorMessages';\nexport function parseErrorJson(responseObject) {var _context;\n  let error = { ...responseObject };\n  // Backwards compatibility for old error renderers with the new error object\n  if (error.errors && error.errors.length > 0) {var _error$errors$, _error$errors$$extra;\n    error.error = error.description = error.errors[0].message;\n    error.link = (_error$errors$ = error.errors[0]) == null ? void 0 : (_error$errors$$extra = _error$errors$.extra) == null ? void 0 : _error$errors$$extra.link;\n  }\n  if (error.stack) {\n    error = {\n      ...error,\n      error: t('Unexpected error: ') + (\n      error.description || t('(no description, click to see stack trace)')),\n      stacktrace: error.stack };\n\n  } else\n  if (error.responseText && _indexOfInstanceProperty(_context = error.responseText).call(_context, 'CSRF') >= 0) {\n    error = {\n      ...error,\n      error: t(COMMON_ERR_MESSAGES.SESSION_TIMED_OUT) };\n\n  }\n  return { ...error, error: error.error }; // explicit ClientErrorObject\n}\nexport function getClientErrorObject(response) {\n  // takes a SupersetClientResponse as input, attempts to read response as Json if possible,\n  // and returns a Promise that resolves to a plain object with error key and text value.\n  return new _Promise(resolve => {\n    if (typeof response === 'string') {\n      resolve({ error: response });\n    } else\n    {\n      const responseObject = response instanceof Response ? response : response.response;\n      if (responseObject && !responseObject.bodyUsed) {\n        // attempt to read the body as json, and fallback to text. we must clone the\n        // response in order to fallback to .text() because Response is single-read\n        responseObject.\n        clone().\n        json().\n        then(errorJson => {\n          const error = { ...responseObject, ...errorJson };\n          resolve(parseErrorJson(error));\n        }).\n        catch(() => {\n          // fall back to reading as text\n          responseObject.text().then(errorText => {\n            resolve({ ...responseObject, error: errorText });\n          });\n        });\n      } else\n      if ('statusText' in response &&\n      response.statusText === 'timeout' &&\n      'timeout' in response) {\n        resolve({\n          ...responseObject,\n          error: 'Request timed out',\n          errors: [\n          {\n            error_type: ErrorTypeEnum.FRONTEND_TIMEOUT_ERROR,\n            extra: {\n              timeout: response.timeout / 1000,\n              issue_codes: [\n              {\n                code: 1000,\n                message: t('Issue 1000 - The dataset is too large to query.') },\n\n              {\n                code: 1001,\n                message: t('Issue 1001 - The database is under an unusual load.') }] },\n\n\n\n            level: 'error',\n            message: 'Request timed out' }] });\n\n\n\n      } else\n      {\n        // fall back to Response.statusText or generic error of we cannot read the response\n        let error = response.statusText || response.message;\n        if (!error) {\n          // eslint-disable-next-line no-console\n          console.error('non-standard error:', response);\n          error = t('An error occurred');\n        }\n        resolve({\n          ...responseObject,\n          error });\n\n      }\n    }\n  });\n};(function () {var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined;if (!reactHotLoader) {return;}reactHotLoader.register(parseErrorJson, \"parseErrorJson\", \"/app/superset-frontend/src/utils/getClientErrorObject.ts\");reactHotLoader.register(getClientErrorObject, \"getClientErrorObject\", \"/app/superset-frontend/src/utils/getClientErrorObject.ts\");})();;(function () {var leaveModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.leaveModule : undefined;leaveModule && leaveModule(module);})();","map":{"version":3,"sources":["/app/superset-frontend/src/utils/getClientErrorObject.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { JsonObject, SupersetClientResponse, t } from '@superset-ui/core';\nimport {\n  SupersetError,\n  ErrorTypeEnum,\n} from 'src/components/ErrorMessage/types';\nimport COMMON_ERR_MESSAGES from './errorMessages';\n\n// The response always contains an error attribute, can contain anything from the\n// SupersetClientResponse object, and can contain a spread JSON blob\nexport type ClientErrorObject = {\n  error: string;\n  errors?: SupersetError[];\n  link?: string;\n  // marshmallow field validation returns the error mssage in the format\n  // of { field: [msg1, msg2] }\n  message?: string;\n  severity?: string;\n  stacktrace?: string;\n} & Partial<SupersetClientResponse>;\n\ninterface ResponseWithTimeout extends Response {\n  timeout: number;\n}\n\nexport function parseErrorJson(responseObject: JsonObject): ClientErrorObject {\n  let error = { ...responseObject };\n  // Backwards compatibility for old error renderers with the new error object\n  if (error.errors && error.errors.length > 0) {\n    error.error = error.description = error.errors[0].message;\n    error.link = error.errors[0]?.extra?.link;\n  }\n\n  if (error.stack) {\n    error = {\n      ...error,\n      error:\n        t('Unexpected error: ') +\n        (error.description || t('(no description, click to see stack trace)')),\n      stacktrace: error.stack,\n    };\n  } else if (error.responseText && error.responseText.indexOf('CSRF') >= 0) {\n    error = {\n      ...error,\n      error: t(COMMON_ERR_MESSAGES.SESSION_TIMED_OUT),\n    };\n  }\n\n  return { ...error, error: error.error }; // explicit ClientErrorObject\n}\n\nexport function getClientErrorObject(\n  response: SupersetClientResponse | ResponseWithTimeout | string,\n): Promise<ClientErrorObject> {\n  // takes a SupersetClientResponse as input, attempts to read response as Json if possible,\n  // and returns a Promise that resolves to a plain object with error key and text value.\n  return new Promise(resolve => {\n    if (typeof response === 'string') {\n      resolve({ error: response });\n    } else {\n      const responseObject =\n        response instanceof Response ? response : response.response;\n      if (responseObject && !responseObject.bodyUsed) {\n        // attempt to read the body as json, and fallback to text. we must clone the\n        // response in order to fallback to .text() because Response is single-read\n        responseObject\n          .clone()\n          .json()\n          .then(errorJson => {\n            const error = { ...responseObject, ...errorJson };\n            resolve(parseErrorJson(error));\n          })\n          .catch(() => {\n            // fall back to reading as text\n            responseObject.text().then((errorText: any) => {\n              resolve({ ...responseObject, error: errorText });\n            });\n          });\n      } else if (\n        'statusText' in response &&\n        response.statusText === 'timeout' &&\n        'timeout' in response\n      ) {\n        resolve({\n          ...responseObject,\n          error: 'Request timed out',\n          errors: [\n            {\n              error_type: ErrorTypeEnum.FRONTEND_TIMEOUT_ERROR,\n              extra: {\n                timeout: response.timeout / 1000,\n                issue_codes: [\n                  {\n                    code: 1000,\n                    message: t(\n                      'Issue 1000 - The dataset is too large to query.',\n                    ),\n                  },\n                  {\n                    code: 1001,\n                    message: t(\n                      'Issue 1001 - The database is under an unusual load.',\n                    ),\n                  },\n                ],\n              },\n              level: 'error',\n              message: 'Request timed out',\n            },\n          ],\n        });\n      } else {\n        // fall back to Response.statusText or generic error of we cannot read the response\n        let error = (response as any).statusText || (response as any).message;\n        if (!error) {\n          // eslint-disable-next-line no-console\n          console.error('non-standard error:', response);\n          error = t('An error occurred');\n        }\n        resolve({\n          ...responseObject,\n          error,\n        });\n      }\n    }\n  });\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}