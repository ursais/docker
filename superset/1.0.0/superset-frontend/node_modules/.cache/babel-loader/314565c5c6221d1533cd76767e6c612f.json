{"ast":null,"code":"(function () {var enterModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.enterModule : undefined;enterModule && enterModule(module);})();var __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default.signature : function (a) {return a;}; /**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n/* eslint camelcase: 0 */\nimport { t } from '@superset-ui/core';\nimport { HYDRATE_DASHBOARD } from 'src/dashboard/actions/hydrate';\nimport { getFormDataFromControls } from 'src/explore/controlUtils';\nimport { now } from 'src/modules/dates';\nimport * as actions from './chartAction';\nexport const chart = {\n  id: 0,\n  chartAlert: null,\n  chartStatus: 'loading',\n  chartStackTrace: null,\n  chartUpdateEndTime: null,\n  chartUpdateStartTime: 0,\n  latestQueryFormData: {},\n  sliceFormData: null,\n  queryController: null,\n  queriesResponse: null,\n  triggerQuery: true,\n  lastRendered: 0 };\n\nexport default function chartReducer(charts = {}, action) {\n  const actionHandlers = {\n    [actions.ADD_CHART]() {\n      return {\n        ...chart,\n        ...action.chart };\n\n    },\n    [actions.CHART_UPDATE_SUCCEEDED](state) {\n      return {\n        ...state,\n        chartStatus: 'success',\n        chartAlert: null,\n        queriesResponse: action.queriesResponse,\n        chartUpdateEndTime: now() };\n\n    },\n    [actions.CHART_UPDATE_STARTED](state) {\n      return {\n        ...state,\n        chartStatus: 'loading',\n        chartStackTrace: null,\n        chartAlert: null,\n        chartUpdateEndTime: null,\n        chartUpdateStartTime: now(),\n        queryController: action.queryController };\n\n    },\n    [actions.CHART_UPDATE_STOPPED](state) {\n      return {\n        ...state,\n        chartStatus: 'stopped',\n        chartAlert: t('Updating chart was stopped'),\n        chartUpdateEndTime: now() };\n\n    },\n    [actions.CHART_RENDERING_SUCCEEDED](state) {\n      return { ...state, chartStatus: 'rendered', chartUpdateEndTime: now() };\n    },\n    [actions.CHART_RENDERING_FAILED](state) {\n      return {\n        ...state,\n        chartStatus: 'failed',\n        chartStackTrace: action.stackTrace,\n        chartAlert: t('An error occurred while rendering the visualization: %s', action.error) };\n\n    },\n    [actions.CHART_UPDATE_FAILED](state) {var _action$queriesRespon, _action$queriesRespon2, _action$queriesRespon3, _action$queriesRespon4;\n      return {\n        ...state,\n        chartStatus: 'failed',\n        chartAlert: action.queriesResponse ? (_action$queriesRespon =\n        action.queriesResponse) == null ? void 0 : (_action$queriesRespon2 = _action$queriesRespon[0]) == null ? void 0 : _action$queriesRespon2.error :\n        t('Network error.'),\n        chartUpdateEndTime: now(),\n        queriesResponse: action.queriesResponse,\n        chartStackTrace: action.queriesResponse ? (_action$queriesRespon3 =\n        action.queriesResponse) == null ? void 0 : (_action$queriesRespon4 = _action$queriesRespon3[0]) == null ? void 0 : _action$queriesRespon4.stacktrace :\n        null };\n\n    },\n    [actions.DYNAMIC_PLUGIN_CONTROLS_READY](state) {\n      const sliceFormData = getFormDataFromControls(action.controlsState);\n      return { ...state, sliceFormData };\n    },\n    [actions.TRIGGER_QUERY](state) {\n      return {\n        ...state,\n        triggerQuery: action.value,\n        chartStatus: 'loading' };\n\n    },\n    [actions.RENDER_TRIGGERED](state) {\n      return { ...state, lastRendered: action.value };\n    },\n    [actions.UPDATE_QUERY_FORM_DATA](state) {\n      return { ...state, latestQueryFormData: action.value };\n    },\n    [actions.ANNOTATION_QUERY_STARTED](state) {\n      if (state.annotationQuery &&\n      state.annotationQuery[action.annotation.name]) {\n        state.annotationQuery[action.annotation.name].abort();\n      }\n      const annotationQuery = {\n        ...state.annotationQuery,\n        [action.annotation.name]: action.queryController };\n\n      return {\n        ...state,\n        annotationQuery };\n\n    },\n    [actions.ANNOTATION_QUERY_SUCCESS](state) {\n      const annotationData = {\n        ...state.annotationData,\n        [action.annotation.name]: action.queryResponse.data };\n\n      const annotationError = { ...state.annotationError };\n      delete annotationError[action.annotation.name];\n      const annotationQuery = { ...state.annotationQuery };\n      delete annotationQuery[action.annotation.name];\n      return {\n        ...state,\n        annotationData,\n        annotationError,\n        annotationQuery };\n\n    },\n    [actions.ANNOTATION_QUERY_FAILED](state) {\n      const annotationData = { ...state.annotationData };\n      delete annotationData[action.annotation.name];\n      const annotationError = {\n        ...state.annotationError,\n        [action.annotation.name]: action.queryResponse ?\n        action.queryResponse.error :\n        t('Network error.') };\n\n      const annotationQuery = { ...state.annotationQuery };\n      delete annotationQuery[action.annotation.name];\n      return {\n        ...state,\n        annotationData,\n        annotationError,\n        annotationQuery };\n\n    } };\n\n  /* eslint-disable no-param-reassign */\n  if (action.type === actions.REMOVE_CHART) {\n    delete charts[action.key];\n    return charts;\n  }\n  if (action.type === actions.UPDATE_CHART_ID) {\n    const { newId, key } = action;\n    charts[newId] = {\n      ...charts[key],\n      id: newId };\n\n    delete charts[key];\n    return charts;\n  }\n  if (action.type === HYDRATE_DASHBOARD) {\n    return { ...action.data.charts };\n  }\n  if (action.type in actionHandlers) {\n    return {\n      ...charts,\n      [action.key]: actionHandlers[action.type](charts[action.key]) };\n\n  }\n  return charts;\n};(function () {var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined;if (!reactHotLoader) {return;}reactHotLoader.register(chart, \"chart\", \"/app/superset-frontend/src/chart/chartReducer.ts\");reactHotLoader.register(chartReducer, \"chartReducer\", \"/app/superset-frontend/src/chart/chartReducer.ts\");})();;(function () {var leaveModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.leaveModule : undefined;leaveModule && leaveModule(module);})();","map":{"version":3,"sources":["/app/superset-frontend/src/chart/chartReducer.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n/* eslint camelcase: 0 */\nimport { t } from '@superset-ui/core';\nimport { HYDRATE_DASHBOARD } from 'src/dashboard/actions/hydrate';\nimport { ChartState } from 'src/explore/types';\nimport { getFormDataFromControls } from 'src/explore/controlUtils';\nimport { now } from 'src/modules/dates';\nimport * as actions from './chartAction';\n\nexport const chart: ChartState = {\n  id: 0,\n  chartAlert: null,\n  chartStatus: 'loading',\n  chartStackTrace: null,\n  chartUpdateEndTime: null,\n  chartUpdateStartTime: 0,\n  latestQueryFormData: {},\n  sliceFormData: null,\n  queryController: null,\n  queriesResponse: null,\n  triggerQuery: true,\n  lastRendered: 0,\n};\n\ntype ChartActionHandler = (state: ChartState) => ChartState;\n\ntype AnyChartAction = Record<string, any>;\n\nexport default function chartReducer(\n  charts: Record<string, ChartState> = {},\n  action: AnyChartAction,\n) {\n  const actionHandlers: Record<string, ChartActionHandler> = {\n    [actions.ADD_CHART]() {\n      return {\n        ...chart,\n        ...action.chart,\n      };\n    },\n    [actions.CHART_UPDATE_SUCCEEDED](state) {\n      return {\n        ...state,\n        chartStatus: 'success',\n        chartAlert: null,\n        queriesResponse: action.queriesResponse,\n        chartUpdateEndTime: now(),\n      };\n    },\n    [actions.CHART_UPDATE_STARTED](state) {\n      return {\n        ...state,\n        chartStatus: 'loading',\n        chartStackTrace: null,\n        chartAlert: null,\n        chartUpdateEndTime: null,\n        chartUpdateStartTime: now(),\n        queryController: action.queryController,\n      };\n    },\n    [actions.CHART_UPDATE_STOPPED](state) {\n      return {\n        ...state,\n        chartStatus: 'stopped',\n        chartAlert: t('Updating chart was stopped'),\n        chartUpdateEndTime: now(),\n      };\n    },\n    [actions.CHART_RENDERING_SUCCEEDED](state) {\n      return { ...state, chartStatus: 'rendered', chartUpdateEndTime: now() };\n    },\n    [actions.CHART_RENDERING_FAILED](state) {\n      return {\n        ...state,\n        chartStatus: 'failed',\n        chartStackTrace: action.stackTrace,\n        chartAlert: t(\n          'An error occurred while rendering the visualization: %s',\n          action.error,\n        ),\n      };\n    },\n    [actions.CHART_UPDATE_FAILED](state) {\n      return {\n        ...state,\n        chartStatus: 'failed',\n        chartAlert: action.queriesResponse\n          ? action.queriesResponse?.[0]?.error\n          : t('Network error.'),\n        chartUpdateEndTime: now(),\n        queriesResponse: action.queriesResponse,\n        chartStackTrace: action.queriesResponse\n          ? action.queriesResponse?.[0]?.stacktrace\n          : null,\n      };\n    },\n    [actions.DYNAMIC_PLUGIN_CONTROLS_READY](state) {\n      const sliceFormData = getFormDataFromControls(action.controlsState);\n      return { ...state, sliceFormData };\n    },\n    [actions.TRIGGER_QUERY](state) {\n      return {\n        ...state,\n        triggerQuery: action.value,\n        chartStatus: 'loading',\n      };\n    },\n    [actions.RENDER_TRIGGERED](state) {\n      return { ...state, lastRendered: action.value };\n    },\n    [actions.UPDATE_QUERY_FORM_DATA](state) {\n      return { ...state, latestQueryFormData: action.value };\n    },\n    [actions.ANNOTATION_QUERY_STARTED](state) {\n      if (\n        state.annotationQuery &&\n        state.annotationQuery[action.annotation.name]\n      ) {\n        state.annotationQuery[action.annotation.name].abort();\n      }\n      const annotationQuery = {\n        ...state.annotationQuery,\n        [action.annotation.name]: action.queryController,\n      };\n      return {\n        ...state,\n        annotationQuery,\n      };\n    },\n    [actions.ANNOTATION_QUERY_SUCCESS](state) {\n      const annotationData = {\n        ...state.annotationData,\n        [action.annotation.name]: action.queryResponse.data,\n      };\n      const annotationError = { ...state.annotationError };\n      delete annotationError[action.annotation.name];\n      const annotationQuery = { ...state.annotationQuery };\n      delete annotationQuery[action.annotation.name];\n      return {\n        ...state,\n        annotationData,\n        annotationError,\n        annotationQuery,\n      };\n    },\n    [actions.ANNOTATION_QUERY_FAILED](state) {\n      const annotationData = { ...state.annotationData };\n      delete annotationData[action.annotation.name];\n      const annotationError = {\n        ...state.annotationError,\n        [action.annotation.name]: action.queryResponse\n          ? action.queryResponse.error\n          : t('Network error.'),\n      };\n      const annotationQuery = { ...state.annotationQuery };\n      delete annotationQuery[action.annotation.name];\n      return {\n        ...state,\n        annotationData,\n        annotationError,\n        annotationQuery,\n      };\n    },\n  };\n\n  /* eslint-disable no-param-reassign */\n  if (action.type === actions.REMOVE_CHART) {\n    delete charts[action.key];\n    return charts;\n  }\n  if (action.type === actions.UPDATE_CHART_ID) {\n    const { newId, key } = action;\n    charts[newId] = {\n      ...charts[key],\n      id: newId,\n    };\n    delete charts[key];\n    return charts;\n  }\n  if (action.type === HYDRATE_DASHBOARD) {\n    return { ...action.data.charts };\n  }\n  if (action.type in actionHandlers) {\n    return {\n      ...charts,\n      [action.key]: actionHandlers[action.type](charts[action.key]),\n    };\n  }\n\n  return charts;\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}