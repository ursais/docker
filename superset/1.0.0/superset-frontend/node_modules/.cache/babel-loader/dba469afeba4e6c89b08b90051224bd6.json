{"ast":null,"code":"import \"core-js/modules/web.dom-collections.iterator.js\";import _reduceInstanceProperty from \"@babel/runtime-corejs3/core-js-stable/instance/reduce\";import _flatMapDeep from \"lodash/flatMapDeep\";(function () {var enterModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.enterModule : undefined;enterModule && enterModule(module);})();var __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default.signature : function (a) {return a;};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nimport React from 'react';\nconst FILTERS_FIELD_NAME = 'filters';\nexport const useForceUpdate = () => {\n  const [, updateState] = React.useState({});\n  return React.useCallback(() => updateState({}), []);\n};__signature__(useForceUpdate, \"useState{[, updateState]({})}\\nuseCallback{}\");\nexport const setNativeFilterFieldValues = (form, filterId, values) => {\n  const formFilters = form.getFieldValue(FILTERS_FIELD_NAME) || {};\n  form.setFields([\n  {\n    name: FILTERS_FIELD_NAME,\n    value: {\n      ...formFilters,\n      [filterId]: {\n        ...formFilters[filterId],\n        ...values } } }]);\n\n\n\n\n};\nexport const getControlItems = (controlConfig = {}) => {var _flatMapDeep$reduce, _flatMapDeep2;return (_flatMapDeep$reduce = (_flatMapDeep2 = _flatMapDeep(controlConfig.controlPanelSections)) == null ? void 0 : _reduceInstanceProperty(_flatMapDeep2).call(_flatMapDeep2, (acc, { controlSetRows = [] }) => [\n  ...acc,\n  ..._flatMapDeep(controlSetRows)],\n  [])) != null ? _flatMapDeep$reduce : [];};\nexport const datasetToSelectOption = item => ({\n  value: item.id,\n  label: item.table_name });;(function () {var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined;if (!reactHotLoader) {return;}reactHotLoader.register(FILTERS_FIELD_NAME, \"FILTERS_FIELD_NAME\", \"/app/superset-frontend/src/dashboard/components/nativeFilters/FiltersConfigModal/FiltersConfigForm/utils.ts\");reactHotLoader.register(useForceUpdate, \"useForceUpdate\", \"/app/superset-frontend/src/dashboard/components/nativeFilters/FiltersConfigModal/FiltersConfigForm/utils.ts\");reactHotLoader.register(setNativeFilterFieldValues, \"setNativeFilterFieldValues\", \"/app/superset-frontend/src/dashboard/components/nativeFilters/FiltersConfigModal/FiltersConfigForm/utils.ts\");reactHotLoader.register(getControlItems, \"getControlItems\", \"/app/superset-frontend/src/dashboard/components/nativeFilters/FiltersConfigModal/FiltersConfigForm/utils.ts\");reactHotLoader.register(datasetToSelectOption, \"datasetToSelectOption\", \"/app/superset-frontend/src/dashboard/components/nativeFilters/FiltersConfigModal/FiltersConfigForm/utils.ts\");})();;(function () {var leaveModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.leaveModule : undefined;leaveModule && leaveModule(module);})();","map":{"version":3,"sources":["/app/superset-frontend/src/dashboard/components/nativeFilters/FiltersConfigModal/FiltersConfigForm/utils.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;AAoBA,OAAO,KAAP,MAAkB,OAAlB;AAGA,MAAM,kBAAkB,GAAG,SAA3B;AAEA,OAAO,MAAM,cAAc,GAAG,MAAK;AACjC,QAAM,GAAG,WAAH,IAAkB,KAAK,CAAC,QAAN,CAAe,EAAf,CAAxB;AACA,SAAO,KAAK,CAAC,WAAN,CAAkB,MAAM,WAAW,CAAC,EAAD,CAAnC,EAAyC,EAAzC,CAAP;AACD,CAHM,C,cAAM,c;AAKb,OAAO,MAAM,0BAA0B,GAAG,CACxC,IADwC,EAExC,QAFwC,EAGxC,MAHwC,KAItC;AACF,QAAM,WAAW,GAAG,IAAI,CAAC,aAAL,CAAmB,kBAAnB,KAA0C,EAA9D;AACA,EAAA,IAAI,CAAC,SAAL,CAAe;AACb;AACE,IAAA,IAAI,EAAE,kBADR;AAEE,IAAA,KAAK,EAAE;AACL,SAAG,WADE;AAEL,OAAC,QAAD,GAAY;AACV,WAAG,WAAW,CAAC,QAAD,CADJ;AAEV,WAAG,MAFO,EAFP,EAFT,EADa,CAAf;;;;;AAYD,CAlBM;AAoBP,OAAO,MAAM,eAAe,GAAG,CAC7B,aAAA,GAAwC,EADX,4FAG5B,aAAY,aAAa,CAAC,oBAA1B,CAH4B,qBAG5B,2DACC,CAAC,GAAD,EAAW,EAAE,cAAc,GAAG,EAAnB,EAAX,KAA4C;AAC1C,KAAG,GADuC;AAE1C,KAAG,aAAY,cAAZ,CAFuC,CAD7C;AAKC,IALD,CAH4B,kCASA,EATA,EAAxB;AAgBP,OAAO,MAAM,qBAAqB,GAAI,IAAD,KAAoC;AACvE,EAAA,KAAK,EAAE,IAAI,CAAC,EAD2D;AAEvE,EAAA,KAAK,EAAE,IAAI,CAAC,UAF2D,EAApC,CAA9B,C,iLA3CD,kB,+JAEO,c,2JAKA,0B,uKAoBA,e,4JAgBA,qB","sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { flatMapDeep } from 'lodash';\nimport { FormInstance } from 'antd/lib/form';\nimport React from 'react';\nimport { CustomControlItem } from '@superset-ui/chart-controls';\n\nconst FILTERS_FIELD_NAME = 'filters';\n\nexport const useForceUpdate = () => {\n  const [, updateState] = React.useState({});\n  return React.useCallback(() => updateState({}), []);\n};\n\nexport const setNativeFilterFieldValues = (\n  form: FormInstance,\n  filterId: string,\n  values: object,\n) => {\n  const formFilters = form.getFieldValue(FILTERS_FIELD_NAME) || {};\n  form.setFields([\n    {\n      name: FILTERS_FIELD_NAME,\n      value: {\n        ...formFilters,\n        [filterId]: {\n          ...formFilters[filterId],\n          ...values,\n        },\n      },\n    },\n  ]);\n};\n\nexport const getControlItems = (\n  controlConfig: { [key: string]: any } = {},\n): CustomControlItem[] =>\n  (flatMapDeep(controlConfig.controlPanelSections)?.reduce(\n    (acc: any, { controlSetRows = [] }: any) => [\n      ...acc,\n      ...flatMapDeep(controlSetRows),\n    ],\n    [],\n  ) as CustomControlItem[]) ?? [];\n\ntype DatasetSelectValue = {\n  value: number;\n  label: string;\n};\n\nexport const datasetToSelectOption = (item: any): DatasetSelectValue => ({\n  value: item.id,\n  label: item.table_name,\n});\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}