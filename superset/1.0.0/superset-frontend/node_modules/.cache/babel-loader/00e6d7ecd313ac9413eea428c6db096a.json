{"ast":null,"code":"import _Object$keys from \"@babel/runtime-corejs3/core-js-stable/object/keys\";import _reduceInstanceProperty from \"@babel/runtime-corejs3/core-js-stable/instance/reduce\";(function () {var enterModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.enterModule : undefined;enterModule && enterModule(module);})();var __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default.signature : function (a) {return a;}; /**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nfunction extractTypes(metadata) {var _context;\n  return _reduceInstanceProperty(_context = _Object$keys(metadata)).call(_context, (prev, key) => {\n    const result = prev;\n    result[key] = key;\n    return result;\n  }, {});\n}\n\nexport const ANNOTATION_TYPES_METADATA = {\n  FORMULA: {\n    value: 'FORMULA',\n    label: 'Formula' },\n\n  EVENT: {\n    value: 'EVENT',\n    label: 'Event',\n    supportNativeSource: true },\n\n  INTERVAL: {\n    value: 'INTERVAL',\n    label: 'Interval',\n    supportNativeSource: true },\n\n  TIME_SERIES: {\n    value: 'TIME_SERIES',\n    label: 'Time series' } };\n\n\n\nexport const ANNOTATION_TYPES = extractTypes(ANNOTATION_TYPES_METADATA);\n\nexport const DEFAULT_ANNOTATION_TYPE = ANNOTATION_TYPES.FORMULA;\n\nexport const ANNOTATION_SOURCE_TYPES_METADATA = {\n  NATIVE: {\n    value: 'NATIVE',\n    label: 'Superset annotation' } };\n\n\n\nexport const ANNOTATION_SOURCE_TYPES = extractTypes(\nANNOTATION_SOURCE_TYPES_METADATA);\n\n\nexport function requiresQuery(annotationSourceType) {\n  return !!annotationSourceType;\n}\n\nconst NATIVE_COLUMN_NAMES = {\n  timeColumn: 'start_dttm',\n  intervalEndColumn: 'end_dttm',\n  titleColumn: 'short_descr',\n  descriptionColumns: ['long_descr'] };\n\n\nexport function applyNativeColumns(annotation) {\n  if (annotation.sourceType === ANNOTATION_SOURCE_TYPES.NATIVE) {\n    return { ...annotation, ...NATIVE_COLUMN_NAMES };\n  }\n  return annotation;\n};(function () {var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined;if (!reactHotLoader) {return;}reactHotLoader.register(extractTypes, \"extractTypes\", \"/app/superset-frontend/src/modules/AnnotationTypes.js\");reactHotLoader.register(ANNOTATION_TYPES_METADATA, \"ANNOTATION_TYPES_METADATA\", \"/app/superset-frontend/src/modules/AnnotationTypes.js\");reactHotLoader.register(ANNOTATION_TYPES, \"ANNOTATION_TYPES\", \"/app/superset-frontend/src/modules/AnnotationTypes.js\");reactHotLoader.register(DEFAULT_ANNOTATION_TYPE, \"DEFAULT_ANNOTATION_TYPE\", \"/app/superset-frontend/src/modules/AnnotationTypes.js\");reactHotLoader.register(ANNOTATION_SOURCE_TYPES_METADATA, \"ANNOTATION_SOURCE_TYPES_METADATA\", \"/app/superset-frontend/src/modules/AnnotationTypes.js\");reactHotLoader.register(ANNOTATION_SOURCE_TYPES, \"ANNOTATION_SOURCE_TYPES\", \"/app/superset-frontend/src/modules/AnnotationTypes.js\");reactHotLoader.register(requiresQuery, \"requiresQuery\", \"/app/superset-frontend/src/modules/AnnotationTypes.js\");reactHotLoader.register(NATIVE_COLUMN_NAMES, \"NATIVE_COLUMN_NAMES\", \"/app/superset-frontend/src/modules/AnnotationTypes.js\");reactHotLoader.register(applyNativeColumns, \"applyNativeColumns\", \"/app/superset-frontend/src/modules/AnnotationTypes.js\");})();;(function () {var leaveModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.leaveModule : undefined;leaveModule && leaveModule(module);})();","map":{"version":3,"sources":["/app/superset-frontend/src/modules/AnnotationTypes.js"],"names":["extractTypes","metadata","prev","key","result","ANNOTATION_TYPES_METADATA","FORMULA","value","label","EVENT","supportNativeSource","INTERVAL","TIME_SERIES","ANNOTATION_TYPES","DEFAULT_ANNOTATION_TYPE","ANNOTATION_SOURCE_TYPES_METADATA","NATIVE","ANNOTATION_SOURCE_TYPES","requiresQuery","annotationSourceType","NATIVE_COLUMN_NAMES","timeColumn","intervalEndColumn","titleColumn","descriptionColumns","applyNativeColumns","annotation","sourceType"],"mappings":"idAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASA,YAAT,CAAsBC,QAAtB,EAAgC;AAC9B,SAAO,gDAAYA,QAAZ,kBAA6B,CAACC,IAAD,EAAOC,GAAP,KAAe;AACjD,UAAMC,MAAM,GAAGF,IAAf;AACAE,IAAAA,MAAM,CAACD,GAAD,CAAN,GAAcA,GAAd;AACA,WAAOC,MAAP;AACD,GAJM,EAIJ,EAJI,CAAP;AAKD;;AAED,OAAO,MAAMC,yBAAyB,GAAG;AACvCC,EAAAA,OAAO,EAAE;AACPC,IAAAA,KAAK,EAAE,SADA;AAEPC,IAAAA,KAAK,EAAE,SAFA,EAD8B;;AAKvCC,EAAAA,KAAK,EAAE;AACLF,IAAAA,KAAK,EAAE,OADF;AAELC,IAAAA,KAAK,EAAE,OAFF;AAGLE,IAAAA,mBAAmB,EAAE,IAHhB,EALgC;;AAUvCC,EAAAA,QAAQ,EAAE;AACRJ,IAAAA,KAAK,EAAE,UADC;AAERC,IAAAA,KAAK,EAAE,UAFC;AAGRE,IAAAA,mBAAmB,EAAE,IAHb,EAV6B;;AAevCE,EAAAA,WAAW,EAAE;AACXL,IAAAA,KAAK,EAAE,aADI;AAEXC,IAAAA,KAAK,EAAE,aAFI,EAf0B,EAAlC;;;;AAqBP,OAAO,MAAMK,gBAAgB,GAAGb,YAAY,CAACK,yBAAD,CAArC;;AAEP,OAAO,MAAMS,uBAAuB,GAAGD,gBAAgB,CAACP,OAAjD;;AAEP,OAAO,MAAMS,gCAAgC,GAAG;AAC9CC,EAAAA,MAAM,EAAE;AACNT,IAAAA,KAAK,EAAE,QADD;AAENC,IAAAA,KAAK,EAAE,qBAFD,EADsC,EAAzC;;;;AAOP,OAAO,MAAMS,uBAAuB,GAAGjB,YAAY;AACjDe,gCADiD,CAA5C;;;AAIP,OAAO,SAASG,aAAT,CAAuBC,oBAAvB,EAA6C;AAClD,SAAO,CAAC,CAACA,oBAAT;AACD;;AAED,MAAMC,mBAAmB,GAAG;AAC1BC,EAAAA,UAAU,EAAE,YADc;AAE1BC,EAAAA,iBAAiB,EAAE,UAFO;AAG1BC,EAAAA,WAAW,EAAE,aAHa;AAI1BC,EAAAA,kBAAkB,EAAE,CAAC,YAAD,CAJM,EAA5B;;;AAOA,OAAO,SAASC,kBAAT,CAA4BC,UAA5B,EAAwC;AAC7C,MAAIA,UAAU,CAACC,UAAX,KAA0BV,uBAAuB,CAACD,MAAtD,EAA8D;AAC5D,WAAO,EAAE,GAAGU,UAAL,EAAiB,GAAGN,mBAApB,EAAP;AACD;AACD,SAAOM,UAAP;AACD,C,iLA5DQ1B,Y,mGAQIK,yB,gHAqBAQ,gB,uGAEAC,uB,8GAEAC,gC,uHAOAE,uB,8GAIGC,a,oGAIVE,mB,0GAOUK,kB","sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nfunction extractTypes(metadata) {\n  return Object.keys(metadata).reduce((prev, key) => {\n    const result = prev;\n    result[key] = key;\n    return result;\n  }, {});\n}\n\nexport const ANNOTATION_TYPES_METADATA = {\n  FORMULA: {\n    value: 'FORMULA',\n    label: 'Formula',\n  },\n  EVENT: {\n    value: 'EVENT',\n    label: 'Event',\n    supportNativeSource: true,\n  },\n  INTERVAL: {\n    value: 'INTERVAL',\n    label: 'Interval',\n    supportNativeSource: true,\n  },\n  TIME_SERIES: {\n    value: 'TIME_SERIES',\n    label: 'Time series',\n  },\n};\n\nexport const ANNOTATION_TYPES = extractTypes(ANNOTATION_TYPES_METADATA);\n\nexport const DEFAULT_ANNOTATION_TYPE = ANNOTATION_TYPES.FORMULA;\n\nexport const ANNOTATION_SOURCE_TYPES_METADATA = {\n  NATIVE: {\n    value: 'NATIVE',\n    label: 'Superset annotation',\n  },\n};\n\nexport const ANNOTATION_SOURCE_TYPES = extractTypes(\n  ANNOTATION_SOURCE_TYPES_METADATA,\n);\n\nexport function requiresQuery(annotationSourceType) {\n  return !!annotationSourceType;\n}\n\nconst NATIVE_COLUMN_NAMES = {\n  timeColumn: 'start_dttm',\n  intervalEndColumn: 'end_dttm',\n  titleColumn: 'short_descr',\n  descriptionColumns: ['long_descr'],\n};\n\nexport function applyNativeColumns(annotation) {\n  if (annotation.sourceType === ANNOTATION_SOURCE_TYPES.NATIVE) {\n    return { ...annotation, ...NATIVE_COLUMN_NAMES };\n  }\n  return annotation;\n}\n"]},"metadata":{},"sourceType":"module"}