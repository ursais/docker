{"ast":null,"code":"import \"core-js/modules/web.dom-collections.iterator.js\";import _indexOfInstanceProperty from \"@babel/runtime-corejs3/core-js-stable/instance/index-of\";import _bindInstanceProperty from \"@babel/runtime-corejs3/core-js-stable/instance/bind\";import _snakeCase from \"lodash/snakeCase\";(function () {var enterModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.enterModule : undefined;enterModule && enterModule(module);})();var __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default.signature : function (a) {return a;};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport { SuperChart, logging, Behavior } from '@superset-ui/core';\nimport { Logger, LOG_ACTIONS_RENDER_CHART } from '../logger/LogUtils';import { jsx as ___EmotionJSX } from \"@emotion/react\";\n\nconst propTypes = {\n  annotationData: PropTypes.object,\n  actions: PropTypes.object,\n  chartId: PropTypes.number.isRequired,\n  datasource: PropTypes.object.isRequired,\n  initialValues: PropTypes.object,\n  formData: PropTypes.object.isRequired,\n  height: PropTypes.number,\n  width: PropTypes.number,\n  setControlValue: PropTypes.func,\n  vizType: PropTypes.string.isRequired,\n  triggerRender: PropTypes.bool,\n  // state\n  chartAlert: PropTypes.string,\n  chartStatus: PropTypes.string,\n  queriesResponse: PropTypes.arrayOf(PropTypes.object),\n  triggerQuery: PropTypes.bool,\n  refreshOverlayVisible: PropTypes.bool,\n  // dashboard callbacks\n  addFilter: PropTypes.func,\n  setDataMask: PropTypes.func,\n  onFilterMenuOpen: PropTypes.func,\n  onFilterMenuClose: PropTypes.func,\n  ownState: PropTypes.object };\n\n\nconst BLANK = {};\n\nconst defaultProps = {\n  addFilter: () => BLANK,\n  onFilterMenuOpen: () => BLANK,\n  onFilterMenuClose: () => BLANK,\n  initialValues: BLANK,\n  setControlValue() {},\n  triggerRender: false };\n\n\nclass ChartRenderer extends React.Component {\n  constructor(props) {var _context, _context2, _context3, _context4;\n    super(props);\n    this.hasQueryResponseChange = false;\n\n    this.handleAddFilter = _bindInstanceProperty(_context = this.handleAddFilter).call(_context, this);\n    this.handleRenderSuccess = _bindInstanceProperty(_context2 = this.handleRenderSuccess).call(_context2, this);\n    this.handleRenderFailure = _bindInstanceProperty(_context3 = this.handleRenderFailure).call(_context3, this);\n    this.handleSetControlValue = _bindInstanceProperty(_context4 = this.handleSetControlValue).call(_context4, this);\n\n    this.hooks = {\n      onAddFilter: this.handleAddFilter,\n      onError: this.handleRenderFailure,\n      setControlValue: this.handleSetControlValue,\n      onFilterMenuOpen: this.props.onFilterMenuOpen,\n      onFilterMenuClose: this.props.onFilterMenuClose,\n      setDataMask: dataMask => {var _this$props$actions;\n        (_this$props$actions = this.props.actions) == null ? void 0 : _this$props$actions.updateDataMask(this.props.chartId, dataMask);\n      } };\n\n  }\n\n  shouldComponentUpdate(nextProps) {var _context5, _nextProps$queriesRes, _nextProps$queriesRes2;\n    const resultsReady =\n    nextProps.queriesResponse &&\n    _indexOfInstanceProperty(_context5 = ['success', 'rendered']).call(_context5, nextProps.chartStatus) > -1 &&\n    !((_nextProps$queriesRes = nextProps.queriesResponse) != null && (_nextProps$queriesRes2 = _nextProps$queriesRes[0]) != null && _nextProps$queriesRes2.error) &&\n    !nextProps.refreshOverlayVisible;\n\n    if (resultsReady) {\n      this.hasQueryResponseChange =\n      nextProps.queriesResponse !== this.props.queriesResponse;\n      return (\n        this.hasQueryResponseChange ||\n        nextProps.annotationData !== this.props.annotationData ||\n        nextProps.ownState !== this.props.ownState ||\n        nextProps.filterState !== this.props.filterState ||\n        nextProps.height !== this.props.height ||\n        nextProps.width !== this.props.width ||\n        nextProps.triggerRender ||\n        nextProps.formData.color_scheme !== this.props.formData.color_scheme ||\n        nextProps.cacheBusterProp !== this.props.cacheBusterProp);\n\n    }\n    return false;\n  }\n\n  handleAddFilter(col, vals, merge = true, refresh = true) {\n    this.props.addFilter(col, vals, merge, refresh);\n  }\n\n  handleRenderSuccess() {var _context6;\n    const { actions, chartStatus, chartId, vizType } = this.props;\n    if (_indexOfInstanceProperty(_context6 = ['loading', 'rendered']).call(_context6, chartStatus) < 0) {\n      actions.chartRenderingSucceeded(chartId);\n    }\n\n    // only log chart render time which is triggered by query results change\n    // currently we don't log chart re-render time, like window resize etc\n    if (this.hasQueryResponseChange) {\n      actions.logEvent(LOG_ACTIONS_RENDER_CHART, {\n        slice_id: chartId,\n        viz_type: vizType,\n        start_offset: this.renderStartTime,\n        ts: new Date().getTime(),\n        duration: Logger.getTimestamp() - this.renderStartTime });\n\n    }\n  }\n\n  handleRenderFailure(error, info) {\n    const { actions, chartId } = this.props;\n    logging.warn(error);\n    actions.chartRenderingFailed(\n    error.toString(),\n    chartId,\n    info ? info.componentStack : null);\n\n\n    // only trigger render log when query is changed\n    if (this.hasQueryResponseChange) {\n      actions.logEvent(LOG_ACTIONS_RENDER_CHART, {\n        slice_id: chartId,\n        has_err: true,\n        error_details: error.toString(),\n        start_offset: this.renderStartTime,\n        ts: new Date().getTime(),\n        duration: Logger.getTimestamp() - this.renderStartTime });\n\n    }\n  }\n\n  handleSetControlValue(...args) {\n    const { setControlValue } = this.props;\n    if (setControlValue) {\n      setControlValue(...args);\n    }\n  }\n\n  render() {\n    const {\n      chartAlert,\n      chartStatus,\n      vizType,\n      chartId,\n      refreshOverlayVisible } =\n    this.props;\n\n    // Skip chart rendering\n    if (\n    refreshOverlayVisible ||\n    chartStatus === 'loading' ||\n    !!chartAlert ||\n    chartStatus === null)\n    {\n      return null;\n    }\n\n    this.renderStartTime = Logger.getTimestamp();\n\n    const {\n      width,\n      height,\n      annotationData,\n      datasource,\n      initialValues,\n      ownState,\n      filterState,\n      formData,\n      queriesResponse } =\n    this.props;\n\n    // It's bad practice to use unprefixed `vizType` as classnames for chart\n    // container. It may cause css conflicts as in the case of legacy table chart.\n    // When migrating charts, we should gradually add a `superset-chart-` prefix\n    // to each one of them.\n    const snakeCaseVizType = _snakeCase(vizType);\n    const chartClassName =\n    vizType === 'table' ?\n    `superset-chart-${snakeCaseVizType}` :\n    snakeCaseVizType;\n\n    const webpackHash =\n    process.env.WEBPACK_MODE === 'development' ?\n    `-${\n    // eslint-disable-next-line camelcase\n    typeof __webpack_require__ !== 'undefined' &&\n    // eslint-disable-next-line camelcase, no-undef\n    typeof __webpack_require__.h === 'function' &&\n    // eslint-disable-next-line no-undef\n    __webpack_require__.h()\n    }` :\n    '';\n\n    return (\n      ___EmotionJSX(SuperChart, {\n        disableErrorBoundary: true,\n        key: `${chartId}${webpackHash}`,\n        id: `chart-id-${chartId}`,\n        className: chartClassName,\n        chartType: vizType,\n        width: width,\n        height: height,\n        annotationData: annotationData,\n        datasource: datasource,\n        initialValues: initialValues,\n        formData: formData,\n        ownState: ownState,\n        filterState: filterState,\n        hooks: this.hooks,\n        behaviors: [Behavior.INTERACTIVE_CHART],\n        queriesData: queriesResponse,\n        onRenderSuccess: this.handleRenderSuccess,\n        onRenderFailure: this.handleRenderFailure }));\n\n\n  } // @ts-ignore\n  __reactstandin__regenerateByEval(key, code) {// @ts-ignore\n    this[key] = eval(code);}}\nChartRenderer.propTypes = propTypes;\nChartRenderer.defaultProps = defaultProps;const _default =\n\nChartRenderer;export default _default;;(function () {var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined;if (!reactHotLoader) {return;}reactHotLoader.register(propTypes, \"propTypes\", \"/app/superset-frontend/src/chart/ChartRenderer.jsx\");reactHotLoader.register(BLANK, \"BLANK\", \"/app/superset-frontend/src/chart/ChartRenderer.jsx\");reactHotLoader.register(defaultProps, \"defaultProps\", \"/app/superset-frontend/src/chart/ChartRenderer.jsx\");reactHotLoader.register(ChartRenderer, \"ChartRenderer\", \"/app/superset-frontend/src/chart/ChartRenderer.jsx\");reactHotLoader.register(_default, \"default\", \"/app/superset-frontend/src/chart/ChartRenderer.jsx\");})();;(function () {var leaveModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.leaveModule : undefined;leaveModule && leaveModule(module);})();","map":{"version":3,"sources":["/app/superset-frontend/src/chart/ChartRenderer.jsx"],"names":["PropTypes","React","SuperChart","logging","Behavior","Logger","LOG_ACTIONS_RENDER_CHART","propTypes","annotationData","object","actions","chartId","number","isRequired","datasource","initialValues","formData","height","width","setControlValue","func","vizType","string","triggerRender","bool","chartAlert","chartStatus","queriesResponse","arrayOf","triggerQuery","refreshOverlayVisible","addFilter","setDataMask","onFilterMenuOpen","onFilterMenuClose","ownState","BLANK","defaultProps","ChartRenderer","Component","constructor","props","hasQueryResponseChange","handleAddFilter","handleRenderSuccess","handleRenderFailure","handleSetControlValue","hooks","onAddFilter","onError","dataMask","updateDataMask","shouldComponentUpdate","nextProps","resultsReady","error","filterState","color_scheme","cacheBusterProp","col","vals","merge","refresh","chartRenderingSucceeded","logEvent","slice_id","viz_type","start_offset","renderStartTime","ts","Date","getTime","duration","getTimestamp","info","warn","chartRenderingFailed","toString","componentStack","has_err","error_details","args","render","snakeCaseVizType","chartClassName","webpackHash","process","env","WEBPACK_MODE","__webpack_require__","h","INTERACTIVE_CHART"],"mappings":"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","sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { snakeCase } from 'lodash';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport { SuperChart, logging, Behavior } from '@superset-ui/core';\nimport { Logger, LOG_ACTIONS_RENDER_CHART } from '../logger/LogUtils';\n\nconst propTypes = {\n  annotationData: PropTypes.object,\n  actions: PropTypes.object,\n  chartId: PropTypes.number.isRequired,\n  datasource: PropTypes.object.isRequired,\n  initialValues: PropTypes.object,\n  formData: PropTypes.object.isRequired,\n  height: PropTypes.number,\n  width: PropTypes.number,\n  setControlValue: PropTypes.func,\n  vizType: PropTypes.string.isRequired,\n  triggerRender: PropTypes.bool,\n  // state\n  chartAlert: PropTypes.string,\n  chartStatus: PropTypes.string,\n  queriesResponse: PropTypes.arrayOf(PropTypes.object),\n  triggerQuery: PropTypes.bool,\n  refreshOverlayVisible: PropTypes.bool,\n  // dashboard callbacks\n  addFilter: PropTypes.func,\n  setDataMask: PropTypes.func,\n  onFilterMenuOpen: PropTypes.func,\n  onFilterMenuClose: PropTypes.func,\n  ownState: PropTypes.object,\n};\n\nconst BLANK = {};\n\nconst defaultProps = {\n  addFilter: () => BLANK,\n  onFilterMenuOpen: () => BLANK,\n  onFilterMenuClose: () => BLANK,\n  initialValues: BLANK,\n  setControlValue() {},\n  triggerRender: false,\n};\n\nclass ChartRenderer extends React.Component {\n  constructor(props) {\n    super(props);\n    this.hasQueryResponseChange = false;\n\n    this.handleAddFilter = this.handleAddFilter.bind(this);\n    this.handleRenderSuccess = this.handleRenderSuccess.bind(this);\n    this.handleRenderFailure = this.handleRenderFailure.bind(this);\n    this.handleSetControlValue = this.handleSetControlValue.bind(this);\n\n    this.hooks = {\n      onAddFilter: this.handleAddFilter,\n      onError: this.handleRenderFailure,\n      setControlValue: this.handleSetControlValue,\n      onFilterMenuOpen: this.props.onFilterMenuOpen,\n      onFilterMenuClose: this.props.onFilterMenuClose,\n      setDataMask: dataMask => {\n        this.props.actions?.updateDataMask(this.props.chartId, dataMask);\n      },\n    };\n  }\n\n  shouldComponentUpdate(nextProps) {\n    const resultsReady =\n      nextProps.queriesResponse &&\n      ['success', 'rendered'].indexOf(nextProps.chartStatus) > -1 &&\n      !nextProps.queriesResponse?.[0]?.error &&\n      !nextProps.refreshOverlayVisible;\n\n    if (resultsReady) {\n      this.hasQueryResponseChange =\n        nextProps.queriesResponse !== this.props.queriesResponse;\n      return (\n        this.hasQueryResponseChange ||\n        nextProps.annotationData !== this.props.annotationData ||\n        nextProps.ownState !== this.props.ownState ||\n        nextProps.filterState !== this.props.filterState ||\n        nextProps.height !== this.props.height ||\n        nextProps.width !== this.props.width ||\n        nextProps.triggerRender ||\n        nextProps.formData.color_scheme !== this.props.formData.color_scheme ||\n        nextProps.cacheBusterProp !== this.props.cacheBusterProp\n      );\n    }\n    return false;\n  }\n\n  handleAddFilter(col, vals, merge = true, refresh = true) {\n    this.props.addFilter(col, vals, merge, refresh);\n  }\n\n  handleRenderSuccess() {\n    const { actions, chartStatus, chartId, vizType } = this.props;\n    if (['loading', 'rendered'].indexOf(chartStatus) < 0) {\n      actions.chartRenderingSucceeded(chartId);\n    }\n\n    // only log chart render time which is triggered by query results change\n    // currently we don't log chart re-render time, like window resize etc\n    if (this.hasQueryResponseChange) {\n      actions.logEvent(LOG_ACTIONS_RENDER_CHART, {\n        slice_id: chartId,\n        viz_type: vizType,\n        start_offset: this.renderStartTime,\n        ts: new Date().getTime(),\n        duration: Logger.getTimestamp() - this.renderStartTime,\n      });\n    }\n  }\n\n  handleRenderFailure(error, info) {\n    const { actions, chartId } = this.props;\n    logging.warn(error);\n    actions.chartRenderingFailed(\n      error.toString(),\n      chartId,\n      info ? info.componentStack : null,\n    );\n\n    // only trigger render log when query is changed\n    if (this.hasQueryResponseChange) {\n      actions.logEvent(LOG_ACTIONS_RENDER_CHART, {\n        slice_id: chartId,\n        has_err: true,\n        error_details: error.toString(),\n        start_offset: this.renderStartTime,\n        ts: new Date().getTime(),\n        duration: Logger.getTimestamp() - this.renderStartTime,\n      });\n    }\n  }\n\n  handleSetControlValue(...args) {\n    const { setControlValue } = this.props;\n    if (setControlValue) {\n      setControlValue(...args);\n    }\n  }\n\n  render() {\n    const {\n      chartAlert,\n      chartStatus,\n      vizType,\n      chartId,\n      refreshOverlayVisible,\n    } = this.props;\n\n    // Skip chart rendering\n    if (\n      refreshOverlayVisible ||\n      chartStatus === 'loading' ||\n      !!chartAlert ||\n      chartStatus === null\n    ) {\n      return null;\n    }\n\n    this.renderStartTime = Logger.getTimestamp();\n\n    const {\n      width,\n      height,\n      annotationData,\n      datasource,\n      initialValues,\n      ownState,\n      filterState,\n      formData,\n      queriesResponse,\n    } = this.props;\n\n    // It's bad practice to use unprefixed `vizType` as classnames for chart\n    // container. It may cause css conflicts as in the case of legacy table chart.\n    // When migrating charts, we should gradually add a `superset-chart-` prefix\n    // to each one of them.\n    const snakeCaseVizType = snakeCase(vizType);\n    const chartClassName =\n      vizType === 'table'\n        ? `superset-chart-${snakeCaseVizType}`\n        : snakeCaseVizType;\n\n    const webpackHash =\n      process.env.WEBPACK_MODE === 'development'\n        ? `-${\n            // eslint-disable-next-line camelcase\n            typeof __webpack_require__ !== 'undefined' &&\n            // eslint-disable-next-line camelcase, no-undef\n            typeof __webpack_require__.h === 'function' &&\n            // eslint-disable-next-line no-undef\n            __webpack_require__.h()\n          }`\n        : '';\n\n    return (\n      <SuperChart\n        disableErrorBoundary\n        key={`${chartId}${webpackHash}`}\n        id={`chart-id-${chartId}`}\n        className={chartClassName}\n        chartType={vizType}\n        width={width}\n        height={height}\n        annotationData={annotationData}\n        datasource={datasource}\n        initialValues={initialValues}\n        formData={formData}\n        ownState={ownState}\n        filterState={filterState}\n        hooks={this.hooks}\n        behaviors={[Behavior.INTERACTIVE_CHART]}\n        queriesData={queriesResponse}\n        onRenderSuccess={this.handleRenderSuccess}\n        onRenderFailure={this.handleRenderFailure}\n      />\n    );\n  }\n}\n\nChartRenderer.propTypes = propTypes;\nChartRenderer.defaultProps = defaultProps;\n\nexport default ChartRenderer;\n"]},"metadata":{},"sourceType":"module"}