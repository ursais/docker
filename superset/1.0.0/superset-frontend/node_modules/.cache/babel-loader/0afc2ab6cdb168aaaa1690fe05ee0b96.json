{"ast":null,"code":"import \"core-js/modules/web.dom-collections.iterator.js\";import _indexOfInstanceProperty from \"@babel/runtime-corejs3/core-js-stable/instance/index-of\";import _endsWithInstanceProperty from \"@babel/runtime-corejs3/core-js-stable/instance/ends-with\";import _reduceInstanceProperty from \"@babel/runtime-corejs3/core-js-stable/instance/reduce\";import _startsWithInstanceProperty from \"@babel/runtime-corejs3/core-js-stable/instance/starts-with\";import _findInstanceProperty from \"@babel/runtime-corejs3/core-js-stable/instance/find\";import _spliceInstanceProperty from \"@babel/runtime-corejs3/core-js-stable/instance/splice\";import _bindInstanceProperty from \"@babel/runtime-corejs3/core-js-stable/instance/bind\";import _everyInstanceProperty from \"@babel/runtime-corejs3/core-js-stable/instance/every\";import _mapInstanceProperty from \"@babel/runtime-corejs3/core-js-stable/instance/map\";import _Set from \"@babel/runtime-corejs3/core-js-stable/set\";import _includesInstanceProperty from \"@babel/runtime-corejs3/core-js-stable/instance/includes\";import _Array$isArray from \"@babel/runtime-corejs3/core-js-stable/array/is-array\";import _filterInstanceProperty from \"@babel/runtime-corejs3/core-js-stable/instance/filter\";import _isEqual from \"lodash/isEqual\";(function () {var enterModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.enterModule : undefined;enterModule && enterModule(module);})();var __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default.signature : function (a) {return a;}; /**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { t, withTheme } from '@superset-ui/core';\n\nimport ControlHeader from 'src/explore/components/ControlHeader';\nimport {\nAGGREGATES_OPTIONS,\nsqlaAutoGeneratedMetricNameRegex,\ndruidAutoGeneratedMetricRegex } from\n'src/explore/constants';\nimport Icons from 'src/components/Icons';\nimport {\nAddIconButton,\nAddControlLabel,\nHeaderContainer,\nLabelsContainer } from\n'src/explore/components/controls/OptionControls';\nimport columnType from './columnType';\nimport MetricDefinitionOption from './MetricDefinitionOption';\nimport MetricDefinitionValue from './MetricDefinitionValue';\nimport AdhocMetric from './AdhocMetric';\nimport savedMetricType from './savedMetricType';\nimport adhocMetricType from './adhocMetricType';\nimport AdhocMetricPopoverTrigger from './AdhocMetricPopoverTrigger';import { jsx as ___EmotionJSX } from \"@emotion/react\";\n\nconst propTypes = {\n  name: PropTypes.string.isRequired,\n  onChange: PropTypes.func,\n  value: PropTypes.oneOfType([\n  PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.string, adhocMetricType])),\n  PropTypes.oneOfType([PropTypes.string, adhocMetricType])]),\n\n  columns: PropTypes.arrayOf(columnType),\n  savedMetrics: PropTypes.arrayOf(savedMetricType),\n  isLoading: PropTypes.bool,\n  multi: PropTypes.bool,\n  clearable: PropTypes.bool,\n  datasourceType: PropTypes.string };\n\n\nconst defaultProps = {\n  onChange: () => {},\n  clearable: true,\n  savedMetrics: [],\n  columns: [] };\n\n\nfunction getOptionsForSavedMetrics(\nsavedMetrics,\ncurrentMetricValues,\ncurrentMetric)\n{var _savedMetrics$filter;\n  return (_savedMetrics$filter =\n  savedMetrics == null ? void 0 : _filterInstanceProperty(savedMetrics).call(savedMetrics, (savedMetric) =>\n  _Array$isArray(currentMetricValues) ?\n  !_includesInstanceProperty(currentMetricValues).call(currentMetricValues, savedMetric.metric_name) ||\n  savedMetric.metric_name === currentMetric :\n  savedMetric)) != null ? _savedMetrics$filter :\n  [];\n\n}\n\nfunction isDictionaryForAdhocMetric(value) {\n  return value && !(value instanceof AdhocMetric) && value.expressionType;\n}\n\nfunction columnsContainAllMetrics(value, nextProps) {var _context, _context2, _context3, _context4, _context5;\n  const columnNames = new _Set(\n  _mapInstanceProperty(_context = [...(nextProps.columns || []), ...(nextProps.savedMetrics || [])]\n  // eslint-disable-next-line camelcase\n  ).call(_context, ({ column_name, metric_name }) => column_name || metric_name));\n\n\n  return (\n    _everyInstanceProperty(_context2 = _filterInstanceProperty(_context3 = _mapInstanceProperty(_context4 = _filterInstanceProperty(_context5 = _Array$isArray(value) ? value : [value]).call(_context5,\n    metric => metric)\n    // find column names\n    ).call(_context4, (metric) =>\n    metric.column ?\n    metric.column.column_name :\n    metric.column_name || metric)).call(_context3,\n\n    name => name && typeof name === 'string')).call(_context2,\n    name => columnNames.has(name)));\n\n}\n\n// adhoc metrics are stored as dictionaries in URL params. We convert them back into the\n// AdhocMetric class for typechecking, consistency and instance method access.\nfunction coerceAdhocMetrics(value) {\n  if (!value) {\n    return [];\n  }\n  if (!_Array$isArray(value)) {\n    if (isDictionaryForAdhocMetric(value)) {\n      return [new AdhocMetric(value)];\n    }\n    return [value];\n  }\n  return _mapInstanceProperty(value).call(value, val => {\n    if (isDictionaryForAdhocMetric(val)) {\n      return new AdhocMetric(val);\n    }\n    return val;\n  });\n}\n\nclass MetricsControl extends React.PureComponent {\n  constructor(props) {var _context6, _context7, _context8, _context9, _context10, _context11, _context12, _context13, _context14;\n    super(props);\n    this.onChange = _bindInstanceProperty(_context6 = this.onChange).call(_context6, this);\n    this.onMetricEdit = _bindInstanceProperty(_context7 = this.onMetricEdit).call(_context7, this);\n    this.onNewMetric = _bindInstanceProperty(_context8 = this.onNewMetric).call(_context8, this);\n    this.onRemoveMetric = _bindInstanceProperty(_context9 = this.onRemoveMetric).call(_context9, this);\n    this.moveLabel = _bindInstanceProperty(_context10 = this.moveLabel).call(_context10, this);\n    this.checkIfAggregateInInput = _bindInstanceProperty(_context11 = this.checkIfAggregateInInput).call(_context11, this);\n    this.optionsForSelect = _bindInstanceProperty(_context12 = this.optionsForSelect).call(_context12, this);\n    this.selectFilterOption = _bindInstanceProperty(_context13 = this.selectFilterOption).call(_context13, this);\n    this.isAutoGeneratedMetric = _bindInstanceProperty(_context14 = this.isAutoGeneratedMetric).call(_context14, this);\n    this.optionRenderer = option => ___EmotionJSX(MetricDefinitionOption, { option: option });\n    this.valueRenderer = (option, index) => {var _this$props$value;return (\n        ___EmotionJSX(MetricDefinitionValue, {\n          key: index,\n          index: index,\n          option: option,\n          onMetricEdit: this.onMetricEdit,\n          onRemoveMetric: () => this.onRemoveMetric(index),\n          columns: this.props.columns,\n          datasource: this.props.datasource,\n          savedMetrics: this.props.savedMetrics,\n          savedMetricsOptions: getOptionsForSavedMetrics(\n          this.props.savedMetrics,\n          this.props.value, (_this$props$value =\n          this.props.value) == null ? void 0 : _this$props$value[index]),\n\n          datasourceType: this.props.datasourceType,\n          onMoveLabel: this.moveLabel,\n          onDropLabel: () => this.props.onChange(this.state.value) }));};\n\n\n    this.select = null;\n    this.selectRef = ref => {\n      if (ref) {\n        this.select = ref.select;\n      } else {\n        this.select = null;\n      }\n    };\n    this.state = {\n      aggregateInInput: null,\n      options: this.optionsForSelect(this.props),\n      value: coerceAdhocMetrics(this.props.value) };\n\n  }\n\n  UNSAFE_componentWillReceiveProps(nextProps) {\n    const { value } = this.props;\n    if (\n    !_isEqual(this.props.columns, nextProps.columns) ||\n    !_isEqual(this.props.savedMetrics, nextProps.savedMetrics))\n    {\n      this.setState({ options: this.optionsForSelect(nextProps) });\n\n      // Remove all metrics if selected value no longer a valid column\n      // in the dataset. Must use `nextProps` here because Redux reducers may\n      // have already updated the value for this control.\n      if (!columnsContainAllMetrics(nextProps.value, nextProps)) {\n        this.props.onChange([]);\n      }\n    }\n    if (value !== nextProps.value) {\n      this.setState({ value: coerceAdhocMetrics(nextProps.value) });\n    }\n  }\n\n  onNewMetric(newMetric) {\n    this.setState(\n    prevState => ({\n      ...prevState,\n      value: [...prevState.value, newMetric] }),\n\n    () => {\n      this.onChange(this.state.value);\n    });\n\n  }\n\n  onMetricEdit(changedMetric, oldMetric) {\n    this.setState(\n    prevState => {var _context15;return {\n        value: _mapInstanceProperty(_context15 = prevState.value).call(_context15, value => {\n          if (\n          // compare saved metrics\n          value === oldMetric.metric_name ||\n          // compare adhoc metrics\n          typeof value.optionName !== 'undefined' ?\n          value.optionName === oldMetric.optionName :\n          false)\n          {\n            return changedMetric;\n          }\n          return value;\n        }) };},\n\n    () => {\n      this.onChange(this.state.value);\n    });\n\n  }\n\n  onRemoveMetric(index) {\n    if (!_Array$isArray(this.state.value)) {\n      return;\n    }\n    const valuesCopy = [...this.state.value];\n    _spliceInstanceProperty(valuesCopy).call(valuesCopy, index, 1);\n    this.setState(prevState => ({\n      ...prevState,\n      value: valuesCopy }));\n\n    this.props.onChange(valuesCopy);\n  }\n\n  onChange(opts) {var _context16;\n    // if clear out options\n    if (opts === null) {\n      this.props.onChange(null);\n      return;\n    }\n\n    let transformedOpts;\n    if (_Array$isArray(opts)) {\n      transformedOpts = opts;\n    } else {\n      transformedOpts = opts ? [opts] : [];\n    }\n    const optionValues = _filterInstanceProperty(_context16 = _mapInstanceProperty(transformedOpts).call(transformedOpts,\n    option => {\n      // pre-defined metric\n      if (option.metric_name) {\n        return option.metric_name;\n      }\n      return option;\n    })).call(_context16,\n    option => option);\n    this.props.onChange(this.props.multi ? optionValues : optionValues[0]);\n  }\n\n  moveLabel(dragIndex, hoverIndex) {\n    const { value } = this.state;\n\n    const newValues = [...value];\n    [newValues[hoverIndex], newValues[dragIndex]] = [\n    newValues[dragIndex],\n    newValues[hoverIndex]];\n\n    this.setState({ value: newValues });\n  }\n\n  isAddNewMetricDisabled() {\n    return !this.props.multi && this.state.value.length > 0;\n  }\n\n  addNewMetricPopoverTrigger(trigger) {\n    if (this.isAddNewMetricDisabled()) {\n      return trigger;\n    }\n    return (\n      ___EmotionJSX(AdhocMetricPopoverTrigger, {\n        adhocMetric: new AdhocMetric({ isNew: true }),\n        onMetricEdit: this.onNewMetric,\n        columns: this.props.columns,\n        savedMetricsOptions: getOptionsForSavedMetrics(\n        this.props.savedMetrics,\n        this.props.value,\n        null),\n\n        datasource: this.props.datasource,\n        savedMetric: { metric_name: '', expression: '' },\n        datasourceType: this.props.datasourceType,\n        createNew: true },\n\n      trigger));\n\n\n  }\n\n  checkIfAggregateInInput(input) {\n    const lowercaseInput = input.toLowerCase();\n    const aggregateInInput =\n    _findInstanceProperty(AGGREGATES_OPTIONS).call(AGGREGATES_OPTIONS, (x) =>\n    _startsWithInstanceProperty(lowercaseInput).call(lowercaseInput, `${x.toLowerCase()}(`)) ||\n    null;\n    this.clearedAggregateInInput = this.state.aggregateInInput;\n    this.setState({ aggregateInInput });\n  }\n\n  optionsForSelect(props) {\n    const { columns, savedMetrics } = props;\n    const aggregates =\n    columns && columns.length ?\n    _mapInstanceProperty(AGGREGATES_OPTIONS).call(AGGREGATES_OPTIONS, aggregate => ({\n      aggregate_name: aggregate })) :\n\n    [];\n    const options = [\n    ...(columns || []),\n    ...aggregates,\n    ...(savedMetrics || [])];\n\n\n    return _reduceInstanceProperty(options).call(options, (results, option) => {\n      if (option.metric_name) {\n        results.push({ ...option, optionName: option.metric_name });\n      } else if (option.column_name) {\n        results.push({ ...option, optionName: `_col_${option.column_name}` });\n      } else if (option.aggregate_name) {\n        results.push({\n          ...option,\n          optionName: `_aggregate_${option.aggregate_name}` });\n\n      }\n      return results;\n    }, []);\n  }\n\n  isAutoGeneratedMetric(savedMetric) {\n    if (this.props.datasourceType === 'druid') {\n      return druidAutoGeneratedMetricRegex.test(savedMetric.verbose_name);\n    }\n    return sqlaAutoGeneratedMetricNameRegex.test(savedMetric.metric_name);\n  }\n\n  selectFilterOption({ data: option }, filterValue) {var _context18, _context19;\n    if (this.state.aggregateInInput) {var _context17;\n      let endIndex = filterValue.length;\n      if (_endsWithInstanceProperty(filterValue).call(filterValue, ')')) {\n        endIndex = filterValue.length - 1;\n      }\n      const valueAfterAggregate = filterValue.substring(\n      _indexOfInstanceProperty(filterValue).call(filterValue, '(') + 1,\n      endIndex);\n\n      return (\n        option.column_name &&\n        _indexOfInstanceProperty(_context17 = option.column_name.toLowerCase()).call(_context17, valueAfterAggregate) >= 0);\n\n    }\n    return (\n      option.optionName && (\n      !option.metric_name ||\n      !this.isAutoGeneratedMetric(option) ||\n      option.verbose_name) && (\n      _indexOfInstanceProperty(_context18 = option.optionName.toLowerCase()).call(_context18, filterValue) >= 0 ||\n      option.verbose_name &&\n      _indexOfInstanceProperty(_context19 = option.verbose_name.toLowerCase()).call(_context19, filterValue) >= 0));\n\n  }\n\n  render() {var _context20;\n    const { theme } = this.props;\n    return (\n      ___EmotionJSX(\"div\", { className: \"metrics-select\" },\n      ___EmotionJSX(HeaderContainer, null,\n      ___EmotionJSX(ControlHeader, this.props),\n      this.addNewMetricPopoverTrigger(\n      ___EmotionJSX(AddIconButton, {\n        disabled: this.isAddNewMetricDisabled(),\n        \"data-test\": \"add-metric-button\" },\n\n      ___EmotionJSX(Icons.PlusLarge, {\n        iconSize: \"s\",\n        iconColor: theme.colors.grayscale.light5 })))),\n\n\n\n\n      ___EmotionJSX(LabelsContainer, null,\n      this.state.value.length > 0 ?\n      _mapInstanceProperty(_context20 = this.state.value).call(_context20, (value, index) =>\n      this.valueRenderer(value, index)) :\n\n      this.addNewMetricPopoverTrigger(\n      ___EmotionJSX(AddControlLabel, null,\n      ___EmotionJSX(Icons.PlusSmall, { iconColor: theme.colors.grayscale.light1 }),\n      t('Add metric'))))));\n\n\n\n\n\n  } // @ts-ignore\n  __reactstandin__regenerateByEval(key, code) {// @ts-ignore\n    this[key] = eval(code);}}\nMetricsControl.propTypes = propTypes;\nMetricsControl.defaultProps = defaultProps;const _default =\n\nwithTheme(MetricsControl);export default _default;;(function () {var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined;if (!reactHotLoader) {return;}reactHotLoader.register(propTypes, \"propTypes\", \"/app/superset-frontend/src/explore/components/controls/MetricControl/MetricsControl.jsx\");reactHotLoader.register(defaultProps, \"defaultProps\", \"/app/superset-frontend/src/explore/components/controls/MetricControl/MetricsControl.jsx\");reactHotLoader.register(getOptionsForSavedMetrics, \"getOptionsForSavedMetrics\", \"/app/superset-frontend/src/explore/components/controls/MetricControl/MetricsControl.jsx\");reactHotLoader.register(isDictionaryForAdhocMetric, \"isDictionaryForAdhocMetric\", \"/app/superset-frontend/src/explore/components/controls/MetricControl/MetricsControl.jsx\");reactHotLoader.register(columnsContainAllMetrics, \"columnsContainAllMetrics\", \"/app/superset-frontend/src/explore/components/controls/MetricControl/MetricsControl.jsx\");reactHotLoader.register(coerceAdhocMetrics, \"coerceAdhocMetrics\", \"/app/superset-frontend/src/explore/components/controls/MetricControl/MetricsControl.jsx\");reactHotLoader.register(MetricsControl, \"MetricsControl\", \"/app/superset-frontend/src/explore/components/controls/MetricControl/MetricsControl.jsx\");reactHotLoader.register(_default, \"default\", \"/app/superset-frontend/src/explore/components/controls/MetricControl/MetricsControl.jsx\");})();;(function () {var leaveModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.leaveModule : undefined;leaveModule && leaveModule(module);})();","map":{"version":3,"sources":["/app/superset-frontend/src/explore/components/controls/MetricControl/MetricsControl.jsx"],"names":["React","PropTypes","t","withTheme","ControlHeader","AGGREGATES_OPTIONS","sqlaAutoGeneratedMetricNameRegex","druidAutoGeneratedMetricRegex","Icons","AddIconButton","AddControlLabel","HeaderContainer","LabelsContainer","columnType","MetricDefinitionOption","MetricDefinitionValue","AdhocMetric","savedMetricType","adhocMetricType","AdhocMetricPopoverTrigger","propTypes","name","string","isRequired","onChange","func","value","oneOfType","arrayOf","columns","savedMetrics","isLoading","bool","multi","clearable","datasourceType","defaultProps","getOptionsForSavedMetrics","currentMetricValues","currentMetric","savedMetric","metric_name","isDictionaryForAdhocMetric","expressionType","columnsContainAllMetrics","nextProps","columnNames","column_name","metric","column","has","coerceAdhocMetrics","val","MetricsControl","PureComponent","constructor","props","onMetricEdit","onNewMetric","onRemoveMetric","moveLabel","checkIfAggregateInInput","optionsForSelect","selectFilterOption","isAutoGeneratedMetric","optionRenderer","option","valueRenderer","index","datasource","state","select","selectRef","ref","aggregateInInput","options","UNSAFE_componentWillReceiveProps","setState","newMetric","prevState","changedMetric","oldMetric","optionName","valuesCopy","opts","transformedOpts","optionValues","dragIndex","hoverIndex","newValues","isAddNewMetricDisabled","length","addNewMetricPopoverTrigger","trigger","isNew","expression","input","lowercaseInput","toLowerCase","x","clearedAggregateInInput","aggregates","aggregate","aggregate_name","results","push","test","verbose_name","data","filterValue","endIndex","valueAfterAggregate","substring","render","theme","colors","grayscale","light5","light1"],"mappings":"+gDAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,SAASC,CAAT,EAAYC,SAAZ,QAA6B,mBAA7B;;AAEA,OAAOC,aAAP,MAA0B,sCAA1B;AACA;AACEC,kBADF;AAEEC,gCAFF;AAGEC,6BAHF;AAIO,uBAJP;AAKA,OAAOC,KAAP,MAAkB,sBAAlB;AACA;AACEC,aADF;AAEEC,eAFF;AAGEC,eAHF;AAIEC,eAJF;AAKO,gDALP;AAMA,OAAOC,UAAP,MAAuB,cAAvB;AACA,OAAOC,sBAAP,MAAmC,0BAAnC;AACA,OAAOC,qBAAP,MAAkC,yBAAlC;AACA,OAAOC,WAAP,MAAwB,eAAxB;AACA,OAAOC,eAAP,MAA4B,mBAA5B;AACA,OAAOC,eAAP,MAA4B,mBAA5B;AACA,OAAOC,yBAAP,MAAsC,6BAAtC,C;;AAEA,MAAMC,SAAS,GAAG;AAChBC,EAAAA,IAAI,EAAEpB,SAAS,CAACqB,MAAV,CAAiBC,UADP;AAEhBC,EAAAA,QAAQ,EAAEvB,SAAS,CAACwB,IAFJ;AAGhBC,EAAAA,KAAK,EAAEzB,SAAS,CAAC0B,SAAV,CAAoB;AACzB1B,EAAAA,SAAS,CAAC2B,OAAV,CAAkB3B,SAAS,CAAC0B,SAAV,CAAoB,CAAC1B,SAAS,CAACqB,MAAX,EAAmBJ,eAAnB,CAApB,CAAlB,CADyB;AAEzBjB,EAAAA,SAAS,CAAC0B,SAAV,CAAoB,CAAC1B,SAAS,CAACqB,MAAX,EAAmBJ,eAAnB,CAApB,CAFyB,CAApB,CAHS;;AAOhBW,EAAAA,OAAO,EAAE5B,SAAS,CAAC2B,OAAV,CAAkBf,UAAlB,CAPO;AAQhBiB,EAAAA,YAAY,EAAE7B,SAAS,CAAC2B,OAAV,CAAkBX,eAAlB,CARE;AAShBc,EAAAA,SAAS,EAAE9B,SAAS,CAAC+B,IATL;AAUhBC,EAAAA,KAAK,EAAEhC,SAAS,CAAC+B,IAVD;AAWhBE,EAAAA,SAAS,EAAEjC,SAAS,CAAC+B,IAXL;AAYhBG,EAAAA,cAAc,EAAElC,SAAS,CAACqB,MAZV,EAAlB;;;AAeA,MAAMc,YAAY,GAAG;AACnBZ,EAAAA,QAAQ,EAAE,MAAM,CAAE,CADC;AAEnBU,EAAAA,SAAS,EAAE,IAFQ;AAGnBJ,EAAAA,YAAY,EAAE,EAHK;AAInBD,EAAAA,OAAO,EAAE,EAJU,EAArB;;;AAOA,SAASQ,yBAAT;AACEP,YADF;AAEEQ,mBAFF;AAGEC,aAHF;AAIE;AACA;AACET,EAAAA,YADF,oBACE,wBAAAA,YAAY,MAAZ,CAAAA,YAAY,EAAS,CAAAU,WAAW;AAC9B,iBAAcF,mBAAd;AACI,GAAC,0BAAAA,mBAAmB,MAAnB,CAAAA,mBAAmB,EAAUE,WAAW,CAACC,WAAtB,CAApB;AACAD,EAAAA,WAAW,CAACC,WAAZ,KAA4BF,aAFhC;AAGIC,EAAAA,WAJM,CADd;AAMO,IANP;;AAQD;;AAED,SAASE,0BAAT,CAAoChB,KAApC,EAA2C;AACzC,SAAOA,KAAK,IAAI,EAAEA,KAAK,YAAYV,WAAnB,CAAT,IAA4CU,KAAK,CAACiB,cAAzD;AACD;;AAED,SAASC,wBAAT,CAAkClB,KAAlC,EAAyCmB,SAAzC,EAAoD;AAClD,QAAMC,WAAW,GAAG;AAClB,mCAAC,IAAID,SAAS,CAAChB,OAAV,IAAqB,EAAzB,CAAD,EAA+B,IAAIgB,SAAS,CAACf,YAAV,IAA0B,EAA9B,CAA/B;AACE;AADF,mBAEO,CAAC,EAAEiB,WAAF,EAAeN,WAAf,EAAD,KAAkCM,WAAW,IAAIN,WAFxD,CADkB,CAApB;;;AAMA;AACE,gJAAC,eAAcf,KAAd,IAAuBA,KAAvB,GAA+B,CAACA,KAAD,CAAhC;AACUsB,IAAAA,MAAM,IAAIA,MADpB;AAEE;AAFF,sBAGO,CAAAA,MAAM;AACTA,IAAAA,MAAM,CAACC,MAAP;AACID,IAAAA,MAAM,CAACC,MAAP,CAAcF,WADlB;AAEIC,IAAAA,MAAM,CAACD,WAAP,IAAsBC,MAN9B;;AAQU3B,IAAAA,IAAI,IAAIA,IAAI,IAAI,OAAOA,IAAP,KAAgB,QAR1C;AASSA,IAAAA,IAAI,IAAIyB,WAAW,CAACI,GAAZ,CAAgB7B,IAAhB,CATjB,CADF;;AAYD;;AAED;AACA;AACA,SAAS8B,kBAAT,CAA4BzB,KAA5B,EAAmC;AACjC,MAAI,CAACA,KAAL,EAAY;AACV,WAAO,EAAP;AACD;AACD,MAAI,CAAC,eAAcA,KAAd,CAAL,EAA2B;AACzB,QAAIgB,0BAA0B,CAAChB,KAAD,CAA9B,EAAuC;AACrC,aAAO,CAAC,IAAIV,WAAJ,CAAgBU,KAAhB,CAAD,CAAP;AACD;AACD,WAAO,CAACA,KAAD,CAAP;AACD;AACD,SAAO,qBAAAA,KAAK,MAAL,CAAAA,KAAK,EAAK0B,GAAG,IAAI;AACtB,QAAIV,0BAA0B,CAACU,GAAD,CAA9B,EAAqC;AACnC,aAAO,IAAIpC,WAAJ,CAAgBoC,GAAhB,CAAP;AACD;AACD,WAAOA,GAAP;AACD,GALW,CAAZ;AAMD;;AAED,MAAMC,cAAN,SAA6BrD,KAAK,CAACsD,aAAnC,CAAiD;AAC/CC,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,UAAMA,KAAN;AACA,SAAKhC,QAAL,GAAgB,uCAAKA,QAAL,kBAAmB,IAAnB,CAAhB;AACA,SAAKiC,YAAL,GAAoB,uCAAKA,YAAL,kBAAuB,IAAvB,CAApB;AACA,SAAKC,WAAL,GAAmB,uCAAKA,WAAL,kBAAsB,IAAtB,CAAnB;AACA,SAAKC,cAAL,GAAsB,uCAAKA,cAAL,kBAAyB,IAAzB,CAAtB;AACA,SAAKC,SAAL,GAAiB,wCAAKA,SAAL,mBAAoB,IAApB,CAAjB;AACA,SAAKC,uBAAL,GAA+B,wCAAKA,uBAAL,mBAAkC,IAAlC,CAA/B;AACA,SAAKC,gBAAL,GAAwB,wCAAKA,gBAAL,mBAA2B,IAA3B,CAAxB;AACA,SAAKC,kBAAL,GAA0B,wCAAKA,kBAAL,mBAA6B,IAA7B,CAA1B;AACA,SAAKC,qBAAL,GAA6B,wCAAKA,qBAAL,mBAAgC,IAAhC,CAA7B;AACA,SAAKC,cAAL,GAAsBC,MAAM,IAAI,cAAC,sBAAD,IAAwB,MAAM,EAAEA,MAAhC,GAAhC;AACA,SAAKC,aAAL,GAAqB,CAACD,MAAD,EAASE,KAAT;AACnB,sBAAC,qBAAD;AACE,UAAA,GAAG,EAAEA,KADP;AAEE,UAAA,KAAK,EAAEA,KAFT;AAGE,UAAA,MAAM,EAAEF,MAHV;AAIE,UAAA,YAAY,EAAE,KAAKT,YAJrB;AAKE,UAAA,cAAc,EAAE,MAAM,KAAKE,cAAL,CAAoBS,KAApB,CALxB;AAME,UAAA,OAAO,EAAE,KAAKZ,KAAL,CAAW3B,OANtB;AAOE,UAAA,UAAU,EAAE,KAAK2B,KAAL,CAAWa,UAPzB;AAQE,UAAA,YAAY,EAAE,KAAKb,KAAL,CAAW1B,YAR3B;AASE,UAAA,mBAAmB,EAAEO,yBAAyB;AAC5C,eAAKmB,KAAL,CAAW1B,YADiC;AAE5C,eAAK0B,KAAL,CAAW9B,KAFiC;AAG5C,eAAK8B,KAAL,CAAW9B,KAHiC,qBAG5C,kBAAmB0C,KAAnB,CAH4C,CAThD;;AAcE,UAAA,cAAc,EAAE,KAAKZ,KAAL,CAAWrB,cAd7B;AAeE,UAAA,WAAW,EAAE,KAAKyB,SAfpB;AAgBE,UAAA,WAAW,EAAE,MAAM,KAAKJ,KAAL,CAAWhC,QAAX,CAAoB,KAAK8C,KAAL,CAAW5C,KAA/B,CAhBrB,GADmB,GAArB;;;AAoBA,SAAK6C,MAAL,GAAc,IAAd;AACA,SAAKC,SAAL,GAAiBC,GAAG,IAAI;AACtB,UAAIA,GAAJ,EAAS;AACP,aAAKF,MAAL,GAAcE,GAAG,CAACF,MAAlB;AACD,OAFD,MAEO;AACL,aAAKA,MAAL,GAAc,IAAd;AACD;AACF,KAND;AAOA,SAAKD,KAAL,GAAa;AACXI,MAAAA,gBAAgB,EAAE,IADP;AAEXC,MAAAA,OAAO,EAAE,KAAKb,gBAAL,CAAsB,KAAKN,KAA3B,CAFE;AAGX9B,MAAAA,KAAK,EAAEyB,kBAAkB,CAAC,KAAKK,KAAL,CAAW9B,KAAZ,CAHd,EAAb;;AAKD;;AAEDkD,EAAAA,gCAAgC,CAAC/B,SAAD,EAAY;AAC1C,UAAM,EAAEnB,KAAF,KAAY,KAAK8B,KAAvB;AACA;AACE,KAAC,SAAQ,KAAKA,KAAL,CAAW3B,OAAnB,EAA4BgB,SAAS,CAAChB,OAAtC,CAAD;AACA,KAAC,SAAQ,KAAK2B,KAAL,CAAW1B,YAAnB,EAAiCe,SAAS,CAACf,YAA3C,CAFH;AAGE;AACA,WAAK+C,QAAL,CAAc,EAAEF,OAAO,EAAE,KAAKb,gBAAL,CAAsBjB,SAAtB,CAAX,EAAd;;AAEA;AACA;AACA;AACA,UAAI,CAACD,wBAAwB,CAACC,SAAS,CAACnB,KAAX,EAAkBmB,SAAlB,CAA7B,EAA2D;AACzD,aAAKW,KAAL,CAAWhC,QAAX,CAAoB,EAApB;AACD;AACF;AACD,QAAIE,KAAK,KAAKmB,SAAS,CAACnB,KAAxB,EAA+B;AAC7B,WAAKmD,QAAL,CAAc,EAAEnD,KAAK,EAAEyB,kBAAkB,CAACN,SAAS,CAACnB,KAAX,CAA3B,EAAd;AACD;AACF;;AAEDgC,EAAAA,WAAW,CAACoB,SAAD,EAAY;AACrB,SAAKD,QAAL;AACEE,IAAAA,SAAS,KAAK;AACZ,SAAGA,SADS;AAEZrD,MAAAA,KAAK,EAAE,CAAC,GAAGqD,SAAS,CAACrD,KAAd,EAAqBoD,SAArB,CAFK,EAAL,CADX;;AAKE,UAAM;AACJ,WAAKtD,QAAL,CAAc,KAAK8C,KAAL,CAAW5C,KAAzB;AACD,KAPH;;AASD;;AAED+B,EAAAA,YAAY,CAACuB,aAAD,EAAgBC,SAAhB,EAA2B;AACrC,SAAKJ,QAAL;AACEE,IAAAA,SAAS,2BAAK;AACZrD,QAAAA,KAAK,EAAE,kCAAAqD,SAAS,CAACrD,KAAV,mBAAoBA,KAAK,IAAI;AAClC;AACE;AACAA,UAAAA,KAAK,KAAKuD,SAAS,CAACxC,WAApB;AACA;AACA,iBAAOf,KAAK,CAACwD,UAAb,KAA4B,WAF5B;AAGIxD,UAAAA,KAAK,CAACwD,UAAN,KAAqBD,SAAS,CAACC,UAHnC;AAII,eANN;AAOE;AACA,mBAAOF,aAAP;AACD;AACD,iBAAOtD,KAAP;AACD,SAZM,CADK,EAAL,EADX;;AAgBE,UAAM;AACJ,WAAKF,QAAL,CAAc,KAAK8C,KAAL,CAAW5C,KAAzB;AACD,KAlBH;;AAoBD;;AAEDiC,EAAAA,cAAc,CAACS,KAAD,EAAQ;AACpB,QAAI,CAAC,eAAc,KAAKE,KAAL,CAAW5C,KAAzB,CAAL,EAAsC;AACpC;AACD;AACD,UAAMyD,UAAU,GAAG,CAAC,GAAG,KAAKb,KAAL,CAAW5C,KAAf,CAAnB;AACA,4BAAAyD,UAAU,MAAV,CAAAA,UAAU,EAAQf,KAAR,EAAe,CAAf,CAAV;AACA,SAAKS,QAAL,CAAcE,SAAS,KAAK;AAC1B,SAAGA,SADuB;AAE1BrD,MAAAA,KAAK,EAAEyD,UAFmB,EAAL,CAAvB;;AAIA,SAAK3B,KAAL,CAAWhC,QAAX,CAAoB2D,UAApB;AACD;;AAED3D,EAAAA,QAAQ,CAAC4D,IAAD,EAAO;AACb;AACA,QAAIA,IAAI,KAAK,IAAb,EAAmB;AACjB,WAAK5B,KAAL,CAAWhC,QAAX,CAAoB,IAApB;AACA;AACD;;AAED,QAAI6D,eAAJ;AACA,QAAI,eAAcD,IAAd,CAAJ,EAAyB;AACvBC,MAAAA,eAAe,GAAGD,IAAlB;AACD,KAFD,MAEO;AACLC,MAAAA,eAAe,GAAGD,IAAI,GAAG,CAACA,IAAD,CAAH,GAAY,EAAlC;AACD;AACD,UAAME,YAAY,GAAG,0DAAAD,eAAe,MAAf,CAAAA,eAAe;AAC7BnB,IAAAA,MAAM,IAAI;AACb;AACA,UAAIA,MAAM,CAACzB,WAAX,EAAwB;AACtB,eAAOyB,MAAM,CAACzB,WAAd;AACD;AACD,aAAOyB,MAAP;AACD,KAPiC,CAAf;AAQXA,IAAAA,MAAM,IAAIA,MARC,CAArB;AASA,SAAKV,KAAL,CAAWhC,QAAX,CAAoB,KAAKgC,KAAL,CAAWvB,KAAX,GAAmBqD,YAAnB,GAAkCA,YAAY,CAAC,CAAD,CAAlE;AACD;;AAED1B,EAAAA,SAAS,CAAC2B,SAAD,EAAYC,UAAZ,EAAwB;AAC/B,UAAM,EAAE9D,KAAF,KAAY,KAAK4C,KAAvB;;AAEA,UAAMmB,SAAS,GAAG,CAAC,GAAG/D,KAAJ,CAAlB;AACA,KAAC+D,SAAS,CAACD,UAAD,CAAV,EAAwBC,SAAS,CAACF,SAAD,CAAjC,IAAgD;AAC9CE,IAAAA,SAAS,CAACF,SAAD,CADqC;AAE9CE,IAAAA,SAAS,CAACD,UAAD,CAFqC,CAAhD;;AAIA,SAAKX,QAAL,CAAc,EAAEnD,KAAK,EAAE+D,SAAT,EAAd;AACD;;AAEDC,EAAAA,sBAAsB,GAAG;AACvB,WAAO,CAAC,KAAKlC,KAAL,CAAWvB,KAAZ,IAAqB,KAAKqC,KAAL,CAAW5C,KAAX,CAAiBiE,MAAjB,GAA0B,CAAtD;AACD;;AAEDC,EAAAA,0BAA0B,CAACC,OAAD,EAAU;AAClC,QAAI,KAAKH,sBAAL,EAAJ,EAAmC;AACjC,aAAOG,OAAP;AACD;AACD;AACE,oBAAC,yBAAD;AACE,QAAA,WAAW,EAAE,IAAI7E,WAAJ,CAAgB,EAAE8E,KAAK,EAAE,IAAT,EAAhB,CADf;AAEE,QAAA,YAAY,EAAE,KAAKpC,WAFrB;AAGE,QAAA,OAAO,EAAE,KAAKF,KAAL,CAAW3B,OAHtB;AAIE,QAAA,mBAAmB,EAAEQ,yBAAyB;AAC5C,aAAKmB,KAAL,CAAW1B,YADiC;AAE5C,aAAK0B,KAAL,CAAW9B,KAFiC;AAG5C,YAH4C,CAJhD;;AASE,QAAA,UAAU,EAAE,KAAK8B,KAAL,CAAWa,UATzB;AAUE,QAAA,WAAW,EAAE,EAAE5B,WAAW,EAAE,EAAf,EAAmBsD,UAAU,EAAE,EAA/B,EAVf;AAWE,QAAA,cAAc,EAAE,KAAKvC,KAAL,CAAWrB,cAX7B;AAYE,QAAA,SAAS,MAZX;;AAcG0D,MAAAA,OAdH,CADF;;;AAkBD;;AAEDhC,EAAAA,uBAAuB,CAACmC,KAAD,EAAQ;AAC7B,UAAMC,cAAc,GAAGD,KAAK,CAACE,WAAN,EAAvB;AACA,UAAMxB,gBAAgB;AACpB,0BAAArE,kBAAkB,MAAlB,CAAAA,kBAAkB,EAAM,CAAA8F,CAAC;AACvB,gCAAAF,cAAc,MAAd,CAAAA,cAAc,EAAa,GAAEE,CAAC,CAACD,WAAF,EAAgB,GAA/B,CADE,CAAlB;AAEK,QAHP;AAIA,SAAKE,uBAAL,GAA+B,KAAK9B,KAAL,CAAWI,gBAA1C;AACA,SAAKG,QAAL,CAAc,EAAEH,gBAAF,EAAd;AACD;;AAEDZ,EAAAA,gBAAgB,CAACN,KAAD,EAAQ;AACtB,UAAM,EAAE3B,OAAF,EAAWC,YAAX,KAA4B0B,KAAlC;AACA,UAAM6C,UAAU;AACdxE,IAAAA,OAAO,IAAIA,OAAO,CAAC8D,MAAnB;AACI,yBAAAtF,kBAAkB,MAAlB,CAAAA,kBAAkB,EAAKiG,SAAS,KAAK;AACnCC,MAAAA,cAAc,EAAED,SADmB,EAAL,CAAd,CADtB;;AAII,MALN;AAMA,UAAM3B,OAAO,GAAG;AACd,QAAI9C,OAAO,IAAI,EAAf,CADc;AAEd,OAAGwE,UAFW;AAGd,QAAIvE,YAAY,IAAI,EAApB,CAHc,CAAhB;;;AAMA,WAAO,wBAAA6C,OAAO,MAAP,CAAAA,OAAO,EAAQ,CAAC6B,OAAD,EAAUtC,MAAV,KAAqB;AACzC,UAAIA,MAAM,CAACzB,WAAX,EAAwB;AACtB+D,QAAAA,OAAO,CAACC,IAAR,CAAa,EAAE,GAAGvC,MAAL,EAAagB,UAAU,EAAEhB,MAAM,CAACzB,WAAhC,EAAb;AACD,OAFD,MAEO,IAAIyB,MAAM,CAACnB,WAAX,EAAwB;AAC7ByD,QAAAA,OAAO,CAACC,IAAR,CAAa,EAAE,GAAGvC,MAAL,EAAagB,UAAU,EAAG,QAAOhB,MAAM,CAACnB,WAAY,EAApD,EAAb;AACD,OAFM,MAEA,IAAImB,MAAM,CAACqC,cAAX,EAA2B;AAChCC,QAAAA,OAAO,CAACC,IAAR,CAAa;AACX,aAAGvC,MADQ;AAEXgB,UAAAA,UAAU,EAAG,cAAahB,MAAM,CAACqC,cAAe,EAFrC,EAAb;;AAID;AACD,aAAOC,OAAP;AACD,KAZa,EAYX,EAZW,CAAd;AAaD;;AAEDxC,EAAAA,qBAAqB,CAACxB,WAAD,EAAc;AACjC,QAAI,KAAKgB,KAAL,CAAWrB,cAAX,KAA8B,OAAlC,EAA2C;AACzC,aAAO5B,6BAA6B,CAACmG,IAA9B,CAAmClE,WAAW,CAACmE,YAA/C,CAAP;AACD;AACD,WAAOrG,gCAAgC,CAACoG,IAAjC,CAAsClE,WAAW,CAACC,WAAlD,CAAP;AACD;;AAEDsB,EAAAA,kBAAkB,CAAC,EAAE6C,IAAI,EAAE1C,MAAR,EAAD,EAAmB2C,WAAnB,EAAgC;AAChD,QAAI,KAAKvC,KAAL,CAAWI,gBAAf,EAAiC;AAC/B,UAAIoC,QAAQ,GAAGD,WAAW,CAAClB,MAA3B;AACA,UAAI,0BAAAkB,WAAW,MAAX,CAAAA,WAAW,EAAU,GAAV,CAAf,EAA+B;AAC7BC,QAAAA,QAAQ,GAAGD,WAAW,CAAClB,MAAZ,GAAqB,CAAhC;AACD;AACD,YAAMoB,mBAAmB,GAAGF,WAAW,CAACG,SAAZ;AAC1B,+BAAAH,WAAW,MAAX,CAAAA,WAAW,EAAS,GAAT,CAAX,GAA2B,CADD;AAE1BC,MAAAA,QAF0B,CAA5B;;AAIA;AACE5C,QAAAA,MAAM,CAACnB,WAAP;AACA,8CAAAmB,MAAM,CAACnB,WAAP,CAAmBmD,WAAnB,qBAAyCa,mBAAzC,KAAiE,CAFnE;;AAID;AACD;AACE7C,MAAAA,MAAM,CAACgB,UAAP;AACC,OAAChB,MAAM,CAACzB,WAAR;AACC,OAAC,KAAKuB,qBAAL,CAA2BE,MAA3B,CADF;AAECA,MAAAA,MAAM,CAACyC,YAHT;AAIC,4CAAAzC,MAAM,CAACgB,UAAP,CAAkBgB,WAAlB,qBAAwCW,WAAxC,KAAwD,CAAxD;AACE3C,MAAAA,MAAM,CAACyC,YAAP;AACC,4CAAAzC,MAAM,CAACyC,YAAP,CAAoBT,WAApB,qBAA0CW,WAA1C,KAA0D,CAN9D,CADF;;AASD;;AAEDI,EAAAA,MAAM,GAAG;AACP,UAAM,EAAEC,KAAF,KAAY,KAAK1D,KAAvB;AACA;AACE,6BAAK,SAAS,EAAC,gBAAf;AACE,oBAAC,eAAD;AACE,oBAAC,aAAD,EAAmB,KAAKA,KAAxB,CADF;AAEG,WAAKoC,0BAAL;AACC,oBAAC,aAAD;AACE,QAAA,QAAQ,EAAE,KAAKF,sBAAL,EADZ;AAEE,qBAAU,mBAFZ;;AAIE,oBAAC,KAAD,CAAO,SAAP;AACE,QAAA,QAAQ,EAAC,GADX;AAEE,QAAA,SAAS,EAAEwB,KAAK,CAACC,MAAN,CAAaC,SAAb,CAAuBC,MAFpC,GAJF,CADD,CAFH,CADF;;;;;AAeE,oBAAC,eAAD;AACG,WAAK/C,KAAL,CAAW5C,KAAX,CAAiBiE,MAAjB,GAA0B,CAA1B;AACG,6CAAKrB,KAAL,CAAW5C,KAAX,mBAAqB,CAACA,KAAD,EAAQ0C,KAAR;AACnB,WAAKD,aAAL,CAAmBzC,KAAnB,EAA0B0C,KAA1B,CADF,CADH;;AAIG,WAAKwB,0BAAL;AACE,oBAAC,eAAD;AACE,oBAAC,KAAD,CAAO,SAAP,IAAiB,SAAS,EAAEsB,KAAK,CAACC,MAAN,CAAaC,SAAb,CAAuBE,MAAnD,GADF;AAEGpH,MAAAA,CAAC,CAAC,YAAD,CAFJ,CADF,CALN,CAfF,CADF;;;;;;AA8BD,GA5R8C;AAAA;AAAA;AA+RjDmD,cAAc,CAACjC,SAAf,GAA2BA,SAA3B;AACAiC,cAAc,CAACjB,YAAf,GAA8BA,YAA9B,C;;AAEejC,SAAS,CAACkD,cAAD,C,CAAxB,wB,iLApXMjC,S,kIAeAgB,Y,qIAOGC,yB,kJAeAK,0B,mJAIAE,wB,iJAuBAO,kB,2IAkBHE,c","sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { t, withTheme } from '@superset-ui/core';\nimport { isEqual } from 'lodash';\nimport ControlHeader from 'src/explore/components/ControlHeader';\nimport {\n  AGGREGATES_OPTIONS,\n  sqlaAutoGeneratedMetricNameRegex,\n  druidAutoGeneratedMetricRegex,\n} from 'src/explore/constants';\nimport Icons from 'src/components/Icons';\nimport {\n  AddIconButton,\n  AddControlLabel,\n  HeaderContainer,\n  LabelsContainer,\n} from 'src/explore/components/controls/OptionControls';\nimport columnType from './columnType';\nimport MetricDefinitionOption from './MetricDefinitionOption';\nimport MetricDefinitionValue from './MetricDefinitionValue';\nimport AdhocMetric from './AdhocMetric';\nimport savedMetricType from './savedMetricType';\nimport adhocMetricType from './adhocMetricType';\nimport AdhocMetricPopoverTrigger from './AdhocMetricPopoverTrigger';\n\nconst propTypes = {\n  name: PropTypes.string.isRequired,\n  onChange: PropTypes.func,\n  value: PropTypes.oneOfType([\n    PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.string, adhocMetricType])),\n    PropTypes.oneOfType([PropTypes.string, adhocMetricType]),\n  ]),\n  columns: PropTypes.arrayOf(columnType),\n  savedMetrics: PropTypes.arrayOf(savedMetricType),\n  isLoading: PropTypes.bool,\n  multi: PropTypes.bool,\n  clearable: PropTypes.bool,\n  datasourceType: PropTypes.string,\n};\n\nconst defaultProps = {\n  onChange: () => {},\n  clearable: true,\n  savedMetrics: [],\n  columns: [],\n};\n\nfunction getOptionsForSavedMetrics(\n  savedMetrics,\n  currentMetricValues,\n  currentMetric,\n) {\n  return (\n    savedMetrics?.filter(savedMetric =>\n      Array.isArray(currentMetricValues)\n        ? !currentMetricValues.includes(savedMetric.metric_name) ||\n          savedMetric.metric_name === currentMetric\n        : savedMetric,\n    ) ?? []\n  );\n}\n\nfunction isDictionaryForAdhocMetric(value) {\n  return value && !(value instanceof AdhocMetric) && value.expressionType;\n}\n\nfunction columnsContainAllMetrics(value, nextProps) {\n  const columnNames = new Set(\n    [...(nextProps.columns || []), ...(nextProps.savedMetrics || [])]\n      // eslint-disable-next-line camelcase\n      .map(({ column_name, metric_name }) => column_name || metric_name),\n  );\n\n  return (\n    (Array.isArray(value) ? value : [value])\n      .filter(metric => metric)\n      // find column names\n      .map(metric =>\n        metric.column\n          ? metric.column.column_name\n          : metric.column_name || metric,\n      )\n      .filter(name => name && typeof name === 'string')\n      .every(name => columnNames.has(name))\n  );\n}\n\n// adhoc metrics are stored as dictionaries in URL params. We convert them back into the\n// AdhocMetric class for typechecking, consistency and instance method access.\nfunction coerceAdhocMetrics(value) {\n  if (!value) {\n    return [];\n  }\n  if (!Array.isArray(value)) {\n    if (isDictionaryForAdhocMetric(value)) {\n      return [new AdhocMetric(value)];\n    }\n    return [value];\n  }\n  return value.map(val => {\n    if (isDictionaryForAdhocMetric(val)) {\n      return new AdhocMetric(val);\n    }\n    return val;\n  });\n}\n\nclass MetricsControl extends React.PureComponent {\n  constructor(props) {\n    super(props);\n    this.onChange = this.onChange.bind(this);\n    this.onMetricEdit = this.onMetricEdit.bind(this);\n    this.onNewMetric = this.onNewMetric.bind(this);\n    this.onRemoveMetric = this.onRemoveMetric.bind(this);\n    this.moveLabel = this.moveLabel.bind(this);\n    this.checkIfAggregateInInput = this.checkIfAggregateInInput.bind(this);\n    this.optionsForSelect = this.optionsForSelect.bind(this);\n    this.selectFilterOption = this.selectFilterOption.bind(this);\n    this.isAutoGeneratedMetric = this.isAutoGeneratedMetric.bind(this);\n    this.optionRenderer = option => <MetricDefinitionOption option={option} />;\n    this.valueRenderer = (option, index) => (\n      <MetricDefinitionValue\n        key={index}\n        index={index}\n        option={option}\n        onMetricEdit={this.onMetricEdit}\n        onRemoveMetric={() => this.onRemoveMetric(index)}\n        columns={this.props.columns}\n        datasource={this.props.datasource}\n        savedMetrics={this.props.savedMetrics}\n        savedMetricsOptions={getOptionsForSavedMetrics(\n          this.props.savedMetrics,\n          this.props.value,\n          this.props.value?.[index],\n        )}\n        datasourceType={this.props.datasourceType}\n        onMoveLabel={this.moveLabel}\n        onDropLabel={() => this.props.onChange(this.state.value)}\n      />\n    );\n    this.select = null;\n    this.selectRef = ref => {\n      if (ref) {\n        this.select = ref.select;\n      } else {\n        this.select = null;\n      }\n    };\n    this.state = {\n      aggregateInInput: null,\n      options: this.optionsForSelect(this.props),\n      value: coerceAdhocMetrics(this.props.value),\n    };\n  }\n\n  UNSAFE_componentWillReceiveProps(nextProps) {\n    const { value } = this.props;\n    if (\n      !isEqual(this.props.columns, nextProps.columns) ||\n      !isEqual(this.props.savedMetrics, nextProps.savedMetrics)\n    ) {\n      this.setState({ options: this.optionsForSelect(nextProps) });\n\n      // Remove all metrics if selected value no longer a valid column\n      // in the dataset. Must use `nextProps` here because Redux reducers may\n      // have already updated the value for this control.\n      if (!columnsContainAllMetrics(nextProps.value, nextProps)) {\n        this.props.onChange([]);\n      }\n    }\n    if (value !== nextProps.value) {\n      this.setState({ value: coerceAdhocMetrics(nextProps.value) });\n    }\n  }\n\n  onNewMetric(newMetric) {\n    this.setState(\n      prevState => ({\n        ...prevState,\n        value: [...prevState.value, newMetric],\n      }),\n      () => {\n        this.onChange(this.state.value);\n      },\n    );\n  }\n\n  onMetricEdit(changedMetric, oldMetric) {\n    this.setState(\n      prevState => ({\n        value: prevState.value.map(value => {\n          if (\n            // compare saved metrics\n            value === oldMetric.metric_name ||\n            // compare adhoc metrics\n            typeof value.optionName !== 'undefined'\n              ? value.optionName === oldMetric.optionName\n              : false\n          ) {\n            return changedMetric;\n          }\n          return value;\n        }),\n      }),\n      () => {\n        this.onChange(this.state.value);\n      },\n    );\n  }\n\n  onRemoveMetric(index) {\n    if (!Array.isArray(this.state.value)) {\n      return;\n    }\n    const valuesCopy = [...this.state.value];\n    valuesCopy.splice(index, 1);\n    this.setState(prevState => ({\n      ...prevState,\n      value: valuesCopy,\n    }));\n    this.props.onChange(valuesCopy);\n  }\n\n  onChange(opts) {\n    // if clear out options\n    if (opts === null) {\n      this.props.onChange(null);\n      return;\n    }\n\n    let transformedOpts;\n    if (Array.isArray(opts)) {\n      transformedOpts = opts;\n    } else {\n      transformedOpts = opts ? [opts] : [];\n    }\n    const optionValues = transformedOpts\n      .map(option => {\n        // pre-defined metric\n        if (option.metric_name) {\n          return option.metric_name;\n        }\n        return option;\n      })\n      .filter(option => option);\n    this.props.onChange(this.props.multi ? optionValues : optionValues[0]);\n  }\n\n  moveLabel(dragIndex, hoverIndex) {\n    const { value } = this.state;\n\n    const newValues = [...value];\n    [newValues[hoverIndex], newValues[dragIndex]] = [\n      newValues[dragIndex],\n      newValues[hoverIndex],\n    ];\n    this.setState({ value: newValues });\n  }\n\n  isAddNewMetricDisabled() {\n    return !this.props.multi && this.state.value.length > 0;\n  }\n\n  addNewMetricPopoverTrigger(trigger) {\n    if (this.isAddNewMetricDisabled()) {\n      return trigger;\n    }\n    return (\n      <AdhocMetricPopoverTrigger\n        adhocMetric={new AdhocMetric({ isNew: true })}\n        onMetricEdit={this.onNewMetric}\n        columns={this.props.columns}\n        savedMetricsOptions={getOptionsForSavedMetrics(\n          this.props.savedMetrics,\n          this.props.value,\n          null,\n        )}\n        datasource={this.props.datasource}\n        savedMetric={{ metric_name: '', expression: '' }}\n        datasourceType={this.props.datasourceType}\n        createNew\n      >\n        {trigger}\n      </AdhocMetricPopoverTrigger>\n    );\n  }\n\n  checkIfAggregateInInput(input) {\n    const lowercaseInput = input.toLowerCase();\n    const aggregateInInput =\n      AGGREGATES_OPTIONS.find(x =>\n        lowercaseInput.startsWith(`${x.toLowerCase()}(`),\n      ) || null;\n    this.clearedAggregateInInput = this.state.aggregateInInput;\n    this.setState({ aggregateInInput });\n  }\n\n  optionsForSelect(props) {\n    const { columns, savedMetrics } = props;\n    const aggregates =\n      columns && columns.length\n        ? AGGREGATES_OPTIONS.map(aggregate => ({\n            aggregate_name: aggregate,\n          }))\n        : [];\n    const options = [\n      ...(columns || []),\n      ...aggregates,\n      ...(savedMetrics || []),\n    ];\n\n    return options.reduce((results, option) => {\n      if (option.metric_name) {\n        results.push({ ...option, optionName: option.metric_name });\n      } else if (option.column_name) {\n        results.push({ ...option, optionName: `_col_${option.column_name}` });\n      } else if (option.aggregate_name) {\n        results.push({\n          ...option,\n          optionName: `_aggregate_${option.aggregate_name}`,\n        });\n      }\n      return results;\n    }, []);\n  }\n\n  isAutoGeneratedMetric(savedMetric) {\n    if (this.props.datasourceType === 'druid') {\n      return druidAutoGeneratedMetricRegex.test(savedMetric.verbose_name);\n    }\n    return sqlaAutoGeneratedMetricNameRegex.test(savedMetric.metric_name);\n  }\n\n  selectFilterOption({ data: option }, filterValue) {\n    if (this.state.aggregateInInput) {\n      let endIndex = filterValue.length;\n      if (filterValue.endsWith(')')) {\n        endIndex = filterValue.length - 1;\n      }\n      const valueAfterAggregate = filterValue.substring(\n        filterValue.indexOf('(') + 1,\n        endIndex,\n      );\n      return (\n        option.column_name &&\n        option.column_name.toLowerCase().indexOf(valueAfterAggregate) >= 0\n      );\n    }\n    return (\n      option.optionName &&\n      (!option.metric_name ||\n        !this.isAutoGeneratedMetric(option) ||\n        option.verbose_name) &&\n      (option.optionName.toLowerCase().indexOf(filterValue) >= 0 ||\n        (option.verbose_name &&\n          option.verbose_name.toLowerCase().indexOf(filterValue) >= 0))\n    );\n  }\n\n  render() {\n    const { theme } = this.props;\n    return (\n      <div className=\"metrics-select\">\n        <HeaderContainer>\n          <ControlHeader {...this.props} />\n          {this.addNewMetricPopoverTrigger(\n            <AddIconButton\n              disabled={this.isAddNewMetricDisabled()}\n              data-test=\"add-metric-button\"\n            >\n              <Icons.PlusLarge\n                iconSize=\"s\"\n                iconColor={theme.colors.grayscale.light5}\n              />\n            </AddIconButton>,\n          )}\n        </HeaderContainer>\n        <LabelsContainer>\n          {this.state.value.length > 0\n            ? this.state.value.map((value, index) =>\n                this.valueRenderer(value, index),\n              )\n            : this.addNewMetricPopoverTrigger(\n                <AddControlLabel>\n                  <Icons.PlusSmall iconColor={theme.colors.grayscale.light1} />\n                  {t('Add metric')}\n                </AddControlLabel>,\n              )}\n        </LabelsContainer>\n      </div>\n    );\n  }\n}\n\nMetricsControl.propTypes = propTypes;\nMetricsControl.defaultProps = defaultProps;\n\nexport default withTheme(MetricsControl);\n"]},"metadata":{},"sourceType":"module"}