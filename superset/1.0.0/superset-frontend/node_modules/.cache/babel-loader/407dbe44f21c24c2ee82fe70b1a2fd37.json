{"ast":null,"code":"(function () {var enterModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.enterModule : undefined;enterModule && enterModule(module);})();var __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default.signature : function (a) {return a;}; /**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { t, useTheme } from '@superset-ui/core';\nimport React from 'react';\nimport { Tooltip } from 'src/components/Tooltip';\nimport Icons from 'src/components/Icons';\nimport { AlertState } from '../types';import { jsx as ___EmotionJSX } from \"@emotion/react\";\nfunction getStatusColor(status, isReportEnabled, theme) {\n  switch (status) {\n    case AlertState.working:\n      return theme.colors.primary.base;\n    case AlertState.error:\n      return theme.colors.error.base;\n    case AlertState.success:\n      return isReportEnabled ?\n      theme.colors.success.base :\n      theme.colors.alert.base;\n    case AlertState.noop:\n      return theme.colors.success.base;\n    case AlertState.grace:\n      return theme.colors.alert.base;\n    default:\n      return theme.colors.grayscale.base;}\n\n}\nexport default function AlertStatusIcon({ state, isReportEnabled = false }) {\n  const theme = useTheme();\n  const lastStateConfig = {\n    icon: Icons.Check,\n    label: '',\n    status: '' };\n\n  switch (state) {\n    case AlertState.success:\n      lastStateConfig.icon = isReportEnabled ?\n      Icons.Check :\n      Icons.AlertSolidSmall;\n      lastStateConfig.label = isReportEnabled ?\n      t('Report sent') :\n      t('Alert triggered, notification sent');\n      lastStateConfig.status = AlertState.success;\n      break;\n    case AlertState.working:\n      lastStateConfig.icon = Icons.Running;\n      lastStateConfig.label = isReportEnabled ?\n      t('Report sending') :\n      t('Alert running');\n      lastStateConfig.status = AlertState.working;\n      break;\n    case AlertState.error:\n      lastStateConfig.icon = Icons.XSmall;\n      lastStateConfig.label = isReportEnabled ?\n      t('Report failed') :\n      t('Alert failed');\n      lastStateConfig.status = AlertState.error;\n      break;\n    case AlertState.noop:\n      lastStateConfig.icon = Icons.Check;\n      lastStateConfig.label = t('Nothing triggered');\n      lastStateConfig.status = AlertState.noop;\n      break;\n    case AlertState.grace:\n      lastStateConfig.icon = Icons.AlertSolidSmall;\n      lastStateConfig.label = t('Alert Triggered, In Grace Period');\n      lastStateConfig.status = AlertState.grace;\n      break;\n    default:\n      lastStateConfig.icon = Icons.Check;\n      lastStateConfig.label = t('Nothing triggered');\n      lastStateConfig.status = AlertState.noop;}\n\n  const Icon = lastStateConfig.icon;\n  return ___EmotionJSX(Tooltip, { title: lastStateConfig.label, placement: \"bottomLeft\" },\n  ___EmotionJSX(Icon, { iconColor: getStatusColor(lastStateConfig.status, isReportEnabled, theme) }));\n\n}__signature__(AlertStatusIcon, \"useTheme{theme}\", () => [useTheme]);;(function () {var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined;if (!reactHotLoader) {return;}reactHotLoader.register(getStatusColor, \"getStatusColor\", \"/app/superset-frontend/src/views/CRUD/alert/components/AlertStatusIcon.tsx\");reactHotLoader.register(AlertStatusIcon, \"AlertStatusIcon\", \"/app/superset-frontend/src/views/CRUD/alert/components/AlertStatusIcon.tsx\");})();;(function () {var leaveModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.leaveModule : undefined;leaveModule && leaveModule(module);})();","map":{"version":3,"sources":["/app/superset-frontend/src/views/CRUD/alert/components/AlertStatusIcon.tsx"],"names":[],"mappings":"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","sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { t, supersetTheme, useTheme } from '@superset-ui/core';\nimport React from 'react';\nimport { Tooltip } from 'src/components/Tooltip';\nimport Icons from 'src/components/Icons';\nimport { AlertState } from '../types';\n\nfunction getStatusColor(\n  status: string,\n  isReportEnabled: boolean,\n  theme: typeof supersetTheme,\n) {\n  switch (status) {\n    case AlertState.working:\n      return theme.colors.primary.base;\n    case AlertState.error:\n      return theme.colors.error.base;\n    case AlertState.success:\n      return isReportEnabled\n        ? theme.colors.success.base\n        : theme.colors.alert.base;\n    case AlertState.noop:\n      return theme.colors.success.base;\n    case AlertState.grace:\n      return theme.colors.alert.base;\n    default:\n      return theme.colors.grayscale.base;\n  }\n}\n\nexport default function AlertStatusIcon({\n  state,\n  isReportEnabled = false,\n}: {\n  state: string;\n  isReportEnabled: boolean;\n}) {\n  const theme = useTheme();\n  const lastStateConfig = {\n    icon: Icons.Check,\n    label: '',\n    status: '',\n  };\n  switch (state) {\n    case AlertState.success:\n      lastStateConfig.icon = isReportEnabled\n        ? Icons.Check\n        : Icons.AlertSolidSmall;\n      lastStateConfig.label = isReportEnabled\n        ? t('Report sent')\n        : t('Alert triggered, notification sent');\n      lastStateConfig.status = AlertState.success;\n      break;\n    case AlertState.working:\n      lastStateConfig.icon = Icons.Running;\n      lastStateConfig.label = isReportEnabled\n        ? t('Report sending')\n        : t('Alert running');\n      lastStateConfig.status = AlertState.working;\n      break;\n    case AlertState.error:\n      lastStateConfig.icon = Icons.XSmall;\n      lastStateConfig.label = isReportEnabled\n        ? t('Report failed')\n        : t('Alert failed');\n      lastStateConfig.status = AlertState.error;\n      break;\n    case AlertState.noop:\n      lastStateConfig.icon = Icons.Check;\n      lastStateConfig.label = t('Nothing triggered');\n      lastStateConfig.status = AlertState.noop;\n      break;\n    case AlertState.grace:\n      lastStateConfig.icon = Icons.AlertSolidSmall;\n      lastStateConfig.label = t('Alert Triggered, In Grace Period');\n      lastStateConfig.status = AlertState.grace;\n      break;\n    default:\n      lastStateConfig.icon = Icons.Check;\n      lastStateConfig.label = t('Nothing triggered');\n      lastStateConfig.status = AlertState.noop;\n  }\n  const Icon = lastStateConfig.icon;\n  return (\n    <Tooltip title={lastStateConfig.label} placement=\"bottomLeft\">\n      <Icon\n        iconColor={getStatusColor(\n          lastStateConfig.status,\n          isReportEnabled,\n          theme,\n        )}\n      />\n    </Tooltip>\n  );\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}