{"ast":null,"code":"import \"core-js/modules/web.dom-collections.iterator.js\";(function () {var enterModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.enterModule : undefined;enterModule && enterModule(module);})();var __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default.signature : function (a) {return a;}; /**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React from 'react';\nimport { t, styled } from '@superset-ui/core';\nimport { Radio } from 'src/components/Radio';\nimport { Form, Typography } from 'src/common/components';\nimport { Scoping } from './types';\nimport ScopingTree from './ScopingTree';\nimport { getDefaultScopeValue, isScopingAll } from './utils';import { jsx as ___EmotionJSX } from \"@emotion/react\";\nconst Wrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n  & > * {\n    margin-bottom: ${({ theme }) => theme.gridUnit}px;\n  }\n`;\nconst CleanFormItem = styled(Form.Item)`\n  margin-bottom: 0;\n`;\nconst FilterScope = ({ pathToFormValue = [], formScoping, formScope, forceUpdate, scope, updateFormValues, chartId }) => {\n  const initialScope = scope || getDefaultScopeValue(chartId);\n  const initialScoping = isScopingAll(initialScope, chartId) ?\n  Scoping.all :\n  Scoping.specific;\n  return ___EmotionJSX(Wrapper, null,\n  ___EmotionJSX(CleanFormItem, { name: [...pathToFormValue, 'scoping'], initialValue: initialScoping },\n  ___EmotionJSX(Radio.Group, { onChange: ({ target: { value } }) => {\n      if (value === Scoping.all) {\n        const scope = getDefaultScopeValue(chartId);\n        updateFormValues({\n          scope });\n\n      }\n      forceUpdate();\n    } },\n  ___EmotionJSX(Radio, { value: Scoping.all }, t('Apply to all panels')),\n  ___EmotionJSX(Radio, { value: Scoping.specific },\n  t('Apply to specific panels')))),\n\n\n\n  ___EmotionJSX(Typography.Text, { type: \"secondary\" },\n  (formScoping != null ? formScoping : initialScoping) === Scoping.specific ?\n  t('Only selected panels will be affected by this filter') :\n  t('All panels with this column will be affected by this filter')),\n\n  (formScoping != null ? formScoping : initialScoping) === Scoping.specific && ___EmotionJSX(ScopingTree, { updateFormValues: updateFormValues, initialScope: initialScope, formScope: formScope, forceUpdate: forceUpdate, chartId: chartId }),\n  ___EmotionJSX(CleanFormItem, { name: [...pathToFormValue, 'scope'], hidden: true, initialValue: initialScope }));\n\n};const _default =\nFilterScope;export default _default;;(function () {var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined;if (!reactHotLoader) {return;}reactHotLoader.register(Wrapper, \"Wrapper\", \"/app/superset-frontend/src/dashboard/components/nativeFilters/FiltersConfigModal/FiltersConfigForm/FilterScope/FilterScope.tsx\");reactHotLoader.register(CleanFormItem, \"CleanFormItem\", \"/app/superset-frontend/src/dashboard/components/nativeFilters/FiltersConfigModal/FiltersConfigForm/FilterScope/FilterScope.tsx\");reactHotLoader.register(FilterScope, \"FilterScope\", \"/app/superset-frontend/src/dashboard/components/nativeFilters/FiltersConfigModal/FiltersConfigForm/FilterScope/FilterScope.tsx\");reactHotLoader.register(_default, \"default\", \"/app/superset-frontend/src/dashboard/components/nativeFilters/FiltersConfigModal/FiltersConfigForm/FilterScope/FilterScope.tsx\");})();;(function () {var leaveModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.leaveModule : undefined;leaveModule && leaveModule(module);})();","map":{"version":3,"sources":["/app/superset-frontend/src/dashboard/components/nativeFilters/FiltersConfigModal/FiltersConfigForm/FilterScope/FilterScope.tsx"],"names":[],"mappings":"iWAAA;;;;;;;;;;;;;;;;;AAiBG;AAEH,OAAO,KAAP,MAA0B,OAA1B;AACA,SAAS,CAAT,EAAY,MAAZ,QAA0B,mBAA1B;AACA,SAAS,KAAT,QAAsB,sBAAtB;AACA,SAAS,IAAT,EAAe,UAAf,QAAiC,uBAAjC;AAEA,SAAS,OAAT,QAAwB,SAAxB;AACA,OAAO,WAAP,MAAwB,eAAxB;AACA,SAAS,oBAAT,EAA+B,YAA/B,QAAmD,SAAnD,C;AAYA,MAAM,OAAO,GAAG,MAAM,CAAC,GAAG;;;;qBAIL,CAAC,EAAE,KAAF,EAAD,KAAe,KAAK,CAAC,QAAQ;;AAEjD,CAND;AAQA,MAAM,aAAa,GAAG,MAAM,CAAC,IAAI,CAAC,IAAN,CAAW;;AAEtC,CAFD;AAIA,MAAM,WAAW,GAAyB,CAAC,EACzC,eAAe,GAAG,EADuB,EAEzC,WAFyC,EAGzC,SAHyC,EAIzC,WAJyC,EAKzC,KALyC,EAMzC,gBANyC,EAOzC,OAPyC,EAAD,KAQrC;AACH,QAAM,YAAY,GAAG,KAAK,IAAI,oBAAoB,CAAC,OAAD,CAAlD;AACA,QAAM,cAAc,GAAG,YAAY,CAAC,YAAD,EAAe,OAAf,CAAZ;AACnB,EAAA,OAAO,CAAC,GADW;AAEnB,EAAA,OAAO,CAAC,QAFZ;AAIA,SACE,cAAC,OAAD;AACE,gBAAC,aAAD,IACE,IAAI,EAAE,CAAC,GAAG,eAAJ,EAAqB,SAArB,CADR,EAEE,YAAY,EAAE,cAFhB;AAIE,gBAAC,KAAD,CAAO,KAAP,IACE,QAAQ,EAAE,CAAC,EAAE,MAAM,EAAE,EAAE,KAAF,EAAV,EAAD,KAA0B;AAClC,UAAI,KAAK,KAAK,OAAO,CAAC,GAAtB,EAA2B;AACzB,cAAM,KAAK,GAAG,oBAAoB,CAAC,OAAD,CAAlC;AACA,QAAA,gBAAgB,CAAC;AACf,UAAA,KADe,EAAD,CAAhB;;AAGD;AACD,MAAA,WAAW;AACZ,KATH;AAWE,gBAAC,KAAD,IAAO,KAAK,EAAE,OAAO,CAAC,GAAtB,IAA4B,CAAC,CAAC,qBAAD,CAA7B,CAXF;AAYE,gBAAC,KAAD,IAAO,KAAK,EAAE,OAAO,CAAC,QAAtB;AACG,EAAA,CAAC,CAAC,0BAAD,CADJ,CAZF,CAJF,CADF;;;;AAsBE,gBAAC,UAAD,CAAY,IAAZ,IAAiB,IAAI,EAAC,WAAtB;AACG,GAAC,WAAD,WAAC,WAAD,GAAgB,cAAhB,MAAoC,OAAO,CAAC,QAA5C;AACG,EAAA,CAAC,CAAC,sDAAD,CADJ;AAEG,EAAA,CAAC,CAAC,6DAAD,CAHP,CAtBF;;AA2BG,GAAC,WAAD,WAAC,WAAD,GAAgB,cAAhB,MAAoC,OAAO,CAAC,QAA5C,IACC,cAAC,WAAD,IACE,gBAAgB,EAAE,gBADpB,EAEE,YAAY,EAAE,YAFhB,EAGE,SAAS,EAAE,SAHb,EAIE,WAAW,EAAE,WAJf,EAKE,OAAO,EAAE,OALX,GA5BJ;AAoCE,gBAAC,aAAD,IACE,IAAI,EAAE,CAAC,GAAG,eAAJ,EAAqB,OAArB,CADR,EAEE,MAAM,MAFR,EAGE,YAAY,EAAE,YAHhB,GApCF,CADF;;AA4CD,CA1DD,C;AA4De,W,CAAf,wB,iLAxEM,O,uKAQA,a,6KAIA,W","sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport React, { FC } from 'react';\nimport { t, styled } from '@superset-ui/core';\nimport { Radio } from 'src/components/Radio';\nimport { Form, Typography } from 'src/common/components';\nimport { Scope } from '../../../types';\nimport { Scoping } from './types';\nimport ScopingTree from './ScopingTree';\nimport { getDefaultScopeValue, isScopingAll } from './utils';\n\ntype FilterScopeProps = {\n  pathToFormValue?: string[];\n  updateFormValues: (values: any) => void;\n  formScope?: Scope;\n  forceUpdate: Function;\n  scope?: Scope;\n  formScoping?: Scoping;\n  chartId?: number;\n};\n\nconst Wrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n  & > * {\n    margin-bottom: ${({ theme }) => theme.gridUnit}px;\n  }\n`;\n\nconst CleanFormItem = styled(Form.Item)`\n  margin-bottom: 0;\n`;\n\nconst FilterScope: FC<FilterScopeProps> = ({\n  pathToFormValue = [],\n  formScoping,\n  formScope,\n  forceUpdate,\n  scope,\n  updateFormValues,\n  chartId,\n}) => {\n  const initialScope = scope || getDefaultScopeValue(chartId);\n  const initialScoping = isScopingAll(initialScope, chartId)\n    ? Scoping.all\n    : Scoping.specific;\n\n  return (\n    <Wrapper>\n      <CleanFormItem\n        name={[...pathToFormValue, 'scoping']}\n        initialValue={initialScoping}\n      >\n        <Radio.Group\n          onChange={({ target: { value } }) => {\n            if (value === Scoping.all) {\n              const scope = getDefaultScopeValue(chartId);\n              updateFormValues({\n                scope,\n              });\n            }\n            forceUpdate();\n          }}\n        >\n          <Radio value={Scoping.all}>{t('Apply to all panels')}</Radio>\n          <Radio value={Scoping.specific}>\n            {t('Apply to specific panels')}\n          </Radio>\n        </Radio.Group>\n      </CleanFormItem>\n      <Typography.Text type=\"secondary\">\n        {(formScoping ?? initialScoping) === Scoping.specific\n          ? t('Only selected panels will be affected by this filter')\n          : t('All panels with this column will be affected by this filter')}\n      </Typography.Text>\n      {(formScoping ?? initialScoping) === Scoping.specific && (\n        <ScopingTree\n          updateFormValues={updateFormValues}\n          initialScope={initialScope}\n          formScope={formScope}\n          forceUpdate={forceUpdate}\n          chartId={chartId}\n        />\n      )}\n      <CleanFormItem\n        name={[...pathToFormValue, 'scope']}\n        hidden\n        initialValue={initialScope}\n      />\n    </Wrapper>\n  );\n};\n\nexport default FilterScope;\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}