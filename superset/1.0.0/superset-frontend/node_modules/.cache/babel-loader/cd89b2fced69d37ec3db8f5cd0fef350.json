{"ast":null,"code":"import \"core-js/modules/web.dom-collections.iterator.js\";import _includesInstanceProperty from \"@babel/runtime-corejs3/core-js-stable/instance/includes\";import _filterInstanceProperty from \"@babel/runtime-corejs3/core-js-stable/instance/filter\";import _findInstanceProperty from \"@babel/runtime-corejs3/core-js-stable/instance/find\";import _trimInstanceProperty from \"@babel/runtime-corejs3/core-js-stable/instance/trim\";(function () {var enterModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.enterModule : undefined;enterModule && enterModule(module);})();var __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default.signature : function (a) {return a;}; /**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { t } from '@superset-ui/core';\nimport React, { useEffect, useState, useReducer } from 'react';\nimport Tabs from 'src/components/Tabs';\nimport { Alert } from 'src/common/components';\nimport Modal from 'src/components/Modal';\nimport Button from 'src/components/Button';\nimport withToasts from 'src/messageToasts/enhancers/withToasts';\nimport { testDatabaseConnection, useSingleViewResource, useAvailableDatabases, useDatabaseValidation } from 'src/views/CRUD/hooks';\nimport { useCommonConf } from 'src/views/CRUD/data/database/state';\nimport { CONFIGURATION_METHOD } from 'src/views/CRUD/data/database/types';\nimport ExtraOptions from './ExtraOptions';\nimport SqlAlchemyForm from './SqlAlchemyForm';\nimport DatabaseConnectionForm from './DatabaseConnectionForm';\nimport { antDAlertStyles, antDModalNoPaddingStyles, antDModalStyles, antDTabsStyles, buttonLinkStyles, TabHeader, CreateHeaderSubtitle, CreateHeaderTitle, EditHeaderSubtitle, EditHeaderTitle, formHelperStyles, formStyles, StyledBasicTab } from './styles';import { jsx as ___EmotionJSX } from \"@emotion/react\";\nconst DOCUMENTATION_LINK = 'https://superset.apache.org/docs/databases/installing-database-drivers';\nvar ActionType;\n(function (ActionType) {\n  ActionType[ActionType[\"configMethodChange\"] = 0] = \"configMethodChange\";\n  ActionType[ActionType[\"dbSelected\"] = 1] = \"dbSelected\";\n  ActionType[ActionType[\"editorChange\"] = 2] = \"editorChange\";\n  ActionType[ActionType[\"fetched\"] = 3] = \"fetched\";\n  ActionType[ActionType[\"inputChange\"] = 4] = \"inputChange\";\n  ActionType[ActionType[\"parametersChange\"] = 5] = \"parametersChange\";\n  ActionType[ActionType[\"reset\"] = 6] = \"reset\";\n  ActionType[ActionType[\"textChange\"] = 7] = \"textChange\";\n})(ActionType || (ActionType = {}));\nfunction dbReducer(state, action) {\n  const trimmedState = {\n    ...(state || {}) };\n\n  switch (action.type) {\n    case ActionType.inputChange:\n      if (action.payload.type === 'checkbox') {\n        return {\n          ...trimmedState,\n          [action.payload.name]: action.payload.checked };\n\n      }\n      return {\n        ...trimmedState,\n        [action.payload.name]: action.payload.value };\n\n    case ActionType.parametersChange:\n      return {\n        ...trimmedState,\n        parameters: {\n          ...trimmedState.parameters,\n          [action.payload.name]: action.payload.value } };\n\n\n    case ActionType.editorChange:\n      return {\n        ...trimmedState,\n        [action.payload.name]: action.payload.json };\n\n    case ActionType.textChange:\n      return {\n        ...trimmedState,\n        [action.payload.name]: action.payload.value };\n\n    case ActionType.fetched:\n      return {\n        engine: trimmedState.engine,\n        configuration_method: trimmedState.configuration_method,\n        ...action.payload };\n\n    case ActionType.dbSelected:\n    case ActionType.configMethodChange:\n      return {\n        ...action.payload };\n\n    case ActionType.reset:\n    default:\n      return {};}\n\n}\nconst DEFAULT_TAB_KEY = '1';\nconst FALSY_FORM_VALUES = [undefined, null, ''];\nconst DatabaseModal = ({ addDangerToast, addSuccessToast, onDatabaseAdd, onHide, show, databaseId }) => {var _availableDbs$databas, _db$database_name2, _context;\n  const [db, setDB] = useReducer(dbReducer, null);\n  const [tabKey, setTabKey] = useState(DEFAULT_TAB_KEY);\n  const [availableDbs, getAvailableDbs] = useAvailableDatabases();\n  const [validationErrors, getValidation] = useDatabaseValidation();\n  const [hasConnectedDb, setHasConnectedDb] = useState(false);\n  const [dbName, setDbName] = useState('');\n  const conf = useCommonConf();\n  const isEditMode = !!databaseId;\n  const useSqlAlchemyForm = (db == null ? void 0 : db.configuration_method) === CONFIGURATION_METHOD.SQLALCHEMY_URI;\n  const useTabLayout = isEditMode || useSqlAlchemyForm;\n  // Database fetch logic\n  const { state: { loading: dbLoading, resource: dbFetched }, fetchResource, createResource, updateResource } = useSingleViewResource('database', t('database'), addDangerToast);\n  // Test Connection logic\n  const testConnection = () => {var _db$database_name;\n    if (!(db != null && db.sqlalchemy_uri)) {\n      addDangerToast(t('Please enter a SQLAlchemy URI to test'));\n      return;\n    }\n    const connection = {\n      sqlalchemy_uri: (db == null ? void 0 : db.sqlalchemy_uri) || '',\n      database_name: (db == null ? void 0 : (_db$database_name = db.database_name) == null ? void 0 : _trimInstanceProperty(_db$database_name).call(_db$database_name)) || undefined,\n      impersonate_user: (db == null ? void 0 : db.impersonate_user) || undefined,\n      extra: (db == null ? void 0 : db.extra) || undefined,\n      encrypted_extra: (db == null ? void 0 : db.encrypted_extra) || undefined,\n      server_cert: (db == null ? void 0 : db.server_cert) || undefined };\n\n    testDatabaseConnection(connection, addDangerToast, addSuccessToast);\n  };\n  const onClose = () => {\n    setDB({ type: ActionType.reset });\n    setHasConnectedDb(false);\n    onHide();\n  };\n  const onSave = async () => {\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    const { id, ...update } = db || {};\n    if (db != null && db.id) {\n      if (db.sqlalchemy_uri) {\n        // don't pass parameters if using the sqlalchemy uri\n        delete update.parameters;\n      }\n      const result = await updateResource(db.id, update);\n      if (result) {\n        if (onDatabaseAdd) {\n          onDatabaseAdd();\n        }\n        onClose();\n      }\n    } else\n    if (db) {\n      // Create\n      const dbId = await createResource(update);\n      if (dbId) {\n        setHasConnectedDb(true);\n        if (onDatabaseAdd) {\n          onDatabaseAdd();\n        }\n        if (useTabLayout) {\n          // tab layout only has one step\n          // so it should close immediately on save\n          onClose();\n        }\n      }\n    }\n  };\n  const onChange = (type, payload) => {\n    setDB({ type, payload });\n  };\n  // Initialize\n  const fetchDB = () => {\n    if (isEditMode && databaseId) {\n      if (!dbLoading) {\n        fetchResource(databaseId).catch(e => addDangerToast(t('Sorry there was an error fetching database information: %s', e.message)));\n      }\n    }\n  };\n  useEffect(() => {\n    if (show) {\n      setTabKey(DEFAULT_TAB_KEY);\n      getAvailableDbs();\n      setDB({\n        type: ActionType.dbSelected,\n        payload: {\n          configuration_method: CONFIGURATION_METHOD.SQLALCHEMY_URI } });\n\n\n    }\n    if (databaseId && show) {\n      fetchDB();\n    }\n  }, [show, databaseId]);\n  useEffect(() => {\n    if (dbFetched) {\n      setDB({\n        type: ActionType.fetched,\n        payload: dbFetched });\n\n      // keep a copy of the name separate for display purposes\n      // because it shouldn't change when the form is updated\n      setDbName(dbFetched.database_name);\n    }\n  }, [dbFetched]);\n  const tabChange = key => {\n    setTabKey(key);\n  };\n  const dbModel = (availableDbs == null ? void 0 : (_availableDbs$databas = availableDbs.databases) == null ? void 0 : _findInstanceProperty(_availableDbs$databas).call(_availableDbs$databas, available => available.engine === (db == null ? void 0 : db.engine))) || {};\n  const disableSave = !hasConnectedDb && (\n  useSqlAlchemyForm ?\n  !(db != null && (_db$database_name2 = db.database_name) != null && _trimInstanceProperty(_db$database_name2).call(_db$database_name2) && db != null && db.sqlalchemy_uri) :\n  // disable the button if there is no dbModel.parameters or if\n  // any required fields are falsy\n  !(dbModel != null && dbModel.parameters) ||\n  !!_filterInstanceProperty(_context = dbModel.parameters.required).call(_context, field => {var _db$parameters;return _includesInstanceProperty(FALSY_FORM_VALUES).call(FALSY_FORM_VALUES, db == null ? void 0 : (_db$parameters = db.parameters) == null ? void 0 : _db$parameters[field]);}).length);\n  return useTabLayout ? ___EmotionJSX(Modal, { css: theme => [\n    antDTabsStyles,\n    antDModalStyles(theme),\n    antDModalNoPaddingStyles,\n    formHelperStyles(theme)],\n    name: \"database\", disablePrimaryButton: disableSave, \"data-test\": \"database-modal\", height: \"600px\", onHandledPrimaryAction: onSave, onHide: onClose, primaryButtonName: isEditMode ? t('Save') : t('Connect'), width: \"500px\", show: show, title: ___EmotionJSX(\"h4\", null, isEditMode ? t('Edit database') : t('Connect a database')) },\n  isEditMode ? ___EmotionJSX(TabHeader, null,\n  ___EmotionJSX(EditHeaderTitle, null, db == null ? void 0 : db.backend),\n  ___EmotionJSX(EditHeaderSubtitle, null, dbName)) :\n  ___EmotionJSX(TabHeader, null,\n  ___EmotionJSX(CreateHeaderTitle, null, \"Enter Primary Credentials\"),\n  ___EmotionJSX(CreateHeaderSubtitle, null, \"Need help? Learn how to connect your database\",\n  ' ',\n  ___EmotionJSX(\"a\", { href: DOCUMENTATION_LINK, target: \"_blank\", rel: \"noopener noreferrer\" }, \"here\"), \".\")),\n\n\n\n\n\n  ___EmotionJSX(\"hr\", null),\n  ___EmotionJSX(Tabs, { defaultActiveKey: DEFAULT_TAB_KEY, activeKey: tabKey, onTabClick: tabChange, animated: { inkBar: true, tabPane: true } },\n  ___EmotionJSX(StyledBasicTab, { tab: ___EmotionJSX(\"span\", null, t('Basic')), key: \"1\" },\n  useSqlAlchemyForm ? ___EmotionJSX(SqlAlchemyForm, { db: db, onInputChange: ({ target }) => onChange(ActionType.inputChange, {\n      type: target.type,\n      name: target.name,\n      checked: target.checked,\n      value: target.value }),\n    conf: conf, testConnection: testConnection }) : ___EmotionJSX(\"div\", null,\n  ___EmotionJSX(\"p\", null, \"TODO: form\")),\n\n  ___EmotionJSX(Alert, { css: theme => antDAlertStyles(theme), message: \"Additional fields may be required\", description: ___EmotionJSX(React.Fragment, null, \"Select databases require additional fields to be completed in the Advanced tab to successfully connect the database. Learn what requirements your databases has\",\n\n\n    ' ',\n    ___EmotionJSX(\"a\", { href: DOCUMENTATION_LINK, target: \"_blank\", rel: \"noopener noreferrer\" }, \"here\"), \".\"),\n\n\n\n    type: \"info\", showIcon: true })),\n\n  ___EmotionJSX(Tabs.TabPane, { tab: ___EmotionJSX(\"span\", null, t('Advanced')), key: \"2\" },\n  ___EmotionJSX(ExtraOptions, { db: db, onInputChange: ({ target }) => onChange(ActionType.inputChange, {\n      type: target.type,\n      name: target.name,\n      checked: target.checked,\n      value: target.value }),\n    onTextChange: ({ target }) => onChange(ActionType.textChange, {\n      name: target.name,\n      value: target.value }),\n    onEditorChange: payload => onChange(ActionType.editorChange, payload) })))) :\n\n\n  ___EmotionJSX(Modal, { css: theme => [\n    antDModalNoPaddingStyles,\n    antDModalStyles(theme),\n    formHelperStyles(theme),\n    formStyles(theme)],\n    name: \"database\", disablePrimaryButton: disableSave, height: \"600px\", onHandledPrimaryAction: onSave, onHide: onClose, primaryButtonName: hasConnectedDb ? t('Finish') : t('Connect'), width: \"500px\", show: show, title: ___EmotionJSX(\"h4\", null, t('Connect a database')) },\n  hasConnectedDb ? ___EmotionJSX(ExtraOptions, { db: db, onInputChange: ({ target }) => onChange(ActionType.inputChange, {\n      type: target.type,\n      name: target.name,\n      checked: target.checked,\n      value: target.value }),\n    onTextChange: ({ target }) => onChange(ActionType.textChange, {\n      name: target.name,\n      value: target.value }),\n    onEditorChange: payload => onChange(ActionType.editorChange, payload) }) : ___EmotionJSX(React.Fragment, null,\n  ___EmotionJSX(DatabaseConnectionForm, { dbModel: dbModel, onParametersChange: ({ target }) => onChange(ActionType.parametersChange, {\n      type: target.type,\n      name: target.name,\n      checked: target.checked,\n      value: target.value }),\n    onChange: ({ target }) => onChange(ActionType.textChange, {\n      name: target.name,\n      value: target.value }),\n    getValidation: () => getValidation(db), validationErrors: validationErrors }),\n  ___EmotionJSX(Button, { buttonStyle: \"link\", onClick: () => setDB({\n      type: ActionType.configMethodChange,\n      payload: {\n        configuration_method: CONFIGURATION_METHOD.SQLALCHEMY_URI } }),\n\n    css: buttonLinkStyles }, \"Connect this database with a SQLAlchemy URI string instead\")));\n\n\n\n\n};__signature__(DatabaseModal, \"useReducer{[db, setDB](null)}\\nuseState{[tabKey, setTabKey](DEFAULT_TAB_KEY)}\\nuseAvailableDatabases{[availableDbs, getAvailableDbs]}\\nuseDatabaseValidation{[validationErrors, getValidation]}\\nuseState{[hasConnectedDb, setHasConnectedDb](false)}\\nuseState{[dbName, setDbName]('')}\\nuseCommonConf{conf}\\nuseSingleViewResource{{ state: { loading: dbLoading, resource: dbFetched }, fetchResource, createResource, updateResource, }}\\nuseEffect{}\\nuseEffect{}\", () => [useAvailableDatabases, useDatabaseValidation, useCommonConf, useSingleViewResource]);const _default =\nwithToasts(DatabaseModal);export default _default;;(function () {var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined;if (!reactHotLoader) {return;}reactHotLoader.register(DOCUMENTATION_LINK, \"DOCUMENTATION_LINK\", \"/app/superset-frontend/src/views/CRUD/data/database/DatabaseModal/index.tsx\");reactHotLoader.register(ActionType, \"ActionType\", \"/app/superset-frontend/src/views/CRUD/data/database/DatabaseModal/index.tsx\");reactHotLoader.register(dbReducer, \"dbReducer\", \"/app/superset-frontend/src/views/CRUD/data/database/DatabaseModal/index.tsx\");reactHotLoader.register(DEFAULT_TAB_KEY, \"DEFAULT_TAB_KEY\", \"/app/superset-frontend/src/views/CRUD/data/database/DatabaseModal/index.tsx\");reactHotLoader.register(FALSY_FORM_VALUES, \"FALSY_FORM_VALUES\", \"/app/superset-frontend/src/views/CRUD/data/database/DatabaseModal/index.tsx\");reactHotLoader.register(DatabaseModal, \"DatabaseModal\", \"/app/superset-frontend/src/views/CRUD/data/database/DatabaseModal/index.tsx\");reactHotLoader.register(_default, \"default\", \"/app/superset-frontend/src/views/CRUD/data/database/DatabaseModal/index.tsx\");})();;(function () {var leaveModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.leaveModule : undefined;leaveModule && leaveModule(module);})();","map":{"version":3,"sources":["/app/superset-frontend/src/views/CRUD/data/database/DatabaseModal/index.tsx"],"names":[],"mappings":"6sBAAA;;;;;;;;;;;;;;;;;AAiBG;AACH,SAAS,CAAT,QAAiC,mBAAjC;AACA,OAAO,KAAP,IAEE,SAFF,EAGE,QAHF,EAIE,UAJF,QAMO,OANP;AAOA,OAAO,IAAP,MAAiB,qBAAjB;AACA,SAAS,KAAT,QAAsB,uBAAtB;AACA,OAAO,KAAP,MAAkB,sBAAlB;AACA,OAAO,MAAP,MAAmB,uBAAnB;AACA,OAAO,UAAP,MAAuB,wCAAvB;AACA,SACE,sBADF,EAEE,qBAFF,EAGE,qBAHF,EAIE,qBAJF,QAKO,sBALP;AAMA,SAAS,aAAT,QAA8B,oCAA9B;AACA,SAGE,oBAHF,QAIO,oCAJP;AAKA,OAAO,YAAP,MAAyB,gBAAzB;AACA,OAAO,cAAP,MAA2B,kBAA3B;AAEA,OAAO,sBAAP,MAAmC,0BAAnC;AACA,SACE,eADF,EAEE,wBAFF,EAGE,eAHF,EAIE,cAJF,EAKE,gBALF,EAME,SANF,EAOE,oBAPF,EAQE,iBARF,EASE,kBATF,EAUE,eAVF,EAWE,gBAXF,EAYE,UAZF,EAaE,cAbF,QAcO,UAdP,C;AAgBA,MAAM,kBAAkB,GACtB,wEADF;AAYA,IAAK,UAAL;AAAA,CAAA,UAAK,UAAL,EAAe;AACb,EAAA,UAAA,CAAA,UAAA,CAAA,oBAAA,CAAA,GAAA,CAAA,CAAA,GAAA,oBAAA;AACA,EAAA,UAAA,CAAA,UAAA,CAAA,YAAA,CAAA,GAAA,CAAA,CAAA,GAAA,YAAA;AACA,EAAA,UAAA,CAAA,UAAA,CAAA,cAAA,CAAA,GAAA,CAAA,CAAA,GAAA,cAAA;AACA,EAAA,UAAA,CAAA,UAAA,CAAA,SAAA,CAAA,GAAA,CAAA,CAAA,GAAA,SAAA;AACA,EAAA,UAAA,CAAA,UAAA,CAAA,aAAA,CAAA,GAAA,CAAA,CAAA,GAAA,aAAA;AACA,EAAA,UAAA,CAAA,UAAA,CAAA,kBAAA,CAAA,GAAA,CAAA,CAAA,GAAA,kBAAA;AACA,EAAA,UAAA,CAAA,UAAA,CAAA,OAAA,CAAA,GAAA,CAAA,CAAA,GAAA,OAAA;AACA,EAAA,UAAA,CAAA,UAAA,CAAA,YAAA,CAAA,GAAA,CAAA,CAAA,GAAA,YAAA;AACD,CATD,EAAK,UAAU,KAAV,UAAU,GAAA,EAAA,CAAf;AAgDA,SAAS,SAAT,CACE,KADF,EAEE,MAFF,EAE6B;AAE3B,QAAM,YAAY,GAAG;AACnB,QAAI,KAAK,IAAI,EAAb,CADmB,EAArB;;AAIA,UAAQ,MAAM,CAAC,IAAf;AACE,SAAK,UAAU,CAAC,WAAhB;AACE,UAAI,MAAM,CAAC,OAAP,CAAe,IAAf,KAAwB,UAA5B,EAAwC;AACtC,eAAO;AACL,aAAG,YADE;AAEL,WAAC,MAAM,CAAC,OAAP,CAAe,IAAhB,GAAuB,MAAM,CAAC,OAAP,CAAe,OAFjC,EAAP;;AAID;AACD,aAAO;AACL,WAAG,YADE;AAEL,SAAC,MAAM,CAAC,OAAP,CAAe,IAAhB,GAAuB,MAAM,CAAC,OAAP,CAAe,KAFjC,EAAP;;AAIF,SAAK,UAAU,CAAC,gBAAhB;AACE,aAAO;AACL,WAAG,YADE;AAEL,QAAA,UAAU,EAAE;AACV,aAAG,YAAY,CAAC,UADN;AAEV,WAAC,MAAM,CAAC,OAAP,CAAe,IAAhB,GAAuB,MAAM,CAAC,OAAP,CAAe,KAF5B,EAFP,EAAP;;;AAOF,SAAK,UAAU,CAAC,YAAhB;AACE,aAAO;AACL,WAAG,YADE;AAEL,SAAC,MAAM,CAAC,OAAP,CAAe,IAAhB,GAAuB,MAAM,CAAC,OAAP,CAAe,IAFjC,EAAP;;AAIF,SAAK,UAAU,CAAC,UAAhB;AACE,aAAO;AACL,WAAG,YADE;AAEL,SAAC,MAAM,CAAC,OAAP,CAAe,IAAhB,GAAuB,MAAM,CAAC,OAAP,CAAe,KAFjC,EAAP;;AAIF,SAAK,UAAU,CAAC,OAAhB;AACE,aAAO;AACL,QAAA,MAAM,EAAE,YAAY,CAAC,MADhB;AAEL,QAAA,oBAAoB,EAAE,YAAY,CAAC,oBAF9B;AAGL,WAAG,MAAM,CAAC,OAHL,EAAP;;AAKF,SAAK,UAAU,CAAC,UAAhB;AACA,SAAK,UAAU,CAAC,kBAAhB;AACE,aAAO;AACL,WAAG,MAAM,CAAC,OADL,EAAP;;AAGF,SAAK,UAAU,CAAC,KAAhB;AACA;AACE,aAAO,EAAP,CA3CJ;;AA6CD;AAED,MAAM,eAAe,GAAG,GAAxB;AACA,MAAM,iBAAiB,GAAG,CAAC,SAAD,EAAY,IAAZ,EAAkB,EAAlB,CAA1B;AAEA,MAAM,aAAa,GAA0C,CAAC,EAC5D,cAD4D,EAE5D,eAF4D,EAG5D,aAH4D,EAI5D,MAJ4D,EAK5D,IAL4D,EAM5D,UAN4D,EAAD,KAOxD;AACH,QAAM,CAAC,EAAD,EAAK,KAAL,IAAc,UAAU,CAE5B,SAF4B,EAEjB,IAFiB,CAA9B;AAGA,QAAM,CAAC,MAAD,EAAS,SAAT,IAAsB,QAAQ,CAAS,eAAT,CAApC;AACA,QAAM,CAAC,YAAD,EAAe,eAAf,IAAkC,qBAAqB,EAA7D;AACA,QAAM,CAAC,gBAAD,EAAmB,aAAnB,IAAoC,qBAAqB,EAA/D;AACA,QAAM,CAAC,cAAD,EAAiB,iBAAjB,IAAsC,QAAQ,CAAU,KAAV,CAApD;AACA,QAAM,CAAC,MAAD,EAAS,SAAT,IAAsB,QAAQ,CAAC,EAAD,CAApC;AACA,QAAM,IAAI,GAAG,aAAa,EAA1B;AAEA,QAAM,UAAU,GAAG,CAAC,CAAC,UAArB;AACA,QAAM,iBAAiB,GACrB,CAAA,EAAE,QAAF,YAAA,EAAE,CAAE,oBAAJ,MAA6B,oBAAoB,CAAC,cADpD;AAEA,QAAM,YAAY,GAAG,UAAU,IAAI,iBAAnC;AAEA;AACA,QAAM,EACJ,KAAK,EAAE,EAAE,OAAO,EAAE,SAAX,EAAsB,QAAQ,EAAE,SAAhC,EADH,EAEJ,aAFI,EAGJ,cAHI,EAIJ,cAJI,KAKF,qBAAqB,CACvB,UADuB,EAEvB,CAAC,CAAC,UAAD,CAFsB,EAGvB,cAHuB,CALzB;AAWA;AACA,QAAM,cAAc,GAAG,MAAK;AAC1B,QAAI,EAAC,EAAD,YAAC,EAAE,CAAE,cAAL,CAAJ,EAAyB;AACvB,MAAA,cAAc,CAAC,CAAC,CAAC,uCAAD,CAAF,CAAd;AACA;AACD;AAED,UAAM,UAAU,GAAG;AACjB,MAAA,cAAc,EAAE,CAAA,EAAE,QAAF,YAAA,EAAE,CAAE,cAAJ,KAAsB,EADrB;AAEjB,MAAA,aAAa,EAAE,CAAA,EAAE,QAAF,iCAAA,EAAE,CAAE,aAAJ,0FAA6B,SAF3B;AAGjB,MAAA,gBAAgB,EAAE,CAAA,EAAE,QAAF,YAAA,EAAE,CAAE,gBAAJ,KAAwB,SAHzB;AAIjB,MAAA,KAAK,EAAE,CAAA,EAAE,QAAF,YAAA,EAAE,CAAE,KAAJ,KAAa,SAJH;AAKjB,MAAA,eAAe,EAAE,CAAA,EAAE,QAAF,YAAA,EAAE,CAAE,eAAJ,KAAuB,SALvB;AAMjB,MAAA,WAAW,EAAE,CAAA,EAAE,QAAF,YAAA,EAAE,CAAE,WAAJ,KAAmB,SANf,EAAnB;;AASA,IAAA,sBAAsB,CAAC,UAAD,EAAa,cAAb,EAA6B,eAA7B,CAAtB;AACD,GAhBD;AAkBA,QAAM,OAAO,GAAG,MAAK;AACnB,IAAA,KAAK,CAAC,EAAE,IAAI,EAAE,UAAU,CAAC,KAAnB,EAAD,CAAL;AACA,IAAA,iBAAiB,CAAC,KAAD,CAAjB;AACA,IAAA,MAAM;AACP,GAJD;AAMA,QAAM,MAAM,GAAG,YAAW;AACxB;AACA,UAAM,EAAE,EAAF,EAAM,GAAG,MAAT,KAAoB,EAAE,IAAI,EAAhC;AACA,QAAI,EAAJ,YAAI,EAAE,CAAE,EAAR,EAAY;AACV,UAAI,EAAE,CAAC,cAAP,EAAuB;AACrB;AACA,eAAO,MAAM,CAAC,UAAd;AACD;AACD,YAAM,MAAM,GAAG,MAAM,cAAc,CACjC,EAAE,CAAC,EAD8B,EAEjC,MAFiC,CAAnC;AAIA,UAAI,MAAJ,EAAY;AACV,YAAI,aAAJ,EAAmB;AACjB,UAAA,aAAa;AACd;AACD,QAAA,OAAO;AACR;AACF,KAfD;AAeO,QAAI,EAAJ,EAAQ;AACb;AACA,YAAM,IAAI,GAAG,MAAM,cAAc,CAAC,MAAD,CAAjC;AACA,UAAI,IAAJ,EAAU;AACR,QAAA,iBAAiB,CAAC,IAAD,CAAjB;AACA,YAAI,aAAJ,EAAmB;AACjB,UAAA,aAAa;AACd;AACD,YAAI,YAAJ,EAAkB;AAChB;AACA;AACA,UAAA,OAAO;AACR;AACF;AACF;AACF,GAjCD;AAmCA,QAAM,QAAQ,GAAG,CAAC,IAAD,EAAY,OAAZ,KAA4B;AAC3C,IAAA,KAAK,CAAC,EAAE,IAAF,EAAQ,OAAR,EAAD,CAAL;AACD,GAFD;AAIA;AACA,QAAM,OAAO,GAAG,MAAK;AACnB,QAAI,UAAU,IAAI,UAAlB,EAA8B;AAC5B,UAAI,CAAC,SAAL,EAAgB;AACd,QAAA,aAAa,CAAC,UAAD,CAAb,CAA0B,KAA1B,CAAgC,CAAC,IAC/B,cAAc,CACZ,CAAC,CACC,4DADD,EAEC,CAAC,CAAC,OAFH,CADW,CADhB;AAQD;AACF;AACF,GAbD;AAeA,EAAA,SAAS,CAAC,MAAK;AACb,QAAI,IAAJ,EAAU;AACR,MAAA,SAAS,CAAC,eAAD,CAAT;AACA,MAAA,eAAe;AACf,MAAA,KAAK,CAAC;AACJ,QAAA,IAAI,EAAE,UAAU,CAAC,UADb;AAEJ,QAAA,OAAO,EAAE;AACP,UAAA,oBAAoB,EAAE,oBAAoB,CAAC,cADpC,EAFL,EAAD,CAAL;;;AAMD;AACD,QAAI,UAAU,IAAI,IAAlB,EAAwB;AACtB,MAAA,OAAO;AACR;AACF,GAdQ,EAcN,CAAC,IAAD,EAAO,UAAP,CAdM,CAAT;AAgBA,EAAA,SAAS,CAAC,MAAK;AACb,QAAI,SAAJ,EAAe;AACb,MAAA,KAAK,CAAC;AACJ,QAAA,IAAI,EAAE,UAAU,CAAC,OADb;AAEJ,QAAA,OAAO,EAAE,SAFL,EAAD,CAAL;;AAIA;AACA;AACA,MAAA,SAAS,CAAC,SAAS,CAAC,aAAX,CAAT;AACD;AACF,GAVQ,EAUN,CAAC,SAAD,CAVM,CAAT;AAYA,QAAM,SAAS,GAAI,GAAD,IAAgB;AAChC,IAAA,SAAS,CAAC,GAAD,CAAT;AACD,GAFD;AAIA,QAAM,OAAO,GACX,CAAA,YAAY,QAAZ,qCAAA,YAAY,CAAE,SAAd,8FACG,SAAD,IACE,SAAS,CAAC,MAAV,MAAqB,EAArB,oBAAqB,EAAE,CAAE,MAAzB,CAFJ,MAGK,EAJP;AAMA,QAAM,WAAW,GACf,CAAC,cAAD;AACC,EAAA,iBAAiB;AACd,IAAE,EAAE,QAAF,0BAAA,EAAE,CAAE,aAAJ,mFAA6B,EAA7B,YAA6B,EAAE,CAAE,cAAnC,CADc;AAEd;AACA;AACA,IAAC,OAAD,YAAC,OAAO,CAAE,UAAV;AACA,GAAC,CAAC,mCAAA,OAAO,CAAC,UAAR,CAAmB,QAAnB,iBAAmC,KAAK,+BACxC,0BAAA,iBAAiB,MAAjB,CAAA,iBAAiB,EAAU,EAAV,sCAAU,EAAE,CAAE,UAAd,qBAAU,eAAiB,KAAjB,CAAV,CADuB,EAAxC,EAEA,MARN,CADF;AAWA,SAAO,YAAY,GACjB,cAAC,KAAD,IACE,GAAG,EAAG,KAAD,IAA0B;AAC7B,IAAA,cAD6B;AAE7B,IAAA,eAAe,CAAC,KAAD,CAFc;AAG7B,IAAA,wBAH6B;AAI7B,IAAA,gBAAgB,CAAC,KAAD,CAJa,CADjC;AAOE,IAAA,IAAI,EAAC,UAPP,EAQE,oBAAoB,EAAE,WARxB,EASE,aAAU,gBATZ,EAUE,MAAM,EAAC,OAVT,EAWE,sBAAsB,EAAE,MAX1B,EAYE,MAAM,EAAE,OAZV,EAaE,iBAAiB,EAAE,UAAU,GAAG,CAAC,CAAC,MAAD,CAAJ,GAAe,CAAC,CAAC,SAAD,CAb/C,EAcE,KAAK,EAAC,OAdR,EAeE,IAAI,EAAE,IAfR,EAgBE,KAAK,EACH,0BAAK,UAAU,GAAG,CAAC,CAAC,eAAD,CAAJ,GAAwB,CAAC,CAAC,oBAAD,CAAxC,CAjBJ;AAoBG,EAAA,UAAU,GACT,cAAC,SAAD;AACE,gBAAC,eAAD,QAAkB,EAAlB,oBAAkB,EAAE,CAAE,OAAtB,CADF;AAEE,gBAAC,kBAAD,QAAqB,MAArB,CAFF,CADS;AAMT,gBAAC,SAAD;AACE,gBAAC,iBAAD,oCADF;AAEE,gBAAC,oBAAD;AACgD,KADhD;AAEE,uBACE,IAAI,EAAE,kBADR,EAEE,MAAM,EAAC,QAFT,EAGE,GAAG,EAAC,qBAHN,WAFF,MAFF,CA1BJ;;;;;;AAyCE,2BAzCF;AA0CE,gBAAC,IAAD,IACE,gBAAgB,EAAE,eADpB,EAEE,SAAS,EAAE,MAFb,EAGE,UAAU,EAAE,SAHd,EAIE,QAAQ,EAAE,EAAE,MAAM,EAAE,IAAV,EAAgB,OAAO,EAAE,IAAzB,EAJZ;AAME,gBAAC,cAAD,IAAgB,GAAG,EAAE,4BAAO,CAAC,CAAC,OAAD,CAAR,CAArB,EAAgD,GAAG,EAAC,GAApD;AACG,EAAA,iBAAiB,GAChB,cAAC,cAAD,IACE,EAAE,EAAE,EADN,EAEE,aAAa,EAAE,CAAC,EAAE,MAAF,EAAD,KACb,QAAQ,CAAC,UAAU,CAAC,WAAZ,EAAyB;AAC/B,MAAA,IAAI,EAAE,MAAM,CAAC,IADkB;AAE/B,MAAA,IAAI,EAAE,MAAM,CAAC,IAFkB;AAG/B,MAAA,OAAO,EAAE,MAAM,CAAC,OAHe;AAI/B,MAAA,KAAK,EAAE,MAAM,CAAC,KAJiB,EAAzB,CAHZ;AAUE,IAAA,IAAI,EAAE,IAVR,EAWE,cAAc,EAAE,cAXlB,GADgB,GAehB;AACE,wCADF,CAhBJ;;AAoBE,gBAAC,KAAD,IACE,GAAG,EAAG,KAAD,IAA0B,eAAe,CAAC,KAAD,CADhD,EAEE,OAAO,EAAC,mCAFV,EAGE,WAAW,EACT;;;AAGuC,OAHvC;AAIE,yBACE,IAAI,EAAE,kBADR,EAEE,MAAM,EAAC,QAFT,EAGE,GAAG,EAAC,qBAHN,WAJF,MAJJ;;;;AAkBE,IAAA,IAAI,EAAC,MAlBP,EAmBE,QAAQ,MAnBV,GApBF,CANF;;AAgDE,gBAAC,IAAD,CAAM,OAAN,IAAc,GAAG,EAAE,4BAAO,CAAC,CAAC,UAAD,CAAR,CAAnB,EAAiD,GAAG,EAAC,GAArD;AACE,gBAAC,YAAD,IACE,EAAE,EAAE,EADN,EAEE,aAAa,EAAE,CAAC,EAAE,MAAF,EAAD,KACb,QAAQ,CAAC,UAAU,CAAC,WAAZ,EAAyB;AAC/B,MAAA,IAAI,EAAE,MAAM,CAAC,IADkB;AAE/B,MAAA,IAAI,EAAE,MAAM,CAAC,IAFkB;AAG/B,MAAA,OAAO,EAAE,MAAM,CAAC,OAHe;AAI/B,MAAA,KAAK,EAAE,MAAM,CAAC,KAJiB,EAAzB,CAHZ;AAUE,IAAA,YAAY,EAAE,CAAC,EAAE,MAAF,EAAD,KACZ,QAAQ,CAAC,UAAU,CAAC,UAAZ,EAAwB;AAC9B,MAAA,IAAI,EAAE,MAAM,CAAC,IADiB;AAE9B,MAAA,KAAK,EAAE,MAAM,CAAC,KAFgB,EAAxB,CAXZ;AAgBE,IAAA,cAAc,EAAG,OAAD,IACd,QAAQ,CAAC,UAAU,CAAC,YAAZ,EAA0B,OAA1B,CAjBZ,GADF,CAhDF,CA1CF,CADiB;;;AAoHjB,gBAAC,KAAD,IACE,GAAG,EAAG,KAAD,IAA0B;AAC7B,IAAA,wBAD6B;AAE7B,IAAA,eAAe,CAAC,KAAD,CAFc;AAG7B,IAAA,gBAAgB,CAAC,KAAD,CAHa;AAI7B,IAAA,UAAU,CAAC,KAAD,CAJmB,CADjC;AAOE,IAAA,IAAI,EAAC,UAPP,EAQE,oBAAoB,EAAE,WARxB,EASE,MAAM,EAAC,OATT,EAUE,sBAAsB,EAAE,MAV1B,EAWE,MAAM,EAAE,OAXV,EAYE,iBAAiB,EAAE,cAAc,GAAG,CAAC,CAAC,QAAD,CAAJ,GAAiB,CAAC,CAAC,SAAD,CAZrD,EAaE,KAAK,EAAC,OAbR,EAcE,IAAI,EAAE,IAdR,EAeE,KAAK,EAAE,0BAAK,CAAC,CAAC,oBAAD,CAAN,CAfT;AAiBG,EAAA,cAAc,GACb,cAAC,YAAD,IACE,EAAE,EAAE,EADN,EAEE,aAAa,EAAE,CAAC,EAAE,MAAF,EAAD,KACb,QAAQ,CAAC,UAAU,CAAC,WAAZ,EAAyB;AAC/B,MAAA,IAAI,EAAE,MAAM,CAAC,IADkB;AAE/B,MAAA,IAAI,EAAE,MAAM,CAAC,IAFkB;AAG/B,MAAA,OAAO,EAAE,MAAM,CAAC,OAHe;AAI/B,MAAA,KAAK,EAAE,MAAM,CAAC,KAJiB,EAAzB,CAHZ;AAUE,IAAA,YAAY,EAAE,CAAC,EAAE,MAAF,EAAD,KACZ,QAAQ,CAAC,UAAU,CAAC,UAAZ,EAAwB;AAC9B,MAAA,IAAI,EAAE,MAAM,CAAC,IADiB;AAE9B,MAAA,KAAK,EAAE,MAAM,CAAC,KAFgB,EAAxB,CAXZ;AAgBE,IAAA,cAAc,EAAG,OAAD,IACd,QAAQ,CAAC,UAAU,CAAC,YAAZ,EAA0B,OAA1B,CAjBZ,GADa,GAsBb;AACE,gBAAC,sBAAD,IACE,OAAO,EAAE,OADX,EAEE,kBAAkB,EAAE,CAAC,EAAE,MAAF,EAAD,KAClB,QAAQ,CAAC,UAAU,CAAC,gBAAZ,EAA8B;AACpC,MAAA,IAAI,EAAE,MAAM,CAAC,IADuB;AAEpC,MAAA,IAAI,EAAE,MAAM,CAAC,IAFuB;AAGpC,MAAA,OAAO,EAAE,MAAM,CAAC,OAHoB;AAIpC,MAAA,KAAK,EAAE,MAAM,CAAC,KAJsB,EAA9B,CAHZ;AAUE,IAAA,QAAQ,EAAE,CAAC,EAAE,MAAF,EAAD,KACR,QAAQ,CAAC,UAAU,CAAC,UAAZ,EAAwB;AAC9B,MAAA,IAAI,EAAE,MAAM,CAAC,IADiB;AAE9B,MAAA,KAAK,EAAE,MAAM,CAAC,KAFgB,EAAxB,CAXZ;AAgBE,IAAA,aAAa,EAAE,MAAM,aAAa,CAAC,EAAD,CAhBpC,EAiBE,gBAAgB,EAAE,gBAjBpB,GADF;AAoBE,gBAAC,MAAD,IACE,WAAW,EAAC,MADd,EAEE,OAAO,EAAE,MACP,KAAK,CAAC;AACJ,MAAA,IAAI,EAAE,UAAU,CAAC,kBADb;AAEJ,MAAA,OAAO,EAAE;AACP,QAAA,oBAAoB,EAAE,oBAAoB,CAAC,cADpC,EAFL,EAAD,CAHT;;AAUE,IAAA,GAAG,EAAE,gBAVP,iEApBF,CAvCJ,CApHF;;;;;AAiMD,CArWD,C,cAAM,a,mdAYoC,qB,EACE,qB,EAG7B,a,EAaT,qB;AA0US,UAAU,CAAC,aAAD,C,CAAzB,wB,iLA7dM,kB,+HAYD,U,uHAgDI,S,sHAuDH,e,4HACA,iB,8HAEA,a","sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { t, SupersetTheme } from '@superset-ui/core';\nimport React, {\n  FunctionComponent,\n  useEffect,\n  useState,\n  useReducer,\n  Reducer,\n} from 'react';\nimport Tabs from 'src/components/Tabs';\nimport { Alert } from 'src/common/components';\nimport Modal from 'src/components/Modal';\nimport Button from 'src/components/Button';\nimport withToasts from 'src/messageToasts/enhancers/withToasts';\nimport {\n  testDatabaseConnection,\n  useSingleViewResource,\n  useAvailableDatabases,\n  useDatabaseValidation,\n} from 'src/views/CRUD/hooks';\nimport { useCommonConf } from 'src/views/CRUD/data/database/state';\nimport {\n  DatabaseObject,\n  DatabaseForm,\n  CONFIGURATION_METHOD,\n} from 'src/views/CRUD/data/database/types';\nimport ExtraOptions from './ExtraOptions';\nimport SqlAlchemyForm from './SqlAlchemyForm';\n\nimport DatabaseConnectionForm from './DatabaseConnectionForm';\nimport {\n  antDAlertStyles,\n  antDModalNoPaddingStyles,\n  antDModalStyles,\n  antDTabsStyles,\n  buttonLinkStyles,\n  TabHeader,\n  CreateHeaderSubtitle,\n  CreateHeaderTitle,\n  EditHeaderSubtitle,\n  EditHeaderTitle,\n  formHelperStyles,\n  formStyles,\n  StyledBasicTab,\n} from './styles';\n\nconst DOCUMENTATION_LINK =\n  'https://superset.apache.org/docs/databases/installing-database-drivers';\n\ninterface DatabaseModalProps {\n  addDangerToast: (msg: string) => void;\n  addSuccessToast: (msg: string) => void;\n  onDatabaseAdd?: (database?: DatabaseObject) => void; // TODO: should we add a separate function for edit?\n  onHide: () => void;\n  show: boolean;\n  databaseId: number | undefined; // If included, will go into edit mode\n}\n\nenum ActionType {\n  configMethodChange,\n  dbSelected,\n  editorChange,\n  fetched,\n  inputChange,\n  parametersChange,\n  reset,\n  textChange,\n}\n\ninterface DBReducerPayloadType {\n  target?: string;\n  name: string;\n  json?: {};\n  type?: string;\n  checked?: boolean;\n  value?: string;\n}\n\ntype DBReducerActionType =\n  | {\n      type:\n        | ActionType.textChange\n        | ActionType.inputChange\n        | ActionType.editorChange\n        | ActionType.parametersChange;\n      payload: DBReducerPayloadType;\n    }\n  | {\n      type: ActionType.fetched;\n      payload: Partial<DatabaseObject>;\n    }\n  | {\n      type: ActionType.dbSelected;\n      payload: {\n        engine?: string;\n        configuration_method: CONFIGURATION_METHOD;\n      };\n    }\n  | {\n      type: ActionType.reset;\n    }\n  | {\n      type: ActionType.configMethodChange;\n      payload: { configuration_method: CONFIGURATION_METHOD };\n    };\n\nfunction dbReducer(\n  state: Partial<DatabaseObject> | null,\n  action: DBReducerActionType,\n): Partial<DatabaseObject> | null {\n  const trimmedState = {\n    ...(state || {}),\n  };\n\n  switch (action.type) {\n    case ActionType.inputChange:\n      if (action.payload.type === 'checkbox') {\n        return {\n          ...trimmedState,\n          [action.payload.name]: action.payload.checked,\n        };\n      }\n      return {\n        ...trimmedState,\n        [action.payload.name]: action.payload.value,\n      };\n    case ActionType.parametersChange:\n      return {\n        ...trimmedState,\n        parameters: {\n          ...trimmedState.parameters,\n          [action.payload.name]: action.payload.value,\n        },\n      };\n    case ActionType.editorChange:\n      return {\n        ...trimmedState,\n        [action.payload.name]: action.payload.json,\n      };\n    case ActionType.textChange:\n      return {\n        ...trimmedState,\n        [action.payload.name]: action.payload.value,\n      };\n    case ActionType.fetched:\n      return {\n        engine: trimmedState.engine,\n        configuration_method: trimmedState.configuration_method,\n        ...action.payload,\n      };\n    case ActionType.dbSelected:\n    case ActionType.configMethodChange:\n      return {\n        ...action.payload,\n      };\n    case ActionType.reset:\n    default:\n      return {};\n  }\n}\n\nconst DEFAULT_TAB_KEY = '1';\nconst FALSY_FORM_VALUES = [undefined, null, ''];\n\nconst DatabaseModal: FunctionComponent<DatabaseModalProps> = ({\n  addDangerToast,\n  addSuccessToast,\n  onDatabaseAdd,\n  onHide,\n  show,\n  databaseId,\n}) => {\n  const [db, setDB] = useReducer<\n    Reducer<Partial<DatabaseObject> | null, DBReducerActionType>\n  >(dbReducer, null);\n  const [tabKey, setTabKey] = useState<string>(DEFAULT_TAB_KEY);\n  const [availableDbs, getAvailableDbs] = useAvailableDatabases();\n  const [validationErrors, getValidation] = useDatabaseValidation();\n  const [hasConnectedDb, setHasConnectedDb] = useState<boolean>(false);\n  const [dbName, setDbName] = useState('');\n  const conf = useCommonConf();\n\n  const isEditMode = !!databaseId;\n  const useSqlAlchemyForm =\n    db?.configuration_method === CONFIGURATION_METHOD.SQLALCHEMY_URI;\n  const useTabLayout = isEditMode || useSqlAlchemyForm;\n\n  // Database fetch logic\n  const {\n    state: { loading: dbLoading, resource: dbFetched },\n    fetchResource,\n    createResource,\n    updateResource,\n  } = useSingleViewResource<DatabaseObject>(\n    'database',\n    t('database'),\n    addDangerToast,\n  );\n\n  // Test Connection logic\n  const testConnection = () => {\n    if (!db?.sqlalchemy_uri) {\n      addDangerToast(t('Please enter a SQLAlchemy URI to test'));\n      return;\n    }\n\n    const connection = {\n      sqlalchemy_uri: db?.sqlalchemy_uri || '',\n      database_name: db?.database_name?.trim() || undefined,\n      impersonate_user: db?.impersonate_user || undefined,\n      extra: db?.extra || undefined,\n      encrypted_extra: db?.encrypted_extra || undefined,\n      server_cert: db?.server_cert || undefined,\n    };\n\n    testDatabaseConnection(connection, addDangerToast, addSuccessToast);\n  };\n\n  const onClose = () => {\n    setDB({ type: ActionType.reset });\n    setHasConnectedDb(false);\n    onHide();\n  };\n\n  const onSave = async () => {\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    const { id, ...update } = db || {};\n    if (db?.id) {\n      if (db.sqlalchemy_uri) {\n        // don't pass parameters if using the sqlalchemy uri\n        delete update.parameters;\n      }\n      const result = await updateResource(\n        db.id as number,\n        update as DatabaseObject,\n      );\n      if (result) {\n        if (onDatabaseAdd) {\n          onDatabaseAdd();\n        }\n        onClose();\n      }\n    } else if (db) {\n      // Create\n      const dbId = await createResource(update as DatabaseObject);\n      if (dbId) {\n        setHasConnectedDb(true);\n        if (onDatabaseAdd) {\n          onDatabaseAdd();\n        }\n        if (useTabLayout) {\n          // tab layout only has one step\n          // so it should close immediately on save\n          onClose();\n        }\n      }\n    }\n  };\n\n  const onChange = (type: any, payload: any) => {\n    setDB({ type, payload } as DBReducerActionType);\n  };\n\n  // Initialize\n  const fetchDB = () => {\n    if (isEditMode && databaseId) {\n      if (!dbLoading) {\n        fetchResource(databaseId).catch(e =>\n          addDangerToast(\n            t(\n              'Sorry there was an error fetching database information: %s',\n              e.message,\n            ),\n          ),\n        );\n      }\n    }\n  };\n\n  useEffect(() => {\n    if (show) {\n      setTabKey(DEFAULT_TAB_KEY);\n      getAvailableDbs();\n      setDB({\n        type: ActionType.dbSelected,\n        payload: {\n          configuration_method: CONFIGURATION_METHOD.SQLALCHEMY_URI,\n        }, // todo hook this up to step 1\n      });\n    }\n    if (databaseId && show) {\n      fetchDB();\n    }\n  }, [show, databaseId]);\n\n  useEffect(() => {\n    if (dbFetched) {\n      setDB({\n        type: ActionType.fetched,\n        payload: dbFetched,\n      });\n      // keep a copy of the name separate for display purposes\n      // because it shouldn't change when the form is updated\n      setDbName(dbFetched.database_name);\n    }\n  }, [dbFetched]);\n\n  const tabChange = (key: string) => {\n    setTabKey(key);\n  };\n\n  const dbModel: DatabaseForm =\n    availableDbs?.databases?.find(\n      (available: { engine: string | undefined }) =>\n        available.engine === db?.engine,\n    ) || {};\n\n  const disableSave =\n    !hasConnectedDb &&\n    (useSqlAlchemyForm\n      ? !(db?.database_name?.trim() && db?.sqlalchemy_uri)\n      : // disable the button if there is no dbModel.parameters or if\n        // any required fields are falsy\n        !dbModel?.parameters ||\n        !!dbModel.parameters.required.filter(field =>\n          FALSY_FORM_VALUES.includes(db?.parameters?.[field]),\n        ).length);\n\n  return useTabLayout ? (\n    <Modal\n      css={(theme: SupersetTheme) => [\n        antDTabsStyles,\n        antDModalStyles(theme),\n        antDModalNoPaddingStyles,\n        formHelperStyles(theme),\n      ]}\n      name=\"database\"\n      disablePrimaryButton={disableSave}\n      data-test=\"database-modal\"\n      height=\"600px\"\n      onHandledPrimaryAction={onSave}\n      onHide={onClose}\n      primaryButtonName={isEditMode ? t('Save') : t('Connect')}\n      width=\"500px\"\n      show={show}\n      title={\n        <h4>{isEditMode ? t('Edit database') : t('Connect a database')}</h4>\n      }\n    >\n      {isEditMode ? (\n        <TabHeader>\n          <EditHeaderTitle>{db?.backend}</EditHeaderTitle>\n          <EditHeaderSubtitle>{dbName}</EditHeaderSubtitle>\n        </TabHeader>\n      ) : (\n        <TabHeader>\n          <CreateHeaderTitle>Enter Primary Credentials</CreateHeaderTitle>\n          <CreateHeaderSubtitle>\n            Need help? Learn how to connect your database{' '}\n            <a\n              href={DOCUMENTATION_LINK}\n              target=\"_blank\"\n              rel=\"noopener noreferrer\"\n            >\n              here\n            </a>\n            .\n          </CreateHeaderSubtitle>\n        </TabHeader>\n      )}\n      <hr />\n      <Tabs\n        defaultActiveKey={DEFAULT_TAB_KEY}\n        activeKey={tabKey}\n        onTabClick={tabChange}\n        animated={{ inkBar: true, tabPane: true }}\n      >\n        <StyledBasicTab tab={<span>{t('Basic')}</span>} key=\"1\">\n          {useSqlAlchemyForm ? (\n            <SqlAlchemyForm\n              db={db as DatabaseObject}\n              onInputChange={({ target }: { target: HTMLInputElement }) =>\n                onChange(ActionType.inputChange, {\n                  type: target.type,\n                  name: target.name,\n                  checked: target.checked,\n                  value: target.value,\n                })\n              }\n              conf={conf}\n              testConnection={testConnection}\n            />\n          ) : (\n            <div>\n              <p>TODO: form</p>\n            </div>\n          )}\n          <Alert\n            css={(theme: SupersetTheme) => antDAlertStyles(theme)}\n            message=\"Additional fields may be required\"\n            description={\n              <>\n                Select databases require additional fields to be completed in\n                the Advanced tab to successfully connect the database. Learn\n                what requirements your databases has{' '}\n                <a\n                  href={DOCUMENTATION_LINK}\n                  target=\"_blank\"\n                  rel=\"noopener noreferrer\"\n                >\n                  here\n                </a>\n                .\n              </>\n            }\n            type=\"info\"\n            showIcon\n          />\n        </StyledBasicTab>\n        <Tabs.TabPane tab={<span>{t('Advanced')}</span>} key=\"2\">\n          <ExtraOptions\n            db={db as DatabaseObject}\n            onInputChange={({ target }: { target: HTMLInputElement }) =>\n              onChange(ActionType.inputChange, {\n                type: target.type,\n                name: target.name,\n                checked: target.checked,\n                value: target.value,\n              })\n            }\n            onTextChange={({ target }: { target: HTMLTextAreaElement }) =>\n              onChange(ActionType.textChange, {\n                name: target.name,\n                value: target.value,\n              })\n            }\n            onEditorChange={(payload: { name: string; json: any }) =>\n              onChange(ActionType.editorChange, payload)\n            }\n          />\n        </Tabs.TabPane>\n      </Tabs>\n    </Modal>\n  ) : (\n    <Modal\n      css={(theme: SupersetTheme) => [\n        antDModalNoPaddingStyles,\n        antDModalStyles(theme),\n        formHelperStyles(theme),\n        formStyles(theme),\n      ]}\n      name=\"database\"\n      disablePrimaryButton={disableSave}\n      height=\"600px\"\n      onHandledPrimaryAction={onSave}\n      onHide={onClose}\n      primaryButtonName={hasConnectedDb ? t('Finish') : t('Connect')}\n      width=\"500px\"\n      show={show}\n      title={<h4>{t('Connect a database')}</h4>}\n    >\n      {hasConnectedDb ? (\n        <ExtraOptions\n          db={db as DatabaseObject}\n          onInputChange={({ target }: { target: HTMLInputElement }) =>\n            onChange(ActionType.inputChange, {\n              type: target.type,\n              name: target.name,\n              checked: target.checked,\n              value: target.value,\n            })\n          }\n          onTextChange={({ target }: { target: HTMLTextAreaElement }) =>\n            onChange(ActionType.textChange, {\n              name: target.name,\n              value: target.value,\n            })\n          }\n          onEditorChange={(payload: { name: string; json: any }) =>\n            onChange(ActionType.editorChange, payload)\n          }\n        />\n      ) : (\n        <>\n          <DatabaseConnectionForm\n            dbModel={dbModel}\n            onParametersChange={({ target }: { target: HTMLInputElement }) =>\n              onChange(ActionType.parametersChange, {\n                type: target.type,\n                name: target.name,\n                checked: target.checked,\n                value: target.value,\n              })\n            }\n            onChange={({ target }: { target: HTMLInputElement }) =>\n              onChange(ActionType.textChange, {\n                name: target.name,\n                value: target.value,\n              })\n            }\n            getValidation={() => getValidation(db)}\n            validationErrors={validationErrors}\n          />\n          <Button\n            buttonStyle=\"link\"\n            onClick={() =>\n              setDB({\n                type: ActionType.configMethodChange,\n                payload: {\n                  configuration_method: CONFIGURATION_METHOD.SQLALCHEMY_URI,\n                },\n              })\n            }\n            css={buttonLinkStyles}\n          >\n            Connect this database with a SQLAlchemy URI string instead\n          </Button>\n        </>\n      )}\n    </Modal>\n  );\n};\n\nexport default withToasts(DatabaseModal);\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}