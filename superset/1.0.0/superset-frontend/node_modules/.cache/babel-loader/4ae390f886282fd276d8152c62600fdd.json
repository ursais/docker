{"ast":null,"code":"import _JSON$stringify from \"@babel/runtime-corejs3/core-js-stable/json/stringify\";import _mapInstanceProperty from \"@babel/runtime-corejs3/core-js-stable/instance/map\";(function () {var enterModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.enterModule : undefined;enterModule && enterModule(module);})();var __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default.signature : function (a) {return a;}; /**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { makeApi } from '@superset-ui/core';\nimport { SET_DATA_MASK_FOR_FILTER_CONFIG_FAIL, setDataMaskForFilterConfigComplete } from 'src/dataMask/actions';\nimport { dashboardInfoChanged } from './dashboardInfo';\nexport const SET_FILTER_CONFIG_BEGIN = 'SET_FILTER_CONFIG_BEGIN';\nexport const SET_FILTER_CONFIG_COMPLETE = 'SET_FILTER_CONFIG_COMPLETE';\nexport const SET_FILTER_CONFIG_FAIL = 'SET_FILTER_CONFIG_FAIL';\nexport const SET_IN_SCOPE_STATUS_OF_FILTERS = 'SET_IN_SCOPE_STATUS_OF_FILTERS';\nexport const SET_FILTER_SETS_CONFIG_BEGIN = 'SET_FILTER_SETS_CONFIG_BEGIN';\nexport const SET_FILTER_SETS_CONFIG_COMPLETE = 'SET_FILTER_SETS_CONFIG_COMPLETE';\nexport const SET_FILTER_SETS_CONFIG_FAIL = 'SET_FILTER_SETS_CONFIG_FAIL';\nexport const setFilterConfiguration = filterConfig => async (dispatch, getState) => {var _getState$nativeFilte;\n  dispatch({\n    type: SET_FILTER_CONFIG_BEGIN,\n    filterConfig });\n\n  const { id, metadata } = getState().dashboardInfo;\n  const oldFilters = (_getState$nativeFilte = getState().nativeFilters) == null ? void 0 : _getState$nativeFilte.filters;\n  // TODO extract this out when makeApi supports url parameters\n  const updateDashboard = makeApi({\n    method: 'PUT',\n    endpoint: `/api/v1/dashboard/${id}` });\n\n  const mergedFilterConfig = _mapInstanceProperty(filterConfig).call(filterConfig, filter => {\n    const oldFilter = oldFilters[filter.id];\n    if (!oldFilter) {\n      return filter;\n    }\n    return { ...oldFilter, ...filter };\n  });\n  try {\n    const response = await updateDashboard({\n      json_metadata: _JSON$stringify({\n        ...metadata,\n        native_filter_configuration: mergedFilterConfig }) });\n\n\n    dispatch(dashboardInfoChanged({\n      metadata: JSON.parse(response.result.json_metadata) }));\n\n    dispatch({\n      type: SET_FILTER_CONFIG_COMPLETE,\n      filterConfig: mergedFilterConfig });\n\n    dispatch(setDataMaskForFilterConfigComplete(mergedFilterConfig, oldFilters));\n  }\n  catch (err) {\n    dispatch({\n      type: SET_FILTER_CONFIG_FAIL,\n      filterConfig: mergedFilterConfig });\n\n    dispatch({\n      type: SET_DATA_MASK_FOR_FILTER_CONFIG_FAIL,\n      filterConfig: mergedFilterConfig });\n\n  }\n};\nexport const setInScopeStatusOfFilters = filterScopes => async (dispatch, getState) => {var _getState$nativeFilte2;\n  const filters = (_getState$nativeFilte2 = getState().nativeFilters) == null ? void 0 : _getState$nativeFilte2.filters;\n  const filtersWithScopes = _mapInstanceProperty(filterScopes).call(filterScopes, scope => ({\n    ...filters[scope.filterId],\n    chartsInScope: scope.chartsInScope,\n    tabsInScope: scope.tabsInScope }));\n\n  dispatch({\n    type: SET_IN_SCOPE_STATUS_OF_FILTERS,\n    filterConfig: filtersWithScopes });\n\n};\nexport const setFilterSetsConfiguration = filterSetsConfig => async (dispatch, getState) => {\n  dispatch({\n    type: SET_FILTER_SETS_CONFIG_BEGIN,\n    filterSetsConfig });\n\n  const { id, metadata } = getState().dashboardInfo;\n  // TODO extract this out when makeApi supports url parameters\n  const updateDashboard = makeApi({\n    method: 'PUT',\n    endpoint: `/api/v1/dashboard/${id}` });\n\n  try {\n    const response = await updateDashboard({\n      json_metadata: _JSON$stringify({\n        ...metadata,\n        filter_sets_configuration: filterSetsConfig }) });\n\n\n    const newMetadata = JSON.parse(response.result.json_metadata);\n    dispatch(dashboardInfoChanged({\n      metadata: newMetadata }));\n\n    dispatch({\n      type: SET_FILTER_SETS_CONFIG_COMPLETE,\n      filterSetsConfig: newMetadata == null ? void 0 : newMetadata.filter_sets_configuration });\n\n  }\n  catch (err) {\n    dispatch({ type: SET_FILTER_SETS_CONFIG_FAIL, filterSetsConfig });\n  }\n};\nexport const SAVE_FILTER_SETS = 'SAVE_FILTER_SETS';\nexport function saveFilterSets(name, filtersSetId, dataMask) {\n  return {\n    type: SAVE_FILTER_SETS,\n    name,\n    filtersSetId,\n    dataMask };\n\n}\nexport const SET_FOCUSED_NATIVE_FILTER = 'SET_FOCUSED_NATIVE_FILTER';\nexport const UNSET_FOCUSED_NATIVE_FILTER = 'UNSET_FOCUSED_NATIVE_FILTER';\nexport function setFocusedNativeFilter(id) {\n  return {\n    type: SET_FOCUSED_NATIVE_FILTER,\n    id };\n\n}\nexport function unsetFocusedNativeFilter() {\n  return {\n    type: UNSET_FOCUSED_NATIVE_FILTER };\n\n};(function () {var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined;if (!reactHotLoader) {return;}reactHotLoader.register(SET_FILTER_CONFIG_BEGIN, \"SET_FILTER_CONFIG_BEGIN\", \"/app/superset-frontend/src/dashboard/actions/nativeFilters.ts\");reactHotLoader.register(SET_FILTER_CONFIG_COMPLETE, \"SET_FILTER_CONFIG_COMPLETE\", \"/app/superset-frontend/src/dashboard/actions/nativeFilters.ts\");reactHotLoader.register(SET_FILTER_CONFIG_FAIL, \"SET_FILTER_CONFIG_FAIL\", \"/app/superset-frontend/src/dashboard/actions/nativeFilters.ts\");reactHotLoader.register(SET_IN_SCOPE_STATUS_OF_FILTERS, \"SET_IN_SCOPE_STATUS_OF_FILTERS\", \"/app/superset-frontend/src/dashboard/actions/nativeFilters.ts\");reactHotLoader.register(SET_FILTER_SETS_CONFIG_BEGIN, \"SET_FILTER_SETS_CONFIG_BEGIN\", \"/app/superset-frontend/src/dashboard/actions/nativeFilters.ts\");reactHotLoader.register(SET_FILTER_SETS_CONFIG_COMPLETE, \"SET_FILTER_SETS_CONFIG_COMPLETE\", \"/app/superset-frontend/src/dashboard/actions/nativeFilters.ts\");reactHotLoader.register(SET_FILTER_SETS_CONFIG_FAIL, \"SET_FILTER_SETS_CONFIG_FAIL\", \"/app/superset-frontend/src/dashboard/actions/nativeFilters.ts\");reactHotLoader.register(setFilterConfiguration, \"setFilterConfiguration\", \"/app/superset-frontend/src/dashboard/actions/nativeFilters.ts\");reactHotLoader.register(setInScopeStatusOfFilters, \"setInScopeStatusOfFilters\", \"/app/superset-frontend/src/dashboard/actions/nativeFilters.ts\");reactHotLoader.register(setFilterSetsConfiguration, \"setFilterSetsConfiguration\", \"/app/superset-frontend/src/dashboard/actions/nativeFilters.ts\");reactHotLoader.register(SAVE_FILTER_SETS, \"SAVE_FILTER_SETS\", \"/app/superset-frontend/src/dashboard/actions/nativeFilters.ts\");reactHotLoader.register(saveFilterSets, \"saveFilterSets\", \"/app/superset-frontend/src/dashboard/actions/nativeFilters.ts\");reactHotLoader.register(SET_FOCUSED_NATIVE_FILTER, \"SET_FOCUSED_NATIVE_FILTER\", \"/app/superset-frontend/src/dashboard/actions/nativeFilters.ts\");reactHotLoader.register(UNSET_FOCUSED_NATIVE_FILTER, \"UNSET_FOCUSED_NATIVE_FILTER\", \"/app/superset-frontend/src/dashboard/actions/nativeFilters.ts\");reactHotLoader.register(setFocusedNativeFilter, \"setFocusedNativeFilter\", \"/app/superset-frontend/src/dashboard/actions/nativeFilters.ts\");reactHotLoader.register(unsetFocusedNativeFilter, \"unsetFocusedNativeFilter\", \"/app/superset-frontend/src/dashboard/actions/nativeFilters.ts\");})();;(function () {var leaveModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.leaveModule : undefined;leaveModule && leaveModule(module);})();","map":{"version":3,"sources":["/app/superset-frontend/src/dashboard/actions/nativeFilters.ts"],"names":[],"mappings":"idAAA;;;;;;;;;;;;;;;;;AAiBG;AAEH,SAAS,OAAT,QAAwB,mBAAxB;AAIA,SACE,oCADF,EAEE,kCAFF,QAGO,sBAHP;AAKA,SAAS,oBAAT,QAAqC,iBAArC;AAQA,OAAO,MAAM,uBAAuB,GAAG,yBAAhC;AAKP,OAAO,MAAM,0BAA0B,GAAG,4BAAnC;AAKP,OAAO,MAAM,sBAAsB,GAAG,wBAA/B;AAKP,OAAO,MAAM,8BAA8B,GAAG,gCAAvC;AAKP,OAAO,MAAM,4BAA4B,GAAG,8BAArC;AAKP,OAAO,MAAM,+BAA+B,GAC1C,iCADK;AAMP,OAAO,MAAM,2BAA2B,GAAG,6BAApC;AAMP,OAAO,MAAM,sBAAsB,GACjC,YADoC,IAEjC,OAAO,QAAP,EAA2B,QAA3B,KAAkD;AACrD,EAAA,QAAQ,CAAC;AACP,IAAA,IAAI,EAAE,uBADC;AAEP,IAAA,YAFO,EAAD,CAAR;;AAIA,QAAM,EAAE,EAAF,EAAM,QAAN,KAAmB,QAAQ,GAAG,aAApC;AACA,QAAM,UAAU,4BAAG,QAAQ,GAAG,aAAd,qBAAG,sBAA0B,OAA7C;AAEA;AACA,QAAM,eAAe,GAAG,OAAO,CAG7B;AACA,IAAA,MAAM,EAAE,KADR;AAEA,IAAA,QAAQ,EAAE,qBAAqB,EAAE,EAFjC,EAH6B,CAA/B;;AAQA,QAAM,kBAAkB,GAAG,qBAAA,YAAY,MAAZ,CAAA,YAAY,EAAK,MAAM,IAAG;AACnD,UAAM,SAAS,GAAG,UAAU,CAAC,MAAM,CAAC,EAAR,CAA5B;AACA,QAAI,CAAC,SAAL,EAAgB;AACd,aAAO,MAAP;AACD;AACD,WAAO,EAAE,GAAG,SAAL,EAAgB,GAAG,MAAnB,EAAP;AACD,GANsC,CAAvC;AAQA,MAAI;AACF,UAAM,QAAQ,GAAG,MAAM,eAAe,CAAC;AACrC,MAAA,aAAa,EAAE,gBAAe;AAC5B,WAAG,QADyB;AAE5B,QAAA,2BAA2B,EAAE,kBAFD,EAAf,CADsB,EAAD,CAAtC;;;AAMA,IAAA,QAAQ,CACN,oBAAoB,CAAC;AACnB,MAAA,QAAQ,EAAE,IAAI,CAAC,KAAL,CAAW,QAAQ,CAAC,MAAT,CAAgB,aAA3B,CADS,EAAD,CADd,CAAR;;AAKA,IAAA,QAAQ,CAAC;AACP,MAAA,IAAI,EAAE,0BADC;AAEP,MAAA,YAAY,EAAE,kBAFP,EAAD,CAAR;;AAIA,IAAA,QAAQ,CACN,kCAAkC,CAAC,kBAAD,EAAqB,UAArB,CAD5B,CAAR;AAGD;AAAC,SAAO,GAAP,EAAY;AACZ,IAAA,QAAQ,CAAC;AACP,MAAA,IAAI,EAAE,sBADC;AAEP,MAAA,YAAY,EAAE,kBAFP,EAAD,CAAR;;AAIA,IAAA,QAAQ,CAAC;AACP,MAAA,IAAI,EAAE,oCADC;AAEP,MAAA,YAAY,EAAE,kBAFP,EAAD,CAAR;;AAID;AACF,CAxDM;AA0DP,OAAO,MAAM,yBAAyB,GACpC,YADuC,IAMpC,OAAO,QAAP,EAA2B,QAA3B,KAAkD;AACrD,QAAM,OAAO,6BAAG,QAAQ,GAAG,aAAd,qBAAG,uBAA0B,OAA1C;AACA,QAAM,iBAAiB,GAAG,qBAAA,YAAY,MAAZ,CAAA,YAAY,EAAK,KAAK,KAAK;AACnD,OAAG,OAAO,CAAC,KAAK,CAAC,QAAP,CADyC;AAEnD,IAAA,aAAa,EAAE,KAAK,CAAC,aAF8B;AAGnD,IAAA,WAAW,EAAE,KAAK,CAAC,WAHgC,EAAL,CAAV,CAAtC;;AAKA,EAAA,QAAQ,CAAC;AACP,IAAA,IAAI,EAAE,8BADC;AAEP,IAAA,YAAY,EAAE,iBAFP,EAAD,CAAR;;AAID,CAjBM;AAgCP,OAAO,MAAM,0BAA0B,GACrC,gBADwC,IAErC,OAAO,QAAP,EAA2B,QAA3B,KAAkD;AACrD,EAAA,QAAQ,CAAC;AACP,IAAA,IAAI,EAAE,4BADC;AAEP,IAAA,gBAFO,EAAD,CAAR;;AAIA,QAAM,EAAE,EAAF,EAAM,QAAN,KAAmB,QAAQ,GAAG,aAApC;AAEA;AACA,QAAM,eAAe,GAAG,OAAO,CAG7B;AACA,IAAA,MAAM,EAAE,KADR;AAEA,IAAA,QAAQ,EAAE,qBAAqB,EAAE,EAFjC,EAH6B,CAA/B;;AAQA,MAAI;AACF,UAAM,QAAQ,GAAG,MAAM,eAAe,CAAC;AACrC,MAAA,aAAa,EAAE,gBAAe;AAC5B,WAAG,QADyB;AAE5B,QAAA,yBAAyB,EAAE,gBAFC,EAAf,CADsB,EAAD,CAAtC;;;AAMA,UAAM,WAAW,GAAG,IAAI,CAAC,KAAL,CAAW,QAAQ,CAAC,MAAT,CAAgB,aAA3B,CAApB;AACA,IAAA,QAAQ,CACN,oBAAoB,CAAC;AACnB,MAAA,QAAQ,EAAE,WADS,EAAD,CADd,CAAR;;AAKA,IAAA,QAAQ,CAAC;AACP,MAAA,IAAI,EAAE,+BADC;AAEP,MAAA,gBAAgB,EAAE,WAAF,oBAAE,WAAW,CAAE,yBAFxB,EAAD,CAAR;;AAID;AAAC,SAAO,GAAP,EAAY;AACZ,IAAA,QAAQ,CAAC,EAAE,IAAI,EAAE,2BAAR,EAAqC,gBAArC,EAAD,CAAR;AACD;AACF,CAtCM;AAwCP,OAAO,MAAM,gBAAgB,GAAG,kBAAzB;AAQP,OAAM,SAAU,cAAV,CACJ,IADI,EAEJ,YAFI,EAGJ,QAHI,EAG2D;AAE/D,SAAO;AACL,IAAA,IAAI,EAAE,gBADD;AAEL,IAAA,IAFK;AAGL,IAAA,YAHK;AAIL,IAAA,QAJK,EAAP;;AAMD;AAED,OAAO,MAAM,yBAAyB,GAAG,2BAAlC;AAKP,OAAO,MAAM,2BAA2B,GAAG,6BAApC;AAKP,OAAM,SAAU,sBAAV,CAAiC,EAAjC,EAA2C;AAC/C,SAAO;AACL,IAAA,IAAI,EAAE,yBADD;AAEL,IAAA,EAFK,EAAP;;AAID;AACD,OAAM,SAAU,wBAAV,GAAkC;AACtC,SAAO;AACL,IAAA,IAAI,EAAE,2BADD,EAAP;;AAGD,C,iLAhNY,uB,sHAKA,0B,yHAKA,sB,qHAKA,8B,6HAKA,4B,2HAKA,+B,8HAMA,2B,0HAMA,sB,qHA0DA,yB,wHAgCA,0B,yHAwCA,gB,+GAQG,c,6GAaH,yB,wHAKA,2B,0HAKG,sB,qHAMA,wB","sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport { makeApi } from '@superset-ui/core';\nimport { Dispatch } from 'redux';\nimport { FilterConfiguration } from 'src/dashboard/components/nativeFilters/types';\nimport { DataMaskType, DataMaskStateWithId } from 'src/dataMask/types';\nimport {\n  SET_DATA_MASK_FOR_FILTER_CONFIG_FAIL,\n  setDataMaskForFilterConfigComplete,\n} from 'src/dataMask/actions';\nimport { HYDRATE_DASHBOARD } from './hydrate';\nimport { dashboardInfoChanged } from './dashboardInfo';\nimport {\n  DashboardInfo,\n  Filters,\n  FilterSet,\n  FilterSets,\n} from '../reducers/types';\n\nexport const SET_FILTER_CONFIG_BEGIN = 'SET_FILTER_CONFIG_BEGIN';\nexport interface SetFilterConfigBegin {\n  type: typeof SET_FILTER_CONFIG_BEGIN;\n  filterConfig: FilterConfiguration;\n}\nexport const SET_FILTER_CONFIG_COMPLETE = 'SET_FILTER_CONFIG_COMPLETE';\nexport interface SetFilterConfigComplete {\n  type: typeof SET_FILTER_CONFIG_COMPLETE;\n  filterConfig: FilterConfiguration;\n}\nexport const SET_FILTER_CONFIG_FAIL = 'SET_FILTER_CONFIG_FAIL';\nexport interface SetFilterConfigFail {\n  type: typeof SET_FILTER_CONFIG_FAIL;\n  filterConfig: FilterConfiguration;\n}\nexport const SET_IN_SCOPE_STATUS_OF_FILTERS = 'SET_IN_SCOPE_STATUS_OF_FILTERS';\nexport interface SetInScopeStatusOfFilters {\n  type: typeof SET_IN_SCOPE_STATUS_OF_FILTERS;\n  filterConfig: FilterConfiguration;\n}\nexport const SET_FILTER_SETS_CONFIG_BEGIN = 'SET_FILTER_SETS_CONFIG_BEGIN';\nexport interface SetFilterSetsConfigBegin {\n  type: typeof SET_FILTER_SETS_CONFIG_BEGIN;\n  filterSetsConfig: FilterSet[];\n}\nexport const SET_FILTER_SETS_CONFIG_COMPLETE =\n  'SET_FILTER_SETS_CONFIG_COMPLETE';\nexport interface SetFilterSetsConfigComplete {\n  type: typeof SET_FILTER_SETS_CONFIG_COMPLETE;\n  filterSetsConfig: FilterSet[];\n}\nexport const SET_FILTER_SETS_CONFIG_FAIL = 'SET_FILTER_SETS_CONFIG_FAIL';\nexport interface SetFilterSetsConfigFail {\n  type: typeof SET_FILTER_SETS_CONFIG_FAIL;\n  filterSetsConfig: FilterSet[];\n}\n\nexport const setFilterConfiguration = (\n  filterConfig: FilterConfiguration,\n) => async (dispatch: Dispatch, getState: () => any) => {\n  dispatch({\n    type: SET_FILTER_CONFIG_BEGIN,\n    filterConfig,\n  });\n  const { id, metadata } = getState().dashboardInfo;\n  const oldFilters = getState().nativeFilters?.filters;\n\n  // TODO extract this out when makeApi supports url parameters\n  const updateDashboard = makeApi<\n    Partial<DashboardInfo>,\n    { result: DashboardInfo }\n  >({\n    method: 'PUT',\n    endpoint: `/api/v1/dashboard/${id}`,\n  });\n\n  const mergedFilterConfig = filterConfig.map(filter => {\n    const oldFilter = oldFilters[filter.id];\n    if (!oldFilter) {\n      return filter;\n    }\n    return { ...oldFilter, ...filter };\n  });\n\n  try {\n    const response = await updateDashboard({\n      json_metadata: JSON.stringify({\n        ...metadata,\n        native_filter_configuration: mergedFilterConfig,\n      }),\n    });\n    dispatch(\n      dashboardInfoChanged({\n        metadata: JSON.parse(response.result.json_metadata),\n      }),\n    );\n    dispatch({\n      type: SET_FILTER_CONFIG_COMPLETE,\n      filterConfig: mergedFilterConfig,\n    });\n    dispatch(\n      setDataMaskForFilterConfigComplete(mergedFilterConfig, oldFilters),\n    );\n  } catch (err) {\n    dispatch({\n      type: SET_FILTER_CONFIG_FAIL,\n      filterConfig: mergedFilterConfig,\n    });\n    dispatch({\n      type: SET_DATA_MASK_FOR_FILTER_CONFIG_FAIL,\n      filterConfig: mergedFilterConfig,\n    });\n  }\n};\n\nexport const setInScopeStatusOfFilters = (\n  filterScopes: {\n    filterId: string;\n    chartsInScope: number[];\n    tabsInScope: string[];\n  }[],\n) => async (dispatch: Dispatch, getState: () => any) => {\n  const filters = getState().nativeFilters?.filters;\n  const filtersWithScopes = filterScopes.map(scope => ({\n    ...filters[scope.filterId],\n    chartsInScope: scope.chartsInScope,\n    tabsInScope: scope.tabsInScope,\n  }));\n  dispatch({\n    type: SET_IN_SCOPE_STATUS_OF_FILTERS,\n    filterConfig: filtersWithScopes,\n  });\n};\n\ntype BootstrapData = {\n  nativeFilters: {\n    filters: Filters;\n    filterSets: FilterSets;\n    filtersState: object;\n  };\n};\n\nexport interface SetBootstrapData {\n  type: typeof HYDRATE_DASHBOARD;\n  data: BootstrapData;\n}\n\nexport const setFilterSetsConfiguration = (\n  filterSetsConfig: FilterSet[],\n) => async (dispatch: Dispatch, getState: () => any) => {\n  dispatch({\n    type: SET_FILTER_SETS_CONFIG_BEGIN,\n    filterSetsConfig,\n  });\n  const { id, metadata } = getState().dashboardInfo;\n\n  // TODO extract this out when makeApi supports url parameters\n  const updateDashboard = makeApi<\n    Partial<DashboardInfo>,\n    { result: DashboardInfo }\n  >({\n    method: 'PUT',\n    endpoint: `/api/v1/dashboard/${id}`,\n  });\n\n  try {\n    const response = await updateDashboard({\n      json_metadata: JSON.stringify({\n        ...metadata,\n        filter_sets_configuration: filterSetsConfig,\n      }),\n    });\n    const newMetadata = JSON.parse(response.result.json_metadata);\n    dispatch(\n      dashboardInfoChanged({\n        metadata: newMetadata,\n      }),\n    );\n    dispatch({\n      type: SET_FILTER_SETS_CONFIG_COMPLETE,\n      filterSetsConfig: newMetadata?.filter_sets_configuration,\n    });\n  } catch (err) {\n    dispatch({ type: SET_FILTER_SETS_CONFIG_FAIL, filterSetsConfig });\n  }\n};\n\nexport const SAVE_FILTER_SETS = 'SAVE_FILTER_SETS';\nexport interface SaveFilterSets {\n  type: typeof SAVE_FILTER_SETS;\n  name: string;\n  dataMask: Pick<DataMaskStateWithId, DataMaskType.NativeFilters>;\n  filtersSetId: string;\n}\n\nexport function saveFilterSets(\n  name: string,\n  filtersSetId: string,\n  dataMask: Pick<DataMaskStateWithId, DataMaskType.NativeFilters>,\n): SaveFilterSets {\n  return {\n    type: SAVE_FILTER_SETS,\n    name,\n    filtersSetId,\n    dataMask,\n  };\n}\n\nexport const SET_FOCUSED_NATIVE_FILTER = 'SET_FOCUSED_NATIVE_FILTER';\nexport interface SetFocusedNativeFilter {\n  type: typeof SET_FOCUSED_NATIVE_FILTER;\n  id: string;\n}\nexport const UNSET_FOCUSED_NATIVE_FILTER = 'UNSET_FOCUSED_NATIVE_FILTER';\nexport interface UnsetFocusedNativeFilter {\n  type: typeof UNSET_FOCUSED_NATIVE_FILTER;\n}\n\nexport function setFocusedNativeFilter(id: string): SetFocusedNativeFilter {\n  return {\n    type: SET_FOCUSED_NATIVE_FILTER,\n    id,\n  };\n}\nexport function unsetFocusedNativeFilter(): UnsetFocusedNativeFilter {\n  return {\n    type: UNSET_FOCUSED_NATIVE_FILTER,\n  };\n}\n\nexport type AnyFilterAction =\n  | SetFilterConfigBegin\n  | SetFilterConfigComplete\n  | SetFilterConfigFail\n  | SetFilterSetsConfigBegin\n  | SetFilterSetsConfigComplete\n  | SetFilterSetsConfigFail\n  | SetInScopeStatusOfFilters\n  | SaveFilterSets\n  | SetBootstrapData\n  | SetFocusedNativeFilter\n  | UnsetFocusedNativeFilter;\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}