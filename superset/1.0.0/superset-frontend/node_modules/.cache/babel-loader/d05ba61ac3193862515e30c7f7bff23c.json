{"ast":null,"code":"(function () {var enterModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.enterModule : undefined;enterModule && enterModule(module);})();var __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default.signature : function (a) {return a;};import { FeatureFlag, isFeatureEnabled } from '../featureFlags';\nexport const UPDATE_DATA_MASK = 'UPDATE_DATA_MASK';\nexport const SET_DATA_MASK_FOR_FILTER_CONFIG_COMPLETE = 'SET_DATA_MASK_FOR_FILTER_CONFIG_COMPLETE';\nexport const SET_DATA_MASK_FOR_FILTER_CONFIG_FAIL = 'SET_DATA_MASK_FOR_FILTER_CONFIG_FAIL';\nexport function setDataMaskForFilterConfigComplete(filterConfig, filters) {\n  return {\n    type: SET_DATA_MASK_FOR_FILTER_CONFIG_COMPLETE,\n    filterConfig,\n    filters };\n\n}\nexport function updateDataMask(filterId, dataMask) {\n  // Only apply data mask if one of the relevant features is enabled\n  const isFeatureFlagActive = isFeatureEnabled(FeatureFlag.DASHBOARD_NATIVE_FILTERS) ||\n  isFeatureEnabled(FeatureFlag.DASHBOARD_CROSS_FILTERS);\n  return {\n    type: UPDATE_DATA_MASK,\n    filterId,\n    dataMask: isFeatureFlagActive ? dataMask : {} };\n\n};(function () {var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined;if (!reactHotLoader) {return;}reactHotLoader.register(UPDATE_DATA_MASK, \"UPDATE_DATA_MASK\", \"/app/superset-frontend/src/dataMask/actions.ts\");reactHotLoader.register(SET_DATA_MASK_FOR_FILTER_CONFIG_COMPLETE, \"SET_DATA_MASK_FOR_FILTER_CONFIG_COMPLETE\", \"/app/superset-frontend/src/dataMask/actions.ts\");reactHotLoader.register(SET_DATA_MASK_FOR_FILTER_CONFIG_FAIL, \"SET_DATA_MASK_FOR_FILTER_CONFIG_FAIL\", \"/app/superset-frontend/src/dataMask/actions.ts\");reactHotLoader.register(setDataMaskForFilterConfigComplete, \"setDataMaskForFilterConfigComplete\", \"/app/superset-frontend/src/dataMask/actions.ts\");reactHotLoader.register(updateDataMask, \"updateDataMask\", \"/app/superset-frontend/src/dataMask/actions.ts\");})();;(function () {var leaveModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.leaveModule : undefined;leaveModule && leaveModule(module);})();","map":{"version":3,"sources":["/app/superset-frontend/src/dataMask/actions.ts"],"names":[],"mappings":"uSAoBA,SAAS,WAAT,EAAsB,gBAAtB,QAA8C,iBAA9C;AAGA,OAAO,MAAM,gBAAgB,GAAG,kBAAzB;AAOP,OAAO,MAAM,wCAAwC,GACnD,0CADK;AASP,OAAO,MAAM,oCAAoC,GAC/C,sCADK;AAOP,OAAM,SAAU,kCAAV,CACJ,YADI,EAEJ,OAFI,EAEa;AAEjB,SAAO;AACL,IAAA,IAAI,EAAE,wCADD;AAEL,IAAA,YAFK;AAGL,IAAA,OAHK,EAAP;;AAKD;AACD,OAAM,SAAU,cAAV,CACJ,QADI,EAEJ,QAFI,EAEc;AAElB;AACA,QAAM,mBAAmB,GACvB,gBAAgB,CAAC,WAAW,CAAC,wBAAb,CAAhB;AACA,EAAA,gBAAgB,CAAC,WAAW,CAAC,uBAAb,CAFlB;AAGA,SAAO;AACL,IAAA,IAAI,EAAE,gBADD;AAEL,IAAA,QAFK;AAGL,IAAA,QAAQ,EAAE,mBAAmB,GAAG,QAAH,GAAc,EAHtC,EAAP;;AAKD,C,iLA9CY,gB,gGAOA,wC,wHASA,oC,oHAOG,kC,kHAUA,c","sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { DataMask } from '@superset-ui/core';\nimport { FilterConfiguration } from '../dashboard/components/nativeFilters/types';\nimport { FeatureFlag, isFeatureEnabled } from '../featureFlags';\nimport { Filters } from '../dashboard/reducers/types';\n\nexport const UPDATE_DATA_MASK = 'UPDATE_DATA_MASK';\nexport interface UpdateDataMask {\n  type: typeof UPDATE_DATA_MASK;\n  filterId: string;\n  dataMask: DataMask;\n}\n\nexport const SET_DATA_MASK_FOR_FILTER_CONFIG_COMPLETE =\n  'SET_DATA_MASK_FOR_FILTER_CONFIG_COMPLETE';\n\nexport interface SetDataMaskForFilterConfigComplete {\n  type: typeof SET_DATA_MASK_FOR_FILTER_CONFIG_COMPLETE;\n  filterConfig: FilterConfiguration;\n  filters?: Filters;\n}\n\nexport const SET_DATA_MASK_FOR_FILTER_CONFIG_FAIL =\n  'SET_DATA_MASK_FOR_FILTER_CONFIG_FAIL';\n\nexport interface SetDataMaskForFilterConfigFail {\n  type: typeof SET_DATA_MASK_FOR_FILTER_CONFIG_FAIL;\n  filterConfig: FilterConfiguration;\n}\nexport function setDataMaskForFilterConfigComplete(\n  filterConfig: FilterConfiguration,\n  filters?: Filters,\n): SetDataMaskForFilterConfigComplete {\n  return {\n    type: SET_DATA_MASK_FOR_FILTER_CONFIG_COMPLETE,\n    filterConfig,\n    filters,\n  };\n}\nexport function updateDataMask(\n  filterId: string,\n  dataMask: DataMask,\n): UpdateDataMask {\n  // Only apply data mask if one of the relevant features is enabled\n  const isFeatureFlagActive =\n    isFeatureEnabled(FeatureFlag.DASHBOARD_NATIVE_FILTERS) ||\n    isFeatureEnabled(FeatureFlag.DASHBOARD_CROSS_FILTERS);\n  return {\n    type: UPDATE_DATA_MASK,\n    filterId,\n    dataMask: isFeatureFlagActive ? dataMask : {},\n  };\n}\n\nexport type AnyDataMaskAction =\n  | UpdateDataMask\n  | SetDataMaskForFilterConfigFail\n  | SetDataMaskForFilterConfigComplete;\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}