{"ast":null,"code":"import _keysInstanceProperty from \"@babel/runtime-corejs3/core-js-stable/instance/keys\";import _mapInstanceProperty from \"@babel/runtime-corejs3/core-js-stable/instance/map\";(function () {var enterModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.enterModule : undefined;enterModule && enterModule(module);})();var __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default.signature : function (a) {return a;}; /**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n/* eslint-env browser */\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport { getCategoricalSchemeRegistry, t } from '@superset-ui/core';\n\nimport ColorSchemeControl from 'src/explore/components/controls/ColorSchemeControl';import { jsx as ___EmotionJSX } from \"@emotion/react\";\n\nconst propTypes = {\n  onChange: PropTypes.func,\n  labelMargin: PropTypes.number,\n  colorScheme: PropTypes.string };\n\n\nconst defaultProps = {\n  colorScheme: undefined,\n  onChange: () => {} };\n\n\nclass ColorSchemeControlWrapper extends React.PureComponent {\n  constructor(props) {var _context, _context2;\n    super(props);\n    this.state = { hovered: false };\n    this.categoricalSchemeRegistry = getCategoricalSchemeRegistry();\n    this.choices = _mapInstanceProperty(_context = _keysInstanceProperty(_context2 = this.categoricalSchemeRegistry).call(_context2)).call(_context, s => [s, s]);\n    this.schemes = this.categoricalSchemeRegistry.getMap();\n  }\n\n  setHover(hovered) {\n    this.setState({ hovered });\n  }\n\n  render() {\n    const { colorScheme, labelMargin = 0 } = this.props;\n    return (\n      ___EmotionJSX(ColorSchemeControl, {\n        description: t(\n        \"Any color palette selected here will override the colors applied to this dashboard's individual charts\"),\n\n        label: t('Color scheme'),\n        labelMargin: labelMargin,\n        name: \"color_scheme\",\n        onChange: this.props.onChange,\n        value: colorScheme,\n        choices: this.choices,\n        clearable: true,\n        schemes: this.schemes,\n        hovered: this.state.hovered }));\n\n\n  } // @ts-ignore\n  __reactstandin__regenerateByEval(key, code) {// @ts-ignore\n    this[key] = eval(code);}}\nColorSchemeControlWrapper.propTypes = propTypes;\nColorSchemeControlWrapper.defaultProps = defaultProps;const _default =\n\nColorSchemeControlWrapper;export default _default;;(function () {var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined;if (!reactHotLoader) {return;}reactHotLoader.register(propTypes, \"propTypes\", \"/app/superset-frontend/src/dashboard/components/ColorSchemeControlWrapper.jsx\");reactHotLoader.register(defaultProps, \"defaultProps\", \"/app/superset-frontend/src/dashboard/components/ColorSchemeControlWrapper.jsx\");reactHotLoader.register(ColorSchemeControlWrapper, \"ColorSchemeControlWrapper\", \"/app/superset-frontend/src/dashboard/components/ColorSchemeControlWrapper.jsx\");reactHotLoader.register(_default, \"default\", \"/app/superset-frontend/src/dashboard/components/ColorSchemeControlWrapper.jsx\");})();;(function () {var leaveModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.leaveModule : undefined;leaveModule && leaveModule(module);})();","map":{"version":3,"sources":["/app/superset-frontend/src/dashboard/components/ColorSchemeControlWrapper.jsx"],"names":["PropTypes","React","getCategoricalSchemeRegistry","t","ColorSchemeControl","propTypes","onChange","func","labelMargin","number","colorScheme","string","defaultProps","undefined","ColorSchemeControlWrapper","PureComponent","constructor","props","state","hovered","categoricalSchemeRegistry","choices","s","schemes","getMap","setHover","setState","render"],"mappings":"sdAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAOA,SAAP,MAAsB,YAAtB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,4BAAT,EAAuCC,CAAvC,QAAgD,mBAAhD;;AAEA,OAAOC,kBAAP,MAA+B,oDAA/B,C;;AAEA,MAAMC,SAAS,GAAG;AAChBC,EAAAA,QAAQ,EAAEN,SAAS,CAACO,IADJ;AAEhBC,EAAAA,WAAW,EAAER,SAAS,CAACS,MAFP;AAGhBC,EAAAA,WAAW,EAAEV,SAAS,CAACW,MAHP,EAAlB;;;AAMA,MAAMC,YAAY,GAAG;AACnBF,EAAAA,WAAW,EAAEG,SADM;AAEnBP,EAAAA,QAAQ,EAAE,MAAM,CAAE,CAFC,EAArB;;;AAKA,MAAMQ,yBAAN,SAAwCb,KAAK,CAACc,aAA9C,CAA4D;AAC1DC,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,UAAMA,KAAN;AACA,SAAKC,KAAL,GAAa,EAAEC,OAAO,EAAE,KAAX,EAAb;AACA,SAAKC,yBAAL,GAAiClB,4BAA4B,EAA7D;AACA,SAAKmB,OAAL,GAAe,uEAAKD,yBAAL,kCAA0CE,CAAC,IAAI,CAACA,CAAD,EAAIA,CAAJ,CAA/C,CAAf;AACA,SAAKC,OAAL,GAAe,KAAKH,yBAAL,CAA+BI,MAA/B,EAAf;AACD;;AAEDC,EAAAA,QAAQ,CAACN,OAAD,EAAU;AAChB,SAAKO,QAAL,CAAc,EAAEP,OAAF,EAAd;AACD;;AAEDQ,EAAAA,MAAM,GAAG;AACP,UAAM,EAAEjB,WAAF,EAAeF,WAAW,GAAG,CAA7B,KAAmC,KAAKS,KAA9C;AACA;AACE,oBAAC,kBAAD;AACE,QAAA,WAAW,EAAEd,CAAC;AACZ,gHADY,CADhB;;AAIE,QAAA,KAAK,EAAEA,CAAC,CAAC,cAAD,CAJV;AAKE,QAAA,WAAW,EAAEK,WALf;AAME,QAAA,IAAI,EAAC,cANP;AAOE,QAAA,QAAQ,EAAE,KAAKS,KAAL,CAAWX,QAPvB;AAQE,QAAA,KAAK,EAAEI,WART;AASE,QAAA,OAAO,EAAE,KAAKW,OAThB;AAUE,QAAA,SAAS,MAVX;AAWE,QAAA,OAAO,EAAE,KAAKE,OAXhB;AAYE,QAAA,OAAO,EAAE,KAAKL,KAAL,CAAWC,OAZtB,GADF;;;AAgBD,GA/ByD;AAAA;AAAA;AAkC5DL,yBAAyB,CAACT,SAA1B,GAAsCA,SAAtC;AACAS,yBAAyB,CAACF,YAA1B,GAAyCA,YAAzC,C;;AAEeE,yB,CAAf,wB,iLAhDMT,S,wHAMAO,Y,2HAKAE,yB","sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n/* eslint-env browser */\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport { getCategoricalSchemeRegistry, t } from '@superset-ui/core';\n\nimport ColorSchemeControl from 'src/explore/components/controls/ColorSchemeControl';\n\nconst propTypes = {\n  onChange: PropTypes.func,\n  labelMargin: PropTypes.number,\n  colorScheme: PropTypes.string,\n};\n\nconst defaultProps = {\n  colorScheme: undefined,\n  onChange: () => {},\n};\n\nclass ColorSchemeControlWrapper extends React.PureComponent {\n  constructor(props) {\n    super(props);\n    this.state = { hovered: false };\n    this.categoricalSchemeRegistry = getCategoricalSchemeRegistry();\n    this.choices = this.categoricalSchemeRegistry.keys().map(s => [s, s]);\n    this.schemes = this.categoricalSchemeRegistry.getMap();\n  }\n\n  setHover(hovered) {\n    this.setState({ hovered });\n  }\n\n  render() {\n    const { colorScheme, labelMargin = 0 } = this.props;\n    return (\n      <ColorSchemeControl\n        description={t(\n          \"Any color palette selected here will override the colors applied to this dashboard's individual charts\",\n        )}\n        label={t('Color scheme')}\n        labelMargin={labelMargin}\n        name=\"color_scheme\"\n        onChange={this.props.onChange}\n        value={colorScheme}\n        choices={this.choices}\n        clearable\n        schemes={this.schemes}\n        hovered={this.state.hovered}\n      />\n    );\n  }\n}\n\nColorSchemeControlWrapper.propTypes = propTypes;\nColorSchemeControlWrapper.defaultProps = defaultProps;\n\nexport default ColorSchemeControlWrapper;\n"]},"metadata":{},"sourceType":"module"}