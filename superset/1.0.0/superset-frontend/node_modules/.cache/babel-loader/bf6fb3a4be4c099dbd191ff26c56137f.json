{"ast":null,"code":"import _forEachInstanceProperty from \"@babel/runtime-corejs3/core-js-stable/instance/for-each\";(function () {var enterModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.enterModule : undefined;enterModule && enterModule(module);})();var __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default.signature : function (a) {return a;}; /**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport findParentId from './findParentId';\nimport { GRID_MIN_COLUMN_COUNT, GRID_COLUMN_COUNT } from './constants';\nimport {\nROW_TYPE,\nCOLUMN_TYPE,\nMARKDOWN_TYPE,\nCHART_TYPE } from\n'./componentTypes';\n\nfunction getTotalChildWidth({ id, components }) {var _context;\n  const component = components[id];\n  if (!component) return 0;\n\n  let width = 0;\n\n  _forEachInstanceProperty(_context = component.children || []).call(_context, childId => {\n    const child = components[childId] || {};\n    width += (child.meta || {}).width || 0;\n  });\n\n  return width;\n}\n\nexport default function getDetailedComponentWidth({\n  // pass either an id, or a component\n  id,\n  component: passedComponent,\n  components = {} })\n{\n  const result = {\n    width: undefined,\n    occupiedWidth: undefined,\n    minimumWidth: undefined };\n\n\n  const component = passedComponent || components[id];\n  if (!component) return result;\n\n  // note these remain as undefined if the component has no defined width\n  result.width = (component.meta || {}).width;\n  result.occupiedWidth = result.width;\n\n  if (component.type === ROW_TYPE) {\n    // not all rows have width 12, e\n    result.width =\n    getDetailedComponentWidth({\n      id: findParentId({\n        childId: component.id,\n        layout: components }),\n\n      components }).\n    width || GRID_COLUMN_COUNT;\n    result.occupiedWidth = getTotalChildWidth({ id: component.id, components });\n    result.minimumWidth = result.occupiedWidth || GRID_MIN_COLUMN_COUNT;\n  } else if (component.type === COLUMN_TYPE) {var _context2;\n    // find the width of the largest child, only rows count\n    result.minimumWidth = GRID_MIN_COLUMN_COUNT;\n    result.occupiedWidth = 0;\n    _forEachInstanceProperty(_context2 = component.children || []).call(_context2, childId => {\n      // rows don't have widths, so find the width of its children\n      if (components[childId].type === ROW_TYPE) {\n        result.minimumWidth = Math.max(\n        result.minimumWidth,\n        getTotalChildWidth({ id: childId, components }));\n\n      }\n    });\n  } else if (\n  component.type === MARKDOWN_TYPE ||\n  component.type === CHART_TYPE)\n  {\n    result.minimumWidth = GRID_MIN_COLUMN_COUNT;\n  }\n\n  return result;\n};(function () {var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined;if (!reactHotLoader) {return;}reactHotLoader.register(getTotalChildWidth, \"getTotalChildWidth\", \"/app/superset-frontend/src/dashboard/util/getDetailedComponentWidth.js\");reactHotLoader.register(getDetailedComponentWidth, \"getDetailedComponentWidth\", \"/app/superset-frontend/src/dashboard/util/getDetailedComponentWidth.js\");})();;(function () {var leaveModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.leaveModule : undefined;leaveModule && leaveModule(module);})();","map":{"version":3,"sources":["/app/superset-frontend/src/dashboard/util/getDetailedComponentWidth.js"],"names":["findParentId","GRID_MIN_COLUMN_COUNT","GRID_COLUMN_COUNT","ROW_TYPE","COLUMN_TYPE","MARKDOWN_TYPE","CHART_TYPE","getTotalChildWidth","id","components","component","width","children","childId","child","meta","getDetailedComponentWidth","passedComponent","result","undefined","occupiedWidth","minimumWidth","type","layout","Math","max"],"mappings":"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","sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport findParentId from './findParentId';\nimport { GRID_MIN_COLUMN_COUNT, GRID_COLUMN_COUNT } from './constants';\nimport {\n  ROW_TYPE,\n  COLUMN_TYPE,\n  MARKDOWN_TYPE,\n  CHART_TYPE,\n} from './componentTypes';\n\nfunction getTotalChildWidth({ id, components }) {\n  const component = components[id];\n  if (!component) return 0;\n\n  let width = 0;\n\n  (component.children || []).forEach(childId => {\n    const child = components[childId] || {};\n    width += (child.meta || {}).width || 0;\n  });\n\n  return width;\n}\n\nexport default function getDetailedComponentWidth({\n  // pass either an id, or a component\n  id,\n  component: passedComponent,\n  components = {},\n}) {\n  const result = {\n    width: undefined,\n    occupiedWidth: undefined,\n    minimumWidth: undefined,\n  };\n\n  const component = passedComponent || components[id];\n  if (!component) return result;\n\n  // note these remain as undefined if the component has no defined width\n  result.width = (component.meta || {}).width;\n  result.occupiedWidth = result.width;\n\n  if (component.type === ROW_TYPE) {\n    // not all rows have width 12, e\n    result.width =\n      getDetailedComponentWidth({\n        id: findParentId({\n          childId: component.id,\n          layout: components,\n        }),\n        components,\n      }).width || GRID_COLUMN_COUNT;\n    result.occupiedWidth = getTotalChildWidth({ id: component.id, components });\n    result.minimumWidth = result.occupiedWidth || GRID_MIN_COLUMN_COUNT;\n  } else if (component.type === COLUMN_TYPE) {\n    // find the width of the largest child, only rows count\n    result.minimumWidth = GRID_MIN_COLUMN_COUNT;\n    result.occupiedWidth = 0;\n    (component.children || []).forEach(childId => {\n      // rows don't have widths, so find the width of its children\n      if (components[childId].type === ROW_TYPE) {\n        result.minimumWidth = Math.max(\n          result.minimumWidth,\n          getTotalChildWidth({ id: childId, components }),\n        );\n      }\n    });\n  } else if (\n    component.type === MARKDOWN_TYPE ||\n    component.type === CHART_TYPE\n  ) {\n    result.minimumWidth = GRID_MIN_COLUMN_COUNT;\n  }\n\n  return result;\n}\n"]},"metadata":{},"sourceType":"module"}