{"ast":null,"code":"import \"core-js/modules/es.string.replace.js\";import \"core-js/modules/web.dom-collections.iterator.js\";import _extends from \"@babel/runtime-corejs3/helpers/extends\";import _mapInstanceProperty from \"@babel/runtime-corejs3/core-js-stable/instance/map\";import _valuesInstanceProperty from \"@babel/runtime-corejs3/core-js-stable/instance/values\";import _isEmpty from \"lodash/isEmpty\";(function () {var enterModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.enterModule : undefined;enterModule && enterModule(module);})();var __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default.signature : function (a) {return a;}; /**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React, { useState } from 'react';\nimport { tn } from '@superset-ui/core';\n\nimport DndSelectLabel from 'src/explore/components/controls/DndColumnSelectControl/DndSelectLabel';\nimport OptionWrapper from 'src/explore/components/controls/DndColumnSelectControl/OptionWrapper';\nimport { OptionSelector } from 'src/explore/components/controls/DndColumnSelectControl/utils';\nimport { DndItemType } from 'src/explore/components/DndItemType';\nimport { StyledColumnOption } from 'src/explore/components/optionRenderers';import { jsx as ___EmotionJSX } from \"@emotion/react\";\nexport const DndColumnSelect = props => {\n  const { value, options, multi = true } = props;\n  const optionSelector = new OptionSelector(options, value);\n  const [values, setValues] = useState(_valuesInstanceProperty(optionSelector));\n  const onDrop = item => {\n    const column = item.value;\n    if (!optionSelector.isArray && !_isEmpty(_valuesInstanceProperty(optionSelector))) {\n      optionSelector.replace(0, column.column_name);\n    } else\n    {\n      optionSelector.add(column.column_name);\n    }\n    setValues(_valuesInstanceProperty(optionSelector));\n    props.onChange(optionSelector.getValues());\n  };\n  const canDrop = item => (multi || _valuesInstanceProperty(optionSelector).length === 0) &&\n  !optionSelector.has(item.value.column_name);\n  const onClickClose = index => {\n    optionSelector.del(index);\n    setValues(_valuesInstanceProperty(optionSelector));\n    props.onChange(optionSelector.getValues());\n  };\n  const onShiftOptions = (dragIndex, hoverIndex) => {\n    optionSelector.swap(dragIndex, hoverIndex);\n    setValues(_valuesInstanceProperty(optionSelector));\n    props.onChange(optionSelector.getValues());\n  };\n  const valuesRenderer = () => _mapInstanceProperty(values).call(values, (column, idx) => ___EmotionJSX(OptionWrapper, { key: idx, index: idx, clickClose: onClickClose, onShiftOptions: onShiftOptions, type: DndItemType.ColumnOption },\n  ___EmotionJSX(StyledColumnOption, { column: column, showType: true })));\n\n  return ___EmotionJSX(DndSelectLabel, _extends({ onDrop: onDrop, canDrop: canDrop, valuesRenderer: valuesRenderer, accept: DndItemType.Column, displayGhostButton: multi || _valuesInstanceProperty(optionSelector).length === 0, ghostButtonText: tn('Drop column', 'Drop columns', multi ? 2 : 1) }, props));\n};__signature__(DndColumnSelect, \"useState{[values, setValues](optionSelector.values)}\");;(function () {var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined;if (!reactHotLoader) {return;}reactHotLoader.register(DndColumnSelect, \"DndColumnSelect\", \"/app/superset-frontend/src/explore/components/controls/DndColumnSelectControl/DndColumnSelect.tsx\");})();;(function () {var leaveModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.leaveModule : undefined;leaveModule && leaveModule(module);})();","map":{"version":3,"sources":["/app/superset-frontend/src/explore/components/controls/DndColumnSelectControl/DndColumnSelect.tsx"],"names":[],"mappings":"qqBAAA;;;;;;;;;;;;;;;;;AAiBG;AACH,OAAO,KAAP,IAAgB,QAAhB,QAAgC,OAAhC;AACA,SAAS,EAAT,QAAmB,mBAAnB;;AAIA,OAAO,cAAP,MAA2B,uEAA3B;AACA,OAAO,aAAP,MAA0B,sEAA1B;AACA,SAAS,cAAT,QAA+B,8DAA/B;AAEA,SAAS,WAAT,QAA4B,oCAA5B;AACA,SAAS,kBAAT,QAAmC,wCAAnC,C;AAEA,OAAO,MAAM,eAAe,GAAI,KAAD,IAAsB;AACnD,QAAM,EAAE,KAAF,EAAS,OAAT,EAAkB,KAAK,GAAG,IAA1B,KAAmC,KAAzC;AACA,QAAM,cAAc,GAAG,IAAI,cAAJ,CAAmB,OAAnB,EAA4B,KAA5B,CAAvB;AACA,QAAM,CAAC,MAAD,EAAS,SAAT,IAAsB,QAAQ,yBAAe,cAAf,EAApC;AAEA,QAAM,MAAM,GAAI,IAAD,IAAiC;AAC9C,UAAM,MAAM,GAAG,IAAI,CAAC,KAApB;AACA,QAAI,CAAC,cAAc,CAAC,OAAhB,IAA2B,CAAC,iCAAQ,cAAR,EAAhC,EAAgE;AAC9D,MAAA,cAAc,CAAC,OAAf,CAAuB,CAAvB,EAA0B,MAAM,CAAC,WAAjC;AACD,KAFD;AAEO;AACL,MAAA,cAAc,CAAC,GAAf,CAAmB,MAAM,CAAC,WAA1B;AACD;AACD,IAAA,SAAS,yBAAC,cAAD,EAAT;AACA,IAAA,KAAK,CAAC,QAAN,CAAe,cAAc,CAAC,SAAf,EAAf;AACD,GATD;AAWA,QAAM,OAAO,GAAI,IAAD,IACd,CAAC,KAAK,IAAI,wBAAA,cAAc,EAAQ,MAAtB,KAAiC,CAA3C;AACA,GAAC,cAAc,CAAC,GAAf,CAAoB,IAAI,CAAC,KAAL,CAA0B,WAA9C,CAFH;AAIA,QAAM,YAAY,GAAI,KAAD,IAAkB;AACrC,IAAA,cAAc,CAAC,GAAf,CAAmB,KAAnB;AACA,IAAA,SAAS,yBAAC,cAAD,EAAT;AACA,IAAA,KAAK,CAAC,QAAN,CAAe,cAAc,CAAC,SAAf,EAAf;AACD,GAJD;AAMA,QAAM,cAAc,GAAG,CAAC,SAAD,EAAoB,UAApB,KAA0C;AAC/D,IAAA,cAAc,CAAC,IAAf,CAAoB,SAApB,EAA+B,UAA/B;AACA,IAAA,SAAS,yBAAC,cAAD,EAAT;AACA,IAAA,KAAK,CAAC,QAAN,CAAe,cAAc,CAAC,SAAf,EAAf;AACD,GAJD;AAMA,QAAM,cAAc,GAAG,MACrB,qBAAA,MAAM,MAAN,CAAA,MAAM,EAAK,CAAC,MAAD,EAAS,GAAT,KACT,cAAC,aAAD,IACE,GAAG,EAAE,GADP,EAEE,KAAK,EAAE,GAFT,EAGE,UAAU,EAAE,YAHd,EAIE,cAAc,EAAE,cAJlB,EAKE,IAAI,EAAE,WAAW,CAAC,YALpB;AAOE,gBAAC,kBAAD,IAAoB,MAAM,EAAE,MAA5B,EAAoC,QAAQ,MAA5C,GAPF,CADI,CADR;;AAaA,SACE,cAAC,cAAD,aACE,MAAM,EAAE,MADV,EAEE,OAAO,EAAE,OAFX,EAGE,cAAc,EAAE,cAHlB,EAIE,MAAM,EAAE,WAAW,CAAC,MAJtB,EAKE,kBAAkB,EAAE,KAAK,IAAI,wBAAA,cAAc,EAAQ,MAAtB,KAAiC,CALhE,EAME,eAAe,EAAE,EAAE,CAAC,aAAD,EAAgB,cAAhB,EAAgC,KAAK,GAAG,CAAH,GAAO,CAA5C,CANrB,IAOM,KAPN,EADF;AAWD,CAxDM,C,cAAM,e,2OAAA,e","sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React, { useState } from 'react';\nimport { tn } from '@superset-ui/core';\nimport { ColumnMeta } from '@superset-ui/chart-controls';\nimport { isEmpty } from 'lodash';\nimport { LabelProps } from 'src/explore/components/controls/DndColumnSelectControl/types';\nimport DndSelectLabel from 'src/explore/components/controls/DndColumnSelectControl/DndSelectLabel';\nimport OptionWrapper from 'src/explore/components/controls/DndColumnSelectControl/OptionWrapper';\nimport { OptionSelector } from 'src/explore/components/controls/DndColumnSelectControl/utils';\nimport { DatasourcePanelDndItem } from 'src/explore/components/DatasourcePanel/types';\nimport { DndItemType } from 'src/explore/components/DndItemType';\nimport { StyledColumnOption } from 'src/explore/components/optionRenderers';\n\nexport const DndColumnSelect = (props: LabelProps) => {\n  const { value, options, multi = true } = props;\n  const optionSelector = new OptionSelector(options, value);\n  const [values, setValues] = useState<ColumnMeta[]>(optionSelector.values);\n\n  const onDrop = (item: DatasourcePanelDndItem) => {\n    const column = item.value as ColumnMeta;\n    if (!optionSelector.isArray && !isEmpty(optionSelector.values)) {\n      optionSelector.replace(0, column.column_name);\n    } else {\n      optionSelector.add(column.column_name);\n    }\n    setValues(optionSelector.values);\n    props.onChange(optionSelector.getValues());\n  };\n\n  const canDrop = (item: DatasourcePanelDndItem) =>\n    (multi || optionSelector.values.length === 0) &&\n    !optionSelector.has((item.value as ColumnMeta).column_name);\n\n  const onClickClose = (index: number) => {\n    optionSelector.del(index);\n    setValues(optionSelector.values);\n    props.onChange(optionSelector.getValues());\n  };\n\n  const onShiftOptions = (dragIndex: number, hoverIndex: number) => {\n    optionSelector.swap(dragIndex, hoverIndex);\n    setValues(optionSelector.values);\n    props.onChange(optionSelector.getValues());\n  };\n\n  const valuesRenderer = () =>\n    values.map((column, idx) => (\n      <OptionWrapper\n        key={idx}\n        index={idx}\n        clickClose={onClickClose}\n        onShiftOptions={onShiftOptions}\n        type={DndItemType.ColumnOption}\n      >\n        <StyledColumnOption column={column} showType />\n      </OptionWrapper>\n    ));\n\n  return (\n    <DndSelectLabel<string | string[], ColumnMeta[]>\n      onDrop={onDrop}\n      canDrop={canDrop}\n      valuesRenderer={valuesRenderer}\n      accept={DndItemType.Column}\n      displayGhostButton={multi || optionSelector.values.length === 0}\n      ghostButtonText={tn('Drop column', 'Drop columns', multi ? 2 : 1)}\n      {...props}\n    />\n  );\n};\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}