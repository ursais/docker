{"ast":null,"code":"import \"core-js/modules/web.dom-collections.iterator.js\";(function () {var enterModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.enterModule : undefined;enterModule && enterModule(module);})();var __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default.signature : function (a) {return a;}; /**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { SupersetClient, t, styled } from '@superset-ui/core';\nimport React, { useState, useMemo } from 'react';\nimport Loading from 'src/components/Loading';\nimport { isFeatureEnabled, FeatureFlag } from 'src/featureFlags';\nimport { useListViewResource } from 'src/views/CRUD/hooks';\nimport { createErrorHandler } from 'src/views/CRUD/utils';\nimport withToasts from 'src/messageToasts/enhancers/withToasts';\nimport SubMenu from 'src/components/Menu/SubMenu';\nimport DeleteModal from 'src/components/DeleteModal';\nimport { Tooltip } from 'src/components/Tooltip';\nimport Icons from 'src/components/Icons';\nimport ListView, { FilterOperator } from 'src/components/ListView';\nimport { commonMenuData } from 'src/views/CRUD/data/common';\nimport ImportModelsModal from 'src/components/ImportModal/index';\nimport handleResourceExport from 'src/utils/export';\nimport DatabaseModal from './DatabaseModal';import { jsx as ___EmotionJSX } from \"@emotion/react\";\nconst PAGE_SIZE = 25;\nconst PASSWORDS_NEEDED_MESSAGE = t('The passwords for the databases below are needed in order to ' +\n'import them. Please note that the \"Secure Extra\" and \"Certificate\" ' +\n'sections of the database configuration are not present in export ' +\n'files, and should be added manually after the import if they are needed.');\nconst CONFIRM_OVERWRITE_MESSAGE = t('You are importing one or more databases that already exist. ' +\n'Overwriting might cause you to lose some of your work. Are you ' +\n'sure you want to overwrite?');\nconst IconCheck = styled(Icons.Check)`\n  color: ${({ theme }) => theme.colors.grayscale.dark1};\n`;\nconst IconCancelX = styled(Icons.CancelX)`\n  color: ${({ theme }) => theme.colors.grayscale.dark1};\n`;\nconst Actions = styled.div`\n  color: ${({ theme }) => theme.colors.grayscale.base};\n`;\nfunction BooleanDisplay({ value }) {\n  return value ? ___EmotionJSX(IconCheck, null) : ___EmotionJSX(IconCancelX, null);\n}\nfunction DatabaseList({ addDangerToast, addSuccessToast }) {\n  const { state: { loading, resourceCount: databaseCount, resourceCollection: databases }, hasPerm, fetchData, refreshData } = useListViewResource('database', t('database'), addDangerToast);\n  const [databaseModalOpen, setDatabaseModalOpen] = useState(false);\n  const [databaseCurrentlyDeleting, setDatabaseCurrentlyDeleting] = useState(null);\n  const [currentDatabase, setCurrentDatabase] = useState(null);\n  const [importingDatabase, showImportModal] = useState(false);\n  const [passwordFields, setPasswordFields] = useState([]);\n  const [preparingExport, setPreparingExport] = useState(false);\n  const openDatabaseImportModal = () => {\n    showImportModal(true);\n  };\n  const closeDatabaseImportModal = () => {\n    showImportModal(false);\n  };\n  const handleDatabaseImport = () => {\n    showImportModal(false);\n    refreshData();\n  };\n  const openDatabaseDeleteModal = database => SupersetClient.get({\n    endpoint: `/api/v1/database/${database.id}/related_objects/` }).\n\n  then(({ json = {} }) => {\n    setDatabaseCurrentlyDeleting({\n      ...database,\n      chart_count: json.charts.count,\n      dashboard_count: json.dashboards.count });\n\n  }).\n  catch(createErrorHandler(errMsg => t('An error occurred while fetching database related data: %s', errMsg)));\n  function handleDatabaseDelete({ id, database_name: dbName }) {\n    SupersetClient.delete({\n      endpoint: `/api/v1/database/${id}` }).\n    then(() => {\n      refreshData();\n      addSuccessToast(t('Deleted: %s', dbName));\n      // Close delete modal\n      setDatabaseCurrentlyDeleting(null);\n    }, createErrorHandler(errMsg => addDangerToast(t('There was an issue deleting %s: %s', dbName, errMsg))));\n  }\n  function handleDatabaseEditModal({ database = null, modalOpen = false } = {}) {\n    // Set database and modal\n    setCurrentDatabase(database);\n    setDatabaseModalOpen(modalOpen);\n  }\n  const canCreate = hasPerm('can_write');\n  const canEdit = hasPerm('can_write');\n  const canDelete = hasPerm('can_write');\n  const canExport = hasPerm('can_read') && isFeatureEnabled(FeatureFlag.VERSIONED_EXPORT);\n  const menuData = {\n    activeChild: 'Databases',\n    ...commonMenuData };\n\n  if (canCreate) {\n    menuData.buttons = [\n    {\n      'data-test': 'btn-create-database',\n      name: ___EmotionJSX(React.Fragment, null,\n      ___EmotionJSX(\"i\", { className: \"fa fa-plus\" }), \" \", t('Database'), ' '),\n\n      buttonStyle: 'primary',\n      onClick: () => {\n        // Ensure modal will be opened in add mode\n        handleDatabaseEditModal({ modalOpen: true });\n      } }];\n\n\n    if (isFeatureEnabled(FeatureFlag.VERSIONED_EXPORT)) {\n      menuData.buttons.push({\n        name: ___EmotionJSX(Tooltip, { id: \"import-tooltip\", title: t('Import databases'), placement: \"bottomRight\" },\n        ___EmotionJSX(Icons.Import, { \"data-test\": \"import-button\" })),\n\n        buttonStyle: 'link',\n        onClick: openDatabaseImportModal });\n\n    }\n  }\n  function handleDatabaseExport(database) {\n    if (database.id === undefined) {\n      return;\n    }\n    handleResourceExport('database', [database.id], () => {\n      setPreparingExport(false);\n    });\n    setPreparingExport(true);\n  }\n  const initialSort = [{ id: 'changed_on_delta_humanized', desc: true }];\n  const columns = useMemo(() => [\n  {\n    accessor: 'database_name',\n    Header: t('Database') },\n\n  {\n    accessor: 'backend',\n    Header: t('Backend'),\n    size: 'lg',\n    disableSortBy: true },\n\n  {\n    accessor: 'allow_run_async',\n    Header: ___EmotionJSX(Tooltip, { id: \"allow-run-async-header-tooltip\", title: t('Asynchronous query execution'), placement: \"top\" },\n    ___EmotionJSX(\"span\", null, t('AQE'))),\n\n    Cell: ({ row: { original: { allow_run_async: allowRunAsync } } }) => ___EmotionJSX(BooleanDisplay, { value: allowRunAsync }),\n    size: 'sm' },\n\n  {\n    accessor: 'allow_dml',\n    Header: ___EmotionJSX(Tooltip, { id: \"allow-dml-header-tooltip\", title: t('Allow data manipulation language'), placement: \"top\" },\n    ___EmotionJSX(\"span\", null, t('DML'))),\n\n    Cell: ({ row: { original: { allow_dml: allowDML } } }) => ___EmotionJSX(BooleanDisplay, { value: allowDML }),\n    size: 'sm' },\n\n  {\n    accessor: 'allow_csv_upload',\n    Header: t('CSV upload'),\n    Cell: ({ row: { original: { allow_csv_upload: allowCSVUpload } } }) => ___EmotionJSX(BooleanDisplay, { value: allowCSVUpload }),\n    size: 'md' },\n\n  {\n    accessor: 'expose_in_sqllab',\n    Header: t('Expose in SQL Lab'),\n    Cell: ({ row: { original: { expose_in_sqllab: exposeInSqllab } } }) => ___EmotionJSX(BooleanDisplay, { value: exposeInSqllab }),\n    size: 'md' },\n\n  {\n    accessor: 'created_by',\n    disableSortBy: true,\n    Header: t('Created by'),\n    Cell: ({ row: { original: { created_by: createdBy } } }) => createdBy ? `${createdBy.first_name} ${createdBy.last_name}` : '',\n    size: 'xl' },\n\n  {\n    Cell: ({ row: { original: { changed_on_delta_humanized: changedOn } } }) => changedOn,\n    Header: t('Last modified'),\n    accessor: 'changed_on_delta_humanized',\n    size: 'xl' },\n\n  {\n    Cell: ({ row: { original } }) => {\n      const handleEdit = () => handleDatabaseEditModal({ database: original, modalOpen: true });\n      const handleDelete = () => openDatabaseDeleteModal(original);\n      const handleExport = () => handleDatabaseExport(original);\n      if (!canEdit && !canDelete && !canExport) {\n        return null;\n      }\n      return ___EmotionJSX(Actions, { className: \"actions\" },\n      canDelete && ___EmotionJSX(\"span\", { role: \"button\", tabIndex: 0, className: \"action-button\", \"data-test\": \"database-delete\", onClick: handleDelete },\n      ___EmotionJSX(Tooltip, { id: \"delete-action-tooltip\", title: t('Delete database'), placement: \"bottom\" },\n      ___EmotionJSX(Icons.Trash, null))),\n\n\n      canExport && ___EmotionJSX(Tooltip, { id: \"export-action-tooltip\", title: t('Export'), placement: \"bottom\" },\n      ___EmotionJSX(\"span\", { role: \"button\", tabIndex: 0, className: \"action-button\", onClick: handleExport },\n      ___EmotionJSX(Icons.Share, null))),\n\n\n      canEdit && ___EmotionJSX(Tooltip, { id: \"edit-action-tooltip\", title: t('Edit'), placement: \"bottom\" },\n      ___EmotionJSX(\"span\", { role: \"button\", \"data-test\": \"database-edit\", tabIndex: 0, className: \"action-button\", onClick: handleEdit },\n      ___EmotionJSX(Icons.EditAlt, { \"data-test\": \"edit-alt\" }))));\n\n\n\n    },\n    Header: t('Actions'),\n    id: 'actions',\n    hidden: !canEdit && !canDelete,\n    disableSortBy: true }],\n\n  [canDelete, canEdit, canExport]);\n  const filters = useMemo(() => [\n  {\n    Header: t('Expose in SQL Lab'),\n    id: 'expose_in_sqllab',\n    input: 'select',\n    operator: FilterOperator.equals,\n    unfilteredLabel: 'All',\n    selects: [\n    { label: 'Yes', value: true },\n    { label: 'No', value: false }] },\n\n\n  {\n    Header: ___EmotionJSX(Tooltip, { id: \"allow-run-async-filter-header-tooltip\", title: t('Asynchronous query execution'), placement: \"top\" },\n    ___EmotionJSX(\"span\", null, t('AQE'))),\n\n    id: 'allow_run_async',\n    input: 'select',\n    operator: FilterOperator.equals,\n    unfilteredLabel: 'All',\n    selects: [\n    { label: 'Yes', value: true },\n    { label: 'No', value: false }] },\n\n\n  {\n    Header: t('Search'),\n    id: 'database_name',\n    input: 'search',\n    operator: FilterOperator.contains }],\n\n  []);\n  return ___EmotionJSX(React.Fragment, null,\n  ___EmotionJSX(SubMenu, menuData),\n  ___EmotionJSX(DatabaseModal, { databaseId: currentDatabase == null ? void 0 : currentDatabase.id, show: databaseModalOpen, onHide: handleDatabaseEditModal, onDatabaseAdd: () => {\n      refreshData();\n    } }),\n  databaseCurrentlyDeleting && ___EmotionJSX(DeleteModal, { description: t('The database %s is linked to %s charts that appear on %s dashboards. Are you sure you want to continue? Deleting the database will break those objects.', databaseCurrentlyDeleting.database_name, databaseCurrentlyDeleting.chart_count, databaseCurrentlyDeleting.dashboard_count), onConfirm: () => {\n      if (databaseCurrentlyDeleting) {\n        handleDatabaseDelete(databaseCurrentlyDeleting);\n      }\n    }, onHide: () => setDatabaseCurrentlyDeleting(null), open: true, title: t('Delete Database?') }),\n\n  ___EmotionJSX(ListView, { className: \"database-list-view\", columns: columns, count: databaseCount, data: databases, fetchData: fetchData, filters: filters, initialSort: initialSort, loading: loading, pageSize: PAGE_SIZE }),\n\n  ___EmotionJSX(ImportModelsModal, { resourceName: \"database\", resourceLabel: t('database'), passwordsNeededMessage: PASSWORDS_NEEDED_MESSAGE, confirmOverwriteMessage: CONFIRM_OVERWRITE_MESSAGE, addDangerToast: addDangerToast, addSuccessToast: addSuccessToast, onModelImport: handleDatabaseImport, show: importingDatabase, onHide: closeDatabaseImportModal, passwordFields: passwordFields, setPasswordFields: setPasswordFields }),\n  preparingExport && ___EmotionJSX(Loading, null));\n\n}__signature__(DatabaseList, \"useListViewResource{{ state: { loading, resourceCount: databaseCount, resourceCollection: databases, }, hasPerm, fetchData, refreshData, }}\\nuseState{[databaseModalOpen, setDatabaseModalOpen](false)}\\nuseState{[databaseCurrentlyDeleting, setDatabaseCurrentlyDeleting,](null)}\\nuseState{[currentDatabase, setCurrentDatabase](null)}\\nuseState{[importingDatabase, showImportModal](false)}\\nuseState{[passwordFields, setPasswordFields]([])}\\nuseState{[preparingExport, setPreparingExport](false)}\\nuseMemo{columns}\\nuseMemo{filters}\", () => [useListViewResource]);const _default =\nwithToasts(DatabaseList);export default _default;;(function () {var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined;if (!reactHotLoader) {return;}reactHotLoader.register(PAGE_SIZE, \"PAGE_SIZE\", \"/app/superset-frontend/src/views/CRUD/data/database/DatabaseList.tsx\");reactHotLoader.register(PASSWORDS_NEEDED_MESSAGE, \"PASSWORDS_NEEDED_MESSAGE\", \"/app/superset-frontend/src/views/CRUD/data/database/DatabaseList.tsx\");reactHotLoader.register(CONFIRM_OVERWRITE_MESSAGE, \"CONFIRM_OVERWRITE_MESSAGE\", \"/app/superset-frontend/src/views/CRUD/data/database/DatabaseList.tsx\");reactHotLoader.register(IconCheck, \"IconCheck\", \"/app/superset-frontend/src/views/CRUD/data/database/DatabaseList.tsx\");reactHotLoader.register(IconCancelX, \"IconCancelX\", \"/app/superset-frontend/src/views/CRUD/data/database/DatabaseList.tsx\");reactHotLoader.register(Actions, \"Actions\", \"/app/superset-frontend/src/views/CRUD/data/database/DatabaseList.tsx\");reactHotLoader.register(BooleanDisplay, \"BooleanDisplay\", \"/app/superset-frontend/src/views/CRUD/data/database/DatabaseList.tsx\");reactHotLoader.register(DatabaseList, \"DatabaseList\", \"/app/superset-frontend/src/views/CRUD/data/database/DatabaseList.tsx\");reactHotLoader.register(_default, \"default\", \"/app/superset-frontend/src/views/CRUD/data/database/DatabaseList.tsx\");})();;(function () {var leaveModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.leaveModule : undefined;leaveModule && leaveModule(module);})();","map":{"version":3,"sources":["/app/superset-frontend/src/views/CRUD/data/database/DatabaseList.tsx"],"names":[],"mappings":"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","sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { SupersetClient, t, styled } from '@superset-ui/core';\nimport React, { useState, useMemo } from 'react';\nimport Loading from 'src/components/Loading';\nimport { isFeatureEnabled, FeatureFlag } from 'src/featureFlags';\nimport { useListViewResource } from 'src/views/CRUD/hooks';\nimport { createErrorHandler } from 'src/views/CRUD/utils';\nimport withToasts from 'src/messageToasts/enhancers/withToasts';\nimport SubMenu, { SubMenuProps } from 'src/components/Menu/SubMenu';\nimport DeleteModal from 'src/components/DeleteModal';\nimport { Tooltip } from 'src/components/Tooltip';\nimport Icons from 'src/components/Icons';\nimport ListView, { FilterOperator, Filters } from 'src/components/ListView';\nimport { commonMenuData } from 'src/views/CRUD/data/common';\nimport ImportModelsModal from 'src/components/ImportModal/index';\nimport handleResourceExport from 'src/utils/export';\nimport DatabaseModal from './DatabaseModal';\n\nimport { DatabaseObject } from './types';\n\nconst PAGE_SIZE = 25;\nconst PASSWORDS_NEEDED_MESSAGE = t(\n  'The passwords for the databases below are needed in order to ' +\n    'import them. Please note that the \"Secure Extra\" and \"Certificate\" ' +\n    'sections of the database configuration are not present in export ' +\n    'files, and should be added manually after the import if they are needed.',\n);\nconst CONFIRM_OVERWRITE_MESSAGE = t(\n  'You are importing one or more databases that already exist. ' +\n    'Overwriting might cause you to lose some of your work. Are you ' +\n    'sure you want to overwrite?',\n);\n\ninterface DatabaseDeleteObject extends DatabaseObject {\n  chart_count: number;\n  dashboard_count: number;\n}\ninterface DatabaseListProps {\n  addDangerToast: (msg: string) => void;\n  addSuccessToast: (msg: string) => void;\n}\n\nconst IconCheck = styled(Icons.Check)`\n  color: ${({ theme }) => theme.colors.grayscale.dark1};\n`;\n\nconst IconCancelX = styled(Icons.CancelX)`\n  color: ${({ theme }) => theme.colors.grayscale.dark1};\n`;\n\nconst Actions = styled.div`\n  color: ${({ theme }) => theme.colors.grayscale.base};\n`;\n\nfunction BooleanDisplay({ value }: { value: Boolean }) {\n  return value ? <IconCheck /> : <IconCancelX />;\n}\n\nfunction DatabaseList({ addDangerToast, addSuccessToast }: DatabaseListProps) {\n  const {\n    state: {\n      loading,\n      resourceCount: databaseCount,\n      resourceCollection: databases,\n    },\n    hasPerm,\n    fetchData,\n    refreshData,\n  } = useListViewResource<DatabaseObject>(\n    'database',\n    t('database'),\n    addDangerToast,\n  );\n  const [databaseModalOpen, setDatabaseModalOpen] = useState<boolean>(false);\n  const [\n    databaseCurrentlyDeleting,\n    setDatabaseCurrentlyDeleting,\n  ] = useState<DatabaseDeleteObject | null>(null);\n  const [currentDatabase, setCurrentDatabase] = useState<DatabaseObject | null>(\n    null,\n  );\n  const [importingDatabase, showImportModal] = useState<boolean>(false);\n  const [passwordFields, setPasswordFields] = useState<string[]>([]);\n  const [preparingExport, setPreparingExport] = useState<boolean>(false);\n\n  const openDatabaseImportModal = () => {\n    showImportModal(true);\n  };\n\n  const closeDatabaseImportModal = () => {\n    showImportModal(false);\n  };\n\n  const handleDatabaseImport = () => {\n    showImportModal(false);\n    refreshData();\n  };\n\n  const openDatabaseDeleteModal = (database: DatabaseObject) =>\n    SupersetClient.get({\n      endpoint: `/api/v1/database/${database.id}/related_objects/`,\n    })\n      .then(({ json = {} }) => {\n        setDatabaseCurrentlyDeleting({\n          ...database,\n          chart_count: json.charts.count,\n          dashboard_count: json.dashboards.count,\n        });\n      })\n      .catch(\n        createErrorHandler(errMsg =>\n          t(\n            'An error occurred while fetching database related data: %s',\n            errMsg,\n          ),\n        ),\n      );\n\n  function handleDatabaseDelete({ id, database_name: dbName }: DatabaseObject) {\n    SupersetClient.delete({\n      endpoint: `/api/v1/database/${id}`,\n    }).then(\n      () => {\n        refreshData();\n        addSuccessToast(t('Deleted: %s', dbName));\n\n        // Close delete modal\n        setDatabaseCurrentlyDeleting(null);\n      },\n      createErrorHandler(errMsg =>\n        addDangerToast(t('There was an issue deleting %s: %s', dbName, errMsg)),\n      ),\n    );\n  }\n\n  function handleDatabaseEditModal({\n    database = null,\n    modalOpen = false,\n  }: { database?: DatabaseObject | null; modalOpen?: boolean } = {}) {\n    // Set database and modal\n    setCurrentDatabase(database);\n    setDatabaseModalOpen(modalOpen);\n  }\n\n  const canCreate = hasPerm('can_write');\n  const canEdit = hasPerm('can_write');\n  const canDelete = hasPerm('can_write');\n  const canExport =\n    hasPerm('can_read') && isFeatureEnabled(FeatureFlag.VERSIONED_EXPORT);\n\n  const menuData: SubMenuProps = {\n    activeChild: 'Databases',\n    ...commonMenuData,\n  };\n\n  if (canCreate) {\n    menuData.buttons = [\n      {\n        'data-test': 'btn-create-database',\n        name: (\n          <>\n            <i className=\"fa fa-plus\" /> {t('Database')}{' '}\n          </>\n        ),\n        buttonStyle: 'primary',\n        onClick: () => {\n          // Ensure modal will be opened in add mode\n          handleDatabaseEditModal({ modalOpen: true });\n        },\n      },\n    ];\n\n    if (isFeatureEnabled(FeatureFlag.VERSIONED_EXPORT)) {\n      menuData.buttons.push({\n        name: (\n          <Tooltip\n            id=\"import-tooltip\"\n            title={t('Import databases')}\n            placement=\"bottomRight\"\n          >\n            <Icons.Import data-test=\"import-button\" />\n          </Tooltip>\n        ),\n        buttonStyle: 'link',\n        onClick: openDatabaseImportModal,\n      });\n    }\n  }\n\n  function handleDatabaseExport(database: DatabaseObject) {\n    if (database.id === undefined) {\n      return;\n    }\n\n    handleResourceExport('database', [database.id], () => {\n      setPreparingExport(false);\n    });\n    setPreparingExport(true);\n  }\n\n  const initialSort = [{ id: 'changed_on_delta_humanized', desc: true }];\n  const columns = useMemo(\n    () => [\n      {\n        accessor: 'database_name',\n        Header: t('Database'),\n      },\n      {\n        accessor: 'backend',\n        Header: t('Backend'),\n        size: 'lg',\n        disableSortBy: true, // TODO: api support for sorting by 'backend'\n      },\n      {\n        accessor: 'allow_run_async',\n        Header: (\n          <Tooltip\n            id=\"allow-run-async-header-tooltip\"\n            title={t('Asynchronous query execution')}\n            placement=\"top\"\n          >\n            <span>{t('AQE')}</span>\n          </Tooltip>\n        ),\n        Cell: ({\n          row: {\n            original: { allow_run_async: allowRunAsync },\n          },\n        }: any) => <BooleanDisplay value={allowRunAsync} />,\n        size: 'sm',\n      },\n      {\n        accessor: 'allow_dml',\n        Header: (\n          <Tooltip\n            id=\"allow-dml-header-tooltip\"\n            title={t('Allow data manipulation language')}\n            placement=\"top\"\n          >\n            <span>{t('DML')}</span>\n          </Tooltip>\n        ),\n        Cell: ({\n          row: {\n            original: { allow_dml: allowDML },\n          },\n        }: any) => <BooleanDisplay value={allowDML} />,\n        size: 'sm',\n      },\n      {\n        accessor: 'allow_csv_upload',\n        Header: t('CSV upload'),\n        Cell: ({\n          row: {\n            original: { allow_csv_upload: allowCSVUpload },\n          },\n        }: any) => <BooleanDisplay value={allowCSVUpload} />,\n        size: 'md',\n      },\n      {\n        accessor: 'expose_in_sqllab',\n        Header: t('Expose in SQL Lab'),\n        Cell: ({\n          row: {\n            original: { expose_in_sqllab: exposeInSqllab },\n          },\n        }: any) => <BooleanDisplay value={exposeInSqllab} />,\n        size: 'md',\n      },\n      {\n        accessor: 'created_by',\n        disableSortBy: true,\n        Header: t('Created by'),\n        Cell: ({\n          row: {\n            original: { created_by: createdBy },\n          },\n        }: any) =>\n          createdBy ? `${createdBy.first_name} ${createdBy.last_name}` : '',\n        size: 'xl',\n      },\n      {\n        Cell: ({\n          row: {\n            original: { changed_on_delta_humanized: changedOn },\n          },\n        }: any) => changedOn,\n        Header: t('Last modified'),\n        accessor: 'changed_on_delta_humanized',\n        size: 'xl',\n      },\n      {\n        Cell: ({ row: { original } }: any) => {\n          const handleEdit = () =>\n            handleDatabaseEditModal({ database: original, modalOpen: true });\n          const handleDelete = () => openDatabaseDeleteModal(original);\n          const handleExport = () => handleDatabaseExport(original);\n          if (!canEdit && !canDelete && !canExport) {\n            return null;\n          }\n          return (\n            <Actions className=\"actions\">\n              {canDelete && (\n                <span\n                  role=\"button\"\n                  tabIndex={0}\n                  className=\"action-button\"\n                  data-test=\"database-delete\"\n                  onClick={handleDelete}\n                >\n                  <Tooltip\n                    id=\"delete-action-tooltip\"\n                    title={t('Delete database')}\n                    placement=\"bottom\"\n                  >\n                    <Icons.Trash />\n                  </Tooltip>\n                </span>\n              )}\n              {canExport && (\n                <Tooltip\n                  id=\"export-action-tooltip\"\n                  title={t('Export')}\n                  placement=\"bottom\"\n                >\n                  <span\n                    role=\"button\"\n                    tabIndex={0}\n                    className=\"action-button\"\n                    onClick={handleExport}\n                  >\n                    <Icons.Share />\n                  </span>\n                </Tooltip>\n              )}\n              {canEdit && (\n                <Tooltip\n                  id=\"edit-action-tooltip\"\n                  title={t('Edit')}\n                  placement=\"bottom\"\n                >\n                  <span\n                    role=\"button\"\n                    data-test=\"database-edit\"\n                    tabIndex={0}\n                    className=\"action-button\"\n                    onClick={handleEdit}\n                  >\n                    <Icons.EditAlt data-test=\"edit-alt\" />\n                  </span>\n                </Tooltip>\n              )}\n            </Actions>\n          );\n        },\n        Header: t('Actions'),\n        id: 'actions',\n        hidden: !canEdit && !canDelete,\n        disableSortBy: true,\n      },\n    ],\n    [canDelete, canEdit, canExport],\n  );\n\n  const filters: Filters = useMemo(\n    () => [\n      {\n        Header: t('Expose in SQL Lab'),\n        id: 'expose_in_sqllab',\n        input: 'select',\n        operator: FilterOperator.equals,\n        unfilteredLabel: 'All',\n        selects: [\n          { label: 'Yes', value: true },\n          { label: 'No', value: false },\n        ],\n      },\n      {\n        Header: (\n          <Tooltip\n            id=\"allow-run-async-filter-header-tooltip\"\n            title={t('Asynchronous query execution')}\n            placement=\"top\"\n          >\n            <span>{t('AQE')}</span>\n          </Tooltip>\n        ),\n        id: 'allow_run_async',\n        input: 'select',\n        operator: FilterOperator.equals,\n        unfilteredLabel: 'All',\n        selects: [\n          { label: 'Yes', value: true },\n          { label: 'No', value: false },\n        ],\n      },\n      {\n        Header: t('Search'),\n        id: 'database_name',\n        input: 'search',\n        operator: FilterOperator.contains,\n      },\n    ],\n    [],\n  );\n\n  return (\n    <>\n      <SubMenu {...menuData} />\n      <DatabaseModal\n        databaseId={currentDatabase?.id}\n        show={databaseModalOpen}\n        onHide={handleDatabaseEditModal}\n        onDatabaseAdd={() => {\n          refreshData();\n        }}\n      />\n      {databaseCurrentlyDeleting && (\n        <DeleteModal\n          description={t(\n            'The database %s is linked to %s charts that appear on %s dashboards. Are you sure you want to continue? Deleting the database will break those objects.',\n            databaseCurrentlyDeleting.database_name,\n            databaseCurrentlyDeleting.chart_count,\n            databaseCurrentlyDeleting.dashboard_count,\n          )}\n          onConfirm={() => {\n            if (databaseCurrentlyDeleting) {\n              handleDatabaseDelete(databaseCurrentlyDeleting);\n            }\n          }}\n          onHide={() => setDatabaseCurrentlyDeleting(null)}\n          open\n          title={t('Delete Database?')}\n        />\n      )}\n\n      <ListView<DatabaseObject>\n        className=\"database-list-view\"\n        columns={columns}\n        count={databaseCount}\n        data={databases}\n        fetchData={fetchData}\n        filters={filters}\n        initialSort={initialSort}\n        loading={loading}\n        pageSize={PAGE_SIZE}\n      />\n\n      <ImportModelsModal\n        resourceName=\"database\"\n        resourceLabel={t('database')}\n        passwordsNeededMessage={PASSWORDS_NEEDED_MESSAGE}\n        confirmOverwriteMessage={CONFIRM_OVERWRITE_MESSAGE}\n        addDangerToast={addDangerToast}\n        addSuccessToast={addSuccessToast}\n        onModelImport={handleDatabaseImport}\n        show={importingDatabase}\n        onHide={closeDatabaseImportModal}\n        passwordFields={passwordFields}\n        setPasswordFields={setPasswordFields}\n      />\n      {preparingExport && <Loading />}\n    </>\n  );\n}\n\nexport default withToasts(DatabaseList);\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}