{"ast":null,"code":"import \"core-js/modules/web.dom-collections.iterator.js\";import _keysInstanceProperty from \"@babel/runtime-corejs3/core-js-stable/instance/keys\";import _filterInstanceProperty from \"@babel/runtime-corejs3/core-js-stable/instance/filter\";import _sortInstanceProperty from \"@babel/runtime-corejs3/core-js-stable/instance/sort\";import _mapInstanceProperty from \"@babel/runtime-corejs3/core-js-stable/instance/map\";import _uniqBy from \"lodash/uniqBy\";(function () {var enterModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.enterModule : undefined;enterModule && enterModule(module);})();var __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default.signature : function (a) {return a;}; /**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { getChartMetadataRegistry, styled, SupersetClient, t } from '@superset-ui/core';\nimport React, { useMemo, useState } from 'react';\nimport rison from 'rison';\n\nimport { FeatureFlag, isFeatureEnabled } from 'src/featureFlags';\nimport { createErrorHandler, createFetchRelated, handleChartDelete } from 'src/views/CRUD/utils';\nimport { useChartEditModal, useFavoriteStatus, useListViewResource } from 'src/views/CRUD/hooks';\nimport handleResourceExport from 'src/utils/export';\nimport ConfirmStatusChange from 'src/components/ConfirmStatusChange';\nimport SubMenu from 'src/components/Menu/SubMenu';\nimport FaveStar from 'src/components/FaveStar';\nimport ListView, { FilterOperator } from 'src/components/ListView';\nimport Loading from 'src/components/Loading';\nimport { getFromLocalStorage } from 'src/utils/localStorageHelpers';\nimport withToasts from 'src/messageToasts/enhancers/withToasts';\nimport PropertiesModal from 'src/explore/components/PropertiesModal';\nimport ImportModelsModal from 'src/components/ImportModal/index';\nimport { Tooltip } from 'src/components/Tooltip';\nimport Icons from 'src/components/Icons';\nimport { nativeFilterGate } from 'src/dashboard/components/nativeFilters/utils';\nimport ChartCard from './ChartCard';import { jsx as ___EmotionJSX } from \"@emotion/react\";\nconst PAGE_SIZE = 25;\nconst PASSWORDS_NEEDED_MESSAGE = t('The passwords for the databases below are needed in order to ' +\n'import them together with the charts. Please note that the ' +\n'\"Secure Extra\" and \"Certificate\" sections of ' +\n'the database configuration are not present in export files, and ' +\n'should be added manually after the import if they are needed.');\nconst CONFIRM_OVERWRITE_MESSAGE = t('You are importing one or more charts that already exist. ' +\n'Overwriting might cause you to lose some of your work. Are you ' +\n'sure you want to overwrite?');\nconst registry = getChartMetadataRegistry();\nconst createFetchDatasets = handleError => async (filterValue = '', pageIndex, pageSize) => {\n  // add filters if filterValue\n  const filters = filterValue ?\n  { filters: [{ col: 'table_name', opr: 'sw', value: filterValue }] } :\n  {};\n  try {var _json$result;\n    const queryParams = rison.encode({\n      columns: ['datasource_name', 'datasource_id'],\n      keys: ['none'],\n      order_column: 'table_name',\n      order_direction: 'asc',\n      ...(pageIndex ? { page: pageIndex } : {}),\n      ...(pageSize ? { page_size: pageSize } : {}),\n      ...filters });\n\n    const { json = {} } = await SupersetClient.get({\n      endpoint: `/api/v1/dataset/?q=${queryParams}` });\n\n    const datasets = json == null ? void 0 : (_json$result = json.result) == null ? void 0 : _mapInstanceProperty(_json$result).call(_json$result, ({ table_name: tableName, id }) => ({\n      label: tableName,\n      value: id }));\n\n    return _uniqBy(datasets, 'value');\n  }\n  catch (e) {\n    handleError(e);\n  }\n  return [];\n};\nconst Actions = styled.div`\n  color: ${({ theme }) => theme.colors.grayscale.base};\n`;\nfunction ChartList(props) {var _context, _context2, _context3;\n  const { addDangerToast, addSuccessToast } = props;\n  const { state: { loading, resourceCount: chartCount, resourceCollection: charts, bulkSelectEnabled }, setResourceCollection: setCharts, hasPerm, fetchData, toggleBulkSelect, refreshData } = useListViewResource('chart', t('chart'), addDangerToast);\n  const chartIds = useMemo(() => _mapInstanceProperty(charts).call(charts, c => c.id), [charts]);\n  const [saveFavoriteStatus, favoriteStatus] = useFavoriteStatus('chart', chartIds, addDangerToast);\n  const { sliceCurrentlyEditing, handleChartUpdated, openChartEditModal, closeChartEditModal } = useChartEditModal(setCharts, charts);\n  const [importingChart, showImportModal] = useState(false);\n  const [passwordFields, setPasswordFields] = useState([]);\n  const [preparingExport, setPreparingExport] = useState(false);\n  const openChartImportModal = () => {\n    showImportModal(true);\n  };\n  const closeChartImportModal = () => {\n    showImportModal(false);\n  };\n  const handleChartImport = () => {\n    showImportModal(false);\n    refreshData();\n  };\n  const canCreate = hasPerm('can_write');\n  const canEdit = hasPerm('can_write');\n  const canDelete = hasPerm('can_write');\n  const canExport = hasPerm('can_read') && isFeatureEnabled(FeatureFlag.VERSIONED_EXPORT);\n  const initialSort = [{ id: 'changed_on_delta_humanized', desc: true }];\n  const handleBulkChartExport = chartsToExport => {\n    const ids = _mapInstanceProperty(chartsToExport).call(chartsToExport, ({ id }) => id);\n    handleResourceExport('chart', ids, () => {\n      setPreparingExport(false);\n    });\n    setPreparingExport(true);\n  };\n  function handleBulkChartDelete(chartsToDelete) {\n    SupersetClient.delete({\n      endpoint: `/api/v1/chart/?q=${rison.encode(_mapInstanceProperty(chartsToDelete).call(chartsToDelete, ({ id }) => id))}` }).\n    then(({ json = {} }) => {\n      refreshData();\n      addSuccessToast(json.message);\n    }, createErrorHandler(errMsg => addDangerToast(t('There was an issue deleting the selected charts: %s', errMsg))));\n  }\n  const columns = useMemo(() => [\n  ...(props.user.userId ?\n  [\n  {\n    Cell: ({ row: { original: { id } } }) => ___EmotionJSX(FaveStar, { itemId: id, saveFaveStar: saveFavoriteStatus, isStarred: favoriteStatus[id] }),\n    Header: '',\n    id: 'id',\n    disableSortBy: true,\n    size: 'xs' }] :\n\n\n  []),\n  {\n    Cell: ({ row: { original: { url, slice_name: sliceName } } }) => ___EmotionJSX(\"a\", { href: url, \"data-test\": `${sliceName}-list-chart-title` },\n    sliceName),\n\n    Header: t('Chart'),\n    accessor: 'slice_name' },\n\n  {\n    Cell: ({ row: { original: { viz_type: vizType } } }) => {var _registry$get;return ((_registry$get = registry.get(vizType)) == null ? void 0 : _registry$get.name) || vizType;},\n    Header: t('Visualization type'),\n    accessor: 'viz_type',\n    size: 'xxl' },\n\n  {\n    Cell: ({ row: { original: { datasource_name_text: dsNameTxt, datasource_url: dsUrl } } }) => ___EmotionJSX(\"a\", { href: dsUrl }, dsNameTxt),\n    Header: t('Dataset'),\n    accessor: 'datasource_id',\n    disableSortBy: true,\n    size: 'xl' },\n\n  {\n    Cell: ({ row: { original: { changed_by_name: changedByName, changed_by_url: changedByUrl } } }) => ___EmotionJSX(\"a\", { href: changedByUrl }, changedByName),\n    Header: t('Modified by'),\n    accessor: 'changed_by.first_name',\n    size: 'xl' },\n\n  {\n    Cell: ({ row: { original: { changed_on_delta_humanized: changedOn } } }) => ___EmotionJSX(\"span\", { className: \"no-wrap\" }, changedOn),\n    Header: t('Last modified'),\n    accessor: 'changed_on_delta_humanized',\n    size: 'xl' },\n\n  {\n    accessor: 'owners',\n    hidden: true,\n    disableSortBy: true },\n\n  {\n    Cell: ({ row: { original: { created_by: createdBy } } }) => createdBy ? `${createdBy.first_name} ${createdBy.last_name}` : '',\n    Header: t('Created by'),\n    accessor: 'created_by',\n    disableSortBy: true,\n    size: 'xl' },\n\n  {\n    Cell: ({ row: { original } }) => {\n      const handleDelete = () => handleChartDelete(original, addSuccessToast, addDangerToast, refreshData);\n      const openEditModal = () => openChartEditModal(original);\n      const handleExport = () => handleBulkChartExport([original]);\n      if (!canEdit && !canDelete && !canExport) {\n        return null;\n      }\n      return ___EmotionJSX(Actions, { className: \"actions\" },\n      canDelete && ___EmotionJSX(ConfirmStatusChange, { title: t('Please confirm'), description: ___EmotionJSX(React.Fragment, null,\n        t('Are you sure you want to delete'), ' ',\n        ___EmotionJSX(\"b\", null, original.slice_name), \"?\"),\n        onConfirm: handleDelete },\n      confirmDelete => ___EmotionJSX(Tooltip, { id: \"delete-action-tooltip\", title: t('Delete'), placement: \"bottom\" },\n      ___EmotionJSX(\"span\", { \"data-test\": \"trash\", role: \"button\", tabIndex: 0, className: \"action-button\", onClick: confirmDelete },\n      ___EmotionJSX(Icons.Trash, null)))),\n\n\n\n      canExport && ___EmotionJSX(Tooltip, { id: \"export-action-tooltip\", title: t('Export'), placement: \"bottom\" },\n      ___EmotionJSX(\"span\", { role: \"button\", tabIndex: 0, className: \"action-button\", onClick: handleExport },\n      ___EmotionJSX(Icons.Share, null))),\n\n\n      canEdit && ___EmotionJSX(Tooltip, { id: \"edit-action-tooltip\", title: t('Edit'), placement: \"bottom\" },\n      ___EmotionJSX(\"span\", { role: \"button\", tabIndex: 0, className: \"action-button\", onClick: openEditModal },\n      ___EmotionJSX(Icons.EditAlt, { \"data-test\": \"edit-alt\" }))));\n\n\n\n    },\n    Header: t('Actions'),\n    id: 'actions',\n    disableSortBy: true,\n    hidden: !canEdit && !canDelete }],\n\n  [\n  canEdit,\n  canDelete,\n  canExport,\n  ...(props.user.userId ? [favoriteStatus] : [])]);\n\n  const favoritesFilter = {\n    Header: t('Favorite'),\n    id: 'id',\n    urlDisplay: 'favorite',\n    input: 'select',\n    operator: FilterOperator.chartIsFav,\n    unfilteredLabel: t('Any'),\n    selects: [\n    { label: t('Yes'), value: true },\n    { label: t('No'), value: false }] };\n\n\n  const filters = [\n  {\n    Header: t('Owner'),\n    id: 'owners',\n    input: 'select',\n    operator: FilterOperator.relationManyMany,\n    unfilteredLabel: t('All'),\n    fetchSelects: createFetchRelated('chart', 'owners', createErrorHandler(errMsg => addDangerToast(t('An error occurred while fetching chart owners values: %s', errMsg))), props.user.userId),\n    paginate: true },\n\n  {\n    Header: t('Created by'),\n    id: 'created_by',\n    input: 'select',\n    operator: FilterOperator.relationOneMany,\n    unfilteredLabel: t('All'),\n    fetchSelects: createFetchRelated('chart', 'created_by', createErrorHandler(errMsg => addDangerToast(t('An error occurred while fetching chart created by values: %s', errMsg))), props.user.userId),\n    paginate: true },\n\n  {\n    Header: t('Viz type'),\n    id: 'viz_type',\n    input: 'select',\n    operator: FilterOperator.equals,\n    unfilteredLabel: t('All'),\n    selects: _sortInstanceProperty(_context = _mapInstanceProperty(_context2 = _filterInstanceProperty(_context3 = _keysInstanceProperty(registry).call(registry)).call(_context3,\n\n    k => {var _registry$get2;return nativeFilterGate(((_registry$get2 = registry.get(k)) == null ? void 0 : _registry$get2.behaviors) || []);})).call(_context2,\n    k => {var _registry$get3;return { label: ((_registry$get3 = registry.get(k)) == null ? void 0 : _registry$get3.name) || k, value: k };})).call(_context,\n    (a, b) => {\n      if (!a.label || !b.label) {\n        return 0;\n      }\n      if (a.label > b.label) {\n        return 1;\n      }\n      if (a.label < b.label) {\n        return -1;\n      }\n      return 0;\n    }) },\n\n  {\n    Header: t('Dataset'),\n    id: 'datasource_id',\n    input: 'select',\n    operator: FilterOperator.equals,\n    unfilteredLabel: t('All'),\n    fetchSelects: createFetchDatasets(createErrorHandler(errMsg => addDangerToast(t('An error occurred while fetching chart dataset values: %s', errMsg)))),\n    paginate: false },\n\n  ...(props.user.userId ? [favoritesFilter] : []),\n  {\n    Header: t('Search'),\n    id: 'slice_name',\n    input: 'search',\n    operator: FilterOperator.chartAllText }];\n\n\n  const sortTypes = [\n  {\n    desc: false,\n    id: 'slice_name',\n    label: t('Alphabetical'),\n    value: 'alphabetical' },\n\n  {\n    desc: true,\n    id: 'changed_on_delta_humanized',\n    label: t('Recently modified'),\n    value: 'recently_modified' },\n\n  {\n    desc: false,\n    id: 'changed_on_delta_humanized',\n    label: t('Least recently modified'),\n    value: 'least_recently_modified' }];\n\n\n  function renderCard(chart) {\n    const { userId } = props.user;\n    const userKey = getFromLocalStorage(userId.toString(), null);\n    return ___EmotionJSX(ChartCard, { chart: chart, showThumbnails: userKey ?\n      userKey.thumbnails :\n      isFeatureEnabled(FeatureFlag.THUMBNAILS), hasPerm: hasPerm, openChartEditModal: openChartEditModal, bulkSelectEnabled: bulkSelectEnabled, addDangerToast: addDangerToast, addSuccessToast: addSuccessToast, refreshData: refreshData, loading: loading, favoriteStatus: favoriteStatus[chart.id], saveFavoriteStatus: saveFavoriteStatus, handleBulkChartExport: handleBulkChartExport });\n  }\n  const subMenuButtons = [];\n  if (canDelete || canExport) {\n    subMenuButtons.push({\n      name: t('Bulk select'),\n      buttonStyle: 'secondary',\n      'data-test': 'bulk-select',\n      onClick: toggleBulkSelect });\n\n  }\n  if (canCreate) {\n    subMenuButtons.push({\n      name: ___EmotionJSX(React.Fragment, null,\n      ___EmotionJSX(\"i\", { className: \"fa fa-plus\" }), \" \", t('Chart')),\n\n      buttonStyle: 'primary',\n      onClick: () => {\n        window.location.assign('/chart/add');\n      } });\n\n  }\n  if (isFeatureEnabled(FeatureFlag.VERSIONED_EXPORT)) {\n    subMenuButtons.push({\n      name: ___EmotionJSX(Tooltip, { id: \"import-tooltip\", title: t('Import charts'), placement: \"bottomRight\" },\n      ___EmotionJSX(Icons.Import, { \"data-test\": \"import-button\" })),\n\n      buttonStyle: 'link',\n      onClick: openChartImportModal });\n\n  }\n  return ___EmotionJSX(React.Fragment, null,\n  ___EmotionJSX(SubMenu, { name: t('Charts'), buttons: subMenuButtons }),\n  sliceCurrentlyEditing && ___EmotionJSX(PropertiesModal, { onHide: closeChartEditModal, onSave: handleChartUpdated, show: true, slice: sliceCurrentlyEditing }),\n  ___EmotionJSX(ConfirmStatusChange, { title: t('Please confirm'), description: t('Are you sure you want to delete the selected charts?'), onConfirm: handleBulkChartDelete },\n  confirmDelete => {\n    const bulkActions = [];\n    if (canDelete) {\n      bulkActions.push({\n        key: 'delete',\n        name: t('Delete'),\n        type: 'danger',\n        onSelect: confirmDelete });\n\n    }\n    if (canExport) {\n      bulkActions.push({\n        key: 'export',\n        name: t('Export'),\n        type: 'primary',\n        onSelect: handleBulkChartExport });\n\n    }\n    return ___EmotionJSX(ListView, { bulkActions: bulkActions, bulkSelectEnabled: bulkSelectEnabled, cardSortSelectOptions: sortTypes, className: \"chart-list-view\", columns: columns, count: chartCount, data: charts, disableBulkSelect: toggleBulkSelect, fetchData: fetchData, filters: filters, initialSort: initialSort, loading: loading, pageSize: PAGE_SIZE, renderCard: renderCard, defaultViewMode: isFeatureEnabled(FeatureFlag.LISTVIEWS_DEFAULT_CARD_VIEW) ?\n      'card' :\n      'table' });\n  }),\n\n\n  ___EmotionJSX(ImportModelsModal, { resourceName: \"chart\", resourceLabel: t('chart'), passwordsNeededMessage: PASSWORDS_NEEDED_MESSAGE, confirmOverwriteMessage: CONFIRM_OVERWRITE_MESSAGE, addDangerToast: addDangerToast, addSuccessToast: addSuccessToast, onModelImport: handleChartImport, show: importingChart, onHide: closeChartImportModal, passwordFields: passwordFields, setPasswordFields: setPasswordFields }),\n  preparingExport && ___EmotionJSX(Loading, null));\n\n}__signature__(ChartList, \"useListViewResource{{ state: { loading, resourceCount: chartCount, resourceCollection: charts, bulkSelectEnabled, }, setResourceCollection: setCharts, hasPerm, fetchData, toggleBulkSelect, refreshData, }}\\nuseMemo{chartIds}\\nuseFavoriteStatus{[saveFavoriteStatus, favoriteStatus]}\\nuseChartEditModal{{ sliceCurrentlyEditing, handleChartUpdated, openChartEditModal, closeChartEditModal, }}\\nuseState{[importingChart, showImportModal](false)}\\nuseState{[passwordFields, setPasswordFields]([])}\\nuseState{[preparingExport, setPreparingExport](false)}\\nuseMemo{columns}\", () => [useListViewResource, useFavoriteStatus, useChartEditModal]);const _default =\nwithToasts(ChartList);export default _default;;(function () {var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined;if (!reactHotLoader) {return;}reactHotLoader.register(PAGE_SIZE, \"PAGE_SIZE\", \"/app/superset-frontend/src/views/CRUD/chart/ChartList.tsx\");reactHotLoader.register(PASSWORDS_NEEDED_MESSAGE, \"PASSWORDS_NEEDED_MESSAGE\", \"/app/superset-frontend/src/views/CRUD/chart/ChartList.tsx\");reactHotLoader.register(CONFIRM_OVERWRITE_MESSAGE, \"CONFIRM_OVERWRITE_MESSAGE\", \"/app/superset-frontend/src/views/CRUD/chart/ChartList.tsx\");reactHotLoader.register(registry, \"registry\", \"/app/superset-frontend/src/views/CRUD/chart/ChartList.tsx\");reactHotLoader.register(createFetchDatasets, \"createFetchDatasets\", \"/app/superset-frontend/src/views/CRUD/chart/ChartList.tsx\");reactHotLoader.register(Actions, \"Actions\", \"/app/superset-frontend/src/views/CRUD/chart/ChartList.tsx\");reactHotLoader.register(ChartList, \"ChartList\", \"/app/superset-frontend/src/views/CRUD/chart/ChartList.tsx\");reactHotLoader.register(_default, \"default\", \"/app/superset-frontend/src/views/CRUD/chart/ChartList.tsx\");})();;(function () {var leaveModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.leaveModule : undefined;leaveModule && leaveModule(module);})();","map":{"version":3,"sources":["/app/superset-frontend/src/views/CRUD/chart/ChartList.tsx"],"names":[],"mappings":"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","sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport {\n  getChartMetadataRegistry,\n  styled,\n  SupersetClient,\n  t,\n} from '@superset-ui/core';\nimport React, { useMemo, useState } from 'react';\nimport rison from 'rison';\nimport { uniqBy } from 'lodash';\nimport { FeatureFlag, isFeatureEnabled } from 'src/featureFlags';\nimport {\n  createErrorHandler,\n  createFetchRelated,\n  handleChartDelete,\n} from 'src/views/CRUD/utils';\nimport {\n  useChartEditModal,\n  useFavoriteStatus,\n  useListViewResource,\n} from 'src/views/CRUD/hooks';\nimport handleResourceExport from 'src/utils/export';\nimport ConfirmStatusChange from 'src/components/ConfirmStatusChange';\nimport SubMenu, { SubMenuProps } from 'src/components/Menu/SubMenu';\nimport FaveStar from 'src/components/FaveStar';\nimport ListView, {\n  Filter,\n  FilterOperator,\n  Filters,\n  ListViewProps,\n  SelectOption,\n} from 'src/components/ListView';\nimport Loading from 'src/components/Loading';\nimport { getFromLocalStorage } from 'src/utils/localStorageHelpers';\nimport withToasts from 'src/messageToasts/enhancers/withToasts';\nimport PropertiesModal from 'src/explore/components/PropertiesModal';\nimport ImportModelsModal from 'src/components/ImportModal/index';\nimport Chart from 'src/types/Chart';\nimport { Tooltip } from 'src/components/Tooltip';\nimport Icons from 'src/components/Icons';\nimport { nativeFilterGate } from 'src/dashboard/components/nativeFilters/utils';\nimport ChartCard from './ChartCard';\n\nconst PAGE_SIZE = 25;\nconst PASSWORDS_NEEDED_MESSAGE = t(\n  'The passwords for the databases below are needed in order to ' +\n    'import them together with the charts. Please note that the ' +\n    '\"Secure Extra\" and \"Certificate\" sections of ' +\n    'the database configuration are not present in export files, and ' +\n    'should be added manually after the import if they are needed.',\n);\nconst CONFIRM_OVERWRITE_MESSAGE = t(\n  'You are importing one or more charts that already exist. ' +\n    'Overwriting might cause you to lose some of your work. Are you ' +\n    'sure you want to overwrite?',\n);\n\nconst registry = getChartMetadataRegistry();\n\nconst createFetchDatasets = (handleError: (err: Response) => void) => async (\n  filterValue = '',\n  pageIndex?: number,\n  pageSize?: number,\n) => {\n  // add filters if filterValue\n  const filters = filterValue\n    ? { filters: [{ col: 'table_name', opr: 'sw', value: filterValue }] }\n    : {};\n  try {\n    const queryParams = rison.encode({\n      columns: ['datasource_name', 'datasource_id'],\n      keys: ['none'],\n      order_column: 'table_name',\n      order_direction: 'asc',\n      ...(pageIndex ? { page: pageIndex } : {}),\n      ...(pageSize ? { page_size: pageSize } : {}),\n      ...filters,\n    });\n\n    const { json = {} } = await SupersetClient.get({\n      endpoint: `/api/v1/dataset/?q=${queryParams}`,\n    });\n\n    const datasets = json?.result?.map(\n      ({ table_name: tableName, id }: { table_name: string; id: number }) => ({\n        label: tableName,\n        value: id,\n      }),\n    );\n\n    return uniqBy<SelectOption>(datasets, 'value');\n  } catch (e) {\n    handleError(e);\n  }\n  return [];\n};\n\ninterface ChartListProps {\n  addDangerToast: (msg: string) => void;\n  addSuccessToast: (msg: string) => void;\n  user: {\n    userId: string | number;\n  };\n}\n\nconst Actions = styled.div`\n  color: ${({ theme }) => theme.colors.grayscale.base};\n`;\n\nfunction ChartList(props: ChartListProps) {\n  const { addDangerToast, addSuccessToast } = props;\n\n  const {\n    state: {\n      loading,\n      resourceCount: chartCount,\n      resourceCollection: charts,\n      bulkSelectEnabled,\n    },\n    setResourceCollection: setCharts,\n    hasPerm,\n    fetchData,\n    toggleBulkSelect,\n    refreshData,\n  } = useListViewResource<Chart>('chart', t('chart'), addDangerToast);\n\n  const chartIds = useMemo(() => charts.map(c => c.id), [charts]);\n\n  const [saveFavoriteStatus, favoriteStatus] = useFavoriteStatus(\n    'chart',\n    chartIds,\n    addDangerToast,\n  );\n  const {\n    sliceCurrentlyEditing,\n    handleChartUpdated,\n    openChartEditModal,\n    closeChartEditModal,\n  } = useChartEditModal(setCharts, charts);\n\n  const [importingChart, showImportModal] = useState<boolean>(false);\n  const [passwordFields, setPasswordFields] = useState<string[]>([]);\n  const [preparingExport, setPreparingExport] = useState<boolean>(false);\n\n  const openChartImportModal = () => {\n    showImportModal(true);\n  };\n\n  const closeChartImportModal = () => {\n    showImportModal(false);\n  };\n\n  const handleChartImport = () => {\n    showImportModal(false);\n    refreshData();\n  };\n\n  const canCreate = hasPerm('can_write');\n  const canEdit = hasPerm('can_write');\n  const canDelete = hasPerm('can_write');\n  const canExport =\n    hasPerm('can_read') && isFeatureEnabled(FeatureFlag.VERSIONED_EXPORT);\n  const initialSort = [{ id: 'changed_on_delta_humanized', desc: true }];\n\n  const handleBulkChartExport = (chartsToExport: Chart[]) => {\n    const ids = chartsToExport.map(({ id }) => id);\n    handleResourceExport('chart', ids, () => {\n      setPreparingExport(false);\n    });\n    setPreparingExport(true);\n  };\n\n  function handleBulkChartDelete(chartsToDelete: Chart[]) {\n    SupersetClient.delete({\n      endpoint: `/api/v1/chart/?q=${rison.encode(\n        chartsToDelete.map(({ id }) => id),\n      )}`,\n    }).then(\n      ({ json = {} }) => {\n        refreshData();\n        addSuccessToast(json.message);\n      },\n      createErrorHandler(errMsg =>\n        addDangerToast(\n          t('There was an issue deleting the selected charts: %s', errMsg),\n        ),\n      ),\n    );\n  }\n\n  const columns = useMemo(\n    () => [\n      ...(props.user.userId\n        ? [\n            {\n              Cell: ({\n                row: {\n                  original: { id },\n                },\n              }: any) => (\n                <FaveStar\n                  itemId={id}\n                  saveFaveStar={saveFavoriteStatus}\n                  isStarred={favoriteStatus[id]}\n                />\n              ),\n              Header: '',\n              id: 'id',\n              disableSortBy: true,\n              size: 'xs',\n            },\n          ]\n        : []),\n      {\n        Cell: ({\n          row: {\n            original: { url, slice_name: sliceName },\n          },\n        }: any) => (\n          <a href={url} data-test={`${sliceName}-list-chart-title`}>\n            {sliceName}\n          </a>\n        ),\n        Header: t('Chart'),\n        accessor: 'slice_name',\n      },\n      {\n        Cell: ({\n          row: {\n            original: { viz_type: vizType },\n          },\n        }: any) => registry.get(vizType)?.name || vizType,\n        Header: t('Visualization type'),\n        accessor: 'viz_type',\n        size: 'xxl',\n      },\n      {\n        Cell: ({\n          row: {\n            original: {\n              datasource_name_text: dsNameTxt,\n              datasource_url: dsUrl,\n            },\n          },\n        }: any) => <a href={dsUrl}>{dsNameTxt}</a>,\n        Header: t('Dataset'),\n        accessor: 'datasource_id',\n        disableSortBy: true,\n        size: 'xl',\n      },\n      {\n        Cell: ({\n          row: {\n            original: {\n              changed_by_name: changedByName,\n              changed_by_url: changedByUrl,\n            },\n          },\n        }: any) => <a href={changedByUrl}>{changedByName}</a>,\n        Header: t('Modified by'),\n        accessor: 'changed_by.first_name',\n        size: 'xl',\n      },\n      {\n        Cell: ({\n          row: {\n            original: { changed_on_delta_humanized: changedOn },\n          },\n        }: any) => <span className=\"no-wrap\">{changedOn}</span>,\n        Header: t('Last modified'),\n        accessor: 'changed_on_delta_humanized',\n        size: 'xl',\n      },\n      {\n        accessor: 'owners',\n        hidden: true,\n        disableSortBy: true,\n      },\n      {\n        Cell: ({\n          row: {\n            original: { created_by: createdBy },\n          },\n        }: any) =>\n          createdBy ? `${createdBy.first_name} ${createdBy.last_name}` : '',\n        Header: t('Created by'),\n        accessor: 'created_by',\n        disableSortBy: true,\n        size: 'xl',\n      },\n      {\n        Cell: ({ row: { original } }: any) => {\n          const handleDelete = () =>\n            handleChartDelete(\n              original,\n              addSuccessToast,\n              addDangerToast,\n              refreshData,\n            );\n          const openEditModal = () => openChartEditModal(original);\n          const handleExport = () => handleBulkChartExport([original]);\n          if (!canEdit && !canDelete && !canExport) {\n            return null;\n          }\n\n          return (\n            <Actions className=\"actions\">\n              {canDelete && (\n                <ConfirmStatusChange\n                  title={t('Please confirm')}\n                  description={\n                    <>\n                      {t('Are you sure you want to delete')}{' '}\n                      <b>{original.slice_name}</b>?\n                    </>\n                  }\n                  onConfirm={handleDelete}\n                >\n                  {confirmDelete => (\n                    <Tooltip\n                      id=\"delete-action-tooltip\"\n                      title={t('Delete')}\n                      placement=\"bottom\"\n                    >\n                      <span\n                        data-test=\"trash\"\n                        role=\"button\"\n                        tabIndex={0}\n                        className=\"action-button\"\n                        onClick={confirmDelete}\n                      >\n                        <Icons.Trash />\n                      </span>\n                    </Tooltip>\n                  )}\n                </ConfirmStatusChange>\n              )}\n              {canExport && (\n                <Tooltip\n                  id=\"export-action-tooltip\"\n                  title={t('Export')}\n                  placement=\"bottom\"\n                >\n                  <span\n                    role=\"button\"\n                    tabIndex={0}\n                    className=\"action-button\"\n                    onClick={handleExport}\n                  >\n                    <Icons.Share />\n                  </span>\n                </Tooltip>\n              )}\n              {canEdit && (\n                <Tooltip\n                  id=\"edit-action-tooltip\"\n                  title={t('Edit')}\n                  placement=\"bottom\"\n                >\n                  <span\n                    role=\"button\"\n                    tabIndex={0}\n                    className=\"action-button\"\n                    onClick={openEditModal}\n                  >\n                    <Icons.EditAlt data-test=\"edit-alt\" />\n                  </span>\n                </Tooltip>\n              )}\n            </Actions>\n          );\n        },\n        Header: t('Actions'),\n        id: 'actions',\n        disableSortBy: true,\n        hidden: !canEdit && !canDelete,\n      },\n    ],\n    [\n      canEdit,\n      canDelete,\n      canExport,\n      ...(props.user.userId ? [favoriteStatus] : []),\n    ],\n  );\n\n  const favoritesFilter: Filter = {\n    Header: t('Favorite'),\n    id: 'id',\n    urlDisplay: 'favorite',\n    input: 'select',\n    operator: FilterOperator.chartIsFav,\n    unfilteredLabel: t('Any'),\n    selects: [\n      { label: t('Yes'), value: true },\n      { label: t('No'), value: false },\n    ],\n  };\n\n  const filters: Filters = [\n    {\n      Header: t('Owner'),\n      id: 'owners',\n      input: 'select',\n      operator: FilterOperator.relationManyMany,\n      unfilteredLabel: t('All'),\n      fetchSelects: createFetchRelated(\n        'chart',\n        'owners',\n        createErrorHandler(errMsg =>\n          addDangerToast(\n            t(\n              'An error occurred while fetching chart owners values: %s',\n              errMsg,\n            ),\n          ),\n        ),\n        props.user.userId,\n      ),\n      paginate: true,\n    },\n    {\n      Header: t('Created by'),\n      id: 'created_by',\n      input: 'select',\n      operator: FilterOperator.relationOneMany,\n      unfilteredLabel: t('All'),\n      fetchSelects: createFetchRelated(\n        'chart',\n        'created_by',\n        createErrorHandler(errMsg =>\n          addDangerToast(\n            t(\n              'An error occurred while fetching chart created by values: %s',\n              errMsg,\n            ),\n          ),\n        ),\n        props.user.userId,\n      ),\n      paginate: true,\n    },\n    {\n      Header: t('Viz type'),\n      id: 'viz_type',\n      input: 'select',\n      operator: FilterOperator.equals,\n      unfilteredLabel: t('All'),\n      selects: registry\n        .keys()\n        .filter(k => nativeFilterGate(registry.get(k)?.behaviors || []))\n        .map(k => ({ label: registry.get(k)?.name || k, value: k }))\n        .sort((a, b) => {\n          if (!a.label || !b.label) {\n            return 0;\n          }\n\n          if (a.label > b.label) {\n            return 1;\n          }\n          if (a.label < b.label) {\n            return -1;\n          }\n\n          return 0;\n        }),\n    },\n    {\n      Header: t('Dataset'),\n      id: 'datasource_id',\n      input: 'select',\n      operator: FilterOperator.equals,\n      unfilteredLabel: t('All'),\n      fetchSelects: createFetchDatasets(\n        createErrorHandler(errMsg =>\n          addDangerToast(\n            t(\n              'An error occurred while fetching chart dataset values: %s',\n              errMsg,\n            ),\n          ),\n        ),\n      ),\n      paginate: false,\n    },\n    ...(props.user.userId ? [favoritesFilter] : []),\n    {\n      Header: t('Search'),\n      id: 'slice_name',\n      input: 'search',\n      operator: FilterOperator.chartAllText,\n    },\n  ];\n\n  const sortTypes = [\n    {\n      desc: false,\n      id: 'slice_name',\n      label: t('Alphabetical'),\n      value: 'alphabetical',\n    },\n    {\n      desc: true,\n      id: 'changed_on_delta_humanized',\n      label: t('Recently modified'),\n      value: 'recently_modified',\n    },\n    {\n      desc: false,\n      id: 'changed_on_delta_humanized',\n      label: t('Least recently modified'),\n      value: 'least_recently_modified',\n    },\n  ];\n\n  function renderCard(chart: Chart) {\n    const { userId } = props.user;\n    const userKey = getFromLocalStorage(userId.toString(), null);\n    return (\n      <ChartCard\n        chart={chart}\n        showThumbnails={\n          userKey\n            ? userKey.thumbnails\n            : isFeatureEnabled(FeatureFlag.THUMBNAILS)\n        }\n        hasPerm={hasPerm}\n        openChartEditModal={openChartEditModal}\n        bulkSelectEnabled={bulkSelectEnabled}\n        addDangerToast={addDangerToast}\n        addSuccessToast={addSuccessToast}\n        refreshData={refreshData}\n        loading={loading}\n        favoriteStatus={favoriteStatus[chart.id]}\n        saveFavoriteStatus={saveFavoriteStatus}\n        handleBulkChartExport={handleBulkChartExport}\n      />\n    );\n  }\n  const subMenuButtons: SubMenuProps['buttons'] = [];\n  if (canDelete || canExport) {\n    subMenuButtons.push({\n      name: t('Bulk select'),\n      buttonStyle: 'secondary',\n      'data-test': 'bulk-select',\n      onClick: toggleBulkSelect,\n    });\n  }\n  if (canCreate) {\n    subMenuButtons.push({\n      name: (\n        <>\n          <i className=\"fa fa-plus\" /> {t('Chart')}\n        </>\n      ),\n      buttonStyle: 'primary',\n      onClick: () => {\n        window.location.assign('/chart/add');\n      },\n    });\n  }\n  if (isFeatureEnabled(FeatureFlag.VERSIONED_EXPORT)) {\n    subMenuButtons.push({\n      name: (\n        <Tooltip\n          id=\"import-tooltip\"\n          title={t('Import charts')}\n          placement=\"bottomRight\"\n        >\n          <Icons.Import data-test=\"import-button\" />\n        </Tooltip>\n      ),\n      buttonStyle: 'link',\n      onClick: openChartImportModal,\n    });\n  }\n  return (\n    <>\n      <SubMenu name={t('Charts')} buttons={subMenuButtons} />\n      {sliceCurrentlyEditing && (\n        <PropertiesModal\n          onHide={closeChartEditModal}\n          onSave={handleChartUpdated}\n          show\n          slice={sliceCurrentlyEditing}\n        />\n      )}\n      <ConfirmStatusChange\n        title={t('Please confirm')}\n        description={t('Are you sure you want to delete the selected charts?')}\n        onConfirm={handleBulkChartDelete}\n      >\n        {confirmDelete => {\n          const bulkActions: ListViewProps['bulkActions'] = [];\n          if (canDelete) {\n            bulkActions.push({\n              key: 'delete',\n              name: t('Delete'),\n              type: 'danger',\n              onSelect: confirmDelete,\n            });\n          }\n          if (canExport) {\n            bulkActions.push({\n              key: 'export',\n              name: t('Export'),\n              type: 'primary',\n              onSelect: handleBulkChartExport,\n            });\n          }\n          return (\n            <ListView<Chart>\n              bulkActions={bulkActions}\n              bulkSelectEnabled={bulkSelectEnabled}\n              cardSortSelectOptions={sortTypes}\n              className=\"chart-list-view\"\n              columns={columns}\n              count={chartCount}\n              data={charts}\n              disableBulkSelect={toggleBulkSelect}\n              fetchData={fetchData}\n              filters={filters}\n              initialSort={initialSort}\n              loading={loading}\n              pageSize={PAGE_SIZE}\n              renderCard={renderCard}\n              defaultViewMode={\n                isFeatureEnabled(FeatureFlag.LISTVIEWS_DEFAULT_CARD_VIEW)\n                  ? 'card'\n                  : 'table'\n              }\n            />\n          );\n        }}\n      </ConfirmStatusChange>\n\n      <ImportModelsModal\n        resourceName=\"chart\"\n        resourceLabel={t('chart')}\n        passwordsNeededMessage={PASSWORDS_NEEDED_MESSAGE}\n        confirmOverwriteMessage={CONFIRM_OVERWRITE_MESSAGE}\n        addDangerToast={addDangerToast}\n        addSuccessToast={addSuccessToast}\n        onModelImport={handleChartImport}\n        show={importingChart}\n        onHide={closeChartImportModal}\n        passwordFields={passwordFields}\n        setPasswordFields={setPasswordFields}\n      />\n      {preparingExport && <Loading />}\n    </>\n  );\n}\n\nexport default withToasts(ChartList);\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}