{"ast":null,"code":"import \"core-js/modules/web.dom-collections.iterator.js\";import _Promise from \"@babel/runtime-corejs3/core-js-stable/promise\";import _mapInstanceProperty from \"@babel/runtime-corejs3/core-js-stable/instance/map\";(function () {var enterModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.enterModule : undefined;enterModule && enterModule(module);})();var __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default.signature : function (a) {return a;}; /**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React, { useEffect, useState } from 'react';\nimport { styled, SupersetClient, t } from '@superset-ui/core';\nimport { AsyncSelect, CreatableSelect, Select } from 'src/components/Select';\nimport { FormLabel } from 'src/components/Form';\nimport DatabaseSelector from 'src/components/DatabaseSelector';\nimport RefreshLabel from 'src/components/RefreshLabel';\nimport CertifiedIcon from 'src/components/CertifiedIcon';\nimport WarningIconWithTooltip from 'src/components/WarningIconWithTooltip';import { jsx as ___EmotionJSX } from \"@emotion/react\";\nconst FieldTitle = styled.p`\n  color: ${({ theme }) => theme.colors.secondary.light2};\n  font-size: ${({ theme }) => theme.typography.sizes.s}px;\n  margin: 20px 0 10px 0;\n  text-transform: uppercase;\n`;\nconst TableSelectorWrapper = styled.div`\n  .fa-refresh {\n    padding-left: 9px;\n  }\n\n  .refresh-col {\n    display: flex;\n    align-items: center;\n    width: 30px;\n    margin-left: ${({ theme }) => theme.gridUnit}px;\n  }\n\n  .section {\n    padding-bottom: 5px;\n    display: flex;\n    flex-direction: row;\n  }\n\n  .select {\n    flex-grow: 1;\n  }\n\n  .divider {\n    border-bottom: 1px solid ${({ theme }) => theme.colors.secondary.light5};\n    margin: 15px 0;\n  }\n`;\nconst TableLabel = styled.span`\n  align-items: center;\n  display: flex;\n  white-space: nowrap;\n\n  > svg,\n  > small {\n    margin-right: ${({ theme }) => theme.gridUnit}px;\n  }\n`;\nconst TableSelector = ({ database, dbId, formMode = false, getDbList, handleError, isDatabaseSelectEnabled = true, onChange, onDbChange, onSchemaChange, onSchemasLoad, onTableChange, onTablesLoad, readOnly = false, schema, sqlLabMode = true, tableName, tableNameSticky = true }) => {\n  const [currentSchema, setCurrentSchema] = useState(schema);\n  const [currentTableName, setCurrentTableName] = useState(tableName);\n  const [tableLoading, setTableLoading] = useState(false);\n  const [tableOptions, setTableOptions] = useState([]);\n  function fetchTables(databaseId, schema, forceRefresh = false, substr = 'undefined') {\n    const dbSchema = schema || currentSchema;\n    const actualDbId = databaseId || dbId;\n    if (actualDbId && dbSchema) {\n      const encodedSchema = encodeURIComponent(dbSchema);\n      const encodedSubstr = encodeURIComponent(substr);\n      setTableLoading(true);\n      setTableOptions([]);\n      const endpoint = encodeURI(`/superset/tables/${actualDbId}/${encodedSchema}/${encodedSubstr}/${!!forceRefresh}/`);\n      return SupersetClient.get({ endpoint }).\n      then(({ json }) => {var _context;\n        const options = _mapInstanceProperty(_context = json.options).call(_context, o => ({\n          value: o.value,\n          schema: o.schema,\n          label: o.label,\n          title: o.title,\n          type: o.type,\n          extra: o == null ? void 0 : o.extra }));\n\n        setTableLoading(false);\n        setTableOptions(options);\n        if (onTablesLoad) {\n          onTablesLoad(json.options);\n        }\n      }).\n      catch(() => {\n        setTableLoading(false);\n        setTableOptions([]);\n        handleError(t('Error while fetching table list'));\n      });\n    }\n    setTableLoading(false);\n    setTableOptions([]);\n    return _Promise.resolve();\n  }\n  useEffect(() => {\n    if (dbId && schema) {\n      fetchTables();\n    }\n  }, [dbId, schema]);\n  function onSelectionChange({ dbId, schema, tableName }) {\n    setCurrentTableName(tableName);\n    setCurrentSchema(schema);\n    if (onChange) {\n      onChange({ dbId, schema, tableName });\n    }\n  }\n  function getTableNamesBySubStr(substr = 'undefined') {\n    if (!dbId || !substr) {\n      const options = [];\n      return _Promise.resolve({ options });\n    }\n    const encodedSchema = encodeURIComponent(schema || '');\n    const encodedSubstr = encodeURIComponent(substr);\n    return SupersetClient.get({\n      endpoint: encodeURI(`/superset/tables/${dbId}/${encodedSchema}/${encodedSubstr}`) }).\n    then(({ json }) => {var _context2;\n      const options = _mapInstanceProperty(_context2 = json.options).call(_context2, o => ({\n        value: o.value,\n        schema: o.schema,\n        label: o.label,\n        title: o.title,\n        type: o.type }));\n\n      return { options };\n    });\n  }\n  function changeTable(tableOpt) {\n    if (!tableOpt) {\n      setCurrentTableName('');\n      return;\n    }\n    const schemaName = tableOpt.schema;\n    const tableOptTableName = tableOpt.value;\n    if (tableNameSticky) {\n      onSelectionChange({\n        dbId,\n        schema: schemaName,\n        tableName: tableOptTableName });\n\n    }\n    if (onTableChange) {\n      onTableChange(tableOptTableName, schemaName);\n    }\n  }\n  function changeSchema(schemaOpt, force = false) {\n    const value = schemaOpt ? schemaOpt.value : null;\n    if (onSchemaChange) {\n      onSchemaChange(value);\n    }\n    onSelectionChange({\n      dbId,\n      schema: value,\n      tableName: undefined });\n\n    fetchTables(dbId, currentSchema, force);\n  }\n  function renderTableOption(option) {var _option$extra, _option$extra2;\n    return ___EmotionJSX(TableLabel, { title: option.label },\n    ___EmotionJSX(\"small\", { className: \"text-muted\" },\n    ___EmotionJSX(\"i\", { className: `fa fa-${option.type === 'view' ? 'eye' : 'table'}` })),\n\n    ((_option$extra = option.extra) == null ? void 0 : _option$extra.certification) && ___EmotionJSX(CertifiedIcon, { certifiedBy: option.extra.certification.certified_by, details: option.extra.certification.details, size: 20 }),\n    ((_option$extra2 = option.extra) == null ? void 0 : _option$extra2.warning_markdown) && ___EmotionJSX(WarningIconWithTooltip, { warningMarkdown: option.extra.warning_markdown, size: 20 }),\n    option.label);\n\n  }\n  function renderSelectRow(select, refreshBtn) {\n    return ___EmotionJSX(\"div\", { className: \"section\" },\n    ___EmotionJSX(\"span\", { className: \"select\" }, select),\n    ___EmotionJSX(\"span\", { className: \"refresh-col\" }, refreshBtn));\n\n  }\n  function renderDatabaseSelector() {\n    return ___EmotionJSX(DatabaseSelector, { dbId: dbId, formMode: formMode, getDbList: getDbList, getTableList: fetchTables, handleError: handleError, onChange: onSelectionChange, onDbChange: readOnly ? undefined : onDbChange, onSchemaChange: readOnly ? undefined : onSchemaChange, onSchemasLoad: onSchemasLoad, schema: currentSchema, sqlLabMode: sqlLabMode, isDatabaseSelectEnabled: isDatabaseSelectEnabled && !readOnly, readOnly: readOnly });\n  }\n  function renderTableSelect() {\n    const options = tableOptions;\n    let select = null;\n    if (currentSchema && !formMode) {\n      // dataset editor\n      select = ___EmotionJSX(Select, { name: \"select-table\", isLoading: tableLoading, ignoreAccents: false, placeholder: t('Select table or type table name'), autosize: false, onChange: changeTable, options: options\n        // @ts-ignore\n        , value: currentTableName, optionRenderer: renderTableOption, valueRenderer: renderTableOption, isDisabled: readOnly });\n    } else\n    if (formMode) {\n      select = ___EmotionJSX(CreatableSelect, { name: \"select-table\", isLoading: tableLoading, ignoreAccents: false, placeholder: t('Select table or type table name'), autosize: false, onChange: changeTable, options: options\n        // @ts-ignore\n        , value: currentTableName, optionRenderer: renderTableOption });\n    } else\n    {\n      // sql lab\n      let tableSelectPlaceholder;\n      let tableSelectDisabled = false;\n      if (database && database.allow_multi_schema_metadata_fetch) {\n        tableSelectPlaceholder = t('Type to search ...');\n      } else\n      {\n        tableSelectPlaceholder = t('Select table ');\n        tableSelectDisabled = true;\n      }\n      select = ___EmotionJSX(AsyncSelect, { name: \"async-select-table\", placeholder: tableSelectPlaceholder, isDisabled: tableSelectDisabled, autosize: false, onChange: changeTable\n        // @ts-ignore\n        , value: currentTableName, loadOptions: getTableNamesBySubStr, optionRenderer: renderTableOption });\n    }\n    const refresh = !formMode && !readOnly && ___EmotionJSX(RefreshLabel, { onClick: () => changeSchema({ value: schema }, true), tooltipContent: t('Force refresh table list') });\n    return renderSelectRow(select, refresh);\n  }\n  function renderSeeTableLabel() {\n    return ___EmotionJSX(\"div\", { className: \"section\" },\n    ___EmotionJSX(FormLabel, null,\n    t('See table schema'), ' ',\n    schema && ___EmotionJSX(\"small\", null,\n    tableOptions.length, \" in\",\n    ___EmotionJSX(\"i\", null, schema))));\n\n\n\n  }\n  return ___EmotionJSX(TableSelectorWrapper, null,\n  renderDatabaseSelector(),\n  !formMode && ___EmotionJSX(\"div\", { className: \"divider\" }),\n  sqlLabMode && renderSeeTableLabel(),\n  formMode && ___EmotionJSX(FieldTitle, null, t('Table')),\n  renderTableSelect());\n\n};__signature__(TableSelector, \"useState{[currentSchema, setCurrentSchema](schema)}\\nuseState{[currentTableName, setCurrentTableName](tableName)}\\nuseState{[tableLoading, setTableLoading](false)}\\nuseState{[tableOptions, setTableOptions]([])}\\nuseEffect{}\");const _default =\nTableSelector;export default _default;;(function () {var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined;if (!reactHotLoader) {return;}reactHotLoader.register(FieldTitle, \"FieldTitle\", \"/app/superset-frontend/src/components/TableSelector/index.tsx\");reactHotLoader.register(TableSelectorWrapper, \"TableSelectorWrapper\", \"/app/superset-frontend/src/components/TableSelector/index.tsx\");reactHotLoader.register(TableLabel, \"TableLabel\", \"/app/superset-frontend/src/components/TableSelector/index.tsx\");reactHotLoader.register(TableSelector, \"TableSelector\", \"/app/superset-frontend/src/components/TableSelector/index.tsx\");reactHotLoader.register(_default, \"default\", \"/app/superset-frontend/src/components/TableSelector/index.tsx\");})();;(function () {var leaveModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.leaveModule : undefined;leaveModule && leaveModule(module);})();","map":{"version":3,"sources":["/app/superset-frontend/src/components/TableSelector/index.tsx"],"names":[],"mappings":"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","sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React, {\n  FunctionComponent,\n  useEffect,\n  useState,\n  ReactNode,\n} from 'react';\nimport { styled, SupersetClient, t } from '@superset-ui/core';\nimport { AsyncSelect, CreatableSelect, Select } from 'src/components/Select';\n\nimport { FormLabel } from 'src/components/Form';\n\nimport DatabaseSelector from 'src/components/DatabaseSelector';\nimport RefreshLabel from 'src/components/RefreshLabel';\nimport CertifiedIcon from 'src/components/CertifiedIcon';\nimport WarningIconWithTooltip from 'src/components/WarningIconWithTooltip';\n\nconst FieldTitle = styled.p`\n  color: ${({ theme }) => theme.colors.secondary.light2};\n  font-size: ${({ theme }) => theme.typography.sizes.s}px;\n  margin: 20px 0 10px 0;\n  text-transform: uppercase;\n`;\n\nconst TableSelectorWrapper = styled.div`\n  .fa-refresh {\n    padding-left: 9px;\n  }\n\n  .refresh-col {\n    display: flex;\n    align-items: center;\n    width: 30px;\n    margin-left: ${({ theme }) => theme.gridUnit}px;\n  }\n\n  .section {\n    padding-bottom: 5px;\n    display: flex;\n    flex-direction: row;\n  }\n\n  .select {\n    flex-grow: 1;\n  }\n\n  .divider {\n    border-bottom: 1px solid ${({ theme }) => theme.colors.secondary.light5};\n    margin: 15px 0;\n  }\n`;\n\nconst TableLabel = styled.span`\n  align-items: center;\n  display: flex;\n  white-space: nowrap;\n\n  > svg,\n  > small {\n    margin-right: ${({ theme }) => theme.gridUnit}px;\n  }\n`;\n\ninterface TableSelectorProps {\n  clearable?: boolean;\n  database?: any;\n  dbId: number;\n  formMode?: boolean;\n  getDbList?: (arg0: any) => {};\n  handleError: (msg: string) => void;\n  isDatabaseSelectEnabled?: boolean;\n  onChange?: ({\n    dbId,\n    schema,\n  }: {\n    dbId: number;\n    schema?: string;\n    tableName?: string;\n  }) => void;\n  onDbChange?: (db: any) => void;\n  onSchemaChange?: (arg0?: any) => {};\n  onSchemasLoad?: () => void;\n  onTableChange?: (tableName: string, schema: string) => void;\n  onTablesLoad?: (options: Array<any>) => {};\n  readOnly?: boolean;\n  schema?: string;\n  sqlLabMode?: boolean;\n  tableName?: string;\n  tableNameSticky?: boolean;\n}\n\nconst TableSelector: FunctionComponent<TableSelectorProps> = ({\n  database,\n  dbId,\n  formMode = false,\n  getDbList,\n  handleError,\n  isDatabaseSelectEnabled = true,\n  onChange,\n  onDbChange,\n  onSchemaChange,\n  onSchemasLoad,\n  onTableChange,\n  onTablesLoad,\n  readOnly = false,\n  schema,\n  sqlLabMode = true,\n  tableName,\n  tableNameSticky = true,\n}) => {\n  const [currentSchema, setCurrentSchema] = useState<string | undefined>(\n    schema,\n  );\n  const [currentTableName, setCurrentTableName] = useState<string | undefined>(\n    tableName,\n  );\n  const [tableLoading, setTableLoading] = useState(false);\n  const [tableOptions, setTableOptions] = useState([]);\n\n  function fetchTables(\n    databaseId?: number,\n    schema?: string,\n    forceRefresh = false,\n    substr = 'undefined',\n  ) {\n    const dbSchema = schema || currentSchema;\n    const actualDbId = databaseId || dbId;\n    if (actualDbId && dbSchema) {\n      const encodedSchema = encodeURIComponent(dbSchema);\n      const encodedSubstr = encodeURIComponent(substr);\n      setTableLoading(true);\n      setTableOptions([]);\n      const endpoint = encodeURI(\n        `/superset/tables/${actualDbId}/${encodedSchema}/${encodedSubstr}/${!!forceRefresh}/`,\n      );\n      return SupersetClient.get({ endpoint })\n        .then(({ json }) => {\n          const options = json.options.map((o: any) => ({\n            value: o.value,\n            schema: o.schema,\n            label: o.label,\n            title: o.title,\n            type: o.type,\n            extra: o?.extra,\n          }));\n          setTableLoading(false);\n          setTableOptions(options);\n          if (onTablesLoad) {\n            onTablesLoad(json.options);\n          }\n        })\n        .catch(() => {\n          setTableLoading(false);\n          setTableOptions([]);\n          handleError(t('Error while fetching table list'));\n        });\n    }\n    setTableLoading(false);\n    setTableOptions([]);\n    return Promise.resolve();\n  }\n\n  useEffect(() => {\n    if (dbId && schema) {\n      fetchTables();\n    }\n  }, [dbId, schema]);\n\n  function onSelectionChange({\n    dbId,\n    schema,\n    tableName,\n  }: {\n    dbId: number;\n    schema?: string;\n    tableName?: string;\n  }) {\n    setCurrentTableName(tableName);\n    setCurrentSchema(schema);\n    if (onChange) {\n      onChange({ dbId, schema, tableName });\n    }\n  }\n\n  function getTableNamesBySubStr(substr = 'undefined') {\n    if (!dbId || !substr) {\n      const options: any[] = [];\n      return Promise.resolve({ options });\n    }\n    const encodedSchema = encodeURIComponent(schema || '');\n    const encodedSubstr = encodeURIComponent(substr);\n    return SupersetClient.get({\n      endpoint: encodeURI(\n        `/superset/tables/${dbId}/${encodedSchema}/${encodedSubstr}`,\n      ),\n    }).then(({ json }) => {\n      const options = json.options.map((o: any) => ({\n        value: o.value,\n        schema: o.schema,\n        label: o.label,\n        title: o.title,\n        type: o.type,\n      }));\n      return { options };\n    });\n  }\n\n  function changeTable(tableOpt: any) {\n    if (!tableOpt) {\n      setCurrentTableName('');\n      return;\n    }\n    const schemaName = tableOpt.schema;\n    const tableOptTableName = tableOpt.value;\n    if (tableNameSticky) {\n      onSelectionChange({\n        dbId,\n        schema: schemaName,\n        tableName: tableOptTableName,\n      });\n    }\n    if (onTableChange) {\n      onTableChange(tableOptTableName, schemaName);\n    }\n  }\n\n  function changeSchema(schemaOpt: any, force = false) {\n    const value = schemaOpt ? schemaOpt.value : null;\n    if (onSchemaChange) {\n      onSchemaChange(value);\n    }\n    onSelectionChange({\n      dbId,\n      schema: value,\n      tableName: undefined,\n    });\n    fetchTables(dbId, currentSchema, force);\n  }\n\n  function renderTableOption(option: any) {\n    return (\n      <TableLabel title={option.label}>\n        <small className=\"text-muted\">\n          <i className={`fa fa-${option.type === 'view' ? 'eye' : 'table'}`} />\n        </small>\n        {option.extra?.certification && (\n          <CertifiedIcon\n            certifiedBy={option.extra.certification.certified_by}\n            details={option.extra.certification.details}\n            size={20}\n          />\n        )}\n        {option.extra?.warning_markdown && (\n          <WarningIconWithTooltip\n            warningMarkdown={option.extra.warning_markdown}\n            size={20}\n          />\n        )}\n        {option.label}\n      </TableLabel>\n    );\n  }\n\n  function renderSelectRow(select: ReactNode, refreshBtn: ReactNode) {\n    return (\n      <div className=\"section\">\n        <span className=\"select\">{select}</span>\n        <span className=\"refresh-col\">{refreshBtn}</span>\n      </div>\n    );\n  }\n\n  function renderDatabaseSelector() {\n    return (\n      <DatabaseSelector\n        dbId={dbId}\n        formMode={formMode}\n        getDbList={getDbList}\n        getTableList={fetchTables}\n        handleError={handleError}\n        onChange={onSelectionChange}\n        onDbChange={readOnly ? undefined : onDbChange}\n        onSchemaChange={readOnly ? undefined : onSchemaChange}\n        onSchemasLoad={onSchemasLoad}\n        schema={currentSchema}\n        sqlLabMode={sqlLabMode}\n        isDatabaseSelectEnabled={isDatabaseSelectEnabled && !readOnly}\n        readOnly={readOnly}\n      />\n    );\n  }\n\n  function renderTableSelect() {\n    const options = tableOptions;\n    let select = null;\n    if (currentSchema && !formMode) {\n      // dataset editor\n      select = (\n        <Select\n          name=\"select-table\"\n          isLoading={tableLoading}\n          ignoreAccents={false}\n          placeholder={t('Select table or type table name')}\n          autosize={false}\n          onChange={changeTable}\n          options={options}\n          // @ts-ignore\n          value={currentTableName}\n          optionRenderer={renderTableOption}\n          valueRenderer={renderTableOption}\n          isDisabled={readOnly}\n        />\n      );\n    } else if (formMode) {\n      select = (\n        <CreatableSelect\n          name=\"select-table\"\n          isLoading={tableLoading}\n          ignoreAccents={false}\n          placeholder={t('Select table or type table name')}\n          autosize={false}\n          onChange={changeTable}\n          options={options}\n          // @ts-ignore\n          value={currentTableName}\n          optionRenderer={renderTableOption}\n        />\n      );\n    } else {\n      // sql lab\n      let tableSelectPlaceholder;\n      let tableSelectDisabled = false;\n      if (database && database.allow_multi_schema_metadata_fetch) {\n        tableSelectPlaceholder = t('Type to search ...');\n      } else {\n        tableSelectPlaceholder = t('Select table ');\n        tableSelectDisabled = true;\n      }\n      select = (\n        <AsyncSelect\n          name=\"async-select-table\"\n          placeholder={tableSelectPlaceholder}\n          isDisabled={tableSelectDisabled}\n          autosize={false}\n          onChange={changeTable}\n          // @ts-ignore\n          value={currentTableName}\n          loadOptions={getTableNamesBySubStr}\n          optionRenderer={renderTableOption}\n        />\n      );\n    }\n    const refresh = !formMode && !readOnly && (\n      <RefreshLabel\n        onClick={() => changeSchema({ value: schema }, true)}\n        tooltipContent={t('Force refresh table list')}\n      />\n    );\n    return renderSelectRow(select, refresh);\n  }\n\n  function renderSeeTableLabel() {\n    return (\n      <div className=\"section\">\n        <FormLabel>\n          {t('See table schema')}{' '}\n          {schema && (\n            <small>\n              {tableOptions.length} in\n              <i>{schema}</i>\n            </small>\n          )}\n        </FormLabel>\n      </div>\n    );\n  }\n\n  return (\n    <TableSelectorWrapper>\n      {renderDatabaseSelector()}\n      {!formMode && <div className=\"divider\" />}\n      {sqlLabMode && renderSeeTableLabel()}\n      {formMode && <FieldTitle>{t('Table')}</FieldTitle>}\n      {renderTableSelect()}\n    </TableSelectorWrapper>\n  );\n};\n\nexport default TableSelector;\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}