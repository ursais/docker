{"ast":null,"code":"import \"core-js/modules/es.string.replace.js\";(function () {var enterModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.enterModule : undefined;enterModule && enterModule(module);})();var __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default.signature : function (a) {return a;};import domToImage from 'dom-to-image';\nimport kebabCase from 'lodash/kebabCase';\nimport { t } from '@superset-ui/core';\nimport { addWarningToast } from 'src/messageToasts/actions';\n/**\n * @remark\n * same as https://github.com/apache/superset/blob/c53bc4ddf9808a8bb6916bbe3cb31935d33a2420/superset-frontend/stylesheets/less/variables.less#L34\n */\nconst GRAY_BACKGROUND_COLOR = '#F5F5F5';\n/**\n * generate a consistent file stem from a description and date\n *\n * @param description title or description of content of file\n * @param date date when file was generated\n */\nconst generateFileStem = (description, date = new Date()) => `${kebabCase(description)}-${date.toISOString().replace(/[: ]/g, '-')}`;\n/**\n * Create an event handler for turning an element into an image\n *\n * @param selector css selector of the parent element which should be turned into image\n * @param description name or a short description of what is being printed.\n *   Value will be normalized, and a date as well as a file extension will be added.\n * @param domToImageOptions dom-to-image Options object.\n * @param isExactSelector if false, searches for the closest ancestor that matches selector.\n * @returns event handler\n */\nexport default function downloadAsImage(selector, description, domToImageOptions = {}, isExactSelector = false) {\n  return event => {\n    const elementToPrint = isExactSelector ?\n    document.querySelector(selector) :\n    event.currentTarget.closest(selector);\n    if (!elementToPrint) {\n      return addWarningToast(t('Image download failed, please refresh and try again.'));\n    }\n    return domToImage.\n    toJpeg(elementToPrint, {\n      quality: 0.95,\n      bgcolor: GRAY_BACKGROUND_COLOR,\n      // Mapbox controls are loaded from different origin, causing CORS error\n      // See https://developer.mozilla.org/en-US/docs/Web/API/HTMLCanvasElement/toDataURL#exceptions\n      filter: node => node.className !== 'mapboxgl-control-container',\n      ...domToImageOptions }).\n\n    then(dataUrl => {\n      const link = document.createElement('a');\n      link.download = `${generateFileStem(description)}.jpg`;\n      link.href = dataUrl;\n      link.click();\n    }).\n    catch(e => {\n      console.error('Creating image failed', e);\n    });\n  };\n};(function () {var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined;if (!reactHotLoader) {return;}reactHotLoader.register(GRAY_BACKGROUND_COLOR, \"GRAY_BACKGROUND_COLOR\", \"/app/superset-frontend/src/utils/downloadAsImage.ts\");reactHotLoader.register(generateFileStem, \"generateFileStem\", \"/app/superset-frontend/src/utils/downloadAsImage.ts\");reactHotLoader.register(downloadAsImage, \"downloadAsImage\", \"/app/superset-frontend/src/utils/downloadAsImage.ts\");})();;(function () {var leaveModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.leaveModule : undefined;leaveModule && leaveModule(module);})();","map":{"version":3,"sources":["/app/superset-frontend/src/utils/downloadAsImage.ts"],"names":[],"mappings":"qVAmBA,OAAO,UAAP,MAAoC,cAApC;AACA,OAAO,SAAP,MAAsB,kBAAtB;AACA,SAAS,CAAT,QAAkB,mBAAlB;AACA,SAAS,eAAT,QAAgC,2BAAhC;AAEA;;;AAGG;AACH,MAAM,qBAAqB,GAAG,SAA9B;AAEA;;;;;AAKG;AACH,MAAM,gBAAgB,GAAG,CAAC,WAAD,EAAsB,IAAI,GAAG,IAAI,IAAJ,EAA7B,KACvB,GAAG,SAAS,CAAC,WAAD,CAAa,IAAI,IAAI,CAAC,WAAL,GAAmB,OAAnB,CAA2B,OAA3B,EAAoC,GAApC,CAAwC,EADvE;AAGA;;;;;;;;;AASG;AACH,eAAc,SAAU,eAAV,CACZ,QADY,EAEZ,WAFY,EAGZ,iBAAA,GAA6B,EAHjB,EAIZ,eAAe,GAAG,KAJN,EAIW;AAEvB,SAAQ,KAAD,IAA0B;AAC/B,UAAM,cAAc,GAAG,eAAe;AAClC,IAAA,QAAQ,CAAC,aAAT,CAAuB,QAAvB,CADkC;AAElC,IAAA,KAAK,CAAC,aAAN,CAAoB,OAApB,CAA4B,QAA5B,CAFJ;AAIA,QAAI,CAAC,cAAL,EAAqB;AACnB,aAAO,eAAe,CACpB,CAAC,CAAC,sDAAD,CADmB,CAAtB;AAGD;AAED,WAAO,UAAU;AACd,IAAA,MADI,CACG,cADH,EACmB;AACtB,MAAA,OAAO,EAAE,IADa;AAEtB,MAAA,OAAO,EAAE,qBAFa;AAGtB;AACA;AACA,MAAA,MAAM,EAAG,IAAD,IACN,IAAI,CAAC,SAAL,KAAmB,4BANC;AAOtB,SAAG,iBAPmB,EADnB;;AAUJ,IAAA,IAVI,CAUC,OAAO,IAAG;AACd,YAAM,IAAI,GAAG,QAAQ,CAAC,aAAT,CAAuB,GAAvB,CAAb;AACA,MAAA,IAAI,CAAC,QAAL,GAAgB,GAAG,gBAAgB,CAAC,WAAD,CAAa,MAAhD;AACA,MAAA,IAAI,CAAC,IAAL,GAAY,OAAZ;AACA,MAAA,IAAI,CAAC,KAAL;AACD,KAfI;AAgBJ,IAAA,KAhBI,CAgBE,CAAC,IAAG;AACT,MAAA,OAAO,CAAC,KAAR,CAAc,uBAAd,EAAuC,CAAvC;AACD,KAlBI,CAAP;AAmBD,GA9BD;AA+BD,C,iLA1DK,qB,0GAQA,gB,qGAakB,e","sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { SyntheticEvent } from 'react';\nimport domToImage, { Options } from 'dom-to-image';\nimport kebabCase from 'lodash/kebabCase';\nimport { t } from '@superset-ui/core';\nimport { addWarningToast } from 'src/messageToasts/actions';\n\n/**\n * @remark\n * same as https://github.com/apache/superset/blob/c53bc4ddf9808a8bb6916bbe3cb31935d33a2420/superset-frontend/stylesheets/less/variables.less#L34\n */\nconst GRAY_BACKGROUND_COLOR = '#F5F5F5';\n\n/**\n * generate a consistent file stem from a description and date\n *\n * @param description title or description of content of file\n * @param date date when file was generated\n */\nconst generateFileStem = (description: string, date = new Date()) =>\n  `${kebabCase(description)}-${date.toISOString().replace(/[: ]/g, '-')}`;\n\n/**\n * Create an event handler for turning an element into an image\n *\n * @param selector css selector of the parent element which should be turned into image\n * @param description name or a short description of what is being printed.\n *   Value will be normalized, and a date as well as a file extension will be added.\n * @param domToImageOptions dom-to-image Options object.\n * @param isExactSelector if false, searches for the closest ancestor that matches selector.\n * @returns event handler\n */\nexport default function downloadAsImage(\n  selector: string,\n  description: string,\n  domToImageOptions: Options = {},\n  isExactSelector = false,\n) {\n  return (event: SyntheticEvent) => {\n    const elementToPrint = isExactSelector\n      ? document.querySelector(selector)\n      : event.currentTarget.closest(selector);\n\n    if (!elementToPrint) {\n      return addWarningToast(\n        t('Image download failed, please refresh and try again.'),\n      );\n    }\n\n    return domToImage\n      .toJpeg(elementToPrint, {\n        quality: 0.95,\n        bgcolor: GRAY_BACKGROUND_COLOR,\n        // Mapbox controls are loaded from different origin, causing CORS error\n        // See https://developer.mozilla.org/en-US/docs/Web/API/HTMLCanvasElement/toDataURL#exceptions\n        filter: (node: Element) =>\n          node.className !== 'mapboxgl-control-container',\n        ...domToImageOptions,\n      })\n      .then(dataUrl => {\n        const link = document.createElement('a');\n        link.download = `${generateFileStem(description)}.jpg`;\n        link.href = dataUrl;\n        link.click();\n      })\n      .catch(e => {\n        console.error('Creating image failed', e);\n      });\n  };\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}