{"ast":null,"code":"import \"core-js/modules/web.dom-collections.iterator.js\";import _filterInstanceProperty from \"@babel/runtime-corejs3/core-js-stable/instance/filter\";import _Promise from \"@babel/runtime-corejs3/core-js-stable/promise\";import _mapInstanceProperty from \"@babel/runtime-corejs3/core-js-stable/instance/map\";(function () {var enterModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.enterModule : undefined;enterModule && enterModule(module);})();var __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default.signature : function (a) {return a;}; /**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React, { useEffect, useState } from 'react';\nimport { styled, SupersetClient, t } from '@superset-ui/core';\nimport rison from 'rison';\nimport { Select } from 'src/components/Select';\nimport Label from 'src/components/Label';\nimport RefreshLabel from 'src/components/RefreshLabel';\nimport SupersetAsyncSelect from 'src/components/AsyncSelect';import { jsx as ___EmotionJSX } from \"@emotion/react\";\nconst FieldTitle = styled.p`\n  color: ${({ theme }) => theme.colors.secondary.light2};\n  font-size: ${({ theme }) => theme.typography.sizes.s}px;\n  margin: 20px 0 10px 0;\n  text-transform: uppercase;\n`;\nconst DatabaseSelectorWrapper = styled.div`\n  .fa-refresh {\n    padding-left: 9px;\n  }\n\n  .refresh-col {\n    display: flex;\n    align-items: center;\n    width: 30px;\n    margin-left: ${({ theme }) => theme.gridUnit}px;\n  }\n\n  .section {\n    padding-bottom: 5px;\n    display: flex;\n    flex-direction: row;\n  }\n\n  .select {\n    flex-grow: 1;\n  }\n`;\nconst DatabaseOption = styled.span`\n  display: inline-flex;\n  align-items: center;\n`;\nexport default function DatabaseSelector({ dbId, formMode = false, getDbList, getTableList, handleError, isDatabaseSelectEnabled = true, onChange, onDbChange, onSchemaChange, onSchemasLoad, readOnly = false, schema, sqlLabMode = false }) {\n  const [currentDbId, setCurrentDbId] = useState(dbId);\n  const [currentSchema, setCurrentSchema] = useState(schema);\n  const [schemaLoading, setSchemaLoading] = useState(false);\n  const [schemaOptions, setSchemaOptions] = useState([]);\n  function fetchSchemas(databaseId, forceRefresh = false) {\n    const actualDbId = databaseId || dbId;\n    if (actualDbId) {\n      setSchemaLoading(true);\n      const queryParams = rison.encode({\n        force: Boolean(forceRefresh) });\n\n      const endpoint = `/api/v1/database/${actualDbId}/schemas/?q=${queryParams}`;\n      return SupersetClient.get({ endpoint }).\n      then(({ json }) => {var _context;\n        const options = _mapInstanceProperty(_context = json.result).call(_context, s => ({\n          value: s,\n          label: s,\n          title: s }));\n\n        setSchemaOptions(options);\n        setSchemaLoading(false);\n        if (onSchemasLoad) {\n          onSchemasLoad(options);\n        }\n      }).\n      catch(() => {\n        setSchemaOptions([]);\n        setSchemaLoading(false);\n        handleError(t('Error while fetching schema list'));\n      });\n    }\n    return _Promise.resolve();\n  }\n  useEffect(() => {\n    if (currentDbId) {\n      fetchSchemas(currentDbId);\n    }\n  }, [currentDbId]);\n  function onSelectChange({ dbId, schema }) {\n    setCurrentDbId(dbId);\n    setCurrentSchema(schema);\n    if (onChange) {\n      onChange({ dbId, schema, tableName: undefined });\n    }\n  }\n  function dbMutator(data) {var _context2;\n    if (getDbList) {\n      getDbList(data.result);\n    }\n    if (data.result.length === 0) {\n      handleError(t(\"It seems you don't have access to any database\"));\n    }\n    return _mapInstanceProperty(_context2 = data.result).call(_context2, row => ({\n      ...row,\n      // label is used for the typeahead\n      label: `${row.backend} ${row.database_name}` }));\n\n  }\n  function changeDataBase(db, force = false) {\n    const dbId = db ? db.id : null;\n    setSchemaOptions([]);\n    if (onSchemaChange) {\n      onSchemaChange(null);\n    }\n    if (onDbChange) {\n      onDbChange(db);\n    }\n    fetchSchemas(dbId, force);\n    onSelectChange({ dbId, schema: undefined });\n  }\n  function changeSchema(schemaOpt, force = false) {\n    const schema = schemaOpt ? schemaOpt.value : null;\n    if (onSchemaChange) {\n      onSchemaChange(schema);\n    }\n    setCurrentSchema(schema);\n    onSelectChange({ dbId: currentDbId, schema });\n    if (getTableList) {\n      getTableList(currentDbId, schema, force);\n    }\n  }\n  function renderDatabaseOption(db) {\n    return ___EmotionJSX(DatabaseOption, { title: db.database_name },\n    ___EmotionJSX(Label, { type: \"default\" }, db.backend), \" \", db.database_name);\n\n  }\n  function renderSelectRow(select, refreshBtn) {\n    return ___EmotionJSX(\"div\", { className: \"section\" },\n    ___EmotionJSX(\"span\", { className: \"select\" }, select),\n    ___EmotionJSX(\"span\", { className: \"refresh-col\" }, refreshBtn));\n\n  }\n  function renderDatabaseSelect() {\n    const queryParams = rison.encode({\n      order_columns: 'database_name',\n      order_direction: 'asc',\n      page: 0,\n      page_size: -1,\n      ...(formMode || !sqlLabMode ?\n      {} :\n      {\n        filters: [\n        {\n          col: 'expose_in_sqllab',\n          opr: 'eq',\n          value: true }] }) });\n\n\n\n\n    return renderSelectRow(___EmotionJSX(SupersetAsyncSelect, { \"data-test\": \"select-database\", dataEndpoint: `/api/v1/database/?q=${queryParams}`, onChange: db => changeDataBase(db), onAsyncError: () => handleError(t('Error while fetching database list')), clearable: false, value: currentDbId, valueKey: \"id\", valueRenderer: db => ___EmotionJSX(\"div\", null,\n      ___EmotionJSX(\"span\", { className: \"text-muted m-r-5\" }, t('Database:')),\n      renderDatabaseOption(db)),\n      optionRenderer: renderDatabaseOption, mutator: dbMutator, placeholder: t('Select a database'), autoSelect: true, isDisabled: !isDatabaseSelectEnabled || readOnly }), null);\n  }\n  function renderSchemaSelect() {\n    const value = _filterInstanceProperty(schemaOptions).call(schemaOptions, ({ value }) => currentSchema === value);\n    const refresh = !formMode && !readOnly && ___EmotionJSX(RefreshLabel, { onClick: () => changeDataBase({ id: dbId }, true), tooltipContent: t('Force refresh schema list') });\n    return renderSelectRow(___EmotionJSX(Select, { name: \"select-schema\", placeholder: t('Select a schema (%s)', schemaOptions.length), options: schemaOptions, value: value, valueRenderer: o => ___EmotionJSX(\"div\", null,\n      ___EmotionJSX(\"span\", { className: \"text-muted\" }, t('Schema:')), \" \", o.label),\n      isLoading: schemaLoading, autosize: false, onChange: item => changeSchema(item), isDisabled: readOnly }), refresh);\n  }\n  return ___EmotionJSX(DatabaseSelectorWrapper, { \"data-test\": \"DatabaseSelector\" },\n  formMode && ___EmotionJSX(FieldTitle, null, t('datasource')),\n  renderDatabaseSelect(),\n  formMode && ___EmotionJSX(FieldTitle, null, t('schema')),\n  renderSchemaSelect());\n\n}__signature__(DatabaseSelector, \"useState{[currentDbId, setCurrentDbId](dbId)}\\nuseState{[currentSchema, setCurrentSchema](schema)}\\nuseState{[schemaLoading, setSchemaLoading](false)}\\nuseState{[schemaOptions, setSchemaOptions]([])}\\nuseEffect{}\");;(function () {var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined;if (!reactHotLoader) {return;}reactHotLoader.register(FieldTitle, \"FieldTitle\", \"/app/superset-frontend/src/components/DatabaseSelector/index.tsx\");reactHotLoader.register(DatabaseSelectorWrapper, \"DatabaseSelectorWrapper\", \"/app/superset-frontend/src/components/DatabaseSelector/index.tsx\");reactHotLoader.register(DatabaseOption, \"DatabaseOption\", \"/app/superset-frontend/src/components/DatabaseSelector/index.tsx\");reactHotLoader.register(DatabaseSelector, \"DatabaseSelector\", \"/app/superset-frontend/src/components/DatabaseSelector/index.tsx\");})();;(function () {var leaveModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.leaveModule : undefined;leaveModule && leaveModule(module);})();","map":{"version":3,"sources":["/app/superset-frontend/src/components/DatabaseSelector/index.tsx"],"names":[],"mappings":"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","sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React, { ReactNode, useEffect, useState } from 'react';\nimport { styled, SupersetClient, t } from '@superset-ui/core';\nimport rison from 'rison';\nimport { Select } from 'src/components/Select';\nimport Label from 'src/components/Label';\nimport RefreshLabel from 'src/components/RefreshLabel';\nimport SupersetAsyncSelect from 'src/components/AsyncSelect';\n\nconst FieldTitle = styled.p`\n  color: ${({ theme }) => theme.colors.secondary.light2};\n  font-size: ${({ theme }) => theme.typography.sizes.s}px;\n  margin: 20px 0 10px 0;\n  text-transform: uppercase;\n`;\n\nconst DatabaseSelectorWrapper = styled.div`\n  .fa-refresh {\n    padding-left: 9px;\n  }\n\n  .refresh-col {\n    display: flex;\n    align-items: center;\n    width: 30px;\n    margin-left: ${({ theme }) => theme.gridUnit}px;\n  }\n\n  .section {\n    padding-bottom: 5px;\n    display: flex;\n    flex-direction: row;\n  }\n\n  .select {\n    flex-grow: 1;\n  }\n`;\n\nconst DatabaseOption = styled.span`\n  display: inline-flex;\n  align-items: center;\n`;\n\ninterface DatabaseSelectorProps {\n  dbId: number;\n  formMode?: boolean;\n  getDbList?: (arg0: any) => {};\n  getTableList?: (dbId: number, schema: string, force: boolean) => {};\n  handleError: (msg: string) => void;\n  isDatabaseSelectEnabled?: boolean;\n  onDbChange?: (db: any) => void;\n  onSchemaChange?: (arg0?: any) => {};\n  onSchemasLoad?: (schemas: Array<object>) => void;\n  readOnly?: boolean;\n  schema?: string;\n  sqlLabMode?: boolean;\n  onChange?: ({\n    dbId,\n    schema,\n  }: {\n    dbId: number;\n    schema?: string;\n    tableName?: string;\n  }) => void;\n}\n\nexport default function DatabaseSelector({\n  dbId,\n  formMode = false,\n  getDbList,\n  getTableList,\n  handleError,\n  isDatabaseSelectEnabled = true,\n  onChange,\n  onDbChange,\n  onSchemaChange,\n  onSchemasLoad,\n  readOnly = false,\n  schema,\n  sqlLabMode = false,\n}: DatabaseSelectorProps) {\n  const [currentDbId, setCurrentDbId] = useState(dbId);\n  const [currentSchema, setCurrentSchema] = useState<string | undefined>(\n    schema,\n  );\n  const [schemaLoading, setSchemaLoading] = useState(false);\n  const [schemaOptions, setSchemaOptions] = useState([]);\n\n  function fetchSchemas(databaseId: number, forceRefresh = false) {\n    const actualDbId = databaseId || dbId;\n    if (actualDbId) {\n      setSchemaLoading(true);\n      const queryParams = rison.encode({\n        force: Boolean(forceRefresh),\n      });\n      const endpoint = `/api/v1/database/${actualDbId}/schemas/?q=${queryParams}`;\n      return SupersetClient.get({ endpoint })\n        .then(({ json }) => {\n          const options = json.result.map((s: string) => ({\n            value: s,\n            label: s,\n            title: s,\n          }));\n          setSchemaOptions(options);\n          setSchemaLoading(false);\n          if (onSchemasLoad) {\n            onSchemasLoad(options);\n          }\n        })\n        .catch(() => {\n          setSchemaOptions([]);\n          setSchemaLoading(false);\n          handleError(t('Error while fetching schema list'));\n        });\n    }\n    return Promise.resolve();\n  }\n\n  useEffect(() => {\n    if (currentDbId) {\n      fetchSchemas(currentDbId);\n    }\n  }, [currentDbId]);\n\n  function onSelectChange({ dbId, schema }: { dbId: number; schema?: string }) {\n    setCurrentDbId(dbId);\n    setCurrentSchema(schema);\n    if (onChange) {\n      onChange({ dbId, schema, tableName: undefined });\n    }\n  }\n\n  function dbMutator(data: any) {\n    if (getDbList) {\n      getDbList(data.result);\n    }\n    if (data.result.length === 0) {\n      handleError(t(\"It seems you don't have access to any database\"));\n    }\n    return data.result.map((row: any) => ({\n      ...row,\n      // label is used for the typeahead\n      label: `${row.backend} ${row.database_name}`,\n    }));\n  }\n\n  function changeDataBase(db: any, force = false) {\n    const dbId = db ? db.id : null;\n    setSchemaOptions([]);\n    if (onSchemaChange) {\n      onSchemaChange(null);\n    }\n    if (onDbChange) {\n      onDbChange(db);\n    }\n    fetchSchemas(dbId, force);\n    onSelectChange({ dbId, schema: undefined });\n  }\n\n  function changeSchema(schemaOpt: any, force = false) {\n    const schema = schemaOpt ? schemaOpt.value : null;\n    if (onSchemaChange) {\n      onSchemaChange(schema);\n    }\n    setCurrentSchema(schema);\n    onSelectChange({ dbId: currentDbId, schema });\n    if (getTableList) {\n      getTableList(currentDbId, schema, force);\n    }\n  }\n\n  function renderDatabaseOption(db: any) {\n    return (\n      <DatabaseOption title={db.database_name}>\n        <Label type=\"default\">{db.backend}</Label> {db.database_name}\n      </DatabaseOption>\n    );\n  }\n\n  function renderSelectRow(select: ReactNode, refreshBtn: ReactNode) {\n    return (\n      <div className=\"section\">\n        <span className=\"select\">{select}</span>\n        <span className=\"refresh-col\">{refreshBtn}</span>\n      </div>\n    );\n  }\n\n  function renderDatabaseSelect() {\n    const queryParams = rison.encode({\n      order_columns: 'database_name',\n      order_direction: 'asc',\n      page: 0,\n      page_size: -1,\n      ...(formMode || !sqlLabMode\n        ? {}\n        : {\n            filters: [\n              {\n                col: 'expose_in_sqllab',\n                opr: 'eq',\n                value: true,\n              },\n            ],\n          }),\n    });\n\n    return renderSelectRow(\n      <SupersetAsyncSelect\n        data-test=\"select-database\"\n        dataEndpoint={`/api/v1/database/?q=${queryParams}`}\n        onChange={(db: any) => changeDataBase(db)}\n        onAsyncError={() =>\n          handleError(t('Error while fetching database list'))\n        }\n        clearable={false}\n        value={currentDbId}\n        valueKey=\"id\"\n        valueRenderer={(db: any) => (\n          <div>\n            <span className=\"text-muted m-r-5\">{t('Database:')}</span>\n            {renderDatabaseOption(db)}\n          </div>\n        )}\n        optionRenderer={renderDatabaseOption}\n        mutator={dbMutator}\n        placeholder={t('Select a database')}\n        autoSelect\n        isDisabled={!isDatabaseSelectEnabled || readOnly}\n      />,\n      null,\n    );\n  }\n\n  function renderSchemaSelect() {\n    const value = schemaOptions.filter(({ value }) => currentSchema === value);\n    const refresh = !formMode && !readOnly && (\n      <RefreshLabel\n        onClick={() => changeDataBase({ id: dbId }, true)}\n        tooltipContent={t('Force refresh schema list')}\n      />\n    );\n\n    return renderSelectRow(\n      <Select\n        name=\"select-schema\"\n        placeholder={t('Select a schema (%s)', schemaOptions.length)}\n        options={schemaOptions}\n        value={value}\n        valueRenderer={o => (\n          <div>\n            <span className=\"text-muted\">{t('Schema:')}</span> {o.label}\n          </div>\n        )}\n        isLoading={schemaLoading}\n        autosize={false}\n        onChange={item => changeSchema(item)}\n        isDisabled={readOnly}\n      />,\n      refresh,\n    );\n  }\n\n  return (\n    <DatabaseSelectorWrapper data-test=\"DatabaseSelector\">\n      {formMode && <FieldTitle>{t('datasource')}</FieldTitle>}\n      {renderDatabaseSelect()}\n      {formMode && <FieldTitle>{t('schema')}</FieldTitle>}\n      {renderSchemaSelect()}\n    </DatabaseSelectorWrapper>\n  );\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}