{"ast":null,"code":"import _includesInstanceProperty from \"@babel/runtime-corejs3/core-js-stable/instance/includes\";import _mapInstanceProperty from \"@babel/runtime-corejs3/core-js-stable/instance/map\";import _Object$values from \"@babel/runtime-corejs3/core-js-stable/object/values\";(function () {var enterModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.enterModule : undefined;enterModule && enterModule(module);})();var __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default.signature : function (a) {return a;}; /**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport {\nSupersetClient,\ngetTimeFormatter,\nTimeFormats } from\n'@superset-ui/core';\n\n// ATTENTION: If you change any constants, make sure to also change constants.py\n\nexport const NULL_STRING = '<NULL>';\nexport const TRUE_STRING = 'TRUE';\nexport const FALSE_STRING = 'FALSE';\n\n// moment time format strings\nexport const SHORT_DATE = 'MMM D, YYYY';\nexport const SHORT_TIME = 'h:m a';\n\nconst DATETIME_FORMATTER = getTimeFormatter(TimeFormats.DATABASE_DATETIME);\n\nexport function getParamFromQuery(query, param) {\n  const vars = query.split('&');\n  for (let i = 0; i < vars.length; i += 1) {\n    const pair = vars[i].split('=');\n    if (decodeURIComponent(pair[0]) === param) {\n      return decodeURIComponent(pair[1]);\n    }\n  }\n  return null;\n}\n\nexport function storeQuery(query) {\n  return SupersetClient.post({\n    endpoint: '/kv/store/',\n    postPayload: { data: query } }).\n  then(response => {\n    const baseUrl = window.location.origin + window.location.pathname;\n    const url = `${baseUrl}?id=${response.json.id}`;\n    return url;\n  });\n}\n\nexport function optionLabel(opt) {\n  if (opt === null) {\n    return NULL_STRING;\n  }\n  if (opt === '') {\n    return '<empty string>';\n  }\n  if (opt === true) {\n    return '<true>';\n  }\n  if (opt === false) {\n    return '<false>';\n  }\n  if (typeof opt !== 'string' && opt.toString) {\n    return opt.toString();\n  }\n  return opt;\n}\n\nexport function optionValue(opt) {\n  if (opt === null) {\n    return NULL_STRING;\n  }\n  return opt;\n}\n\nexport function optionFromValue(opt) {\n  // From a list of options, handles special values & labels\n  return { value: optionValue(opt), label: optionLabel(opt) };\n}\n\nexport function prepareCopyToClipboardTabularData(data) {\n  let result = '';\n  for (let i = 0; i < data.length; i += 1) {\n    result += `${_Object$values(data[i]).join('\\t')}\\n`;\n  }\n  return result;\n}\n\nexport function applyFormattingToTabularData(data) {\n  if (!data || data.length === 0 || !('__timestamp' in data[0])) {\n    return data;\n  }\n  return _mapInstanceProperty(data).call(data, row => ({\n    ...row,\n    /* eslint-disable no-underscore-dangle */\n    __timestamp:\n    row.__timestamp === 0 || row.__timestamp ?\n    DATETIME_FORMATTER(new Date(row.__timestamp)) :\n    row.__timestamp\n    /* eslint-enable no-underscore-dangle */ }));\n\n}\n\nexport const noOp = () => undefined;\n\n// Detects the user's OS through the browser\nexport const detectOS = () => {\n  const { appVersion } = navigator;\n\n  // Leveraging this condition because of stackOverflow\n  // https://stackoverflow.com/questions/11219582/how-to-detect-my-browser-version-and-operating-system-using-javascript\n  if (_includesInstanceProperty(appVersion).call(appVersion, 'Win')) return 'Windows';\n  if (_includesInstanceProperty(appVersion).call(appVersion, 'Mac')) return 'MacOS';\n  if (_includesInstanceProperty(appVersion).call(appVersion, 'X11')) return 'UNIX';\n  if (_includesInstanceProperty(appVersion).call(appVersion, 'Linux')) return 'Linux';\n\n  return 'Unknown OS';\n};;(function () {var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined;if (!reactHotLoader) {return;}reactHotLoader.register(NULL_STRING, \"NULL_STRING\", \"/app/superset-frontend/src/utils/common.js\");reactHotLoader.register(TRUE_STRING, \"TRUE_STRING\", \"/app/superset-frontend/src/utils/common.js\");reactHotLoader.register(FALSE_STRING, \"FALSE_STRING\", \"/app/superset-frontend/src/utils/common.js\");reactHotLoader.register(SHORT_DATE, \"SHORT_DATE\", \"/app/superset-frontend/src/utils/common.js\");reactHotLoader.register(SHORT_TIME, \"SHORT_TIME\", \"/app/superset-frontend/src/utils/common.js\");reactHotLoader.register(DATETIME_FORMATTER, \"DATETIME_FORMATTER\", \"/app/superset-frontend/src/utils/common.js\");reactHotLoader.register(getParamFromQuery, \"getParamFromQuery\", \"/app/superset-frontend/src/utils/common.js\");reactHotLoader.register(storeQuery, \"storeQuery\", \"/app/superset-frontend/src/utils/common.js\");reactHotLoader.register(optionLabel, \"optionLabel\", \"/app/superset-frontend/src/utils/common.js\");reactHotLoader.register(optionValue, \"optionValue\", \"/app/superset-frontend/src/utils/common.js\");reactHotLoader.register(optionFromValue, \"optionFromValue\", \"/app/superset-frontend/src/utils/common.js\");reactHotLoader.register(prepareCopyToClipboardTabularData, \"prepareCopyToClipboardTabularData\", \"/app/superset-frontend/src/utils/common.js\");reactHotLoader.register(applyFormattingToTabularData, \"applyFormattingToTabularData\", \"/app/superset-frontend/src/utils/common.js\");reactHotLoader.register(noOp, \"noOp\", \"/app/superset-frontend/src/utils/common.js\");reactHotLoader.register(detectOS, \"detectOS\", \"/app/superset-frontend/src/utils/common.js\");})();;(function () {var leaveModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.leaveModule : undefined;leaveModule && leaveModule(module);})();","map":{"version":3,"sources":["/app/superset-frontend/src/utils/common.js"],"names":["SupersetClient","getTimeFormatter","TimeFormats","NULL_STRING","TRUE_STRING","FALSE_STRING","SHORT_DATE","SHORT_TIME","DATETIME_FORMATTER","DATABASE_DATETIME","getParamFromQuery","query","param","vars","split","i","length","pair","decodeURIComponent","storeQuery","post","endpoint","postPayload","data","then","response","baseUrl","window","location","origin","pathname","url","json","id","optionLabel","opt","toString","optionValue","optionFromValue","value","label","prepareCopyToClipboardTabularData","result","join","applyFormattingToTabularData","row","__timestamp","Date","noOp","undefined","detectOS","appVersion","navigator"],"mappings":"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","sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport {\n  SupersetClient,\n  getTimeFormatter,\n  TimeFormats,\n} from '@superset-ui/core';\n\n// ATTENTION: If you change any constants, make sure to also change constants.py\n\nexport const NULL_STRING = '<NULL>';\nexport const TRUE_STRING = 'TRUE';\nexport const FALSE_STRING = 'FALSE';\n\n// moment time format strings\nexport const SHORT_DATE = 'MMM D, YYYY';\nexport const SHORT_TIME = 'h:m a';\n\nconst DATETIME_FORMATTER = getTimeFormatter(TimeFormats.DATABASE_DATETIME);\n\nexport function getParamFromQuery(query, param) {\n  const vars = query.split('&');\n  for (let i = 0; i < vars.length; i += 1) {\n    const pair = vars[i].split('=');\n    if (decodeURIComponent(pair[0]) === param) {\n      return decodeURIComponent(pair[1]);\n    }\n  }\n  return null;\n}\n\nexport function storeQuery(query) {\n  return SupersetClient.post({\n    endpoint: '/kv/store/',\n    postPayload: { data: query },\n  }).then(response => {\n    const baseUrl = window.location.origin + window.location.pathname;\n    const url = `${baseUrl}?id=${response.json.id}`;\n    return url;\n  });\n}\n\nexport function optionLabel(opt) {\n  if (opt === null) {\n    return NULL_STRING;\n  }\n  if (opt === '') {\n    return '<empty string>';\n  }\n  if (opt === true) {\n    return '<true>';\n  }\n  if (opt === false) {\n    return '<false>';\n  }\n  if (typeof opt !== 'string' && opt.toString) {\n    return opt.toString();\n  }\n  return opt;\n}\n\nexport function optionValue(opt) {\n  if (opt === null) {\n    return NULL_STRING;\n  }\n  return opt;\n}\n\nexport function optionFromValue(opt) {\n  // From a list of options, handles special values & labels\n  return { value: optionValue(opt), label: optionLabel(opt) };\n}\n\nexport function prepareCopyToClipboardTabularData(data) {\n  let result = '';\n  for (let i = 0; i < data.length; i += 1) {\n    result += `${Object.values(data[i]).join('\\t')}\\n`;\n  }\n  return result;\n}\n\nexport function applyFormattingToTabularData(data) {\n  if (!data || data.length === 0 || !('__timestamp' in data[0])) {\n    return data;\n  }\n  return data.map(row => ({\n    ...row,\n    /* eslint-disable no-underscore-dangle */\n    __timestamp:\n      row.__timestamp === 0 || row.__timestamp\n        ? DATETIME_FORMATTER(new Date(row.__timestamp))\n        : row.__timestamp,\n    /* eslint-enable no-underscore-dangle */\n  }));\n}\n\nexport const noOp = () => undefined;\n\n// Detects the user's OS through the browser\nexport const detectOS = () => {\n  const { appVersion } = navigator;\n\n  // Leveraging this condition because of stackOverflow\n  // https://stackoverflow.com/questions/11219582/how-to-detect-my-browser-version-and-operating-system-using-javascript\n  if (appVersion.includes('Win')) return 'Windows';\n  if (appVersion.includes('Mac')) return 'MacOS';\n  if (appVersion.includes('X11')) return 'UNIX';\n  if (appVersion.includes('Linux')) return 'Linux';\n\n  return 'Unknown OS';\n};\n"]},"metadata":{},"sourceType":"module"}