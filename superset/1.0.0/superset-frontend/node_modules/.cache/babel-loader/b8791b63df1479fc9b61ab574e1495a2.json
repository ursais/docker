{"ast":null,"code":"(function () {var enterModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.enterModule : undefined;enterModule && enterModule(module);})();var __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default.signature : function (a) {return a;}; /**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React from 'react';\nimport OmnibarDeprecated from 'omnibar';\n/**\n * @deprecated Component \"omnibar\" does not support prop className or id (the original implementation used className). However, the original javascript code was sending these prop and was working correctly. lol\n * As this behavior is unpredictable, and does not works whitch types, I have isolated this component so that in the future a better solution can be found and implemented.\n * We need to find a substitute for this component or some way of working around this problem\n */import { jsx as ___EmotionJSX } from \"@emotion/react\";\nexport function Omnibar({ extensions, placeholder, id }) {\n  return ___EmotionJSX(OmnibarDeprecated\n  // @ts-ignore\n  , { id: id, placeholder: placeholder, extensions: extensions });\n};(function () {var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined;if (!reactHotLoader) {return;}reactHotLoader.register(Omnibar, \"Omnibar\", \"/app/superset-frontend/src/components/OmniContainer/Omnibar.tsx\");})();;(function () {var leaveModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.leaveModule : undefined;leaveModule && leaveModule(module);})();","map":{"version":3,"sources":["/app/superset-frontend/src/components/OmniContainer/Omnibar.tsx"],"names":[],"mappings":"wSAAA;;;;;;;;;;;;;;;;;AAiBG;AAEH,OAAO,KAAP,MAAkB,OAAlB;AACA,OAAO,iBAAP,MAA8B,SAA9B;AAQA;;;;AAIG,G;AACH,OAAM,SAAU,OAAV,CAAkB,EAAE,UAAF,EAAc,WAAd,EAA2B,EAA3B,EAAlB,EAAwD;AAC5D,SACE,cAAC;AACC;AADF,MAEE,EAAE,EAAE,EAFN,EAGE,WAAW,EAAE,WAHf,EAIE,UAAU,EAAE,UAJd,GADF;AASD,C,iLAVe,O","sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport React from 'react';\nimport OmnibarDeprecated from 'omnibar';\n\ninterface Props {\n  id: string;\n  placeholder: string;\n  extensions: ((query: string) => Promise<any>)[];\n}\n\n/**\n * @deprecated Component \"omnibar\" does not support prop className or id (the original implementation used className). However, the original javascript code was sending these prop and was working correctly. lol\n * As this behavior is unpredictable, and does not works whitch types, I have isolated this component so that in the future a better solution can be found and implemented.\n * We need to find a substitute for this component or some way of working around this problem\n */\nexport function Omnibar({ extensions, placeholder, id }: Props) {\n  return (\n    <OmnibarDeprecated\n      // @ts-ignore\n      id={id}\n      placeholder={placeholder}\n      extensions={extensions}\n      // autoFocus // I tried to use this prop (autoFocus) but it only works the first time that Omnibar is shown\n    />\n  );\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}