{"ast":null,"code":"import _indexOfInstanceProperty from \"@babel/runtime-corejs3/core-js-stable/instance/index-of\";import _bindInstanceProperty from \"@babel/runtime-corejs3/core-js-stable/instance/bind\";(function () {var enterModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.enterModule : undefined;enterModule && enterModule(module);})();var __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default.signature : function (a) {return a;}; /**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { Row, Col, Input } from 'src/common/components';\nimport Button from 'src/components/Button';\nimport Popover from 'src/components/Popover';\nimport Select from 'src/components/Select';\nimport { t, styled } from '@superset-ui/core';\nimport { InfoTooltipWithTrigger } from '@superset-ui/chart-controls';\nimport BoundsControl from '../BoundsControl';\nimport CheckboxControl from '../CheckboxControl';import { jsx as ___EmotionJSX } from \"@emotion/react\";\n\nconst propTypes = {\n  label: PropTypes.string,\n  tooltip: PropTypes.string,\n  colType: PropTypes.string,\n  width: PropTypes.string,\n  height: PropTypes.string,\n  timeLag: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n  timeRatio: PropTypes.string,\n  comparisonType: PropTypes.string,\n  showYAxis: PropTypes.bool,\n  yAxisBounds: PropTypes.array,\n  bounds: PropTypes.array,\n  d3format: PropTypes.string,\n  dateFormat: PropTypes.string,\n  onChange: PropTypes.func };\n\n\nconst defaultProps = {\n  label: t('Time series columns'),\n  tooltip: '',\n  colType: '',\n  width: '',\n  height: '',\n  timeLag: '',\n  timeRatio: '',\n  comparisonType: '',\n  showYAxis: false,\n  yAxisBounds: [null, null],\n  bounds: [null, null],\n  d3format: '',\n  dateFormat: '' };\n\n\nconst comparisonTypeOptions = [\n{ value: 'value', label: 'Actual value' },\n{ value: 'diff', label: 'Difference' },\n{ value: 'perc', label: 'Percentage' },\n{ value: 'perc_change', label: 'Percentage change' }];\n\n\nconst colTypeOptions = [\n{ value: 'time', label: 'Time comparison' },\n{ value: 'contrib', label: 'Contribution' },\n{ value: 'spark', label: 'Sparkline' },\n{ value: 'avg', label: 'Period average' }];\n\n\nconst StyledRow = styled(Row)`\n  margin-top: ${({ theme }) => theme.gridUnit * 2}px;\n  display: flex;\n  align-items: center;\n`;\n\nconst StyledCol = styled(Col)`\n  display: flex;\n  align-items: center;\n`;\n\nconst StyledTooltip = styled(InfoTooltipWithTrigger)`\n  margin-left: ${({ theme }) => theme.gridUnit}px;\n  color: ${({ theme }) => theme.colors.grayscale.light1};\n`;\n\nconst ButtonBar = styled.div`\n  margin-top: ${({ theme }) => theme.gridUnit * 5}px;\n  display: flex;\n  justify-content: center;\n`;\n\nexport default class TimeSeriesColumnControl extends React.Component {\n  constructor(props) {var _context, _context2, _context3, _context4, _context5;\n    super(props);\n\n    this.onSave = _bindInstanceProperty(_context = this.onSave).call(_context, this);\n    this.onClose = _bindInstanceProperty(_context2 = this.onClose).call(_context2, this);\n    this.resetState = _bindInstanceProperty(_context3 = this.resetState).call(_context3, this);\n    this.initialState = _bindInstanceProperty(_context4 = this.initialState).call(_context4, this);\n    this.onPopoverVisibleChange = _bindInstanceProperty(_context5 = this.onPopoverVisibleChange).call(_context5, this);\n\n    this.state = this.initialState();\n  }\n\n  initialState() {\n    return {\n      label: this.props.label,\n      tooltip: this.props.tooltip,\n      colType: this.props.colType,\n      width: this.props.width,\n      height: this.props.height,\n      timeLag: this.props.timeLag || 0,\n      timeRatio: this.props.timeRatio,\n      comparisonType: this.props.comparisonType,\n      showYAxis: this.props.showYAxis,\n      yAxisBounds: this.props.yAxisBounds,\n      bounds: this.props.bounds,\n      d3format: this.props.d3format,\n      dateFormat: this.props.dateFormat,\n      popoverVisible: false };\n\n  }\n\n  resetState() {\n    const initialState = this.initialState();\n    this.setState({ ...initialState });\n  }\n\n  onSave() {\n    this.props.onChange(this.state);\n    this.setState({ popoverVisible: false });\n  }\n\n  onClose() {\n    this.resetState();\n  }\n\n  onSelectChange(attr, opt) {\n    this.setState({ [attr]: opt.value });\n  }\n\n  onTextInputChange(attr, event) {\n    this.setState({ [attr]: event.target.value });\n  }\n\n  onCheckboxChange(attr, value) {\n    this.setState({ [attr]: value });\n  }\n\n  onBoundsChange(bounds) {\n    this.setState({ bounds });\n  }\n\n  onPopoverVisibleChange(popoverVisible) {\n    if (popoverVisible) {\n      this.setState({ popoverVisible });\n    } else {\n      this.resetState();\n    }\n  }\n\n  onYAxisBoundsChange(yAxisBounds) {\n    this.setState({ yAxisBounds });\n  }\n\n  textSummary() {\n    return `${this.props.label}`;\n  }\n\n  formRow(label, tooltip, ttLabel, control) {\n    return (\n      ___EmotionJSX(StyledRow, null,\n      ___EmotionJSX(StyledCol, { xs: 24, md: 11 },\n      label,\n      ___EmotionJSX(StyledTooltip, { placement: \"top\", tooltip: tooltip, label: ttLabel })),\n\n      ___EmotionJSX(Col, { xs: 24, md: 13 },\n      control)));\n\n\n\n  }\n\n  renderPopover() {var _context6, _context7, _context8, _context9, _context10, _context11, _context12, _context13, _context14, _context15, _context16, _context17, _context18, _context19, _context20;\n    return (\n      ___EmotionJSX(\"div\", { id: \"ts-col-popo\", style: { width: 320 } },\n      this.formRow(\n      'Label',\n      'The column header label',\n      'time-lag',\n      ___EmotionJSX(Input, {\n        value: this.state.label,\n        onChange: _bindInstanceProperty(_context6 = this.onTextInputChange).call(_context6, this, 'label'),\n        placeholder: \"Label\" })),\n\n\n      this.formRow(\n      'Tooltip',\n      'Column header tooltip',\n      'col-tooltip',\n      ___EmotionJSX(Input, {\n        value: this.state.tooltip,\n        onChange: _bindInstanceProperty(_context7 = this.onTextInputChange).call(_context7, this, 'tooltip'),\n        placeholder: \"Tooltip\" })),\n\n\n      this.formRow(\n      'Type',\n      'Type of comparison, value difference or percentage',\n      'col-type',\n      ___EmotionJSX(Select, {\n        value: this.state.colType,\n        clearable: false,\n        onChange: _bindInstanceProperty(_context8 = this.onSelectChange).call(_context8, this, 'colType'),\n        options: colTypeOptions })),\n\n\n      ___EmotionJSX(\"hr\", null),\n      this.state.colType === 'spark' &&\n      this.formRow(\n      'Width',\n      'Width of the sparkline',\n      'spark-width',\n      ___EmotionJSX(Input, {\n        value: this.state.width,\n        onChange: _bindInstanceProperty(_context9 = this.onTextInputChange).call(_context9, this, 'width'),\n        placeholder: \"Width\" })),\n\n\n      this.state.colType === 'spark' &&\n      this.formRow(\n      'Height',\n      'Height of the sparkline',\n      'spark-width',\n      ___EmotionJSX(Input, {\n        value: this.state.height,\n        onChange: _bindInstanceProperty(_context10 = this.onTextInputChange).call(_context10, this, 'height'),\n        placeholder: \"Height\" })),\n\n\n      _indexOfInstanceProperty(_context11 = ['time', 'avg']).call(_context11, this.state.colType) >= 0 &&\n      this.formRow(\n      'Time lag',\n      'Number of periods to compare against',\n      'time-lag',\n      ___EmotionJSX(Input, {\n        value: this.state.timeLag,\n        onChange: _bindInstanceProperty(_context12 = this.onTextInputChange).call(_context12, this, 'timeLag'),\n        placeholder: \"Time Lag\" })),\n\n\n      _indexOfInstanceProperty(_context13 = ['spark']).call(_context13, this.state.colType) >= 0 &&\n      this.formRow(\n      'Time ratio',\n      'Number of periods to ratio against',\n      'time-ratio',\n      ___EmotionJSX(Input, {\n        value: this.state.timeRatio,\n        onChange: _bindInstanceProperty(_context14 = this.onTextInputChange).call(_context14, this, 'timeRatio'),\n        placeholder: \"Time Ratio\" })),\n\n\n      this.state.colType === 'time' &&\n      this.formRow(\n      'Type',\n      'Type of comparison, value difference or percentage',\n      'comp-type',\n      ___EmotionJSX(Select, {\n        value: this.state.comparisonType,\n        clearable: false,\n        onChange: _bindInstanceProperty(_context15 = this.onSelectChange).call(_context15, this, 'comparisonType'),\n        options: comparisonTypeOptions })),\n\n\n      this.state.colType === 'spark' &&\n      this.formRow(\n      'Show Y-axis',\n      'Show Y-axis on the sparkline. Will display the manually set min/max if set or min/max values in the data otherwise.',\n      'show-y-axis-bounds',\n      ___EmotionJSX(CheckboxControl, {\n        value: this.state.showYAxis,\n        onChange: _bindInstanceProperty(_context16 = this.onCheckboxChange).call(_context16, this, 'showYAxis') })),\n\n\n      this.state.colType === 'spark' &&\n      this.formRow(\n      'Y-axis bounds',\n      'Manually set min/max values for the y-axis.',\n      'y-axis-bounds',\n      ___EmotionJSX(BoundsControl, {\n        value: this.state.yAxisBounds,\n        onChange: _bindInstanceProperty(_context17 = this.onYAxisBoundsChange).call(_context17, this) })),\n\n\n      this.state.colType !== 'spark' &&\n      this.formRow(\n      'Color bounds',\n      `Number bounds used for color encoding from red to blue.\n              Reverse the numbers for blue to red. To get pure red or blue,\n              you can enter either only min or max.`,\n      'bounds',\n      ___EmotionJSX(BoundsControl, {\n        value: this.state.bounds,\n        onChange: _bindInstanceProperty(_context18 = this.onBoundsChange).call(_context18, this) })),\n\n\n      this.formRow(\n      'Number format',\n      'Optional d3 number format string',\n      'd3-format',\n      ___EmotionJSX(Input, {\n        value: this.state.d3format,\n        onChange: _bindInstanceProperty(_context19 = this.onTextInputChange).call(_context19, this, 'd3format'),\n        placeholder: \"Number format string\" })),\n\n\n      this.state.colType === 'spark' &&\n      this.formRow(\n      'Date format',\n      'Optional d3 date format string',\n      'date-format',\n      ___EmotionJSX(Input, {\n        value: this.state.dateFormat,\n        onChange: _bindInstanceProperty(_context20 = this.onTextInputChange).call(_context20, this, 'dateFormat'),\n        placeholder: \"Date format string\" })),\n\n\n      ___EmotionJSX(ButtonBar, null,\n      ___EmotionJSX(Button, { buttonSize: \"small\", onClick: this.onClose, cta: true },\n      t('Close')),\n\n      ___EmotionJSX(Button, {\n        buttonStyle: \"primary\",\n        buttonSize: \"small\",\n        onClick: this.onSave,\n        cta: true },\n\n      t('Save')))));\n\n\n\n\n  }\n\n  render() {\n    return (\n      ___EmotionJSX(\"span\", null,\n      this.textSummary(), ' ',\n      ___EmotionJSX(Popover, {\n        trigger: \"click\",\n        placement: \"right\",\n        content: this.renderPopover(),\n        title: \"Column Configuration\",\n        visible: this.state.popoverVisible,\n        onVisibleChange: this.onPopoverVisibleChange },\n\n      ___EmotionJSX(InfoTooltipWithTrigger, {\n        icon: \"edit\",\n        className: \"text-primary\",\n        label: \"edit-ts-column\" }))));\n\n\n\n\n  } // @ts-ignore\n  __reactstandin__regenerateByEval(key, code) {// @ts-ignore\n    this[key] = eval(code);}}\nTimeSeriesColumnControl.propTypes = propTypes;\nTimeSeriesColumnControl.defaultProps = defaultProps;;(function () {var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined;if (!reactHotLoader) {return;}reactHotLoader.register(propTypes, \"propTypes\", \"/app/superset-frontend/src/explore/components/controls/TimeSeriesColumnControl/index.jsx\");reactHotLoader.register(defaultProps, \"defaultProps\", \"/app/superset-frontend/src/explore/components/controls/TimeSeriesColumnControl/index.jsx\");reactHotLoader.register(comparisonTypeOptions, \"comparisonTypeOptions\", \"/app/superset-frontend/src/explore/components/controls/TimeSeriesColumnControl/index.jsx\");reactHotLoader.register(colTypeOptions, \"colTypeOptions\", \"/app/superset-frontend/src/explore/components/controls/TimeSeriesColumnControl/index.jsx\");reactHotLoader.register(StyledRow, \"StyledRow\", \"/app/superset-frontend/src/explore/components/controls/TimeSeriesColumnControl/index.jsx\");reactHotLoader.register(StyledCol, \"StyledCol\", \"/app/superset-frontend/src/explore/components/controls/TimeSeriesColumnControl/index.jsx\");reactHotLoader.register(StyledTooltip, \"StyledTooltip\", \"/app/superset-frontend/src/explore/components/controls/TimeSeriesColumnControl/index.jsx\");reactHotLoader.register(ButtonBar, \"ButtonBar\", \"/app/superset-frontend/src/explore/components/controls/TimeSeriesColumnControl/index.jsx\");reactHotLoader.register(TimeSeriesColumnControl, \"TimeSeriesColumnControl\", \"/app/superset-frontend/src/explore/components/controls/TimeSeriesColumnControl/index.jsx\");})();;(function () {var leaveModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.leaveModule : undefined;leaveModule && leaveModule(module);})();","map":{"version":3,"sources":["/app/superset-frontend/src/explore/components/controls/TimeSeriesColumnControl/index.jsx"],"names":["React","PropTypes","Row","Col","Input","Button","Popover","Select","t","styled","InfoTooltipWithTrigger","BoundsControl","CheckboxControl","propTypes","label","string","tooltip","colType","width","height","timeLag","oneOfType","number","timeRatio","comparisonType","showYAxis","bool","yAxisBounds","array","bounds","d3format","dateFormat","onChange","func","defaultProps","comparisonTypeOptions","value","colTypeOptions","StyledRow","theme","gridUnit","StyledCol","StyledTooltip","colors","grayscale","light1","ButtonBar","div","TimeSeriesColumnControl","Component","constructor","props","onSave","onClose","resetState","initialState","onPopoverVisibleChange","state","popoverVisible","setState","onSelectChange","attr","opt","onTextInputChange","event","target","onCheckboxChange","onBoundsChange","onYAxisBoundsChange","textSummary","formRow","ttLabel","control","renderPopover","render"],"mappings":"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","sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { Row, Col, Input } from 'src/common/components';\nimport Button from 'src/components/Button';\nimport Popover from 'src/components/Popover';\nimport Select from 'src/components/Select';\nimport { t, styled } from '@superset-ui/core';\nimport { InfoTooltipWithTrigger } from '@superset-ui/chart-controls';\nimport BoundsControl from '../BoundsControl';\nimport CheckboxControl from '../CheckboxControl';\n\nconst propTypes = {\n  label: PropTypes.string,\n  tooltip: PropTypes.string,\n  colType: PropTypes.string,\n  width: PropTypes.string,\n  height: PropTypes.string,\n  timeLag: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n  timeRatio: PropTypes.string,\n  comparisonType: PropTypes.string,\n  showYAxis: PropTypes.bool,\n  yAxisBounds: PropTypes.array,\n  bounds: PropTypes.array,\n  d3format: PropTypes.string,\n  dateFormat: PropTypes.string,\n  onChange: PropTypes.func,\n};\n\nconst defaultProps = {\n  label: t('Time series columns'),\n  tooltip: '',\n  colType: '',\n  width: '',\n  height: '',\n  timeLag: '',\n  timeRatio: '',\n  comparisonType: '',\n  showYAxis: false,\n  yAxisBounds: [null, null],\n  bounds: [null, null],\n  d3format: '',\n  dateFormat: '',\n};\n\nconst comparisonTypeOptions = [\n  { value: 'value', label: 'Actual value' },\n  { value: 'diff', label: 'Difference' },\n  { value: 'perc', label: 'Percentage' },\n  { value: 'perc_change', label: 'Percentage change' },\n];\n\nconst colTypeOptions = [\n  { value: 'time', label: 'Time comparison' },\n  { value: 'contrib', label: 'Contribution' },\n  { value: 'spark', label: 'Sparkline' },\n  { value: 'avg', label: 'Period average' },\n];\n\nconst StyledRow = styled(Row)`\n  margin-top: ${({ theme }) => theme.gridUnit * 2}px;\n  display: flex;\n  align-items: center;\n`;\n\nconst StyledCol = styled(Col)`\n  display: flex;\n  align-items: center;\n`;\n\nconst StyledTooltip = styled(InfoTooltipWithTrigger)`\n  margin-left: ${({ theme }) => theme.gridUnit}px;\n  color: ${({ theme }) => theme.colors.grayscale.light1};\n`;\n\nconst ButtonBar = styled.div`\n  margin-top: ${({ theme }) => theme.gridUnit * 5}px;\n  display: flex;\n  justify-content: center;\n`;\n\nexport default class TimeSeriesColumnControl extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.onSave = this.onSave.bind(this);\n    this.onClose = this.onClose.bind(this);\n    this.resetState = this.resetState.bind(this);\n    this.initialState = this.initialState.bind(this);\n    this.onPopoverVisibleChange = this.onPopoverVisibleChange.bind(this);\n\n    this.state = this.initialState();\n  }\n\n  initialState() {\n    return {\n      label: this.props.label,\n      tooltip: this.props.tooltip,\n      colType: this.props.colType,\n      width: this.props.width,\n      height: this.props.height,\n      timeLag: this.props.timeLag || 0,\n      timeRatio: this.props.timeRatio,\n      comparisonType: this.props.comparisonType,\n      showYAxis: this.props.showYAxis,\n      yAxisBounds: this.props.yAxisBounds,\n      bounds: this.props.bounds,\n      d3format: this.props.d3format,\n      dateFormat: this.props.dateFormat,\n      popoverVisible: false,\n    };\n  }\n\n  resetState() {\n    const initialState = this.initialState();\n    this.setState({ ...initialState });\n  }\n\n  onSave() {\n    this.props.onChange(this.state);\n    this.setState({ popoverVisible: false });\n  }\n\n  onClose() {\n    this.resetState();\n  }\n\n  onSelectChange(attr, opt) {\n    this.setState({ [attr]: opt.value });\n  }\n\n  onTextInputChange(attr, event) {\n    this.setState({ [attr]: event.target.value });\n  }\n\n  onCheckboxChange(attr, value) {\n    this.setState({ [attr]: value });\n  }\n\n  onBoundsChange(bounds) {\n    this.setState({ bounds });\n  }\n\n  onPopoverVisibleChange(popoverVisible) {\n    if (popoverVisible) {\n      this.setState({ popoverVisible });\n    } else {\n      this.resetState();\n    }\n  }\n\n  onYAxisBoundsChange(yAxisBounds) {\n    this.setState({ yAxisBounds });\n  }\n\n  textSummary() {\n    return `${this.props.label}`;\n  }\n\n  formRow(label, tooltip, ttLabel, control) {\n    return (\n      <StyledRow>\n        <StyledCol xs={24} md={11}>\n          {label}\n          <StyledTooltip placement=\"top\" tooltip={tooltip} label={ttLabel} />\n        </StyledCol>\n        <Col xs={24} md={13}>\n          {control}\n        </Col>\n      </StyledRow>\n    );\n  }\n\n  renderPopover() {\n    return (\n      <div id=\"ts-col-popo\" style={{ width: 320 }}>\n        {this.formRow(\n          'Label',\n          'The column header label',\n          'time-lag',\n          <Input\n            value={this.state.label}\n            onChange={this.onTextInputChange.bind(this, 'label')}\n            placeholder=\"Label\"\n          />,\n        )}\n        {this.formRow(\n          'Tooltip',\n          'Column header tooltip',\n          'col-tooltip',\n          <Input\n            value={this.state.tooltip}\n            onChange={this.onTextInputChange.bind(this, 'tooltip')}\n            placeholder=\"Tooltip\"\n          />,\n        )}\n        {this.formRow(\n          'Type',\n          'Type of comparison, value difference or percentage',\n          'col-type',\n          <Select\n            value={this.state.colType}\n            clearable={false}\n            onChange={this.onSelectChange.bind(this, 'colType')}\n            options={colTypeOptions}\n          />,\n        )}\n        <hr />\n        {this.state.colType === 'spark' &&\n          this.formRow(\n            'Width',\n            'Width of the sparkline',\n            'spark-width',\n            <Input\n              value={this.state.width}\n              onChange={this.onTextInputChange.bind(this, 'width')}\n              placeholder=\"Width\"\n            />,\n          )}\n        {this.state.colType === 'spark' &&\n          this.formRow(\n            'Height',\n            'Height of the sparkline',\n            'spark-width',\n            <Input\n              value={this.state.height}\n              onChange={this.onTextInputChange.bind(this, 'height')}\n              placeholder=\"Height\"\n            />,\n          )}\n        {['time', 'avg'].indexOf(this.state.colType) >= 0 &&\n          this.formRow(\n            'Time lag',\n            'Number of periods to compare against',\n            'time-lag',\n            <Input\n              value={this.state.timeLag}\n              onChange={this.onTextInputChange.bind(this, 'timeLag')}\n              placeholder=\"Time Lag\"\n            />,\n          )}\n        {['spark'].indexOf(this.state.colType) >= 0 &&\n          this.formRow(\n            'Time ratio',\n            'Number of periods to ratio against',\n            'time-ratio',\n            <Input\n              value={this.state.timeRatio}\n              onChange={this.onTextInputChange.bind(this, 'timeRatio')}\n              placeholder=\"Time Ratio\"\n            />,\n          )}\n        {this.state.colType === 'time' &&\n          this.formRow(\n            'Type',\n            'Type of comparison, value difference or percentage',\n            'comp-type',\n            <Select\n              value={this.state.comparisonType}\n              clearable={false}\n              onChange={this.onSelectChange.bind(this, 'comparisonType')}\n              options={comparisonTypeOptions}\n            />,\n          )}\n        {this.state.colType === 'spark' &&\n          this.formRow(\n            'Show Y-axis',\n            'Show Y-axis on the sparkline. Will display the manually set min/max if set or min/max values in the data otherwise.',\n            'show-y-axis-bounds',\n            <CheckboxControl\n              value={this.state.showYAxis}\n              onChange={this.onCheckboxChange.bind(this, 'showYAxis')}\n            />,\n          )}\n        {this.state.colType === 'spark' &&\n          this.formRow(\n            'Y-axis bounds',\n            'Manually set min/max values for the y-axis.',\n            'y-axis-bounds',\n            <BoundsControl\n              value={this.state.yAxisBounds}\n              onChange={this.onYAxisBoundsChange.bind(this)}\n            />,\n          )}\n        {this.state.colType !== 'spark' &&\n          this.formRow(\n            'Color bounds',\n            `Number bounds used for color encoding from red to blue.\n              Reverse the numbers for blue to red. To get pure red or blue,\n              you can enter either only min or max.`,\n            'bounds',\n            <BoundsControl\n              value={this.state.bounds}\n              onChange={this.onBoundsChange.bind(this)}\n            />,\n          )}\n        {this.formRow(\n          'Number format',\n          'Optional d3 number format string',\n          'd3-format',\n          <Input\n            value={this.state.d3format}\n            onChange={this.onTextInputChange.bind(this, 'd3format')}\n            placeholder=\"Number format string\"\n          />,\n        )}\n        {this.state.colType === 'spark' &&\n          this.formRow(\n            'Date format',\n            'Optional d3 date format string',\n            'date-format',\n            <Input\n              value={this.state.dateFormat}\n              onChange={this.onTextInputChange.bind(this, 'dateFormat')}\n              placeholder=\"Date format string\"\n            />,\n          )}\n        <ButtonBar>\n          <Button buttonSize=\"small\" onClick={this.onClose} cta>\n            {t('Close')}\n          </Button>\n          <Button\n            buttonStyle=\"primary\"\n            buttonSize=\"small\"\n            onClick={this.onSave}\n            cta\n          >\n            {t('Save')}\n          </Button>\n        </ButtonBar>\n      </div>\n    );\n  }\n\n  render() {\n    return (\n      <span>\n        {this.textSummary()}{' '}\n        <Popover\n          trigger=\"click\"\n          placement=\"right\"\n          content={this.renderPopover()}\n          title=\"Column Configuration\"\n          visible={this.state.popoverVisible}\n          onVisibleChange={this.onPopoverVisibleChange}\n        >\n          <InfoTooltipWithTrigger\n            icon=\"edit\"\n            className=\"text-primary\"\n            label=\"edit-ts-column\"\n          />\n        </Popover>\n      </span>\n    );\n  }\n}\n\nTimeSeriesColumnControl.propTypes = propTypes;\nTimeSeriesColumnControl.defaultProps = defaultProps;\n"]},"metadata":{},"sourceType":"module"}