{"ast":null,"code":"(function () {var enterModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.enterModule : undefined;enterModule && enterModule(module);})();var __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default.signature : function (a) {return a;}; /**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport handleHover from './handleHover';\nimport handleDrop from './handleDrop';\n\n// note: the 'type' hook is not useful for us as dropping is contigent on other properties\nconst TYPE = 'DRAG_DROPPABLE';\n\nexport const dragConfig = [\nTYPE,\n{\n  canDrag(props) {\n    return !props.disableDragDrop;\n  },\n\n  // this defines the dragging item object returned by monitor.getItem()\n  beginDrag(props /* , monitor, component */) {\n    const { component, index, parentComponent = {} } = props;\n    return {\n      type: component.type,\n      id: component.id,\n      meta: component.meta,\n      index,\n      parentId: parentComponent.id,\n      parentType: parentComponent.type };\n\n  } },\n\nfunction dragStateToProps(connect, monitor) {\n  return {\n    dragSourceRef: connect.dragSource(),\n    dragPreviewRef: connect.dragPreview(),\n    isDragging: monitor.isDragging() };\n\n}];\n\n\nexport const dropConfig = [\nTYPE,\n{\n  hover(props, monitor, component) {\n    if (component && component.mounted) {\n      handleHover(props, monitor, component);\n    }\n  },\n  // note:\n  //  the react-dnd api requires that the drop() method return a result or undefined\n  //  monitor.didDrop() cannot be used because it returns true only for the most-nested target\n  drop(props, monitor, component) {\n    const dropResult = monitor.getDropResult();\n    if ((!dropResult || !dropResult.destination) && component.mounted) {\n      return handleDrop(props, monitor, component);\n    }\n    return undefined;\n  } },\n\nfunction dropStateToProps(connect, monitor) {\n  return {\n    droppableRef: connect.dropTarget(),\n    isDraggingOver: monitor.isOver(),\n    isDraggingOverShallow: monitor.isOver({ shallow: true }) };\n\n}];;(function () {var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined;if (!reactHotLoader) {return;}reactHotLoader.register(TYPE, \"TYPE\", \"/app/superset-frontend/src/dashboard/components/dnd/dragDroppableConfig.js\");reactHotLoader.register(dragConfig, \"dragConfig\", \"/app/superset-frontend/src/dashboard/components/dnd/dragDroppableConfig.js\");reactHotLoader.register(dropConfig, \"dropConfig\", \"/app/superset-frontend/src/dashboard/components/dnd/dragDroppableConfig.js\");})();;(function () {var leaveModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.leaveModule : undefined;leaveModule && leaveModule(module);})();","map":{"version":3,"sources":["/app/superset-frontend/src/dashboard/components/dnd/dragDroppableConfig.js"],"names":["handleHover","handleDrop","TYPE","dragConfig","canDrag","props","disableDragDrop","beginDrag","component","index","parentComponent","type","id","meta","parentId","parentType","dragStateToProps","connect","monitor","dragSourceRef","dragSource","dragPreviewRef","dragPreview","isDragging","dropConfig","hover","mounted","drop","dropResult","getDropResult","destination","undefined","dropStateToProps","droppableRef","dropTarget","isDraggingOver","isOver","isDraggingOverShallow","shallow"],"mappings":"wSAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAOA,WAAP,MAAwB,eAAxB;AACA,OAAOC,UAAP,MAAuB,cAAvB;;AAEA;AACA,MAAMC,IAAI,GAAG,gBAAb;;AAEA,OAAO,MAAMC,UAAU,GAAG;AACxBD,IADwB;AAExB;AACEE,EAAAA,OAAO,CAACC,KAAD,EAAQ;AACb,WAAO,CAACA,KAAK,CAACC,eAAd;AACD,GAHH;;AAKE;AACAC,EAAAA,SAAS,CAACF,KAAD,CAAO,0BAAP,EAAmC;AAC1C,UAAM,EAAEG,SAAF,EAAaC,KAAb,EAAoBC,eAAe,GAAG,EAAtC,KAA6CL,KAAnD;AACA,WAAO;AACLM,MAAAA,IAAI,EAAEH,SAAS,CAACG,IADX;AAELC,MAAAA,EAAE,EAAEJ,SAAS,CAACI,EAFT;AAGLC,MAAAA,IAAI,EAAEL,SAAS,CAACK,IAHX;AAILJ,MAAAA,KAJK;AAKLK,MAAAA,QAAQ,EAAEJ,eAAe,CAACE,EALrB;AAMLG,MAAAA,UAAU,EAAEL,eAAe,CAACC,IANvB,EAAP;;AAQD,GAhBH,EAFwB;;AAoBxB,SAASK,gBAAT,CAA0BC,OAA1B,EAAmCC,OAAnC,EAA4C;AAC1C,SAAO;AACLC,IAAAA,aAAa,EAAEF,OAAO,CAACG,UAAR,EADV;AAELC,IAAAA,cAAc,EAAEJ,OAAO,CAACK,WAAR,EAFX;AAGLC,IAAAA,UAAU,EAAEL,OAAO,CAACK,UAAR,EAHP,EAAP;;AAKD,CA1BuB,CAAnB;;;AA6BP,OAAO,MAAMC,UAAU,GAAG;AACxBtB,IADwB;AAExB;AACEuB,EAAAA,KAAK,CAACpB,KAAD,EAAQa,OAAR,EAAiBV,SAAjB,EAA4B;AAC/B,QAAIA,SAAS,IAAIA,SAAS,CAACkB,OAA3B,EAAoC;AAClC1B,MAAAA,WAAW,CAACK,KAAD,EAAQa,OAAR,EAAiBV,SAAjB,CAAX;AACD;AACF,GALH;AAME;AACA;AACA;AACAmB,EAAAA,IAAI,CAACtB,KAAD,EAAQa,OAAR,EAAiBV,SAAjB,EAA4B;AAC9B,UAAMoB,UAAU,GAAGV,OAAO,CAACW,aAAR,EAAnB;AACA,QAAI,CAAC,CAACD,UAAD,IAAe,CAACA,UAAU,CAACE,WAA5B,KAA4CtB,SAAS,CAACkB,OAA1D,EAAmE;AACjE,aAAOzB,UAAU,CAACI,KAAD,EAAQa,OAAR,EAAiBV,SAAjB,CAAjB;AACD;AACD,WAAOuB,SAAP;AACD,GAfH,EAFwB;;AAmBxB,SAASC,gBAAT,CAA0Bf,OAA1B,EAAmCC,OAAnC,EAA4C;AAC1C,SAAO;AACLe,IAAAA,YAAY,EAAEhB,OAAO,CAACiB,UAAR,EADT;AAELC,IAAAA,cAAc,EAAEjB,OAAO,CAACkB,MAAR,EAFX;AAGLC,IAAAA,qBAAqB,EAAEnB,OAAO,CAACkB,MAAR,CAAe,EAAEE,OAAO,EAAE,IAAX,EAAf,CAHlB,EAAP;;AAKD,CAzBuB,CAAnB,C,iLA/BDpC,I,gHAEOC,U,sHA6BAqB,U","sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport handleHover from './handleHover';\nimport handleDrop from './handleDrop';\n\n// note: the 'type' hook is not useful for us as dropping is contigent on other properties\nconst TYPE = 'DRAG_DROPPABLE';\n\nexport const dragConfig = [\n  TYPE,\n  {\n    canDrag(props) {\n      return !props.disableDragDrop;\n    },\n\n    // this defines the dragging item object returned by monitor.getItem()\n    beginDrag(props /* , monitor, component */) {\n      const { component, index, parentComponent = {} } = props;\n      return {\n        type: component.type,\n        id: component.id,\n        meta: component.meta,\n        index,\n        parentId: parentComponent.id,\n        parentType: parentComponent.type,\n      };\n    },\n  },\n  function dragStateToProps(connect, monitor) {\n    return {\n      dragSourceRef: connect.dragSource(),\n      dragPreviewRef: connect.dragPreview(),\n      isDragging: monitor.isDragging(),\n    };\n  },\n];\n\nexport const dropConfig = [\n  TYPE,\n  {\n    hover(props, monitor, component) {\n      if (component && component.mounted) {\n        handleHover(props, monitor, component);\n      }\n    },\n    // note:\n    //  the react-dnd api requires that the drop() method return a result or undefined\n    //  monitor.didDrop() cannot be used because it returns true only for the most-nested target\n    drop(props, monitor, component) {\n      const dropResult = monitor.getDropResult();\n      if ((!dropResult || !dropResult.destination) && component.mounted) {\n        return handleDrop(props, monitor, component);\n      }\n      return undefined;\n    },\n  },\n  function dropStateToProps(connect, monitor) {\n    return {\n      droppableRef: connect.dropTarget(),\n      isDraggingOver: monitor.isOver(),\n      isDraggingOverShallow: monitor.isOver({ shallow: true }),\n    };\n  },\n];\n"]},"metadata":{},"sourceType":"module"}