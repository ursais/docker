{"ast":null,"code":"import _mapInstanceProperty from \"@babel/runtime-corejs3/core-js-stable/instance/map\";import _forEachInstanceProperty from \"@babel/runtime-corejs3/core-js-stable/instance/for-each\";import _reduceInstanceProperty from \"@babel/runtime-corejs3/core-js-stable/instance/reduce\";import _extends from \"@babel/runtime-corejs3/helpers/extends\";(function () {var enterModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.enterModule : undefined;enterModule && enterModule(module);})();var __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default.signature : function (a) {return a;}; /**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { t, styled } from '@superset-ui/core';\nimport React, { useEffect } from 'react';\nimport { Empty } from 'src/common/components';\nimport Alert from 'src/components/Alert';\nimport { ReactComponent as EmptyImage } from 'images/empty.svg';\nimport cx from 'classnames';\nimport Button from 'src/components/Button';\nimport Icon from 'src/components/Icon';\nimport IndeterminateCheckbox from 'src/components/IndeterminateCheckbox';\nimport { TableCollection, Pagination } from 'src/components/dataViewCommon';\nimport CardCollection from './CardCollection';\nimport FilterControls from './Filters';\nimport { CardSortSelect } from './CardSortSelect';\nimport { ListViewError, useListViewState } from './utils';import { jsx as ___EmotionJSX } from \"@emotion/react\";\nconst ListViewStyles = styled.div`\n  text-align: center;\n\n  .superset-list-view {\n    text-align: left;\n    border-radius: 4px 0;\n    margin: 0 ${({ theme }) => theme.gridUnit * 4}px;\n\n    .header {\n      display: flex;\n      padding-bottom: ${({ theme }) => theme.gridUnit * 4}px;\n\n      .header-left {\n        display: flex;\n        flex: 5;\n      }\n      .header-right {\n        flex: 1;\n        text-align: right;\n      }\n    }\n\n    .body.empty table {\n      margin-bottom: 0;\n    }\n\n    .body {\n      overflow-x: auto;\n    }\n\n    .ant-empty {\n      .ant-empty-image {\n        height: auto;\n      }\n    }\n  }\n\n  .pagination-container {\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    margin-bottom: ${({ theme }) => theme.gridUnit * 4}px;\n  }\n\n  .row-count-container {\n    margin-top: ${({ theme }) => theme.gridUnit * 2}px;\n    color: ${({ theme }) => theme.colors.grayscale.base};\n  }\n`;\nconst BulkSelectWrapper = styled(Alert)`\n  border-radius: 0;\n  margin-bottom: 0;\n  color: #3d3d3d;\n  background-color: ${({ theme }) => theme.colors.primary.light4};\n\n  .selectedCopy {\n    display: inline-block;\n    padding: ${({ theme }) => theme.gridUnit * 2}px 0;\n  }\n\n  .deselect-all {\n    color: #1985a0;\n    margin-left: ${({ theme }) => theme.gridUnit * 4}px;\n  }\n\n  .divider {\n    margin: ${({ theme: { gridUnit } }) => `${-gridUnit * 2}px 0 ${-gridUnit * 2}px ${gridUnit * 4}px`};\n    width: 1px;\n    height: ${({ theme }) => theme.gridUnit * 8}px;\n    box-shadow: inset -1px 0px 0px #dadada;\n    display: inline-flex;\n    vertical-align: middle;\n    position: relative;\n  }\n\n  .ant-alert-close-icon {\n    margin-top: ${({ theme }) => theme.gridUnit * 1.5}px;\n  }\n`;\nconst bulkSelectColumnConfig = {\n  Cell: ({ row }) => ___EmotionJSX(IndeterminateCheckbox, _extends({}, row.getToggleRowSelectedProps(), { id: row.id })),\n  Header: ({ getToggleAllRowsSelectedProps }) => ___EmotionJSX(IndeterminateCheckbox, _extends({}, getToggleAllRowsSelectedProps(), { id: \"header-toggle-all\" })),\n  id: 'selection',\n  size: 'sm' };\n\nconst ViewModeContainer = styled.div`\n  padding-right: ${({ theme }) => theme.gridUnit * 4}px;\n  display: inline-block;\n\n  .toggle-button {\n    display: inline-block;\n    border-radius: ${({ theme }) => theme.gridUnit / 2}px;\n    padding: ${({ theme }) => theme.gridUnit}px;\n    padding-bottom: 0;\n\n    &:first-of-type {\n      margin-right: ${({ theme }) => theme.gridUnit * 2}px;\n    }\n  }\n\n  .active {\n    background-color: ${({ theme }) => theme.colors.grayscale.base};\n    svg {\n      color: ${({ theme }) => theme.colors.grayscale.light5};\n    }\n  }\n`;\nconst EmptyWrapper = styled.div`\n  padding: ${({ theme }) => theme.gridUnit * 40}px 0;\n\n  &.table {\n    background: ${({ theme }) => theme.colors.grayscale.light5};\n  }\n`;\nconst ViewModeToggle = ({ mode, setMode }) => ___EmotionJSX(ViewModeContainer, null,\n___EmotionJSX(\"div\", { role: \"button\", tabIndex: 0, onClick: e => {\n    e.currentTarget.blur();\n    setMode('card');\n  }, className: cx('toggle-button', { active: mode === 'card' }) },\n___EmotionJSX(Icon, { name: \"card-view\" })),\n\n___EmotionJSX(\"div\", { role: \"button\", tabIndex: 0, onClick: e => {\n    e.currentTarget.blur();\n    setMode('table');\n  }, className: cx('toggle-button', { active: mode === 'table' }) },\n___EmotionJSX(Icon, { name: \"list-view\" })));\n\n\nfunction ListView({ columns, data, count, pageSize: initialPageSize, fetchData, loading, initialSort = [], className = '', filters = [], bulkActions = [], bulkSelectEnabled = false, disableBulkSelect = () => {}, renderBulkSelectCopy = selected => t('%s Selected', selected.length), renderCard, cardSortSelectOptions, defaultViewMode = 'card', highlightRowId, emptyState = {} }) {\n  const { getTableProps, getTableBodyProps, headerGroups, rows, prepareRow, pageCount = 1, gotoPage, applyFilterValue, selectedFlatRows, toggleAllRowsSelected, setViewMode, state: { pageIndex, pageSize, internalFilters, viewMode } } = useListViewState({\n    bulkSelectColumnConfig,\n    bulkSelectMode: bulkSelectEnabled && Boolean(bulkActions.length),\n    columns,\n    count,\n    data,\n    fetchData,\n    initialPageSize,\n    initialSort,\n    initialFilters: filters,\n    renderCard: Boolean(renderCard),\n    defaultViewMode });\n\n  const filterable = Boolean(filters.length);\n  if (filterable) {\n    const columnAccessors = _reduceInstanceProperty(columns).call(columns, (acc, col) => ({ ...acc, [col.id || col.accessor]: true }), {});\n    _forEachInstanceProperty(filters).call(filters, f => {\n      if (!columnAccessors[f.id]) {\n        throw new ListViewError(`Invalid filter config, ${f.id} is not present in columns`);\n      }\n    });\n  }\n  const cardViewEnabled = Boolean(renderCard);\n  useEffect(() => {\n    // discard selections if bulk select is disabled\n    if (!bulkSelectEnabled)\n    toggleAllRowsSelected(false);\n  }, [bulkSelectEnabled, toggleAllRowsSelected]);\n  return ___EmotionJSX(ListViewStyles, null,\n  ___EmotionJSX(\"div\", { \"data-test\": className, className: `superset-list-view ${className}` },\n  ___EmotionJSX(\"div\", { className: \"header\" },\n  ___EmotionJSX(\"div\", { className: \"header-left\" },\n  cardViewEnabled && ___EmotionJSX(ViewModeToggle, { mode: viewMode, setMode: setViewMode }),\n  filterable && ___EmotionJSX(FilterControls, { filters: filters, internalFilters: internalFilters, updateFilterValue: applyFilterValue })),\n\n  ___EmotionJSX(\"div\", { className: \"header-right\" },\n  viewMode === 'card' && cardSortSelectOptions && ___EmotionJSX(CardSortSelect, { initialSort: initialSort, onChange: fetchData, options: cardSortSelectOptions, pageIndex: pageIndex, pageSize: pageSize }))),\n\n\n  ___EmotionJSX(\"div\", { className: `body ${rows.length === 0 ? 'empty' : ''}` },\n  bulkSelectEnabled && ___EmotionJSX(BulkSelectWrapper, { \"data-test\": \"bulk-select-controls\", type: \"info\", closable: true, showIcon: false, onClose: disableBulkSelect, message: ___EmotionJSX(React.Fragment, null,\n    ___EmotionJSX(\"div\", { className: \"selectedCopy\", \"data-test\": \"bulk-select-copy\" },\n    renderBulkSelectCopy(selectedFlatRows)),\n\n    Boolean(selectedFlatRows.length) && ___EmotionJSX(React.Fragment, null,\n    ___EmotionJSX(\"span\", { \"data-test\": \"bulk-select-deselect-all\", role: \"button\", tabIndex: 0, className: \"deselect-all\", onClick: () => toggleAllRowsSelected(false) },\n    t('Deselect all')),\n\n    ___EmotionJSX(\"div\", { className: \"divider\" }),\n    _mapInstanceProperty(bulkActions).call(bulkActions, action => ___EmotionJSX(Button, { \"data-test\": \"bulk-select-action\", key: action.key, buttonStyle: action.type, cta: true, onClick: () => action.onSelect(_mapInstanceProperty(selectedFlatRows).call(selectedFlatRows, r => r.original)) },\n    action.name)))) }),\n\n\n\n  viewMode === 'card' && ___EmotionJSX(CardCollection, { bulkSelectEnabled: bulkSelectEnabled, prepareRow: prepareRow, renderCard: renderCard, rows: rows, loading: loading }),\n  viewMode === 'table' && ___EmotionJSX(TableCollection, { getTableProps: getTableProps, getTableBodyProps: getTableBodyProps, prepareRow: prepareRow, headerGroups: headerGroups, rows: rows, columns: columns, loading: loading, highlightRowId: highlightRowId }),\n  !loading && rows.length === 0 && ___EmotionJSX(EmptyWrapper, { className: viewMode },\n  ___EmotionJSX(Empty, { image: ___EmotionJSX(EmptyImage, null), description: emptyState.message || t('No Data') },\n  emptyState.slot || null)))),\n\n\n\n\n\n  rows.length > 0 && ___EmotionJSX(\"div\", { className: \"pagination-container\" },\n  ___EmotionJSX(Pagination, { totalPages: pageCount || 0, currentPage: pageCount ? pageIndex + 1 : 0, onChange: p => gotoPage(p - 1), hideFirstAndLastPageLinks: true }),\n  ___EmotionJSX(\"div\", { className: \"row-count-container\" },\n  !loading &&\n  t('%s-%s of %s', pageSize * pageIndex + (rows.length && 1), pageSize * pageIndex + rows.length, count))));\n\n\n\n}__signature__(ListView, \"useListViewState{{ getTableProps, getTableBodyProps, headerGroups, rows, prepareRow, pageCount = 1, gotoPage, applyFilterValue, selectedFlatRows, toggleAllRowsSelected, setViewMode, state: { pageIndex, pageSize, internalFilters, viewMode }, }}\\nuseEffect{}\", () => [useListViewState]);const _default =\nListView;export default _default;;(function () {var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined;if (!reactHotLoader) {return;}reactHotLoader.register(ListViewStyles, \"ListViewStyles\", \"/app/superset-frontend/src/components/ListView/ListView.tsx\");reactHotLoader.register(BulkSelectWrapper, \"BulkSelectWrapper\", \"/app/superset-frontend/src/components/ListView/ListView.tsx\");reactHotLoader.register(bulkSelectColumnConfig, \"bulkSelectColumnConfig\", \"/app/superset-frontend/src/components/ListView/ListView.tsx\");reactHotLoader.register(ViewModeContainer, \"ViewModeContainer\", \"/app/superset-frontend/src/components/ListView/ListView.tsx\");reactHotLoader.register(EmptyWrapper, \"EmptyWrapper\", \"/app/superset-frontend/src/components/ListView/ListView.tsx\");reactHotLoader.register(ViewModeToggle, \"ViewModeToggle\", \"/app/superset-frontend/src/components/ListView/ListView.tsx\");reactHotLoader.register(ListView, \"ListView\", \"/app/superset-frontend/src/components/ListView/ListView.tsx\");reactHotLoader.register(_default, \"default\", \"/app/superset-frontend/src/components/ListView/ListView.tsx\");})();;(function () {var leaveModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.leaveModule : undefined;leaveModule && leaveModule(module);})();","map":{"version":3,"sources":["/app/superset-frontend/src/components/ListView/ListView.tsx"],"names":[],"mappings":"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","sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { t, styled } from '@superset-ui/core';\nimport React, { useEffect } from 'react';\nimport { Empty } from 'src/common/components';\nimport Alert from 'src/components/Alert';\nimport { ReactComponent as EmptyImage } from 'images/empty.svg';\nimport cx from 'classnames';\nimport Button from 'src/components/Button';\nimport Icon from 'src/components/Icon';\nimport IndeterminateCheckbox from 'src/components/IndeterminateCheckbox';\nimport { TableCollection, Pagination } from 'src/components/dataViewCommon';\nimport CardCollection from './CardCollection';\nimport FilterControls from './Filters';\nimport { CardSortSelect } from './CardSortSelect';\nimport {\n  FetchDataConfig,\n  Filters,\n  SortColumn,\n  CardSortSelectOption,\n  ViewModeType,\n} from './types';\nimport { ListViewError, useListViewState } from './utils';\n\nconst ListViewStyles = styled.div`\n  text-align: center;\n\n  .superset-list-view {\n    text-align: left;\n    border-radius: 4px 0;\n    margin: 0 ${({ theme }) => theme.gridUnit * 4}px;\n\n    .header {\n      display: flex;\n      padding-bottom: ${({ theme }) => theme.gridUnit * 4}px;\n\n      .header-left {\n        display: flex;\n        flex: 5;\n      }\n      .header-right {\n        flex: 1;\n        text-align: right;\n      }\n    }\n\n    .body.empty table {\n      margin-bottom: 0;\n    }\n\n    .body {\n      overflow-x: auto;\n    }\n\n    .ant-empty {\n      .ant-empty-image {\n        height: auto;\n      }\n    }\n  }\n\n  .pagination-container {\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    margin-bottom: ${({ theme }) => theme.gridUnit * 4}px;\n  }\n\n  .row-count-container {\n    margin-top: ${({ theme }) => theme.gridUnit * 2}px;\n    color: ${({ theme }) => theme.colors.grayscale.base};\n  }\n`;\n\nconst BulkSelectWrapper = styled(Alert)`\n  border-radius: 0;\n  margin-bottom: 0;\n  color: #3d3d3d;\n  background-color: ${({ theme }) => theme.colors.primary.light4};\n\n  .selectedCopy {\n    display: inline-block;\n    padding: ${({ theme }) => theme.gridUnit * 2}px 0;\n  }\n\n  .deselect-all {\n    color: #1985a0;\n    margin-left: ${({ theme }) => theme.gridUnit * 4}px;\n  }\n\n  .divider {\n    margin: ${({ theme: { gridUnit } }) =>\n      `${-gridUnit * 2}px 0 ${-gridUnit * 2}px ${gridUnit * 4}px`};\n    width: 1px;\n    height: ${({ theme }) => theme.gridUnit * 8}px;\n    box-shadow: inset -1px 0px 0px #dadada;\n    display: inline-flex;\n    vertical-align: middle;\n    position: relative;\n  }\n\n  .ant-alert-close-icon {\n    margin-top: ${({ theme }) => theme.gridUnit * 1.5}px;\n  }\n`;\n\nconst bulkSelectColumnConfig = {\n  Cell: ({ row }: any) => (\n    <IndeterminateCheckbox {...row.getToggleRowSelectedProps()} id={row.id} />\n  ),\n  Header: ({ getToggleAllRowsSelectedProps }: any) => (\n    <IndeterminateCheckbox\n      {...getToggleAllRowsSelectedProps()}\n      id=\"header-toggle-all\"\n    />\n  ),\n  id: 'selection',\n  size: 'sm',\n};\n\nconst ViewModeContainer = styled.div`\n  padding-right: ${({ theme }) => theme.gridUnit * 4}px;\n  display: inline-block;\n\n  .toggle-button {\n    display: inline-block;\n    border-radius: ${({ theme }) => theme.gridUnit / 2}px;\n    padding: ${({ theme }) => theme.gridUnit}px;\n    padding-bottom: 0;\n\n    &:first-of-type {\n      margin-right: ${({ theme }) => theme.gridUnit * 2}px;\n    }\n  }\n\n  .active {\n    background-color: ${({ theme }) => theme.colors.grayscale.base};\n    svg {\n      color: ${({ theme }) => theme.colors.grayscale.light5};\n    }\n  }\n`;\n\nconst EmptyWrapper = styled.div`\n  padding: ${({ theme }) => theme.gridUnit * 40}px 0;\n\n  &.table {\n    background: ${({ theme }) => theme.colors.grayscale.light5};\n  }\n`;\n\nconst ViewModeToggle = ({\n  mode,\n  setMode,\n}: {\n  mode: 'table' | 'card';\n  setMode: (mode: 'table' | 'card') => void;\n}) => (\n  <ViewModeContainer>\n    <div\n      role=\"button\"\n      tabIndex={0}\n      onClick={e => {\n        e.currentTarget.blur();\n        setMode('card');\n      }}\n      className={cx('toggle-button', { active: mode === 'card' })}\n    >\n      <Icon name=\"card-view\" />\n    </div>\n    <div\n      role=\"button\"\n      tabIndex={0}\n      onClick={e => {\n        e.currentTarget.blur();\n        setMode('table');\n      }}\n      className={cx('toggle-button', { active: mode === 'table' })}\n    >\n      <Icon name=\"list-view\" />\n    </div>\n  </ViewModeContainer>\n);\n\nexport interface ListViewProps<T extends object = any> {\n  columns: any[];\n  data: T[];\n  count: number;\n  pageSize: number;\n  fetchData: (conf: FetchDataConfig) => any;\n  loading: boolean;\n  className?: string;\n  initialSort?: SortColumn[];\n  filters?: Filters;\n  bulkActions?: Array<{\n    key: string;\n    name: React.ReactNode;\n    onSelect: (rows: any[]) => any;\n    type?: 'primary' | 'secondary' | 'danger';\n  }>;\n  bulkSelectEnabled?: boolean;\n  disableBulkSelect?: () => void;\n  renderBulkSelectCopy?: (selects: any[]) => React.ReactNode;\n  renderCard?: (row: T & { loading: boolean }) => React.ReactNode;\n  cardSortSelectOptions?: Array<CardSortSelectOption>;\n  defaultViewMode?: ViewModeType;\n  highlightRowId?: number;\n  emptyState?: {\n    message?: string;\n    slot?: React.ReactNode;\n  };\n}\n\nfunction ListView<T extends object = any>({\n  columns,\n  data,\n  count,\n  pageSize: initialPageSize,\n  fetchData,\n  loading,\n  initialSort = [],\n  className = '',\n  filters = [],\n  bulkActions = [],\n  bulkSelectEnabled = false,\n  disableBulkSelect = () => {},\n  renderBulkSelectCopy = selected => t('%s Selected', selected.length),\n  renderCard,\n  cardSortSelectOptions,\n  defaultViewMode = 'card',\n  highlightRowId,\n  emptyState = {},\n}: ListViewProps<T>) {\n  const {\n    getTableProps,\n    getTableBodyProps,\n    headerGroups,\n    rows,\n    prepareRow,\n    pageCount = 1,\n    gotoPage,\n    applyFilterValue,\n    selectedFlatRows,\n    toggleAllRowsSelected,\n    setViewMode,\n    state: { pageIndex, pageSize, internalFilters, viewMode },\n  } = useListViewState({\n    bulkSelectColumnConfig,\n    bulkSelectMode: bulkSelectEnabled && Boolean(bulkActions.length),\n    columns,\n    count,\n    data,\n    fetchData,\n    initialPageSize,\n    initialSort,\n    initialFilters: filters,\n    renderCard: Boolean(renderCard),\n    defaultViewMode,\n  });\n  const filterable = Boolean(filters.length);\n  if (filterable) {\n    const columnAccessors = columns.reduce(\n      (acc, col) => ({ ...acc, [col.id || col.accessor]: true }),\n      {},\n    );\n    filters.forEach(f => {\n      if (!columnAccessors[f.id]) {\n        throw new ListViewError(\n          `Invalid filter config, ${f.id} is not present in columns`,\n        );\n      }\n    });\n  }\n\n  const cardViewEnabled = Boolean(renderCard);\n\n  useEffect(() => {\n    // discard selections if bulk select is disabled\n    if (!bulkSelectEnabled) toggleAllRowsSelected(false);\n  }, [bulkSelectEnabled, toggleAllRowsSelected]);\n\n  return (\n    <ListViewStyles>\n      <div data-test={className} className={`superset-list-view ${className}`}>\n        <div className=\"header\">\n          <div className=\"header-left\">\n            {cardViewEnabled && (\n              <ViewModeToggle mode={viewMode} setMode={setViewMode} />\n            )}\n            {filterable && (\n              <FilterControls\n                filters={filters}\n                internalFilters={internalFilters}\n                updateFilterValue={applyFilterValue}\n              />\n            )}\n          </div>\n          <div className=\"header-right\">\n            {viewMode === 'card' && cardSortSelectOptions && (\n              <CardSortSelect\n                initialSort={initialSort}\n                onChange={fetchData}\n                options={cardSortSelectOptions}\n                pageIndex={pageIndex}\n                pageSize={pageSize}\n              />\n            )}\n          </div>\n        </div>\n        <div className={`body ${rows.length === 0 ? 'empty' : ''}`}>\n          {bulkSelectEnabled && (\n            <BulkSelectWrapper\n              data-test=\"bulk-select-controls\"\n              type=\"info\"\n              closable\n              showIcon={false}\n              onClose={disableBulkSelect}\n              message={\n                <>\n                  <div className=\"selectedCopy\" data-test=\"bulk-select-copy\">\n                    {renderBulkSelectCopy(selectedFlatRows)}\n                  </div>\n                  {Boolean(selectedFlatRows.length) && (\n                    <>\n                      <span\n                        data-test=\"bulk-select-deselect-all\"\n                        role=\"button\"\n                        tabIndex={0}\n                        className=\"deselect-all\"\n                        onClick={() => toggleAllRowsSelected(false)}\n                      >\n                        {t('Deselect all')}\n                      </span>\n                      <div className=\"divider\" />\n                      {bulkActions.map(action => (\n                        <Button\n                          data-test=\"bulk-select-action\"\n                          key={action.key}\n                          buttonStyle={action.type}\n                          cta\n                          onClick={() =>\n                            action.onSelect(\n                              selectedFlatRows.map(r => r.original),\n                            )\n                          }\n                        >\n                          {action.name}\n                        </Button>\n                      ))}\n                    </>\n                  )}\n                </>\n              }\n            />\n          )}\n          {viewMode === 'card' && (\n            <CardCollection\n              bulkSelectEnabled={bulkSelectEnabled}\n              prepareRow={prepareRow}\n              renderCard={renderCard}\n              rows={rows}\n              loading={loading}\n            />\n          )}\n          {viewMode === 'table' && (\n            <TableCollection\n              getTableProps={getTableProps}\n              getTableBodyProps={getTableBodyProps}\n              prepareRow={prepareRow}\n              headerGroups={headerGroups}\n              rows={rows}\n              columns={columns}\n              loading={loading}\n              highlightRowId={highlightRowId}\n            />\n          )}\n          {!loading && rows.length === 0 && (\n            <EmptyWrapper className={viewMode}>\n              <Empty\n                image={<EmptyImage />}\n                description={emptyState.message || t('No Data')}\n              >\n                {emptyState.slot || null}\n              </Empty>\n            </EmptyWrapper>\n          )}\n        </div>\n      </div>\n\n      {rows.length > 0 && (\n        <div className=\"pagination-container\">\n          <Pagination\n            totalPages={pageCount || 0}\n            currentPage={pageCount ? pageIndex + 1 : 0}\n            onChange={(p: number) => gotoPage(p - 1)}\n            hideFirstAndLastPageLinks\n          />\n          <div className=\"row-count-container\">\n            {!loading &&\n              t(\n                '%s-%s of %s',\n                pageSize * pageIndex + (rows.length && 1),\n                pageSize * pageIndex + rows.length,\n                count,\n              )}\n          </div>\n        </div>\n      )}\n    </ListViewStyles>\n  );\n}\n\nexport default ListView;\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}