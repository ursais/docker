{"ast":null,"code":"import \"core-js/modules/web.dom-collections.iterator.js\";import _mapInstanceProperty from \"@babel/runtime-corejs3/core-js-stable/instance/map\";import _indexOfInstanceProperty from \"@babel/runtime-corejs3/core-js-stable/instance/index-of\";import _includesInstanceProperty from \"@babel/runtime-corejs3/core-js-stable/instance/includes\";import _bindInstanceProperty from \"@babel/runtime-corejs3/core-js-stable/instance/bind\";import _concatInstanceProperty from \"@babel/runtime-corejs3/core-js-stable/instance/concat\";import _filterInstanceProperty from \"@babel/runtime-corejs3/core-js-stable/instance/filter\";import _Object$values from \"@babel/runtime-corejs3/core-js-stable/object/values\";import _reduceInstanceProperty from \"@babel/runtime-corejs3/core-js-stable/instance/reduce\";import _forEachInstanceProperty from \"@babel/runtime-corejs3/core-js-stable/instance/for-each\";import _Object$keys from \"@babel/runtime-corejs3/core-js-stable/object/keys\";(function () {var enterModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.enterModule : undefined;enterModule && enterModule(module);})();var __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default.signature : function (a) {return a;}; /**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport cx from 'classnames';\nimport Button from 'src/components/Button';\nimport { t, styled } from '@superset-ui/core';\n\nimport buildFilterScopeTreeEntry from 'src/dashboard/util/buildFilterScopeTreeEntry';\nimport getFilterScopeNodesTree from 'src/dashboard/util/getFilterScopeNodesTree';\nimport getFilterFieldNodesTree from 'src/dashboard/util/getFilterFieldNodesTree';\nimport getFilterScopeParentNodes from 'src/dashboard/util/getFilterScopeParentNodes';\nimport getKeyForFilterScopeTree from 'src/dashboard/util/getKeyForFilterScopeTree';\nimport getSelectedChartIdForFilterScopeTree from 'src/dashboard/util/getSelectedChartIdForFilterScopeTree';\nimport getFilterScopeFromNodesTree from 'src/dashboard/util/getFilterScopeFromNodesTree';\nimport getRevertedFilterScope from 'src/dashboard/util/getRevertedFilterScope';\nimport { getChartIdsInFilterScope } from 'src/dashboard/util/activeDashboardFilters';\nimport {\ngetChartIdAndColumnFromFilterKey,\ngetDashboardFilterKey } from\n'src/dashboard/util/getDashboardFilterKey';\nimport { ALL_FILTERS_ROOT } from 'src/dashboard/util/constants';\nimport { dashboardFilterPropShape } from 'src/dashboard/util/propShapes';\nimport FilterScopeTree from './FilterScopeTree';\nimport FilterFieldTree from './FilterFieldTree';import { jsx as ___EmotionJSX } from \"@emotion/react\";\n\nconst propTypes = {\n  dashboardFilters: PropTypes.objectOf(dashboardFilterPropShape).isRequired,\n  layout: PropTypes.object.isRequired,\n\n  updateDashboardFiltersScope: PropTypes.func.isRequired,\n  setUnsavedChanges: PropTypes.func.isRequired,\n  onCloseModal: PropTypes.func.isRequired };\n\n\nconst ActionsContainer = styled.div`\n  height: ${({ theme }) => theme.gridUnit * 16}px;\n\n  // TODO: replace hardcoded color with theme variable after refactoring filter-scope-selector.less to Emotion\n  border-top: ${({ theme }) => theme.gridUnit / 4}px solid #cfd8dc;\n  padding: ${({ theme }) => theme.gridUnit * 6}px;\n  margin: 0 0 0 ${({ theme }) => -theme.gridUnit * 6}px;\n  text-align: right;\n\n  .btn {\n    margin-right: ${({ theme }) => theme.gridUnit * 4}px;\n\n    &:last-child {\n      margin-right: 0;\n    }\n  }\n`;\n\nexport default class FilterScopeSelector extends React.PureComponent {\n  constructor(props) {var _context5, _context6, _context7, _context8, _context9, _context10, _context11, _context12, _context13;\n    super(props);\n\n    const { dashboardFilters, layout } = props;\n\n    if (_Object$keys(dashboardFilters).length > 0) {var _context, _context4;\n      // display filter fields in tree structure\n      const filterFieldNodes = getFilterFieldNodesTree({\n        dashboardFilters });\n\n      // filterFieldNodes root node is dashboard_root component,\n      // so that we can offer a select/deselect all link\n      const filtersNodes = filterFieldNodes[0].children;\n      this.allfilterFields = [];\n      _forEachInstanceProperty(filtersNodes).call(filtersNodes, ({ children }) => {\n        _forEachInstanceProperty(children).call(children, child => {\n          this.allfilterFields.push(child.value);\n        });\n      });\n      this.defaultFilterKey = filtersNodes[0].children[0].value;\n\n      // build FilterScopeTree object for each filterKey\n      const filterScopeMap = _reduceInstanceProperty(_context = _Object$values(dashboardFilters)).call(_context,\n      (map, { chartId: filterId, columns }) => {var _context2;\n        const filterScopeByChartId = _reduceInstanceProperty(_context2 = _Object$keys(columns)).call(_context2,\n        (mapByChartId, columnName) => {var _context3;\n          const filterKey = getDashboardFilterKey({\n            chartId: filterId,\n            column: columnName });\n\n          const nodes = getFilterScopeNodesTree({\n            components: layout,\n            filterFields: [filterKey],\n            selectedChartId: filterId });\n\n          const expanded = getFilterScopeParentNodes(nodes, 1);\n          // force display filter_box chart as unchecked, but show checkbox as disabled\n          const chartIdsInFilterScope = _filterInstanceProperty(_context3 =\n          getChartIdsInFilterScope({\n            filterScope: dashboardFilters[filterId].scopes[columnName] }) ||\n          []).call(_context3,\n          id => id !== filterId);\n\n          return {\n            ...mapByChartId,\n            [filterKey]: {\n              // unfiltered nodes\n              nodes,\n              // filtered nodes in display if searchText is not empty\n              nodesFiltered: [...nodes],\n              checked: chartIdsInFilterScope,\n              expanded } };\n\n\n        },\n        {});\n\n\n        return {\n          ...map,\n          ...filterScopeByChartId };\n\n      },\n      {});\n\n\n      // initial state: active defaultFilerKey\n      const { chartId } = getChartIdAndColumnFromFilterKey(\n      this.defaultFilterKey);\n\n      const checkedFilterFields = [];\n      const activeFilterField = this.defaultFilterKey;\n      // expand defaultFilterKey in filter field tree\n      const expandedFilterIds = _concatInstanceProperty(_context4 = [ALL_FILTERS_ROOT]).call(_context4, chartId);\n\n      const filterScopeTreeEntry = buildFilterScopeTreeEntry({\n        checkedFilterFields,\n        activeFilterField,\n        filterScopeMap,\n        layout });\n\n      this.state = {\n        showSelector: true,\n        activeFilterField,\n        searchText: '',\n        filterScopeMap: {\n          ...filterScopeMap,\n          ...filterScopeTreeEntry },\n\n        filterFieldNodes,\n        checkedFilterFields,\n        expandedFilterIds };\n\n    } else {\n      this.state = {\n        showSelector: false };\n\n    }\n\n    this.filterNodes = _bindInstanceProperty(_context5 = this.filterNodes).call(_context5, this);\n    this.onChangeFilterField = _bindInstanceProperty(_context6 = this.onChangeFilterField).call(_context6, this);\n    this.onCheckFilterScope = _bindInstanceProperty(_context7 = this.onCheckFilterScope).call(_context7, this);\n    this.onExpandFilterScope = _bindInstanceProperty(_context8 = this.onExpandFilterScope).call(_context8, this);\n    this.onSearchInputChange = _bindInstanceProperty(_context9 = this.onSearchInputChange).call(_context9, this);\n    this.onCheckFilterField = _bindInstanceProperty(_context10 = this.onCheckFilterField).call(_context10, this);\n    this.onExpandFilterField = _bindInstanceProperty(_context11 = this.onExpandFilterField).call(_context11, this);\n    this.onClose = _bindInstanceProperty(_context12 = this.onClose).call(_context12, this);\n    this.onSave = _bindInstanceProperty(_context13 = this.onSave).call(_context13, this);\n  }\n\n  onCheckFilterScope(checked = []) {\n    const {\n      activeFilterField,\n      filterScopeMap,\n      checkedFilterFields } =\n    this.state;\n\n    const key = getKeyForFilterScopeTree({\n      activeFilterField,\n      checkedFilterFields });\n\n    const editingList = activeFilterField ?\n    [activeFilterField] :\n    checkedFilterFields;\n    const updatedEntry = {\n      ...filterScopeMap[key],\n      checked };\n\n\n    const updatedFilterScopeMap = getRevertedFilterScope({\n      checked,\n      filterFields: editingList,\n      filterScopeMap });\n\n\n    this.setState(() => ({\n      filterScopeMap: {\n        ...filterScopeMap,\n        ...updatedFilterScopeMap,\n        [key]: updatedEntry } }));\n\n\n  }\n\n  onExpandFilterScope(expanded = []) {\n    const {\n      activeFilterField,\n      checkedFilterFields,\n      filterScopeMap } =\n    this.state;\n    const key = getKeyForFilterScopeTree({\n      activeFilterField,\n      checkedFilterFields });\n\n    const updatedEntry = {\n      ...filterScopeMap[key],\n      expanded };\n\n    this.setState(() => ({\n      filterScopeMap: {\n        ...filterScopeMap,\n        [key]: updatedEntry } }));\n\n\n  }\n\n  onCheckFilterField(checkedFilterFields = []) {\n    const { layout } = this.props;\n    const { filterScopeMap } = this.state;\n    const filterScopeTreeEntry = buildFilterScopeTreeEntry({\n      checkedFilterFields,\n      activeFilterField: null,\n      filterScopeMap,\n      layout });\n\n\n    this.setState(() => ({\n      activeFilterField: null,\n      checkedFilterFields,\n      filterScopeMap: {\n        ...filterScopeMap,\n        ...filterScopeTreeEntry } }));\n\n\n  }\n\n  onExpandFilterField(expandedFilterIds = []) {\n    this.setState(() => ({\n      expandedFilterIds }));\n\n  }\n\n  onChangeFilterField(filterField = {}) {var _context14;\n    const { layout } = this.props;\n    const nextActiveFilterField = filterField.value;\n    const {\n      activeFilterField: currentActiveFilterField,\n      checkedFilterFields,\n      filterScopeMap } =\n    this.state;\n\n    // we allow single edit and multiple edit in the same view.\n    // if user click on the single filter field,\n    // will show filter scope for the single field.\n    // if user click on the same filter filed again,\n    // will toggle off the single filter field,\n    // and allow multi-edit all checked filter fields.\n    if (nextActiveFilterField === currentActiveFilterField) {\n      const filterScopeTreeEntry = buildFilterScopeTreeEntry({\n        checkedFilterFields,\n        activeFilterField: null,\n        filterScopeMap,\n        layout });\n\n\n      this.setState({\n        activeFilterField: null,\n        filterScopeMap: {\n          ...filterScopeMap,\n          ...filterScopeTreeEntry } });\n\n\n    } else if (_includesInstanceProperty(_context14 = this.allfilterFields).call(_context14, nextActiveFilterField)) {\n      const filterScopeTreeEntry = buildFilterScopeTreeEntry({\n        checkedFilterFields,\n        activeFilterField: nextActiveFilterField,\n        filterScopeMap,\n        layout });\n\n\n      this.setState({\n        activeFilterField: nextActiveFilterField,\n        filterScopeMap: {\n          ...filterScopeMap,\n          ...filterScopeTreeEntry } });\n\n\n    }\n  }\n\n  onSearchInputChange(e) {\n    this.setState({ searchText: e.target.value }, this.filterTree);\n  }\n\n  onClose() {\n    this.props.onCloseModal();\n  }\n\n  onSave() {var _context15;\n    const { filterScopeMap } = this.state;\n\n    const allFilterFieldScopes = _reduceInstanceProperty(_context15 = this.allfilterFields).call(_context15,\n    (map, filterKey) => {\n      const { nodes } = filterScopeMap[filterKey];\n      const checkedChartIds = filterScopeMap[filterKey].checked;\n\n      return {\n        ...map,\n        [filterKey]: getFilterScopeFromNodesTree({\n          filterKey,\n          nodes,\n          checkedChartIds }) };\n\n\n    },\n    {});\n\n\n    this.props.updateDashboardFiltersScope(allFilterFieldScopes);\n    this.props.setUnsavedChanges(true);\n\n    // click Save button will do save and close modal\n    this.props.onCloseModal();\n  }\n\n  filterTree() {\n    // Reset nodes back to unfiltered state\n    if (!this.state.searchText) {\n      this.setState(prevState => {\n        const {\n          activeFilterField,\n          checkedFilterFields,\n          filterScopeMap } =\n        prevState;\n        const key = getKeyForFilterScopeTree({\n          activeFilterField,\n          checkedFilterFields });\n\n\n        const updatedEntry = {\n          ...filterScopeMap[key],\n          nodesFiltered: filterScopeMap[key].nodes };\n\n        return {\n          filterScopeMap: {\n            ...filterScopeMap,\n            [key]: updatedEntry } };\n\n\n      });\n    } else {\n      const updater = prevState => {var _context16;\n        const {\n          activeFilterField,\n          checkedFilterFields,\n          filterScopeMap } =\n        prevState;\n        const key = getKeyForFilterScopeTree({\n          activeFilterField,\n          checkedFilterFields });\n\n\n        const nodesFiltered = _reduceInstanceProperty(_context16 = filterScopeMap[key].nodes).call(_context16,\n        this.filterNodes,\n        []);\n\n        const expanded = getFilterScopeParentNodes([...nodesFiltered]);\n        const updatedEntry = {\n          ...filterScopeMap[key],\n          nodesFiltered,\n          expanded };\n\n\n        return {\n          filterScopeMap: {\n            ...filterScopeMap,\n            [key]: updatedEntry } };\n\n\n      };\n\n      this.setState(updater);\n    }\n  }\n\n  filterNodes(filtered = [], node = {}) {var _context17, _context18;\n    const { searchText } = this.state;\n    const children = _reduceInstanceProperty(_context17 = node.children || []).call(_context17, this.filterNodes, []);\n\n    if (\n    // Node's label matches the search string\n    _indexOfInstanceProperty(_context18 = node.label.toLocaleLowerCase()).call(_context18, searchText.toLocaleLowerCase()) >\n    -1 ||\n    // Or a children has a matching node\n    children.length)\n    {\n      filtered.push({ ...node, children });\n    }\n\n    return filtered;\n  }\n\n  renderFilterFieldList() {\n    const {\n      activeFilterField,\n      filterFieldNodes,\n      checkedFilterFields,\n      expandedFilterIds } =\n    this.state;\n    return (\n      ___EmotionJSX(FilterFieldTree, {\n        activeKey: activeFilterField,\n        nodes: filterFieldNodes,\n        checked: checkedFilterFields,\n        expanded: expandedFilterIds,\n        onClick: this.onChangeFilterField,\n        onCheck: this.onCheckFilterField,\n        onExpand: this.onExpandFilterField }));\n\n\n  }\n\n  renderFilterScopeTree() {\n    const {\n      filterScopeMap,\n      activeFilterField,\n      checkedFilterFields,\n      searchText } =\n    this.state;\n\n    const key = getKeyForFilterScopeTree({\n      activeFilterField,\n      checkedFilterFields });\n\n\n    const selectedChartId = getSelectedChartIdForFilterScopeTree({\n      activeFilterField,\n      checkedFilterFields });\n\n    return (\n      ___EmotionJSX(React.Fragment, null,\n      ___EmotionJSX(\"input\", {\n        className: \"filter-text scope-search multi-edit-mode\",\n        placeholder: t('Search...'),\n        type: \"text\",\n        value: searchText,\n        onChange: this.onSearchInputChange }),\n\n      ___EmotionJSX(FilterScopeTree, {\n        nodes: filterScopeMap[key].nodesFiltered,\n        checked: filterScopeMap[key].checked,\n        expanded: filterScopeMap[key].expanded,\n        onCheck: this.onCheckFilterScope,\n        onExpand: this.onExpandFilterScope\n        // pass selectedFilterId prop to FilterScopeTree component,\n        // to hide checkbox for selected filter field itself\n        , selectedChartId: selectedChartId })));\n\n\n\n  }\n\n  renderEditingFiltersName() {var _context19, _context20;\n    const { dashboardFilters } = this.props;\n    const { activeFilterField, checkedFilterFields } = this.state;\n    const currentFilterLabels = _mapInstanceProperty(_context19 = _concatInstanceProperty(_context20 = []).call(_context20,\n    activeFilterField || checkedFilterFields)).call(_context19,\n    key => {\n      const { chartId, column } = getChartIdAndColumnFromFilterKey(key);\n      return dashboardFilters[chartId].labels[column] || column;\n    });\n\n    return (\n      ___EmotionJSX(\"div\", { className: \"selected-fields multi-edit-mode\" },\n      currentFilterLabels.length === 0 && t('No filter is selected.'),\n      currentFilterLabels.length === 1 && t('Editing 1 filter:'),\n      currentFilterLabels.length > 1 &&\n      t('Batch editing %d filters:', currentFilterLabels.length),\n      ___EmotionJSX(\"span\", { className: \"selected-scopes\" },\n      currentFilterLabels.join(', '))));\n\n\n\n  }\n\n  render() {\n    const { showSelector } = this.state;\n\n    return (\n      ___EmotionJSX(\"div\", { className: \"filter-scope-container\" },\n      ___EmotionJSX(\"div\", { className: \"filter-scope-header\" },\n      ___EmotionJSX(\"h4\", null, t('Configure filter scopes')),\n      showSelector && this.renderEditingFiltersName()),\n\n\n      ___EmotionJSX(\"div\", { className: \"filter-scope-body\" },\n      !showSelector ?\n      ___EmotionJSX(\"div\", { className: \"warning-message\" },\n      t('There are no filters in this dashboard.')) :\n\n\n      ___EmotionJSX(\"div\", { className: \"filters-scope-selector\" },\n      ___EmotionJSX(\"div\", { className: cx('filter-field-pane multi-edit-mode') },\n      this.renderFilterFieldList()),\n\n      ___EmotionJSX(\"div\", { className: \"filter-scope-pane multi-edit-mode\" },\n      this.renderFilterScopeTree()))),\n\n\n\n\n\n      ___EmotionJSX(ActionsContainer, null,\n      ___EmotionJSX(Button, { buttonSize: \"small\", onClick: this.onClose },\n      t('Close')),\n\n      showSelector &&\n      ___EmotionJSX(Button, {\n        buttonSize: \"small\",\n        buttonStyle: \"primary\",\n        onClick: this.onSave },\n\n      t('Save')))));\n\n\n\n\n\n  } // @ts-ignore\n  __reactstandin__regenerateByEval(key, code) {// @ts-ignore\n    this[key] = eval(code);}}\nFilterScopeSelector.propTypes = propTypes;;(function () {var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined;if (!reactHotLoader) {return;}reactHotLoader.register(propTypes, \"propTypes\", \"/app/superset-frontend/src/dashboard/components/filterscope/FilterScopeSelector.jsx\");reactHotLoader.register(ActionsContainer, \"ActionsContainer\", \"/app/superset-frontend/src/dashboard/components/filterscope/FilterScopeSelector.jsx\");reactHotLoader.register(FilterScopeSelector, \"FilterScopeSelector\", \"/app/superset-frontend/src/dashboard/components/filterscope/FilterScopeSelector.jsx\");})();;(function () {var leaveModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.leaveModule : undefined;leaveModule && leaveModule(module);})();","map":{"version":3,"sources":["/app/superset-frontend/src/dashboard/components/filterscope/FilterScopeSelector.jsx"],"names":["React","PropTypes","cx","Button","t","styled","buildFilterScopeTreeEntry","getFilterScopeNodesTree","getFilterFieldNodesTree","getFilterScopeParentNodes","getKeyForFilterScopeTree","getSelectedChartIdForFilterScopeTree","getFilterScopeFromNodesTree","getRevertedFilterScope","getChartIdsInFilterScope","getChartIdAndColumnFromFilterKey","getDashboardFilterKey","ALL_FILTERS_ROOT","dashboardFilterPropShape","FilterScopeTree","FilterFieldTree","propTypes","dashboardFilters","objectOf","isRequired","layout","object","updateDashboardFiltersScope","func","setUnsavedChanges","onCloseModal","ActionsContainer","div","theme","gridUnit","FilterScopeSelector","PureComponent","constructor","props","length","filterFieldNodes","filtersNodes","children","allfilterFields","child","push","value","defaultFilterKey","filterScopeMap","map","chartId","filterId","columns","filterScopeByChartId","mapByChartId","columnName","filterKey","column","nodes","components","filterFields","selectedChartId","expanded","chartIdsInFilterScope","filterScope","scopes","id","nodesFiltered","checked","checkedFilterFields","activeFilterField","expandedFilterIds","filterScopeTreeEntry","state","showSelector","searchText","filterNodes","onChangeFilterField","onCheckFilterScope","onExpandFilterScope","onSearchInputChange","onCheckFilterField","onExpandFilterField","onClose","onSave","key","editingList","updatedEntry","updatedFilterScopeMap","setState","filterField","nextActiveFilterField","currentActiveFilterField","e","target","filterTree","allFilterFieldScopes","checkedChartIds","prevState","updater","filtered","node","label","toLocaleLowerCase","renderFilterFieldList","renderFilterScopeTree","renderEditingFiltersName","currentFilterLabels","labels","join","render"],"mappings":"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","sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport cx from 'classnames';\nimport Button from 'src/components/Button';\nimport { t, styled } from '@superset-ui/core';\n\nimport buildFilterScopeTreeEntry from 'src/dashboard/util/buildFilterScopeTreeEntry';\nimport getFilterScopeNodesTree from 'src/dashboard/util/getFilterScopeNodesTree';\nimport getFilterFieldNodesTree from 'src/dashboard/util/getFilterFieldNodesTree';\nimport getFilterScopeParentNodes from 'src/dashboard/util/getFilterScopeParentNodes';\nimport getKeyForFilterScopeTree from 'src/dashboard/util/getKeyForFilterScopeTree';\nimport getSelectedChartIdForFilterScopeTree from 'src/dashboard/util/getSelectedChartIdForFilterScopeTree';\nimport getFilterScopeFromNodesTree from 'src/dashboard/util/getFilterScopeFromNodesTree';\nimport getRevertedFilterScope from 'src/dashboard/util/getRevertedFilterScope';\nimport { getChartIdsInFilterScope } from 'src/dashboard/util/activeDashboardFilters';\nimport {\n  getChartIdAndColumnFromFilterKey,\n  getDashboardFilterKey,\n} from 'src/dashboard/util/getDashboardFilterKey';\nimport { ALL_FILTERS_ROOT } from 'src/dashboard/util/constants';\nimport { dashboardFilterPropShape } from 'src/dashboard/util/propShapes';\nimport FilterScopeTree from './FilterScopeTree';\nimport FilterFieldTree from './FilterFieldTree';\n\nconst propTypes = {\n  dashboardFilters: PropTypes.objectOf(dashboardFilterPropShape).isRequired,\n  layout: PropTypes.object.isRequired,\n\n  updateDashboardFiltersScope: PropTypes.func.isRequired,\n  setUnsavedChanges: PropTypes.func.isRequired,\n  onCloseModal: PropTypes.func.isRequired,\n};\n\nconst ActionsContainer = styled.div`\n  height: ${({ theme }) => theme.gridUnit * 16}px;\n\n  // TODO: replace hardcoded color with theme variable after refactoring filter-scope-selector.less to Emotion\n  border-top: ${({ theme }) => theme.gridUnit / 4}px solid #cfd8dc;\n  padding: ${({ theme }) => theme.gridUnit * 6}px;\n  margin: 0 0 0 ${({ theme }) => -theme.gridUnit * 6}px;\n  text-align: right;\n\n  .btn {\n    margin-right: ${({ theme }) => theme.gridUnit * 4}px;\n\n    &:last-child {\n      margin-right: 0;\n    }\n  }\n`;\n\nexport default class FilterScopeSelector extends React.PureComponent {\n  constructor(props) {\n    super(props);\n\n    const { dashboardFilters, layout } = props;\n\n    if (Object.keys(dashboardFilters).length > 0) {\n      // display filter fields in tree structure\n      const filterFieldNodes = getFilterFieldNodesTree({\n        dashboardFilters,\n      });\n      // filterFieldNodes root node is dashboard_root component,\n      // so that we can offer a select/deselect all link\n      const filtersNodes = filterFieldNodes[0].children;\n      this.allfilterFields = [];\n      filtersNodes.forEach(({ children }) => {\n        children.forEach(child => {\n          this.allfilterFields.push(child.value);\n        });\n      });\n      this.defaultFilterKey = filtersNodes[0].children[0].value;\n\n      // build FilterScopeTree object for each filterKey\n      const filterScopeMap = Object.values(dashboardFilters).reduce(\n        (map, { chartId: filterId, columns }) => {\n          const filterScopeByChartId = Object.keys(columns).reduce(\n            (mapByChartId, columnName) => {\n              const filterKey = getDashboardFilterKey({\n                chartId: filterId,\n                column: columnName,\n              });\n              const nodes = getFilterScopeNodesTree({\n                components: layout,\n                filterFields: [filterKey],\n                selectedChartId: filterId,\n              });\n              const expanded = getFilterScopeParentNodes(nodes, 1);\n              // force display filter_box chart as unchecked, but show checkbox as disabled\n              const chartIdsInFilterScope = (\n                getChartIdsInFilterScope({\n                  filterScope: dashboardFilters[filterId].scopes[columnName],\n                }) || []\n              ).filter(id => id !== filterId);\n\n              return {\n                ...mapByChartId,\n                [filterKey]: {\n                  // unfiltered nodes\n                  nodes,\n                  // filtered nodes in display if searchText is not empty\n                  nodesFiltered: [...nodes],\n                  checked: chartIdsInFilterScope,\n                  expanded,\n                },\n              };\n            },\n            {},\n          );\n\n          return {\n            ...map,\n            ...filterScopeByChartId,\n          };\n        },\n        {},\n      );\n\n      // initial state: active defaultFilerKey\n      const { chartId } = getChartIdAndColumnFromFilterKey(\n        this.defaultFilterKey,\n      );\n      const checkedFilterFields = [];\n      const activeFilterField = this.defaultFilterKey;\n      // expand defaultFilterKey in filter field tree\n      const expandedFilterIds = [ALL_FILTERS_ROOT].concat(chartId);\n\n      const filterScopeTreeEntry = buildFilterScopeTreeEntry({\n        checkedFilterFields,\n        activeFilterField,\n        filterScopeMap,\n        layout,\n      });\n      this.state = {\n        showSelector: true,\n        activeFilterField,\n        searchText: '',\n        filterScopeMap: {\n          ...filterScopeMap,\n          ...filterScopeTreeEntry,\n        },\n        filterFieldNodes,\n        checkedFilterFields,\n        expandedFilterIds,\n      };\n    } else {\n      this.state = {\n        showSelector: false,\n      };\n    }\n\n    this.filterNodes = this.filterNodes.bind(this);\n    this.onChangeFilterField = this.onChangeFilterField.bind(this);\n    this.onCheckFilterScope = this.onCheckFilterScope.bind(this);\n    this.onExpandFilterScope = this.onExpandFilterScope.bind(this);\n    this.onSearchInputChange = this.onSearchInputChange.bind(this);\n    this.onCheckFilterField = this.onCheckFilterField.bind(this);\n    this.onExpandFilterField = this.onExpandFilterField.bind(this);\n    this.onClose = this.onClose.bind(this);\n    this.onSave = this.onSave.bind(this);\n  }\n\n  onCheckFilterScope(checked = []) {\n    const {\n      activeFilterField,\n      filterScopeMap,\n      checkedFilterFields,\n    } = this.state;\n\n    const key = getKeyForFilterScopeTree({\n      activeFilterField,\n      checkedFilterFields,\n    });\n    const editingList = activeFilterField\n      ? [activeFilterField]\n      : checkedFilterFields;\n    const updatedEntry = {\n      ...filterScopeMap[key],\n      checked,\n    };\n\n    const updatedFilterScopeMap = getRevertedFilterScope({\n      checked,\n      filterFields: editingList,\n      filterScopeMap,\n    });\n\n    this.setState(() => ({\n      filterScopeMap: {\n        ...filterScopeMap,\n        ...updatedFilterScopeMap,\n        [key]: updatedEntry,\n      },\n    }));\n  }\n\n  onExpandFilterScope(expanded = []) {\n    const {\n      activeFilterField,\n      checkedFilterFields,\n      filterScopeMap,\n    } = this.state;\n    const key = getKeyForFilterScopeTree({\n      activeFilterField,\n      checkedFilterFields,\n    });\n    const updatedEntry = {\n      ...filterScopeMap[key],\n      expanded,\n    };\n    this.setState(() => ({\n      filterScopeMap: {\n        ...filterScopeMap,\n        [key]: updatedEntry,\n      },\n    }));\n  }\n\n  onCheckFilterField(checkedFilterFields = []) {\n    const { layout } = this.props;\n    const { filterScopeMap } = this.state;\n    const filterScopeTreeEntry = buildFilterScopeTreeEntry({\n      checkedFilterFields,\n      activeFilterField: null,\n      filterScopeMap,\n      layout,\n    });\n\n    this.setState(() => ({\n      activeFilterField: null,\n      checkedFilterFields,\n      filterScopeMap: {\n        ...filterScopeMap,\n        ...filterScopeTreeEntry,\n      },\n    }));\n  }\n\n  onExpandFilterField(expandedFilterIds = []) {\n    this.setState(() => ({\n      expandedFilterIds,\n    }));\n  }\n\n  onChangeFilterField(filterField = {}) {\n    const { layout } = this.props;\n    const nextActiveFilterField = filterField.value;\n    const {\n      activeFilterField: currentActiveFilterField,\n      checkedFilterFields,\n      filterScopeMap,\n    } = this.state;\n\n    // we allow single edit and multiple edit in the same view.\n    // if user click on the single filter field,\n    // will show filter scope for the single field.\n    // if user click on the same filter filed again,\n    // will toggle off the single filter field,\n    // and allow multi-edit all checked filter fields.\n    if (nextActiveFilterField === currentActiveFilterField) {\n      const filterScopeTreeEntry = buildFilterScopeTreeEntry({\n        checkedFilterFields,\n        activeFilterField: null,\n        filterScopeMap,\n        layout,\n      });\n\n      this.setState({\n        activeFilterField: null,\n        filterScopeMap: {\n          ...filterScopeMap,\n          ...filterScopeTreeEntry,\n        },\n      });\n    } else if (this.allfilterFields.includes(nextActiveFilterField)) {\n      const filterScopeTreeEntry = buildFilterScopeTreeEntry({\n        checkedFilterFields,\n        activeFilterField: nextActiveFilterField,\n        filterScopeMap,\n        layout,\n      });\n\n      this.setState({\n        activeFilterField: nextActiveFilterField,\n        filterScopeMap: {\n          ...filterScopeMap,\n          ...filterScopeTreeEntry,\n        },\n      });\n    }\n  }\n\n  onSearchInputChange(e) {\n    this.setState({ searchText: e.target.value }, this.filterTree);\n  }\n\n  onClose() {\n    this.props.onCloseModal();\n  }\n\n  onSave() {\n    const { filterScopeMap } = this.state;\n\n    const allFilterFieldScopes = this.allfilterFields.reduce(\n      (map, filterKey) => {\n        const { nodes } = filterScopeMap[filterKey];\n        const checkedChartIds = filterScopeMap[filterKey].checked;\n\n        return {\n          ...map,\n          [filterKey]: getFilterScopeFromNodesTree({\n            filterKey,\n            nodes,\n            checkedChartIds,\n          }),\n        };\n      },\n      {},\n    );\n\n    this.props.updateDashboardFiltersScope(allFilterFieldScopes);\n    this.props.setUnsavedChanges(true);\n\n    // click Save button will do save and close modal\n    this.props.onCloseModal();\n  }\n\n  filterTree() {\n    // Reset nodes back to unfiltered state\n    if (!this.state.searchText) {\n      this.setState(prevState => {\n        const {\n          activeFilterField,\n          checkedFilterFields,\n          filterScopeMap,\n        } = prevState;\n        const key = getKeyForFilterScopeTree({\n          activeFilterField,\n          checkedFilterFields,\n        });\n\n        const updatedEntry = {\n          ...filterScopeMap[key],\n          nodesFiltered: filterScopeMap[key].nodes,\n        };\n        return {\n          filterScopeMap: {\n            ...filterScopeMap,\n            [key]: updatedEntry,\n          },\n        };\n      });\n    } else {\n      const updater = prevState => {\n        const {\n          activeFilterField,\n          checkedFilterFields,\n          filterScopeMap,\n        } = prevState;\n        const key = getKeyForFilterScopeTree({\n          activeFilterField,\n          checkedFilterFields,\n        });\n\n        const nodesFiltered = filterScopeMap[key].nodes.reduce(\n          this.filterNodes,\n          [],\n        );\n        const expanded = getFilterScopeParentNodes([...nodesFiltered]);\n        const updatedEntry = {\n          ...filterScopeMap[key],\n          nodesFiltered,\n          expanded,\n        };\n\n        return {\n          filterScopeMap: {\n            ...filterScopeMap,\n            [key]: updatedEntry,\n          },\n        };\n      };\n\n      this.setState(updater);\n    }\n  }\n\n  filterNodes(filtered = [], node = {}) {\n    const { searchText } = this.state;\n    const children = (node.children || []).reduce(this.filterNodes, []);\n\n    if (\n      // Node's label matches the search string\n      node.label.toLocaleLowerCase().indexOf(searchText.toLocaleLowerCase()) >\n        -1 ||\n      // Or a children has a matching node\n      children.length\n    ) {\n      filtered.push({ ...node, children });\n    }\n\n    return filtered;\n  }\n\n  renderFilterFieldList() {\n    const {\n      activeFilterField,\n      filterFieldNodes,\n      checkedFilterFields,\n      expandedFilterIds,\n    } = this.state;\n    return (\n      <FilterFieldTree\n        activeKey={activeFilterField}\n        nodes={filterFieldNodes}\n        checked={checkedFilterFields}\n        expanded={expandedFilterIds}\n        onClick={this.onChangeFilterField}\n        onCheck={this.onCheckFilterField}\n        onExpand={this.onExpandFilterField}\n      />\n    );\n  }\n\n  renderFilterScopeTree() {\n    const {\n      filterScopeMap,\n      activeFilterField,\n      checkedFilterFields,\n      searchText,\n    } = this.state;\n\n    const key = getKeyForFilterScopeTree({\n      activeFilterField,\n      checkedFilterFields,\n    });\n\n    const selectedChartId = getSelectedChartIdForFilterScopeTree({\n      activeFilterField,\n      checkedFilterFields,\n    });\n    return (\n      <>\n        <input\n          className=\"filter-text scope-search multi-edit-mode\"\n          placeholder={t('Search...')}\n          type=\"text\"\n          value={searchText}\n          onChange={this.onSearchInputChange}\n        />\n        <FilterScopeTree\n          nodes={filterScopeMap[key].nodesFiltered}\n          checked={filterScopeMap[key].checked}\n          expanded={filterScopeMap[key].expanded}\n          onCheck={this.onCheckFilterScope}\n          onExpand={this.onExpandFilterScope}\n          // pass selectedFilterId prop to FilterScopeTree component,\n          // to hide checkbox for selected filter field itself\n          selectedChartId={selectedChartId}\n        />\n      </>\n    );\n  }\n\n  renderEditingFiltersName() {\n    const { dashboardFilters } = this.props;\n    const { activeFilterField, checkedFilterFields } = this.state;\n    const currentFilterLabels = []\n      .concat(activeFilterField || checkedFilterFields)\n      .map(key => {\n        const { chartId, column } = getChartIdAndColumnFromFilterKey(key);\n        return dashboardFilters[chartId].labels[column] || column;\n      });\n\n    return (\n      <div className=\"selected-fields multi-edit-mode\">\n        {currentFilterLabels.length === 0 && t('No filter is selected.')}\n        {currentFilterLabels.length === 1 && t('Editing 1 filter:')}\n        {currentFilterLabels.length > 1 &&\n          t('Batch editing %d filters:', currentFilterLabels.length)}\n        <span className=\"selected-scopes\">\n          {currentFilterLabels.join(', ')}\n        </span>\n      </div>\n    );\n  }\n\n  render() {\n    const { showSelector } = this.state;\n\n    return (\n      <div className=\"filter-scope-container\">\n        <div className=\"filter-scope-header\">\n          <h4>{t('Configure filter scopes')}</h4>\n          {showSelector && this.renderEditingFiltersName()}\n        </div>\n\n        <div className=\"filter-scope-body\">\n          {!showSelector ? (\n            <div className=\"warning-message\">\n              {t('There are no filters in this dashboard.')}\n            </div>\n          ) : (\n            <div className=\"filters-scope-selector\">\n              <div className={cx('filter-field-pane multi-edit-mode')}>\n                {this.renderFilterFieldList()}\n              </div>\n              <div className=\"filter-scope-pane multi-edit-mode\">\n                {this.renderFilterScopeTree()}\n              </div>\n            </div>\n          )}\n        </div>\n\n        <ActionsContainer>\n          <Button buttonSize=\"small\" onClick={this.onClose}>\n            {t('Close')}\n          </Button>\n          {showSelector && (\n            <Button\n              buttonSize=\"small\"\n              buttonStyle=\"primary\"\n              onClick={this.onSave}\n            >\n              {t('Save')}\n            </Button>\n          )}\n        </ActionsContainer>\n      </div>\n    );\n  }\n}\n\nFilterScopeSelector.propTypes = propTypes;\n"]},"metadata":{},"sourceType":"module"}