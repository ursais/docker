{"ast":null,"code":"import _concatInstanceProperty from \"@babel/runtime-corejs3/core-js-stable/instance/concat\";import _includesInstanceProperty from \"@babel/runtime-corejs3/core-js-stable/instance/includes\";import _forEachInstanceProperty from \"@babel/runtime-corejs3/core-js-stable/instance/for-each\";import _mapInstanceProperty from \"@babel/runtime-corejs3/core-js-stable/instance/map\";import _isEmpty from \"lodash/isEmpty\";(function () {var enterModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.enterModule : undefined;enterModule && enterModule(module);})();var __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default.signature : function (a) {return a;};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nimport { t } from '@superset-ui/core';\n\nimport { DASHBOARD_ROOT_ID } from './constants';\nimport { CHART_TYPE, DASHBOARD_ROOT_TYPE, TAB_TYPE } from './componentTypes';\n\nconst FILTER_SCOPE_CONTAINER_TYPES = [TAB_TYPE, DASHBOARD_ROOT_TYPE];\n\nfunction traverse({\n  currentNode = {},\n  components = {},\n  filterFields = [],\n  selectedChartId })\n{\n  if (!currentNode) {\n    return null;\n  }\n\n  const { type } = currentNode;\n  if (\n  CHART_TYPE === type &&\n  currentNode &&\n  currentNode.meta &&\n  currentNode.meta.chartId)\n  {\n    const chartNode = {\n      value: currentNode.meta.chartId,\n      label:\n      currentNode.meta.sliceName || `${type} ${currentNode.meta.chartId}`,\n      type,\n      showCheckbox: selectedChartId !== currentNode.meta.chartId };\n\n\n    return {\n      ...chartNode,\n      children: _mapInstanceProperty(filterFields).call(filterFields, filterField => ({\n        value: `${currentNode.meta.chartId}:${filterField}`,\n        label: `${chartNode.label}`,\n        type: 'filter_box',\n        showCheckbox: false })) };\n\n\n  }\n\n  let children = [];\n  if (currentNode.children && currentNode.children.length) {var _context;\n    _forEachInstanceProperty(_context = currentNode.children).call(_context, child => {\n      const childNodeTree = traverse({\n        currentNode: components[child],\n        components,\n        filterFields,\n        selectedChartId });\n\n\n      const childType = components[child].type;\n      if (_includesInstanceProperty(FILTER_SCOPE_CONTAINER_TYPES).call(FILTER_SCOPE_CONTAINER_TYPES, childType)) {\n        children.push(childNodeTree);\n      } else {\n        children = _concatInstanceProperty(children).call(children, childNodeTree);\n      }\n    });\n  }\n\n  if (_includesInstanceProperty(FILTER_SCOPE_CONTAINER_TYPES).call(FILTER_SCOPE_CONTAINER_TYPES, type)) {\n    let label = null;\n    if (type === DASHBOARD_ROOT_TYPE) {\n      label = t('All charts');\n    } else {\n      label =\n      currentNode.meta && currentNode.meta.text ?\n      currentNode.meta.text :\n      `${type} ${currentNode.id}`;\n    }\n\n    return {\n      value: currentNode.id,\n      label,\n      type,\n      children };\n\n  }\n\n  return children;\n}\n\nexport default function getFilterScopeNodesTree({\n  components = {},\n  filterFields = [],\n  selectedChartId })\n{\n  if (_isEmpty(components)) {\n    return [];\n  }\n\n  const root = traverse({\n    currentNode: components[DASHBOARD_ROOT_ID],\n    components,\n    filterFields,\n    selectedChartId });\n\n  return [\n  {\n    ...root }];\n\n\n};(function () {var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined;if (!reactHotLoader) {return;}reactHotLoader.register(FILTER_SCOPE_CONTAINER_TYPES, \"FILTER_SCOPE_CONTAINER_TYPES\", \"/app/superset-frontend/src/dashboard/util/getFilterScopeNodesTree.js\");reactHotLoader.register(traverse, \"traverse\", \"/app/superset-frontend/src/dashboard/util/getFilterScopeNodesTree.js\");reactHotLoader.register(getFilterScopeNodesTree, \"getFilterScopeNodesTree\", \"/app/superset-frontend/src/dashboard/util/getFilterScopeNodesTree.js\");})();;(function () {var leaveModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.leaveModule : undefined;leaveModule && leaveModule(module);})();","map":{"version":3,"sources":["/app/superset-frontend/src/dashboard/util/getFilterScopeNodesTree.js"],"names":["t","DASHBOARD_ROOT_ID","CHART_TYPE","DASHBOARD_ROOT_TYPE","TAB_TYPE","FILTER_SCOPE_CONTAINER_TYPES","traverse","currentNode","components","filterFields","selectedChartId","type","meta","chartId","chartNode","value","label","sliceName","showCheckbox","children","filterField","length","child","childNodeTree","childType","push","text","id","getFilterScopeNodesTree","root"],"mappings":";;;;;;;;;;;;;;;;;;;AAmBA,SAASA,CAAT,QAAkB,mBAAlB;;AAEA,SAASC,iBAAT,QAAkC,aAAlC;AACA,SAASC,UAAT,EAAqBC,mBAArB,EAA0CC,QAA1C,QAA0D,kBAA1D;;AAEA,MAAMC,4BAA4B,GAAG,CAACD,QAAD,EAAWD,mBAAX,CAArC;;AAEA,SAASG,QAAT,CAAkB;AAChBC,EAAAA,WAAW,GAAG,EADE;AAEhBC,EAAAA,UAAU,GAAG,EAFG;AAGhBC,EAAAA,YAAY,GAAG,EAHC;AAIhBC,EAAAA,eAJgB,EAAlB;AAKG;AACD,MAAI,CAACH,WAAL,EAAkB;AAChB,WAAO,IAAP;AACD;;AAED,QAAM,EAAEI,IAAF,KAAWJ,WAAjB;AACA;AACEL,EAAAA,UAAU,KAAKS,IAAf;AACAJ,EAAAA,WADA;AAEAA,EAAAA,WAAW,CAACK,IAFZ;AAGAL,EAAAA,WAAW,CAACK,IAAZ,CAAiBC,OAJnB;AAKE;AACA,UAAMC,SAAS,GAAG;AAChBC,MAAAA,KAAK,EAAER,WAAW,CAACK,IAAZ,CAAiBC,OADR;AAEhBG,MAAAA,KAAK;AACHT,MAAAA,WAAW,CAACK,IAAZ,CAAiBK,SAAjB,IAA+B,GAAEN,IAAK,IAAGJ,WAAW,CAACK,IAAZ,CAAiBC,OAAQ,EAHpD;AAIhBF,MAAAA,IAJgB;AAKhBO,MAAAA,YAAY,EAAER,eAAe,KAAKH,WAAW,CAACK,IAAZ,CAAiBC,OALnC,EAAlB;;;AAQA,WAAO;AACL,SAAGC,SADE;AAELK,MAAAA,QAAQ,EAAE,qBAAAV,YAAY,MAAZ,CAAAA,YAAY,EAAKW,WAAW,KAAK;AACzCL,QAAAA,KAAK,EAAG,GAAER,WAAW,CAACK,IAAZ,CAAiBC,OAAQ,IAAGO,WAAY,EADT;AAEzCJ,QAAAA,KAAK,EAAG,GAAEF,SAAS,CAACE,KAAM,EAFe;AAGzCL,QAAAA,IAAI,EAAE,YAHmC;AAIzCO,QAAAA,YAAY,EAAE,KAJ2B,EAAL,CAAhB,CAFjB,EAAP;;;AASD;;AAED,MAAIC,QAAQ,GAAG,EAAf;AACA,MAAIZ,WAAW,CAACY,QAAZ,IAAwBZ,WAAW,CAACY,QAAZ,CAAqBE,MAAjD,EAAyD;AACvD,wCAAAd,WAAW,CAACY,QAAZ,iBAA6BG,KAAK,IAAI;AACpC,YAAMC,aAAa,GAAGjB,QAAQ,CAAC;AAC7BC,QAAAA,WAAW,EAAEC,UAAU,CAACc,KAAD,CADM;AAE7Bd,QAAAA,UAF6B;AAG7BC,QAAAA,YAH6B;AAI7BC,QAAAA,eAJ6B,EAAD,CAA9B;;;AAOA,YAAMc,SAAS,GAAGhB,UAAU,CAACc,KAAD,CAAV,CAAkBX,IAApC;AACA,UAAI,0BAAAN,4BAA4B,MAA5B,CAAAA,4BAA4B,EAAUmB,SAAV,CAAhC,EAAsD;AACpDL,QAAAA,QAAQ,CAACM,IAAT,CAAcF,aAAd;AACD,OAFD,MAEO;AACLJ,QAAAA,QAAQ,GAAG,wBAAAA,QAAQ,MAAR,CAAAA,QAAQ,EAAQI,aAAR,CAAnB;AACD;AACF,KAdD;AAeD;;AAED,MAAI,0BAAAlB,4BAA4B,MAA5B,CAAAA,4BAA4B,EAAUM,IAAV,CAAhC,EAAiD;AAC/C,QAAIK,KAAK,GAAG,IAAZ;AACA,QAAIL,IAAI,KAAKR,mBAAb,EAAkC;AAChCa,MAAAA,KAAK,GAAGhB,CAAC,CAAC,YAAD,CAAT;AACD,KAFD,MAEO;AACLgB,MAAAA,KAAK;AACHT,MAAAA,WAAW,CAACK,IAAZ,IAAoBL,WAAW,CAACK,IAAZ,CAAiBc,IAArC;AACInB,MAAAA,WAAW,CAACK,IAAZ,CAAiBc,IADrB;AAEK,SAAEf,IAAK,IAAGJ,WAAW,CAACoB,EAAG,EAHhC;AAID;;AAED,WAAO;AACLZ,MAAAA,KAAK,EAAER,WAAW,CAACoB,EADd;AAELX,MAAAA,KAFK;AAGLL,MAAAA,IAHK;AAILQ,MAAAA,QAJK,EAAP;;AAMD;;AAED,SAAOA,QAAP;AACD;;AAED,eAAe,SAASS,uBAAT,CAAiC;AAC9CpB,EAAAA,UAAU,GAAG,EADiC;AAE9CC,EAAAA,YAAY,GAAG,EAF+B;AAG9CC,EAAAA,eAH8C,EAAjC;AAIZ;AACD,MAAI,SAAQF,UAAR,CAAJ,EAAyB;AACvB,WAAO,EAAP;AACD;;AAED,QAAMqB,IAAI,GAAGvB,QAAQ,CAAC;AACpBC,IAAAA,WAAW,EAAEC,UAAU,CAACP,iBAAD,CADH;AAEpBO,IAAAA,UAFoB;AAGpBC,IAAAA,YAHoB;AAIpBC,IAAAA,eAJoB,EAAD,CAArB;;AAMA,SAAO;AACL;AACE,OAAGmB,IADL,EADK,CAAP;;;AAKD,C,iLAnGKxB,4B,kIAEGC,Q,8GA6EesB,uB","sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { isEmpty } from 'lodash';\nimport { t } from '@superset-ui/core';\n\nimport { DASHBOARD_ROOT_ID } from './constants';\nimport { CHART_TYPE, DASHBOARD_ROOT_TYPE, TAB_TYPE } from './componentTypes';\n\nconst FILTER_SCOPE_CONTAINER_TYPES = [TAB_TYPE, DASHBOARD_ROOT_TYPE];\n\nfunction traverse({\n  currentNode = {},\n  components = {},\n  filterFields = [],\n  selectedChartId,\n}) {\n  if (!currentNode) {\n    return null;\n  }\n\n  const { type } = currentNode;\n  if (\n    CHART_TYPE === type &&\n    currentNode &&\n    currentNode.meta &&\n    currentNode.meta.chartId\n  ) {\n    const chartNode = {\n      value: currentNode.meta.chartId,\n      label:\n        currentNode.meta.sliceName || `${type} ${currentNode.meta.chartId}`,\n      type,\n      showCheckbox: selectedChartId !== currentNode.meta.chartId,\n    };\n\n    return {\n      ...chartNode,\n      children: filterFields.map(filterField => ({\n        value: `${currentNode.meta.chartId}:${filterField}`,\n        label: `${chartNode.label}`,\n        type: 'filter_box',\n        showCheckbox: false,\n      })),\n    };\n  }\n\n  let children = [];\n  if (currentNode.children && currentNode.children.length) {\n    currentNode.children.forEach(child => {\n      const childNodeTree = traverse({\n        currentNode: components[child],\n        components,\n        filterFields,\n        selectedChartId,\n      });\n\n      const childType = components[child].type;\n      if (FILTER_SCOPE_CONTAINER_TYPES.includes(childType)) {\n        children.push(childNodeTree);\n      } else {\n        children = children.concat(childNodeTree);\n      }\n    });\n  }\n\n  if (FILTER_SCOPE_CONTAINER_TYPES.includes(type)) {\n    let label = null;\n    if (type === DASHBOARD_ROOT_TYPE) {\n      label = t('All charts');\n    } else {\n      label =\n        currentNode.meta && currentNode.meta.text\n          ? currentNode.meta.text\n          : `${type} ${currentNode.id}`;\n    }\n\n    return {\n      value: currentNode.id,\n      label,\n      type,\n      children,\n    };\n  }\n\n  return children;\n}\n\nexport default function getFilterScopeNodesTree({\n  components = {},\n  filterFields = [],\n  selectedChartId,\n}) {\n  if (isEmpty(components)) {\n    return [];\n  }\n\n  const root = traverse({\n    currentNode: components[DASHBOARD_ROOT_ID],\n    components,\n    filterFields,\n    selectedChartId,\n  });\n  return [\n    {\n      ...root,\n    },\n  ];\n}\n"]},"metadata":{},"sourceType":"module"}