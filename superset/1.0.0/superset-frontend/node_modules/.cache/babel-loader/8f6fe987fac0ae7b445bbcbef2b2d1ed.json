{"ast":null,"code":"import \"core-js/modules/web.dom-collections.iterator.js\";import _mapInstanceProperty from \"@babel/runtime-corejs3/core-js-stable/instance/map\";import _JSON$stringify from \"@babel/runtime-corejs3/core-js-stable/json/stringify\";(function () {var enterModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.enterModule : undefined;enterModule && enterModule(module);})();var __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default.signature : function (a) {return a;}; /**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { ensureIsArray, t, tn } from '@superset-ui/core';\nimport React, { useEffect, useState } from 'react';\nimport { Select } from 'src/common/components';\nimport { Styles, StyledSelect } from '../common';import { jsx as ___EmotionJSX } from \"@emotion/react\";\nconst { Option } = Select;\nexport default function PluginFilterTimegrain(props) {var _context;\n  const { data, formData, height, width, setDataMask, setFocusedFilter, unsetFocusedFilter, filterState } = props;\n  const { defaultValue, inputRef } = formData;\n  const [value, setValue] = useState(defaultValue != null ? defaultValue : []);\n  const handleChange = values => {\n    const resultValue = ensureIsArray(values);\n    const [timeGrain] = resultValue;\n    const extraFormData = {};\n    if (timeGrain) {\n      extraFormData.time_grain_sqla = timeGrain;\n    }\n    setValue(resultValue);\n    setDataMask({\n      extraFormData,\n      filterState: {\n        value: resultValue.length ? resultValue : null } });\n\n\n  };\n  useEffect(() => {var _filterState$value;\n    handleChange((_filterState$value = filterState.value) != null ? _filterState$value : []);\n  }, [_JSON$stringify(filterState.value)]);\n  useEffect(() => {\n    handleChange(defaultValue != null ? defaultValue : []);\n    // I think after Config Modal update some filter it re-creates default value for all other filters\n    // so we can process it like this `JSON.stringify` or start to use `Immer`\n  }, [_JSON$stringify(defaultValue)]);\n  const placeholderText = (data || []).length === 0 ?\n  t('No data') :\n  tn('%s option', '%s options', data.length, data.length);\n  return ___EmotionJSX(Styles, { height: height, width: width },\n  ___EmotionJSX(StyledSelect, { allowClear: true, value: value, placeholder: placeholderText\n    // @ts-ignore\n    , onChange: handleChange, onBlur: unsetFocusedFilter, onFocus: setFocusedFilter, ref: inputRef },\n  _mapInstanceProperty(_context = data || []).call(_context, row => {\n    const { name, duration } = row;\n    return ___EmotionJSX(Option, { key: duration, value: duration },\n    name);\n\n  })));\n\n\n}__signature__(PluginFilterTimegrain, \"useState{[value, setValue](defaultValue ?? [])}\\nuseEffect{}\\nuseEffect{}\");;(function () {var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined;if (!reactHotLoader) {return;}reactHotLoader.register(Option, \"Option\", \"/app/superset-frontend/src/filters/components/TimeGrain/TimeGrainFilterPlugin.tsx\");reactHotLoader.register(PluginFilterTimegrain, \"PluginFilterTimegrain\", \"/app/superset-frontend/src/filters/components/TimeGrain/TimeGrainFilterPlugin.tsx\");})();;(function () {var leaveModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.leaveModule : undefined;leaveModule && leaveModule(module);})();","map":{"version":3,"sources":["/app/superset-frontend/src/filters/components/TimeGrain/TimeGrainFilterPlugin.tsx"],"names":[],"mappings":"0gBAAA;;;;;;;;;;;;;;;;;AAiBG;AACH,SACE,aADF,EAGE,CAHF,EAKE,EALF,QAMO,mBANP;AAOA,OAAO,KAAP,IAAgB,SAAhB,EAA2B,QAA3B,QAA2C,OAA3C;AACA,SAAS,MAAT,QAAuB,uBAAvB;AACA,SAAS,MAAT,EAAiB,YAAjB,QAAqC,WAArC,C;AAGA,MAAM,EAAE,MAAF,KAAa,MAAnB;AAEA,eAAc,SAAU,qBAAV,CACZ,KADY,EACqB;AAEjC,QAAM,EACJ,IADI,EAEJ,QAFI,EAGJ,MAHI,EAIJ,KAJI,EAKJ,WALI,EAMJ,gBANI,EAOJ,kBAPI,EAQJ,WARI,KASF,KATJ;AAUA,QAAM,EAAE,YAAF,EAAgB,QAAhB,KAA6B,QAAnC;AAEA,QAAM,CAAC,KAAD,EAAQ,QAAR,IAAoB,QAAQ,CAAW,YAAX,WAAW,YAAX,GAA2B,EAA3B,CAAlC;AAEA,QAAM,YAAY,GAAI,MAAD,IAAiD;AACpE,UAAM,WAAW,GAAa,aAAa,CAAS,MAAT,CAA3C;AACA,UAAM,CAAC,SAAD,IAAc,WAApB;AAEA,UAAM,aAAa,GAAkB,EAArC;AACA,QAAI,SAAJ,EAAe;AACb,MAAA,aAAa,CAAC,eAAd,GAAgC,SAAhC;AACD;AACD,IAAA,QAAQ,CAAC,WAAD,CAAR;AACA,IAAA,WAAW,CAAC;AACV,MAAA,aADU;AAEV,MAAA,WAAW,EAAE;AACX,QAAA,KAAK,EAAE,WAAW,CAAC,MAAZ,GAAqB,WAArB,GAAmC,IAD/B,EAFH,EAAD,CAAX;;;AAMD,GAfD;AAiBA,EAAA,SAAS,CAAC,MAAK;AACb,IAAA,YAAY,uBAAC,WAAW,CAAC,KAAb,iCAAsB,EAAtB,CAAZ;AACD,GAFQ,EAEN,CAAC,gBAAe,WAAW,CAAC,KAA3B,CAAD,CAFM,CAAT;AAIA,EAAA,SAAS,CAAC,MAAK;AACb,IAAA,YAAY,CAAC,YAAD,WAAC,YAAD,GAAiB,EAAjB,CAAZ;AACA;AACA;AACD,GAJQ,EAIN,CAAC,gBAAe,YAAf,CAAD,CAJM,CAAT;AAMA,QAAM,eAAe,GACnB,CAAC,IAAI,IAAI,EAAT,EAAa,MAAb,KAAwB,CAAxB;AACI,EAAA,CAAC,CAAC,SAAD,CADL;AAEI,EAAA,EAAE,CAAC,WAAD,EAAc,YAAd,EAA4B,IAAI,CAAC,MAAjC,EAAyC,IAAI,CAAC,MAA9C,CAHR;AAIA,SACE,cAAC,MAAD,IAAQ,MAAM,EAAE,MAAhB,EAAwB,KAAK,EAAE,KAA/B;AACE,gBAAC,YAAD,IACE,UAAU,MADZ,EAEE,KAAK,EAAE,KAFT,EAGE,WAAW,EAAE;AACb;AAJF,MAKE,QAAQ,EAAE,YALZ,EAME,MAAM,EAAE,kBANV,EAOE,OAAO,EAAE,gBAPX,EAQE,GAAG,EAAE,QARP;AAUG,kCAAC,IAAI,IAAI,EAAT,iBAAkB,GAAD,IAA4C;AAC5D,UAAM,EAAE,IAAF,EAAQ,QAAR,KAAqB,GAA3B;AACA,WACE,cAAC,MAAD,IAAQ,GAAG,EAAE,QAAb,EAAuB,KAAK,EAAE,QAA9B;AACG,IAAA,IADH,CADF;;AAKD,GAPA,CAVH,CADF,CADF;;;AAuBD,C,cAvEuB,qB,gQAFhB,M,yHAEgB,qB","sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport {\n  ensureIsArray,\n  ExtraFormData,\n  t,\n  TimeGranularity,\n  tn,\n} from '@superset-ui/core';\nimport React, { useEffect, useState } from 'react';\nimport { Select } from 'src/common/components';\nimport { Styles, StyledSelect } from '../common';\nimport { PluginFilterTimeGrainProps } from './types';\n\nconst { Option } = Select;\n\nexport default function PluginFilterTimegrain(\n  props: PluginFilterTimeGrainProps,\n) {\n  const {\n    data,\n    formData,\n    height,\n    width,\n    setDataMask,\n    setFocusedFilter,\n    unsetFocusedFilter,\n    filterState,\n  } = props;\n  const { defaultValue, inputRef } = formData;\n\n  const [value, setValue] = useState<string[]>(defaultValue ?? []);\n\n  const handleChange = (values: string[] | string | undefined | null) => {\n    const resultValue: string[] = ensureIsArray<string>(values);\n    const [timeGrain] = resultValue;\n\n    const extraFormData: ExtraFormData = {};\n    if (timeGrain) {\n      extraFormData.time_grain_sqla = timeGrain as TimeGranularity;\n    }\n    setValue(resultValue);\n    setDataMask({\n      extraFormData,\n      filterState: {\n        value: resultValue.length ? resultValue : null,\n      },\n    });\n  };\n\n  useEffect(() => {\n    handleChange(filterState.value ?? []);\n  }, [JSON.stringify(filterState.value)]);\n\n  useEffect(() => {\n    handleChange(defaultValue ?? []);\n    // I think after Config Modal update some filter it re-creates default value for all other filters\n    // so we can process it like this `JSON.stringify` or start to use `Immer`\n  }, [JSON.stringify(defaultValue)]);\n\n  const placeholderText =\n    (data || []).length === 0\n      ? t('No data')\n      : tn('%s option', '%s options', data.length, data.length);\n  return (\n    <Styles height={height} width={width}>\n      <StyledSelect\n        allowClear\n        value={value}\n        placeholder={placeholderText}\n        // @ts-ignore\n        onChange={handleChange}\n        onBlur={unsetFocusedFilter}\n        onFocus={setFocusedFilter}\n        ref={inputRef}\n      >\n        {(data || []).map((row: { name: string; duration: string }) => {\n          const { name, duration } = row;\n          return (\n            <Option key={duration} value={duration}>\n              {name}\n            </Option>\n          );\n        })}\n      </StyledSelect>\n    </Styles>\n  );\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}