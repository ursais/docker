{"ast":null,"code":"import \"core-js/modules/web.dom-collections.iterator.js\";import _Array$isArray from \"@babel/runtime-corejs3/core-js-stable/array/is-array\";import _Object$keys from \"@babel/runtime-corejs3/core-js-stable/object/keys\";import _reduceInstanceProperty from \"@babel/runtime-corejs3/core-js-stable/instance/reduce\";import _Object$values from \"@babel/runtime-corejs3/core-js-stable/object/values\";import _mapInstanceProperty from \"@babel/runtime-corejs3/core-js-stable/instance/map\";import _forEachInstanceProperty from \"@babel/runtime-corejs3/core-js-stable/instance/for-each\";import _Object$entries from \"@babel/runtime-corejs3/core-js-stable/object/entries\";import _filterInstanceProperty from \"@babel/runtime-corejs3/core-js-stable/instance/filter\";import _includesInstanceProperty from \"@babel/runtime-corejs3/core-js-stable/instance/includes\";import _keyBy from \"lodash/fp/keyBy\";import _flow from \"lodash/fp/flow\";import _mapValues from \"lodash/fp/mapValues\";import _isEmpty from \"lodash/isEmpty\";(function () {var enterModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.enterModule : undefined;enterModule && enterModule(module);})();var __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default.signature : function (a) {return a;};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nimport {\ngetChartIdAndColumnFromFilterKey,\ngetDashboardFilterKey } from\n'./getDashboardFilterKey';\nimport { CHART_TYPE } from './componentTypes';\nimport { DASHBOARD_FILTER_SCOPE_GLOBAL } from '../reducers/dashboardFilters';\n\nlet allFilterBoxChartIds = [];\nlet activeFilters = {};\nlet appliedFilterValuesByChart = {};\nlet allComponents = {};\n\n// output: { [id_column]: { values, scope } }\nexport function getActiveFilters() {\n  return activeFilters;\n}\n\n// currently filter_box is a chart,\n// when selecting filter scopes, they have to be out pulled out in a few places.\n// after we make filter_box a dashboard build-in component, will not need this check anymore.\nexport function isFilterBox(chartId) {\n  return _includesInstanceProperty(allFilterBoxChartIds).call(allFilterBoxChartIds, chartId);\n}\n\n// this function is to find all filter values applied to a chart,\n// it goes through all active filters and their scopes.\n// return: { [column]: array of selected values }\nexport function getAppliedFilterValues(chartId) {\n  // use cached data if possible\n  if (!(chartId in appliedFilterValuesByChart)) {var _context;\n    const applicableFilters = _filterInstanceProperty(_context = _Object$entries(\n    activeFilters)).call(_context,\n    ([, { scope: chartIds }]) => _includesInstanceProperty(chartIds).call(chartIds, chartId));\n    appliedFilterValuesByChart[chartId] = _flow(\n    _keyBy(\n    ([filterKey]) => getChartIdAndColumnFromFilterKey(filterKey).column),\n\n    _mapValues(([, { values }]) => values))(\n    applicableFilters);\n  }\n  return appliedFilterValuesByChart[chartId];\n}\n\nexport function getChartIdsInFilterScope({\n  filterScope = DASHBOARD_FILTER_SCOPE_GLOBAL })\n{\n  function traverse(chartIds = [], component = {}, immuneChartIds = []) {\n    if (!component) {\n      return;\n    }\n\n    if (\n    component.type === CHART_TYPE &&\n    component.meta &&\n    component.meta.chartId &&\n    !_includesInstanceProperty(immuneChartIds).call(immuneChartIds, component.meta.chartId))\n    {\n      chartIds.push(component.meta.chartId);\n    } else if (component.children) {var _context2;\n      _forEachInstanceProperty(_context2 = component.children).call(_context2, (child) =>\n      traverse(chartIds, allComponents[child], immuneChartIds));\n\n    }\n  }\n\n  const chartIds = [];\n  const { scope: scopeComponentIds, immune: immuneChartIds } = filterScope;\n  _forEachInstanceProperty(scopeComponentIds).call(scopeComponentIds, (componentId) =>\n  traverse(chartIds, allComponents[componentId], immuneChartIds));\n\n\n  return chartIds;\n}\n\n// non-empty filter fields in dashboardFilters,\n// activeFilters map contains selected values and filter scope.\n// values: array of selected values\n// scope: array of chartIds that applicable to the filter field.\nexport function buildActiveFilters({ dashboardFilters = {}, components = {} }) {var _context3, _context4;\n  allFilterBoxChartIds = _mapInstanceProperty(_context3 = _Object$values(dashboardFilters)).call(_context3,\n  filter => filter.chartId);\n\n\n  // clear cache\n  if (!_isEmpty(components)) {\n    allComponents = components;\n  }\n  appliedFilterValuesByChart = {};\n  activeFilters = _reduceInstanceProperty(_context4 = _Object$values(dashboardFilters)).call(_context4, (result, filter) => {var _context5;\n    const { chartId, columns, scopes } = filter;\n    const nonEmptyFilters = {};\n\n    _forEachInstanceProperty(_context5 = _Object$keys(columns)).call(_context5, column => {\n      if (\n      _Array$isArray(columns[column]) ?\n      columns[column].length :\n      columns[column] !== undefined)\n      {var _context6;\n        // remove filter itself\n        const scope = _filterInstanceProperty(_context6 = getChartIdsInFilterScope({\n          filterScope: scopes[column] })).call(_context6,\n        id => chartId !== id);\n\n        nonEmptyFilters[getDashboardFilterKey({ chartId, column })] = {\n          values: columns[column],\n          scope };\n\n      }\n    });\n\n    return {\n      ...result,\n      ...nonEmptyFilters };\n\n  }, {});\n};(function () {var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined;if (!reactHotLoader) {return;}reactHotLoader.register(allFilterBoxChartIds, \"allFilterBoxChartIds\", \"/app/superset-frontend/src/dashboard/util/activeDashboardFilters.js\");reactHotLoader.register(activeFilters, \"activeFilters\", \"/app/superset-frontend/src/dashboard/util/activeDashboardFilters.js\");reactHotLoader.register(appliedFilterValuesByChart, \"appliedFilterValuesByChart\", \"/app/superset-frontend/src/dashboard/util/activeDashboardFilters.js\");reactHotLoader.register(allComponents, \"allComponents\", \"/app/superset-frontend/src/dashboard/util/activeDashboardFilters.js\");reactHotLoader.register(getActiveFilters, \"getActiveFilters\", \"/app/superset-frontend/src/dashboard/util/activeDashboardFilters.js\");reactHotLoader.register(isFilterBox, \"isFilterBox\", \"/app/superset-frontend/src/dashboard/util/activeDashboardFilters.js\");reactHotLoader.register(getAppliedFilterValues, \"getAppliedFilterValues\", \"/app/superset-frontend/src/dashboard/util/activeDashboardFilters.js\");reactHotLoader.register(getChartIdsInFilterScope, \"getChartIdsInFilterScope\", \"/app/superset-frontend/src/dashboard/util/activeDashboardFilters.js\");reactHotLoader.register(buildActiveFilters, \"buildActiveFilters\", \"/app/superset-frontend/src/dashboard/util/activeDashboardFilters.js\");})();;(function () {var leaveModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.leaveModule : undefined;leaveModule && leaveModule(module);})();","map":{"version":3,"sources":["/app/superset-frontend/src/dashboard/util/activeDashboardFilters.js"],"names":["getChartIdAndColumnFromFilterKey","getDashboardFilterKey","CHART_TYPE","DASHBOARD_FILTER_SCOPE_GLOBAL","allFilterBoxChartIds","activeFilters","appliedFilterValuesByChart","allComponents","getActiveFilters","isFilterBox","chartId","getAppliedFilterValues","applicableFilters","scope","chartIds","filterKey","column","values","getChartIdsInFilterScope","filterScope","traverse","component","immuneChartIds","type","meta","push","children","child","scopeComponentIds","immune","componentId","buildActiveFilters","dashboardFilters","components","filter","result","columns","scopes","nonEmptyFilters","length","undefined","id"],"mappings":"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","sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { isEmpty } from 'lodash';\nimport { mapValues, flow, keyBy } from 'lodash/fp';\n\nimport {\n  getChartIdAndColumnFromFilterKey,\n  getDashboardFilterKey,\n} from './getDashboardFilterKey';\nimport { CHART_TYPE } from './componentTypes';\nimport { DASHBOARD_FILTER_SCOPE_GLOBAL } from '../reducers/dashboardFilters';\n\nlet allFilterBoxChartIds = [];\nlet activeFilters = {};\nlet appliedFilterValuesByChart = {};\nlet allComponents = {};\n\n// output: { [id_column]: { values, scope } }\nexport function getActiveFilters() {\n  return activeFilters;\n}\n\n// currently filter_box is a chart,\n// when selecting filter scopes, they have to be out pulled out in a few places.\n// after we make filter_box a dashboard build-in component, will not need this check anymore.\nexport function isFilterBox(chartId) {\n  return allFilterBoxChartIds.includes(chartId);\n}\n\n// this function is to find all filter values applied to a chart,\n// it goes through all active filters and their scopes.\n// return: { [column]: array of selected values }\nexport function getAppliedFilterValues(chartId) {\n  // use cached data if possible\n  if (!(chartId in appliedFilterValuesByChart)) {\n    const applicableFilters = Object.entries(\n      activeFilters,\n    ).filter(([, { scope: chartIds }]) => chartIds.includes(chartId));\n    appliedFilterValuesByChart[chartId] = flow(\n      keyBy(\n        ([filterKey]) => getChartIdAndColumnFromFilterKey(filterKey).column,\n      ),\n      mapValues(([, { values }]) => values),\n    )(applicableFilters);\n  }\n  return appliedFilterValuesByChart[chartId];\n}\n\nexport function getChartIdsInFilterScope({\n  filterScope = DASHBOARD_FILTER_SCOPE_GLOBAL,\n}) {\n  function traverse(chartIds = [], component = {}, immuneChartIds = []) {\n    if (!component) {\n      return;\n    }\n\n    if (\n      component.type === CHART_TYPE &&\n      component.meta &&\n      component.meta.chartId &&\n      !immuneChartIds.includes(component.meta.chartId)\n    ) {\n      chartIds.push(component.meta.chartId);\n    } else if (component.children) {\n      component.children.forEach(child =>\n        traverse(chartIds, allComponents[child], immuneChartIds),\n      );\n    }\n  }\n\n  const chartIds = [];\n  const { scope: scopeComponentIds, immune: immuneChartIds } = filterScope;\n  scopeComponentIds.forEach(componentId =>\n    traverse(chartIds, allComponents[componentId], immuneChartIds),\n  );\n\n  return chartIds;\n}\n\n// non-empty filter fields in dashboardFilters,\n// activeFilters map contains selected values and filter scope.\n// values: array of selected values\n// scope: array of chartIds that applicable to the filter field.\nexport function buildActiveFilters({ dashboardFilters = {}, components = {} }) {\n  allFilterBoxChartIds = Object.values(dashboardFilters).map(\n    filter => filter.chartId,\n  );\n\n  // clear cache\n  if (!isEmpty(components)) {\n    allComponents = components;\n  }\n  appliedFilterValuesByChart = {};\n  activeFilters = Object.values(dashboardFilters).reduce((result, filter) => {\n    const { chartId, columns, scopes } = filter;\n    const nonEmptyFilters = {};\n\n    Object.keys(columns).forEach(column => {\n      if (\n        Array.isArray(columns[column])\n          ? columns[column].length\n          : columns[column] !== undefined\n      ) {\n        // remove filter itself\n        const scope = getChartIdsInFilterScope({\n          filterScope: scopes[column],\n        }).filter(id => chartId !== id);\n\n        nonEmptyFilters[getDashboardFilterKey({ chartId, column })] = {\n          values: columns[column],\n          scope,\n        };\n      }\n    });\n\n    return {\n      ...result,\n      ...nonEmptyFilters,\n    };\n  }, {});\n}\n"]},"metadata":{},"sourceType":"module"}