{"ast":null,"code":"import \"core-js/modules/web.dom-collections.iterator.js\";import _JSON$stringify from \"@babel/runtime-corejs3/core-js-stable/json/stringify\";import _reduceInstanceProperty from \"@babel/runtime-corejs3/core-js-stable/instance/reduce\";import _Object$keys from \"@babel/runtime-corejs3/core-js-stable/object/keys\";import _includesInstanceProperty from \"@babel/runtime-corejs3/core-js-stable/instance/includes\";import _valuesInstanceProperty from \"@babel/runtime-corejs3/core-js-stable/instance/values\";import _keysInstanceProperty from \"@babel/runtime-corejs3/core-js-stable/instance/keys\";import _bindInstanceProperty from \"@babel/runtime-corejs3/core-js-stable/instance/bind\";import _mapInstanceProperty from \"@babel/runtime-corejs3/core-js-stable/instance/map\";(function () {var enterModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.enterModule : undefined;enterModule && enterModule(module);})();var __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default.signature : function (a) {return a;}; /**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { Row, Col, Input } from 'src/common/components';\nimport { Form, FormItem } from 'src/components/Form';\nimport jsonStringify from 'json-stringify-pretty-compact';\nimport Button from 'src/components/Button';\nimport { AsyncSelect } from 'src/components/Select';\nimport rison from 'rison';\nimport {\nstyled,\nt,\nSupersetClient,\ngetCategoricalSchemeRegistry,\nCategoricalColorNamespace } from\n'@superset-ui/core';\n\nimport Modal from 'src/components/Modal';\nimport { JsonEditor } from 'src/components/AsyncAceEditor';\n\nimport ColorSchemeControlWrapper from 'src/dashboard/components/ColorSchemeControlWrapper';\nimport { getClientErrorObject } from 'src/utils/getClientErrorObject';\nimport withToasts from 'src/messageToasts/enhancers/withToasts';\nimport 'src/dashboard/stylesheets/buttons.less';\nimport { FeatureFlag, isFeatureEnabled } from 'src/featureFlags';import { jsx as ___EmotionJSX } from \"@emotion/react\";\n\nconst StyledJsonEditor = styled(JsonEditor)`\n  border-radius: ${({ theme }) => theme.borderRadius}px;\n  border: 1px solid ${({ theme }) => theme.colors.secondary.light2};\n`;\n\nconst propTypes = {\n  dashboardId: PropTypes.number.isRequired,\n  show: PropTypes.bool,\n  onHide: PropTypes.func,\n  colorScheme: PropTypes.string,\n  setColorSchemeAndUnsavedChanges: PropTypes.func,\n  onSubmit: PropTypes.func,\n  addSuccessToast: PropTypes.func.isRequired,\n  onlyApply: PropTypes.bool };\n\n\nconst defaultProps = {\n  onHide: () => {},\n  setColorSchemeAndUnsavedChanges: () => {},\n  onSubmit: () => {},\n  show: false,\n  colorScheme: undefined,\n  onlyApply: false };\n\n\nconst handleErrorResponse = async response => {\n  const { error, statusText, message } = await getClientErrorObject(response);\n  let errorText = error || statusText || t('An error has occurred');\n\n  if (typeof message === 'object' && message.json_metadata) {\n    errorText = message.json_metadata;\n  } else if (typeof message === 'string') {\n    errorText = message;\n\n    if (message === 'Forbidden') {\n      errorText = t('You do not have permission to edit this dashboard');\n    }\n  }\n\n  Modal.error({\n    title: 'Error',\n    content: errorText,\n    okButtonProps: { danger: true, className: 'btn-danger' } });\n\n};\n\nconst loadAccessOptions = accessType => (input = '') => {\n  const query = rison.encode({ filter: input });\n  return SupersetClient.get({\n    endpoint: `/api/v1/dashboard/related/${accessType}?q=${query}` }).\n  then(\n  response => {var _context;return (\n      _mapInstanceProperty(_context = response.json.result).call(_context, item => ({\n        value: item.value,\n        label: item.text })));},\n\n  badResponse => {\n    handleErrorResponse(badResponse);\n    return [];\n  });\n\n};\n\nclass PropertiesModal extends React.PureComponent {\n  constructor(props) {var _context2, _context3, _context4, _context5, _context6, _context7, _context8, _context9, _context10;\n    super(props);\n    this.state = {\n      errors: [],\n      values: {\n        dashboard_title: '',\n        slug: '',\n        owners: [],\n        roles: [],\n        json_metadata: '',\n        colorScheme: props.colorScheme },\n\n      isDashboardLoaded: false,\n      isAdvancedOpen: false };\n\n    this.onChange = _bindInstanceProperty(_context2 = this.onChange).call(_context2, this);\n    this.onMetadataChange = _bindInstanceProperty(_context3 = this.onMetadataChange).call(_context3, this);\n    this.onOwnersChange = _bindInstanceProperty(_context4 = this.onOwnersChange).call(_context4, this);\n    this.onRolesChange = _bindInstanceProperty(_context5 = this.onRolesChange).call(_context5, this);\n    this.submit = _bindInstanceProperty(_context6 = this.submit).call(_context6, this);\n    this.toggleAdvanced = _bindInstanceProperty(_context7 = this.toggleAdvanced).call(_context7, this);\n    this.onColorSchemeChange = _bindInstanceProperty(_context8 = this.onColorSchemeChange).call(_context8, this);\n    this.getRowsWithRoles = _bindInstanceProperty(_context9 = this.getRowsWithRoles).call(_context9, this);\n    this.getRowsWithoutRoles = _bindInstanceProperty(_context10 = this.getRowsWithoutRoles).call(_context10, this);\n  }\n\n  componentDidMount() {\n    this.fetchDashboardDetails();\n    JsonEditor.preload();\n  }\n\n  onColorSchemeChange(value, { updateMetadata = true } = {}) {var _context11, _context12;\n    // check that color_scheme is valid\n    const colorChoices = _keysInstanceProperty(_context11 = getCategoricalSchemeRegistry()).call(_context11);\n    const { json_metadata: jsonMetadata } = _valuesInstanceProperty(this.state);\n    const jsonMetadataObj = jsonMetadata != null && jsonMetadata.length ?\n    JSON.parse(jsonMetadata) :\n    {};\n    if (!_includesInstanceProperty(colorChoices).call(colorChoices, value)) {\n      Modal.error({\n        title: 'Error',\n        content: t('A valid color scheme is required'),\n        okButtonProps: { danger: true, className: 'btn-danger' } });\n\n      throw new Error('A valid color scheme is required');\n    }\n\n    // update metadata to match selection\n    if (\n    updateMetadata &&\n    _includesInstanceProperty(_context12 = _Object$keys(jsonMetadataObj)).call(_context12, 'color_scheme'))\n    {var _context13, _jsonMetadataObj$labe;\n      jsonMetadataObj.color_scheme = value;\n      jsonMetadataObj.label_colors = _reduceInstanceProperty(_context13 = _Object$keys((_jsonMetadataObj$labe =\n      jsonMetadataObj.label_colors) != null ? _jsonMetadataObj$labe : {})).call(_context13,\n\n      (prev, next) => ({\n        ...prev,\n        [next]: CategoricalColorNamespace.getScale(value)(next) }),\n\n      {});\n\n      this.onMetadataChange(jsonStringify(jsonMetadataObj));\n    }\n\n    this.updateFormState('colorScheme', value);\n  }\n\n  onOwnersChange(value) {\n    this.updateFormState('owners', value);\n  }\n\n  onRolesChange(value) {\n    this.updateFormState('roles', value);\n  }\n\n  onMetadataChange(metadata) {\n    this.updateFormState('json_metadata', metadata);\n  }\n\n  onChange(e) {\n    const { name, value } = e.target;\n    this.updateFormState(name, value);\n  }\n\n  fetchDashboardDetails() {\n    // We fetch the dashboard details because not all code\n    // that renders this component have all the values we need.\n    // At some point when we have a more consistent frontend\n    // datamodel, the dashboard could probably just be passed as a prop.\n    SupersetClient.get({\n      endpoint: `/api/v1/dashboard/${this.props.dashboardId}` }).\n    then(response => {var _dashboard$json_metad, _context14, _context15;\n      const dashboard = response.json.result;\n      const jsonMetadataObj = (_dashboard$json_metad = dashboard.json_metadata) != null && _dashboard$json_metad.length ?\n      JSON.parse(dashboard.json_metadata) :\n      {};\n\n      this.setState(state => ({\n        isDashboardLoaded: true,\n        values: {\n          ..._valuesInstanceProperty(state),\n          dashboard_title: dashboard.dashboard_title || '',\n          slug: dashboard.slug || '',\n          // format json with 2-space indentation\n          json_metadata: dashboard.json_metadata ?\n          jsonStringify(jsonMetadataObj) :\n          '',\n          colorScheme: jsonMetadataObj.color_scheme } }));\n\n\n      const initialSelectedOwners = _mapInstanceProperty(_context14 = dashboard.owners).call(_context14, owner => ({\n        value: owner.id,\n        label: `${owner.first_name} ${owner.last_name}` }));\n\n      const initialSelectedRoles = _mapInstanceProperty(_context15 = dashboard.roles).call(_context15, role => ({\n        value: role.id,\n        label: `${role.name}` }));\n\n      this.onOwnersChange(initialSelectedOwners);\n      this.onRolesChange(initialSelectedRoles);\n    }, handleErrorResponse);\n  }\n\n  updateFormState(name, value) {\n    this.setState(state => ({\n      values: {\n        ..._valuesInstanceProperty(state),\n        [name]: value } }));\n\n\n  }\n\n  toggleAdvanced() {\n    this.setState(state => ({\n      isAdvancedOpen: !state.isAdvancedOpen }));\n\n  }\n\n  submit(e) {var _ownersValue$map, _rolesValue$map;\n    e.preventDefault();\n    e.stopPropagation();\n    const {\n      values: {\n        json_metadata: jsonMetadata,\n        slug,\n        dashboard_title: dashboardTitle,\n        colorScheme,\n        owners: ownersValue,\n        roles: rolesValue } } =\n\n    this.state;\n    const { onlyApply } = this.props;\n    const owners = (_ownersValue$map = ownersValue == null ? void 0 : _mapInstanceProperty(ownersValue).call(ownersValue, o => o.value)) != null ? _ownersValue$map : [];\n    const roles = (_rolesValue$map = rolesValue == null ? void 0 : _mapInstanceProperty(rolesValue).call(rolesValue, o => o.value)) != null ? _rolesValue$map : [];\n    let metadataColorScheme;\n\n    // update color scheme to match metadata\n    if (jsonMetadata != null && jsonMetadata.length) {\n      const { color_scheme: metadataColorScheme } = JSON.parse(jsonMetadata);\n      if (metadataColorScheme) {\n        this.onColorSchemeChange(metadataColorScheme, {\n          updateMetadata: false });\n\n      }\n    }\n\n    const moreProps = {};\n    const morePutProps = {};\n    if (isFeatureEnabled(FeatureFlag.DASHBOARD_RBAC)) {\n      moreProps.rolesIds = roles;\n      morePutProps.roles = roles;\n    }\n    if (onlyApply) {\n      this.props.onSubmit({\n        id: this.props.dashboardId,\n        title: dashboardTitle,\n        slug,\n        jsonMetadata,\n        ownerIds: owners,\n        colorScheme: metadataColorScheme || colorScheme,\n        ...moreProps });\n\n      this.props.onHide();\n    } else {\n      SupersetClient.put({\n        endpoint: `/api/v1/dashboard/${this.props.dashboardId}`,\n        headers: { 'Content-Type': 'application/json' },\n        body: _JSON$stringify({\n          dashboard_title: dashboardTitle,\n          slug: slug || null,\n          json_metadata: jsonMetadata || null,\n          owners,\n          ...morePutProps }) }).\n\n      then(({ json: { result } }) => {\n        const moreResultProps = {};\n        if (isFeatureEnabled(FeatureFlag.DASHBOARD_RBAC)) {\n          moreResultProps.rolesIds = result.roles;\n        }\n        this.props.addSuccessToast(t('The dashboard has been saved'));\n        this.props.onSubmit({\n          id: this.props.dashboardId,\n          title: result.dashboard_title,\n          slug: result.slug,\n          jsonMetadata: result.json_metadata,\n          ownerIds: result.owners,\n          colorScheme: metadataColorScheme || colorScheme,\n          ...moreResultProps });\n\n        this.props.onHide();\n      }, handleErrorResponse);\n    }\n  }\n\n  getRowsWithoutRoles() {\n    const { values, isDashboardLoaded } = this.state;\n    return (\n      ___EmotionJSX(Row, { gutter: 16 },\n      ___EmotionJSX(Col, { xs: 24, md: 12 },\n      ___EmotionJSX(\"h3\", { style: { marginTop: '1em' } }, t('Access')),\n      ___EmotionJSX(FormItem, { label: t('Owners') },\n      ___EmotionJSX(AsyncSelect, {\n        name: \"owners\",\n        isMulti: true,\n        value: values.owners,\n        loadOptions: loadAccessOptions('owners'),\n        defaultOptions: true // load options on render\n        , cacheOptions: true,\n        onChange: this.onOwnersChange,\n        disabled: !isDashboardLoaded,\n        filterOption: null // options are filtered at the api\n      }),\n      ___EmotionJSX(\"p\", { className: \"help-block\" },\n      t(\n      'Owners is a list of users who can alter the dashboard. Searchable by name or username.')))),\n\n\n\n\n      ___EmotionJSX(Col, { xs: 24, md: 12 },\n      ___EmotionJSX(\"h3\", { style: { marginTop: '1em' } }, t('Colors')),\n      ___EmotionJSX(ColorSchemeControlWrapper, {\n        onChange: this.onColorSchemeChange,\n        colorScheme: values.colorScheme,\n        labelMargin: 4 }))));\n\n\n\n\n  }\n\n  getRowsWithRoles() {\n    const { values, isDashboardLoaded } = this.state;\n    return (\n      ___EmotionJSX(React.Fragment, null,\n      ___EmotionJSX(Row, null,\n      ___EmotionJSX(Col, { xs: 24, md: 24 },\n      ___EmotionJSX(\"h3\", { style: { marginTop: '1em' } }, t('Access')))),\n\n\n      ___EmotionJSX(Row, { gutter: 16 },\n      ___EmotionJSX(Col, { xs: 24, md: 12 },\n      ___EmotionJSX(FormItem, { label: t('Owners') },\n      ___EmotionJSX(AsyncSelect, {\n        name: \"owners\",\n        isMulti: true,\n        value: values.owners,\n        loadOptions: loadAccessOptions('owners'),\n        defaultOptions: true // load options on render\n        , cacheOptions: true,\n        onChange: this.onOwnersChange,\n        disabled: !isDashboardLoaded,\n        filterOption: null // options are filtered at the api\n      }),\n      ___EmotionJSX(\"p\", { className: \"help-block\" },\n      t(\n      'Owners is a list of users who can alter the dashboard. Searchable by name or username.')))),\n\n\n\n\n      ___EmotionJSX(Col, { xs: 24, md: 12 },\n      ___EmotionJSX(FormItem, { label: t('Roles') },\n      ___EmotionJSX(AsyncSelect, {\n        name: \"roles\",\n        isMulti: true,\n        value: values.roles,\n        loadOptions: loadAccessOptions('roles'),\n        defaultOptions: true // load options on render\n        , cacheOptions: true,\n        onChange: this.onRolesChange,\n        disabled: !isDashboardLoaded,\n        filterOption: null // options are filtered at the api\n      }),\n      ___EmotionJSX(\"p\", { className: \"help-block\" },\n      t(\n      'Roles is a list which defines access to the dashboard. Granting a role access to a dashboard will bypass dataset level checks. If no roles defined then the dashboard is available to all roles.'))))),\n\n\n\n\n\n      ___EmotionJSX(Row, null,\n      ___EmotionJSX(Col, { xs: 24, md: 12 },\n      ___EmotionJSX(ColorSchemeControlWrapper, {\n        onChange: this.onColorSchemeChange,\n        colorScheme: values.colorScheme,\n        labelMargin: 4 })))));\n\n\n\n\n\n  }\n\n  render() {\n    const { values, isDashboardLoaded, isAdvancedOpen, errors } = this.state;\n    const { onHide, onlyApply } = this.props;\n\n    const saveLabel = onlyApply ? t('Apply') : t('Save');\n\n    return (\n      ___EmotionJSX(Modal, {\n        show: this.props.show,\n        onHide: this.props.onHide,\n        title: t('Dashboard properties'),\n        footer:\n        ___EmotionJSX(React.Fragment, null,\n        ___EmotionJSX(Button, {\n          htmlType: \"button\",\n          buttonSize: \"small\",\n          onClick: onHide,\n          \"data-test\": \"properties-modal-cancel-button\",\n          cta: true },\n\n        t('Cancel')),\n\n        ___EmotionJSX(Button, {\n          onClick: this.submit,\n          buttonSize: \"small\",\n          buttonStyle: \"primary\",\n          className: \"m-r-5\",\n          disabled: errors.length > 0,\n          cta: true },\n\n        saveLabel)),\n\n\n\n        responsive: true },\n\n      ___EmotionJSX(Form, {\n        \"data-test\": \"dashboard-edit-properties-form\",\n        onSubmit: this.submit,\n        layout: \"vertical\" },\n\n      ___EmotionJSX(Row, null,\n      ___EmotionJSX(Col, { xs: 24, md: 24 },\n      ___EmotionJSX(\"h3\", null, t('Basic information')))),\n\n\n      ___EmotionJSX(Row, { gutter: 16 },\n      ___EmotionJSX(Col, { xs: 24, md: 12 },\n      ___EmotionJSX(FormItem, { label: t('Title') },\n      ___EmotionJSX(Input, {\n        \"data-test\": \"dashboard-title-input\",\n        name: \"dashboard_title\",\n        type: \"text\",\n        value: values.dashboard_title,\n        onChange: this.onChange,\n        disabled: !isDashboardLoaded }))),\n\n\n\n      ___EmotionJSX(Col, { xs: 24, md: 12 },\n      ___EmotionJSX(FormItem, { label: t('URL slug') },\n      ___EmotionJSX(Input, {\n        name: \"slug\",\n        type: \"text\",\n        value: values.slug || '',\n        onChange: this.onChange,\n        disabled: !isDashboardLoaded }),\n\n      ___EmotionJSX(\"p\", { className: \"help-block\" },\n      t('A readable URL for your dashboard'))))),\n\n\n\n\n      isFeatureEnabled(FeatureFlag.DASHBOARD_RBAC) ?\n      this.getRowsWithRoles() :\n      this.getRowsWithoutRoles(),\n      ___EmotionJSX(Row, null,\n      ___EmotionJSX(Col, { xs: 24, md: 24 },\n      ___EmotionJSX(\"h3\", { style: { marginTop: '1em' } },\n      ___EmotionJSX(Button, { buttonStyle: \"link\", onClick: this.toggleAdvanced },\n      ___EmotionJSX(\"i\", {\n        className: `fa fa-angle-${\n        isAdvancedOpen ? 'down' : 'right'\n        }`,\n        style: { minWidth: '1em' } }),\n\n      t('Advanced'))),\n\n\n      isAdvancedOpen &&\n      ___EmotionJSX(FormItem, { label: t('JSON metadata') },\n      ___EmotionJSX(StyledJsonEditor, {\n        showLoadingForImport: true,\n        name: \"json_metadata\",\n        defaultValue: this.defaultMetadataValue,\n        value: values.json_metadata,\n        onChange: this.onMetadataChange,\n        tabSize: 2,\n        width: \"100%\",\n        height: \"200px\",\n        wrapEnabled: true }),\n\n      ___EmotionJSX(\"p\", { className: \"help-block\" },\n      t(\n      'This JSON object is generated dynamically when clicking the save or overwrite button in the dashboard view. It is exposed here for reference and for power users who may want to alter specific parameters.'))))))));\n\n\n\n\n\n\n\n\n\n  } // @ts-ignore\n  __reactstandin__regenerateByEval(key, code) {// @ts-ignore\n    this[key] = eval(code);}}\nPropertiesModal.propTypes = propTypes;\nPropertiesModal.defaultProps = defaultProps;const _default =\n\nwithToasts(PropertiesModal);export default _default;;(function () {var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined;if (!reactHotLoader) {return;}reactHotLoader.register(StyledJsonEditor, \"StyledJsonEditor\", \"/app/superset-frontend/src/dashboard/components/PropertiesModal/index.jsx\");reactHotLoader.register(propTypes, \"propTypes\", \"/app/superset-frontend/src/dashboard/components/PropertiesModal/index.jsx\");reactHotLoader.register(defaultProps, \"defaultProps\", \"/app/superset-frontend/src/dashboard/components/PropertiesModal/index.jsx\");reactHotLoader.register(handleErrorResponse, \"handleErrorResponse\", \"/app/superset-frontend/src/dashboard/components/PropertiesModal/index.jsx\");reactHotLoader.register(loadAccessOptions, \"loadAccessOptions\", \"/app/superset-frontend/src/dashboard/components/PropertiesModal/index.jsx\");reactHotLoader.register(PropertiesModal, \"PropertiesModal\", \"/app/superset-frontend/src/dashboard/components/PropertiesModal/index.jsx\");reactHotLoader.register(_default, \"default\", \"/app/superset-frontend/src/dashboard/components/PropertiesModal/index.jsx\");})();;(function () {var leaveModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.leaveModule : undefined;leaveModule && leaveModule(module);})();","map":{"version":3,"sources":["/app/superset-frontend/src/dashboard/components/PropertiesModal/index.jsx"],"names":["React","PropTypes","Row","Col","Input","Form","FormItem","jsonStringify","Button","AsyncSelect","rison","styled","t","SupersetClient","getCategoricalSchemeRegistry","CategoricalColorNamespace","Modal","JsonEditor","ColorSchemeControlWrapper","getClientErrorObject","withToasts","FeatureFlag","isFeatureEnabled","StyledJsonEditor","theme","borderRadius","colors","secondary","light2","propTypes","dashboardId","number","isRequired","show","bool","onHide","func","colorScheme","string","setColorSchemeAndUnsavedChanges","onSubmit","addSuccessToast","onlyApply","defaultProps","undefined","handleErrorResponse","response","error","statusText","message","errorText","json_metadata","title","content","okButtonProps","danger","className","loadAccessOptions","accessType","input","query","encode","filter","get","endpoint","then","json","result","item","value","label","text","badResponse","PropertiesModal","PureComponent","constructor","props","state","errors","values","dashboard_title","slug","owners","roles","isDashboardLoaded","isAdvancedOpen","onChange","onMetadataChange","onOwnersChange","onRolesChange","submit","toggleAdvanced","onColorSchemeChange","getRowsWithRoles","getRowsWithoutRoles","componentDidMount","fetchDashboardDetails","preload","updateMetadata","colorChoices","jsonMetadata","jsonMetadataObj","length","JSON","parse","Error","color_scheme","label_colors","prev","next","getScale","updateFormState","metadata","e","name","target","dashboard","setState","initialSelectedOwners","owner","id","first_name","last_name","initialSelectedRoles","role","preventDefault","stopPropagation","dashboardTitle","ownersValue","rolesValue","o","metadataColorScheme","moreProps","morePutProps","DASHBOARD_RBAC","rolesIds","ownerIds","put","headers","body","moreResultProps","marginTop","render","saveLabel","minWidth","defaultMetadataValue"],"mappings":"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","sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { Row, Col, Input } from 'src/common/components';\nimport { Form, FormItem } from 'src/components/Form';\nimport jsonStringify from 'json-stringify-pretty-compact';\nimport Button from 'src/components/Button';\nimport { AsyncSelect } from 'src/components/Select';\nimport rison from 'rison';\nimport {\n  styled,\n  t,\n  SupersetClient,\n  getCategoricalSchemeRegistry,\n  CategoricalColorNamespace,\n} from '@superset-ui/core';\n\nimport Modal from 'src/components/Modal';\nimport { JsonEditor } from 'src/components/AsyncAceEditor';\n\nimport ColorSchemeControlWrapper from 'src/dashboard/components/ColorSchemeControlWrapper';\nimport { getClientErrorObject } from 'src/utils/getClientErrorObject';\nimport withToasts from 'src/messageToasts/enhancers/withToasts';\nimport 'src/dashboard/stylesheets/buttons.less';\nimport { FeatureFlag, isFeatureEnabled } from 'src/featureFlags';\n\nconst StyledJsonEditor = styled(JsonEditor)`\n  border-radius: ${({ theme }) => theme.borderRadius}px;\n  border: 1px solid ${({ theme }) => theme.colors.secondary.light2};\n`;\n\nconst propTypes = {\n  dashboardId: PropTypes.number.isRequired,\n  show: PropTypes.bool,\n  onHide: PropTypes.func,\n  colorScheme: PropTypes.string,\n  setColorSchemeAndUnsavedChanges: PropTypes.func,\n  onSubmit: PropTypes.func,\n  addSuccessToast: PropTypes.func.isRequired,\n  onlyApply: PropTypes.bool,\n};\n\nconst defaultProps = {\n  onHide: () => {},\n  setColorSchemeAndUnsavedChanges: () => {},\n  onSubmit: () => {},\n  show: false,\n  colorScheme: undefined,\n  onlyApply: false,\n};\n\nconst handleErrorResponse = async response => {\n  const { error, statusText, message } = await getClientErrorObject(response);\n  let errorText = error || statusText || t('An error has occurred');\n\n  if (typeof message === 'object' && message.json_metadata) {\n    errorText = message.json_metadata;\n  } else if (typeof message === 'string') {\n    errorText = message;\n\n    if (message === 'Forbidden') {\n      errorText = t('You do not have permission to edit this dashboard');\n    }\n  }\n\n  Modal.error({\n    title: 'Error',\n    content: errorText,\n    okButtonProps: { danger: true, className: 'btn-danger' },\n  });\n};\n\nconst loadAccessOptions = accessType => (input = '') => {\n  const query = rison.encode({ filter: input });\n  return SupersetClient.get({\n    endpoint: `/api/v1/dashboard/related/${accessType}?q=${query}`,\n  }).then(\n    response =>\n      response.json.result.map(item => ({\n        value: item.value,\n        label: item.text,\n      })),\n    badResponse => {\n      handleErrorResponse(badResponse);\n      return [];\n    },\n  );\n};\n\nclass PropertiesModal extends React.PureComponent {\n  constructor(props) {\n    super(props);\n    this.state = {\n      errors: [],\n      values: {\n        dashboard_title: '',\n        slug: '',\n        owners: [],\n        roles: [],\n        json_metadata: '',\n        colorScheme: props.colorScheme,\n      },\n      isDashboardLoaded: false,\n      isAdvancedOpen: false,\n    };\n    this.onChange = this.onChange.bind(this);\n    this.onMetadataChange = this.onMetadataChange.bind(this);\n    this.onOwnersChange = this.onOwnersChange.bind(this);\n    this.onRolesChange = this.onRolesChange.bind(this);\n    this.submit = this.submit.bind(this);\n    this.toggleAdvanced = this.toggleAdvanced.bind(this);\n    this.onColorSchemeChange = this.onColorSchemeChange.bind(this);\n    this.getRowsWithRoles = this.getRowsWithRoles.bind(this);\n    this.getRowsWithoutRoles = this.getRowsWithoutRoles.bind(this);\n  }\n\n  componentDidMount() {\n    this.fetchDashboardDetails();\n    JsonEditor.preload();\n  }\n\n  onColorSchemeChange(value, { updateMetadata = true } = {}) {\n    // check that color_scheme is valid\n    const colorChoices = getCategoricalSchemeRegistry().keys();\n    const { json_metadata: jsonMetadata } = this.state.values;\n    const jsonMetadataObj = jsonMetadata?.length\n      ? JSON.parse(jsonMetadata)\n      : {};\n    if (!colorChoices.includes(value)) {\n      Modal.error({\n        title: 'Error',\n        content: t('A valid color scheme is required'),\n        okButtonProps: { danger: true, className: 'btn-danger' },\n      });\n      throw new Error('A valid color scheme is required');\n    }\n\n    // update metadata to match selection\n    if (\n      updateMetadata &&\n      Object.keys(jsonMetadataObj).includes('color_scheme')\n    ) {\n      jsonMetadataObj.color_scheme = value;\n      jsonMetadataObj.label_colors = Object.keys(\n        jsonMetadataObj.label_colors ?? {},\n      ).reduce(\n        (prev, next) => ({\n          ...prev,\n          [next]: CategoricalColorNamespace.getScale(value)(next),\n        }),\n        {},\n      );\n      this.onMetadataChange(jsonStringify(jsonMetadataObj));\n    }\n\n    this.updateFormState('colorScheme', value);\n  }\n\n  onOwnersChange(value) {\n    this.updateFormState('owners', value);\n  }\n\n  onRolesChange(value) {\n    this.updateFormState('roles', value);\n  }\n\n  onMetadataChange(metadata) {\n    this.updateFormState('json_metadata', metadata);\n  }\n\n  onChange(e) {\n    const { name, value } = e.target;\n    this.updateFormState(name, value);\n  }\n\n  fetchDashboardDetails() {\n    // We fetch the dashboard details because not all code\n    // that renders this component have all the values we need.\n    // At some point when we have a more consistent frontend\n    // datamodel, the dashboard could probably just be passed as a prop.\n    SupersetClient.get({\n      endpoint: `/api/v1/dashboard/${this.props.dashboardId}`,\n    }).then(response => {\n      const dashboard = response.json.result;\n      const jsonMetadataObj = dashboard.json_metadata?.length\n        ? JSON.parse(dashboard.json_metadata)\n        : {};\n\n      this.setState(state => ({\n        isDashboardLoaded: true,\n        values: {\n          ...state.values,\n          dashboard_title: dashboard.dashboard_title || '',\n          slug: dashboard.slug || '',\n          // format json with 2-space indentation\n          json_metadata: dashboard.json_metadata\n            ? jsonStringify(jsonMetadataObj)\n            : '',\n          colorScheme: jsonMetadataObj.color_scheme,\n        },\n      }));\n      const initialSelectedOwners = dashboard.owners.map(owner => ({\n        value: owner.id,\n        label: `${owner.first_name} ${owner.last_name}`,\n      }));\n      const initialSelectedRoles = dashboard.roles.map(role => ({\n        value: role.id,\n        label: `${role.name}`,\n      }));\n      this.onOwnersChange(initialSelectedOwners);\n      this.onRolesChange(initialSelectedRoles);\n    }, handleErrorResponse);\n  }\n\n  updateFormState(name, value) {\n    this.setState(state => ({\n      values: {\n        ...state.values,\n        [name]: value,\n      },\n    }));\n  }\n\n  toggleAdvanced() {\n    this.setState(state => ({\n      isAdvancedOpen: !state.isAdvancedOpen,\n    }));\n  }\n\n  submit(e) {\n    e.preventDefault();\n    e.stopPropagation();\n    const {\n      values: {\n        json_metadata: jsonMetadata,\n        slug,\n        dashboard_title: dashboardTitle,\n        colorScheme,\n        owners: ownersValue,\n        roles: rolesValue,\n      },\n    } = this.state;\n    const { onlyApply } = this.props;\n    const owners = ownersValue?.map(o => o.value) ?? [];\n    const roles = rolesValue?.map(o => o.value) ?? [];\n    let metadataColorScheme;\n\n    // update color scheme to match metadata\n    if (jsonMetadata?.length) {\n      const { color_scheme: metadataColorScheme } = JSON.parse(jsonMetadata);\n      if (metadataColorScheme) {\n        this.onColorSchemeChange(metadataColorScheme, {\n          updateMetadata: false,\n        });\n      }\n    }\n\n    const moreProps = {};\n    const morePutProps = {};\n    if (isFeatureEnabled(FeatureFlag.DASHBOARD_RBAC)) {\n      moreProps.rolesIds = roles;\n      morePutProps.roles = roles;\n    }\n    if (onlyApply) {\n      this.props.onSubmit({\n        id: this.props.dashboardId,\n        title: dashboardTitle,\n        slug,\n        jsonMetadata,\n        ownerIds: owners,\n        colorScheme: metadataColorScheme || colorScheme,\n        ...moreProps,\n      });\n      this.props.onHide();\n    } else {\n      SupersetClient.put({\n        endpoint: `/api/v1/dashboard/${this.props.dashboardId}`,\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({\n          dashboard_title: dashboardTitle,\n          slug: slug || null,\n          json_metadata: jsonMetadata || null,\n          owners,\n          ...morePutProps,\n        }),\n      }).then(({ json: { result } }) => {\n        const moreResultProps = {};\n        if (isFeatureEnabled(FeatureFlag.DASHBOARD_RBAC)) {\n          moreResultProps.rolesIds = result.roles;\n        }\n        this.props.addSuccessToast(t('The dashboard has been saved'));\n        this.props.onSubmit({\n          id: this.props.dashboardId,\n          title: result.dashboard_title,\n          slug: result.slug,\n          jsonMetadata: result.json_metadata,\n          ownerIds: result.owners,\n          colorScheme: metadataColorScheme || colorScheme,\n          ...moreResultProps,\n        });\n        this.props.onHide();\n      }, handleErrorResponse);\n    }\n  }\n\n  getRowsWithoutRoles() {\n    const { values, isDashboardLoaded } = this.state;\n    return (\n      <Row gutter={16}>\n        <Col xs={24} md={12}>\n          <h3 style={{ marginTop: '1em' }}>{t('Access')}</h3>\n          <FormItem label={t('Owners')}>\n            <AsyncSelect\n              name=\"owners\"\n              isMulti\n              value={values.owners}\n              loadOptions={loadAccessOptions('owners')}\n              defaultOptions // load options on render\n              cacheOptions\n              onChange={this.onOwnersChange}\n              disabled={!isDashboardLoaded}\n              filterOption={null} // options are filtered at the api\n            />\n            <p className=\"help-block\">\n              {t(\n                'Owners is a list of users who can alter the dashboard. Searchable by name or username.',\n              )}\n            </p>\n          </FormItem>\n        </Col>\n        <Col xs={24} md={12}>\n          <h3 style={{ marginTop: '1em' }}>{t('Colors')}</h3>\n          <ColorSchemeControlWrapper\n            onChange={this.onColorSchemeChange}\n            colorScheme={values.colorScheme}\n            labelMargin={4}\n          />\n        </Col>\n      </Row>\n    );\n  }\n\n  getRowsWithRoles() {\n    const { values, isDashboardLoaded } = this.state;\n    return (\n      <>\n        <Row>\n          <Col xs={24} md={24}>\n            <h3 style={{ marginTop: '1em' }}>{t('Access')}</h3>\n          </Col>\n        </Row>\n        <Row gutter={16}>\n          <Col xs={24} md={12}>\n            <FormItem label={t('Owners')}>\n              <AsyncSelect\n                name=\"owners\"\n                isMulti\n                value={values.owners}\n                loadOptions={loadAccessOptions('owners')}\n                defaultOptions // load options on render\n                cacheOptions\n                onChange={this.onOwnersChange}\n                disabled={!isDashboardLoaded}\n                filterOption={null} // options are filtered at the api\n              />\n              <p className=\"help-block\">\n                {t(\n                  'Owners is a list of users who can alter the dashboard. Searchable by name or username.',\n                )}\n              </p>\n            </FormItem>\n          </Col>\n          <Col xs={24} md={12}>\n            <FormItem label={t('Roles')}>\n              <AsyncSelect\n                name=\"roles\"\n                isMulti\n                value={values.roles}\n                loadOptions={loadAccessOptions('roles')}\n                defaultOptions // load options on render\n                cacheOptions\n                onChange={this.onRolesChange}\n                disabled={!isDashboardLoaded}\n                filterOption={null} // options are filtered at the api\n              />\n              <p className=\"help-block\">\n                {t(\n                  'Roles is a list which defines access to the dashboard. Granting a role access to a dashboard will bypass dataset level checks. If no roles defined then the dashboard is available to all roles.',\n                )}\n              </p>\n            </FormItem>\n          </Col>\n        </Row>\n        <Row>\n          <Col xs={24} md={12}>\n            <ColorSchemeControlWrapper\n              onChange={this.onColorSchemeChange}\n              colorScheme={values.colorScheme}\n              labelMargin={4}\n            />\n          </Col>\n        </Row>\n      </>\n    );\n  }\n\n  render() {\n    const { values, isDashboardLoaded, isAdvancedOpen, errors } = this.state;\n    const { onHide, onlyApply } = this.props;\n\n    const saveLabel = onlyApply ? t('Apply') : t('Save');\n\n    return (\n      <Modal\n        show={this.props.show}\n        onHide={this.props.onHide}\n        title={t('Dashboard properties')}\n        footer={\n          <>\n            <Button\n              htmlType=\"button\"\n              buttonSize=\"small\"\n              onClick={onHide}\n              data-test=\"properties-modal-cancel-button\"\n              cta\n            >\n              {t('Cancel')}\n            </Button>\n            <Button\n              onClick={this.submit}\n              buttonSize=\"small\"\n              buttonStyle=\"primary\"\n              className=\"m-r-5\"\n              disabled={errors.length > 0}\n              cta\n            >\n              {saveLabel}\n            </Button>\n          </>\n        }\n        responsive\n      >\n        <Form\n          data-test=\"dashboard-edit-properties-form\"\n          onSubmit={this.submit}\n          layout=\"vertical\"\n        >\n          <Row>\n            <Col xs={24} md={24}>\n              <h3>{t('Basic information')}</h3>\n            </Col>\n          </Row>\n          <Row gutter={16}>\n            <Col xs={24} md={12}>\n              <FormItem label={t('Title')}>\n                <Input\n                  data-test=\"dashboard-title-input\"\n                  name=\"dashboard_title\"\n                  type=\"text\"\n                  value={values.dashboard_title}\n                  onChange={this.onChange}\n                  disabled={!isDashboardLoaded}\n                />\n              </FormItem>\n            </Col>\n            <Col xs={24} md={12}>\n              <FormItem label={t('URL slug')}>\n                <Input\n                  name=\"slug\"\n                  type=\"text\"\n                  value={values.slug || ''}\n                  onChange={this.onChange}\n                  disabled={!isDashboardLoaded}\n                />\n                <p className=\"help-block\">\n                  {t('A readable URL for your dashboard')}\n                </p>\n              </FormItem>\n            </Col>\n          </Row>\n          {isFeatureEnabled(FeatureFlag.DASHBOARD_RBAC)\n            ? this.getRowsWithRoles()\n            : this.getRowsWithoutRoles()}\n          <Row>\n            <Col xs={24} md={24}>\n              <h3 style={{ marginTop: '1em' }}>\n                <Button buttonStyle=\"link\" onClick={this.toggleAdvanced}>\n                  <i\n                    className={`fa fa-angle-${\n                      isAdvancedOpen ? 'down' : 'right'\n                    }`}\n                    style={{ minWidth: '1em' }}\n                  />\n                  {t('Advanced')}\n                </Button>\n              </h3>\n              {isAdvancedOpen && (\n                <FormItem label={t('JSON metadata')}>\n                  <StyledJsonEditor\n                    showLoadingForImport\n                    name=\"json_metadata\"\n                    defaultValue={this.defaultMetadataValue}\n                    value={values.json_metadata}\n                    onChange={this.onMetadataChange}\n                    tabSize={2}\n                    width=\"100%\"\n                    height=\"200px\"\n                    wrapEnabled\n                  />\n                  <p className=\"help-block\">\n                    {t(\n                      'This JSON object is generated dynamically when clicking the save or overwrite button in the dashboard view. It is exposed here for reference and for power users who may want to alter specific parameters.',\n                    )}\n                  </p>\n                </FormItem>\n              )}\n            </Col>\n          </Row>\n        </Form>\n      </Modal>\n    );\n  }\n}\n\nPropertiesModal.propTypes = propTypes;\nPropertiesModal.defaultProps = defaultProps;\n\nexport default withToasts(PropertiesModal);\n"]},"metadata":{},"sourceType":"module"}