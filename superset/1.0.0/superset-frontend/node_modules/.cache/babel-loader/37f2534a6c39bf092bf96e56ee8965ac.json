{"ast":null,"code":"(function () {var enterModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.enterModule : undefined;enterModule && enterModule(module);})();var __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default.signature : function (a) {return a;}; /**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React from 'react';\nimport PropTypes from 'prop-types';\n\nimport withToasts from 'src/messageToasts/enhancers/withToasts';\nimport {\nStyledColumnOption,\nStyledMetricOption } from\n'src/explore/components/optionRenderers';\nimport AggregateOption from './AggregateOption';\nimport columnType from './columnType';\nimport aggregateOptionType from './aggregateOptionType';\nimport savedMetricType from './savedMetricType';import { jsx as ___EmotionJSX } from \"@emotion/react\";\n\nconst propTypes = {\n  option: PropTypes.oneOfType([\n  columnType,\n  savedMetricType,\n  aggregateOptionType]).\n  isRequired,\n  addWarningToast: PropTypes.func.isRequired };\n\n\nfunction MetricDefinitionOption({ option, addWarningToast }) {\n  if (option.metric_name) {\n    return ___EmotionJSX(StyledMetricOption, { metric: option, showType: true });\n  }\n  if (option.column_name) {\n    return ___EmotionJSX(StyledColumnOption, { column: option, showType: true });\n  }\n  if (option.aggregate_name) {\n    return ___EmotionJSX(AggregateOption, { aggregate: option, showType: true });\n  }\n  addWarningToast(\n  'You must supply either a saved metric, column or aggregate to MetricDefinitionOption');\n\n  return null;\n}\n\nMetricDefinitionOption.propTypes = propTypes;const _default =\n\nwithToasts(MetricDefinitionOption);export default _default;;(function () {var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined;if (!reactHotLoader) {return;}reactHotLoader.register(propTypes, \"propTypes\", \"/app/superset-frontend/src/explore/components/controls/MetricControl/MetricDefinitionOption.jsx\");reactHotLoader.register(MetricDefinitionOption, \"MetricDefinitionOption\", \"/app/superset-frontend/src/explore/components/controls/MetricControl/MetricDefinitionOption.jsx\");reactHotLoader.register(_default, \"default\", \"/app/superset-frontend/src/explore/components/controls/MetricControl/MetricDefinitionOption.jsx\");})();;(function () {var leaveModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.leaveModule : undefined;leaveModule && leaveModule(module);})();","map":{"version":3,"sources":["/app/superset-frontend/src/explore/components/controls/MetricControl/MetricDefinitionOption.jsx"],"names":["React","PropTypes","withToasts","StyledColumnOption","StyledMetricOption","AggregateOption","columnType","aggregateOptionType","savedMetricType","propTypes","option","oneOfType","isRequired","addWarningToast","func","MetricDefinitionOption","metric_name","column_name","aggregate_name"],"mappings":"wSAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,SAAP,MAAsB,YAAtB;;AAEA,OAAOC,UAAP,MAAuB,wCAAvB;AACA;AACEC,kBADF;AAEEC,kBAFF;AAGO,wCAHP;AAIA,OAAOC,eAAP,MAA4B,mBAA5B;AACA,OAAOC,UAAP,MAAuB,cAAvB;AACA,OAAOC,mBAAP,MAAgC,uBAAhC;AACA,OAAOC,eAAP,MAA4B,mBAA5B,C;;AAEA,MAAMC,SAAS,GAAG;AAChBC,EAAAA,MAAM,EAAET,SAAS,CAACU,SAAV,CAAoB;AAC1BL,EAAAA,UAD0B;AAE1BE,EAAAA,eAF0B;AAG1BD,EAAAA,mBAH0B,CAApB;AAILK,EAAAA,UALa;AAMhBC,EAAAA,eAAe,EAAEZ,SAAS,CAACa,IAAV,CAAeF,UANhB,EAAlB;;;AASA,SAASG,sBAAT,CAAgC,EAAEL,MAAF,EAAUG,eAAV,EAAhC,EAA6D;AAC3D,MAAIH,MAAM,CAACM,WAAX,EAAwB;AACtB,WAAO,cAAC,kBAAD,IAAoB,MAAM,EAAEN,MAA5B,EAAoC,QAAQ,MAA5C,GAAP;AACD;AACD,MAAIA,MAAM,CAACO,WAAX,EAAwB;AACtB,WAAO,cAAC,kBAAD,IAAoB,MAAM,EAAEP,MAA5B,EAAoC,QAAQ,MAA5C,GAAP;AACD;AACD,MAAIA,MAAM,CAACQ,cAAX,EAA2B;AACzB,WAAO,cAAC,eAAD,IAAiB,SAAS,EAAER,MAA5B,EAAoC,QAAQ,MAA5C,GAAP;AACD;AACDG,EAAAA,eAAe;AACb,wFADa,CAAf;;AAGA,SAAO,IAAP;AACD;;AAEDE,sBAAsB,CAACN,SAAvB,GAAmCA,SAAnC,C;;AAEeP,UAAU,CAACa,sBAAD,C,CAAzB,wB,iLA3BMN,S,0IASGM,sB","sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React from 'react';\nimport PropTypes from 'prop-types';\n\nimport withToasts from 'src/messageToasts/enhancers/withToasts';\nimport {\n  StyledColumnOption,\n  StyledMetricOption,\n} from 'src/explore/components/optionRenderers';\nimport AggregateOption from './AggregateOption';\nimport columnType from './columnType';\nimport aggregateOptionType from './aggregateOptionType';\nimport savedMetricType from './savedMetricType';\n\nconst propTypes = {\n  option: PropTypes.oneOfType([\n    columnType,\n    savedMetricType,\n    aggregateOptionType,\n  ]).isRequired,\n  addWarningToast: PropTypes.func.isRequired,\n};\n\nfunction MetricDefinitionOption({ option, addWarningToast }) {\n  if (option.metric_name) {\n    return <StyledMetricOption metric={option} showType />;\n  }\n  if (option.column_name) {\n    return <StyledColumnOption column={option} showType />;\n  }\n  if (option.aggregate_name) {\n    return <AggregateOption aggregate={option} showType />;\n  }\n  addWarningToast(\n    'You must supply either a saved metric, column or aggregate to MetricDefinitionOption',\n  );\n  return null;\n}\n\nMetricDefinitionOption.propTypes = propTypes;\n\nexport default withToasts(MetricDefinitionOption);\n"]},"metadata":{},"sourceType":"module"}