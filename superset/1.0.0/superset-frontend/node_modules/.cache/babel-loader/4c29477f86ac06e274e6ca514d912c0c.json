{"ast":null,"code":"import _Object$keys from \"@babel/runtime-corejs3/core-js-stable/object/keys\";import _mapInstanceProperty from \"@babel/runtime-corejs3/core-js-stable/instance/map\";import _Array$isArray from \"@babel/runtime-corejs3/core-js-stable/array/is-array\";(function () {var enterModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.enterModule : undefined;enterModule && enterModule(module);})();var __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default.signature : function (a) {return a;}; /**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React, { useMemo } from 'react';\nimport PropTypes from 'prop-types';\nimport Alert from 'src/components/Alert';\nimport { t } from '@superset-ui/core';\n\nimport TableView from 'src/components/TableView';\nimport Button from 'src/components/Button';\nimport Loading from '../../components/Loading';\nimport ModalTrigger from '../../components/ModalTrigger';\nimport { EmptyWrapperType } from '../../components/TableView/TableView';import { jsx as ___EmotionJSX } from \"@emotion/react\";\n\nconst propTypes = {\n  dbId: PropTypes.number.isRequired,\n  schema: PropTypes.string.isRequired,\n  sql: PropTypes.string.isRequired,\n  getEstimate: PropTypes.func.isRequired,\n  queryCostEstimate: PropTypes.Object,\n  selectedText: PropTypes.string,\n  tooltip: PropTypes.string,\n  disabled: PropTypes.bool };\n\nconst defaultProps = {\n  queryCostEstimate: [],\n  tooltip: '',\n  disabled: false };\n\n\nconst EstimateQueryCostButton = props => {\n  const { cost } = props.queryCostEstimate;\n  const tableData = useMemo(() => _Array$isArray(cost) ? cost : [], [cost]);\n  const columns = useMemo(\n  () => {var _context;return (\n      _Array$isArray(cost) && cost.length ?\n      _mapInstanceProperty(_context = _Object$keys(cost[0])).call(_context, key => ({ accessor: key, Header: key })) :\n      []);},\n  [cost]);\n\n\n  const onClick = () => {\n    props.getEstimate();\n  };\n\n  const renderModalBody = () => {\n    if (props.queryCostEstimate.error !== null) {\n      return (\n        ___EmotionJSX(Alert, {\n          key: \"query-estimate-error\",\n          type: \"error\",\n          message: props.queryCostEstimate.error }));\n\n\n    }\n    if (props.queryCostEstimate.completed) {\n      return (\n        ___EmotionJSX(TableView, {\n          columns: columns,\n          data: tableData,\n          withPagination: false,\n          emptyWrapperType: EmptyWrapperType.Small,\n          className: \"cost-estimate\" }));\n\n\n    }\n    return ___EmotionJSX(Loading, { position: \"normal\" });\n  };\n\n  const { disabled, selectedText, tooltip } = props;\n  const btnText = selectedText ?\n  t('Estimate selected query cost') :\n  t('Estimate cost');\n  return (\n    ___EmotionJSX(\"span\", { className: \"EstimateQueryCostButton\" },\n    ___EmotionJSX(ModalTrigger, {\n      modalTitle: t('Cost estimate'),\n      modalBody: renderModalBody(),\n      triggerNode:\n      ___EmotionJSX(Button, {\n        style: { height: 32, padding: '4px 15px' },\n        onClick: onClick,\n        key: \"query-estimate-btn\",\n        tooltip: tooltip,\n        disabled: disabled },\n\n      btnText) })));\n\n\n\n\n\n};__signature__(EstimateQueryCostButton, \"useMemo{tableData}\\nuseMemo{columns}\");\n\nEstimateQueryCostButton.propTypes = propTypes;\nEstimateQueryCostButton.defaultProps = defaultProps;const _default =\n\nEstimateQueryCostButton;export default _default;;(function () {var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined;if (!reactHotLoader) {return;}reactHotLoader.register(propTypes, \"propTypes\", \"/app/superset-frontend/src/SqlLab/components/EstimateQueryCostButton.jsx\");reactHotLoader.register(defaultProps, \"defaultProps\", \"/app/superset-frontend/src/SqlLab/components/EstimateQueryCostButton.jsx\");reactHotLoader.register(EstimateQueryCostButton, \"EstimateQueryCostButton\", \"/app/superset-frontend/src/SqlLab/components/EstimateQueryCostButton.jsx\");reactHotLoader.register(_default, \"default\", \"/app/superset-frontend/src/SqlLab/components/EstimateQueryCostButton.jsx\");})();;(function () {var leaveModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.leaveModule : undefined;leaveModule && leaveModule(module);})();","map":{"version":3,"sources":["/app/superset-frontend/src/SqlLab/components/EstimateQueryCostButton.jsx"],"names":["React","useMemo","PropTypes","Alert","t","TableView","Button","Loading","ModalTrigger","EmptyWrapperType","propTypes","dbId","number","isRequired","schema","string","sql","getEstimate","func","queryCostEstimate","Object","selectedText","tooltip","disabled","bool","defaultProps","EstimateQueryCostButton","props","cost","tableData","columns","length","key","accessor","Header","onClick","renderModalBody","error","completed","Small","btnText","height","padding"],"mappings":"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","sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React, { useMemo } from 'react';\nimport PropTypes from 'prop-types';\nimport Alert from 'src/components/Alert';\nimport { t } from '@superset-ui/core';\n\nimport TableView from 'src/components/TableView';\nimport Button from 'src/components/Button';\nimport Loading from '../../components/Loading';\nimport ModalTrigger from '../../components/ModalTrigger';\nimport { EmptyWrapperType } from '../../components/TableView/TableView';\n\nconst propTypes = {\n  dbId: PropTypes.number.isRequired,\n  schema: PropTypes.string.isRequired,\n  sql: PropTypes.string.isRequired,\n  getEstimate: PropTypes.func.isRequired,\n  queryCostEstimate: PropTypes.Object,\n  selectedText: PropTypes.string,\n  tooltip: PropTypes.string,\n  disabled: PropTypes.bool,\n};\nconst defaultProps = {\n  queryCostEstimate: [],\n  tooltip: '',\n  disabled: false,\n};\n\nconst EstimateQueryCostButton = props => {\n  const { cost } = props.queryCostEstimate;\n  const tableData = useMemo(() => (Array.isArray(cost) ? cost : []), [cost]);\n  const columns = useMemo(\n    () =>\n      Array.isArray(cost) && cost.length\n        ? Object.keys(cost[0]).map(key => ({ accessor: key, Header: key }))\n        : [],\n    [cost],\n  );\n\n  const onClick = () => {\n    props.getEstimate();\n  };\n\n  const renderModalBody = () => {\n    if (props.queryCostEstimate.error !== null) {\n      return (\n        <Alert\n          key=\"query-estimate-error\"\n          type=\"error\"\n          message={props.queryCostEstimate.error}\n        />\n      );\n    }\n    if (props.queryCostEstimate.completed) {\n      return (\n        <TableView\n          columns={columns}\n          data={tableData}\n          withPagination={false}\n          emptyWrapperType={EmptyWrapperType.Small}\n          className=\"cost-estimate\"\n        />\n      );\n    }\n    return <Loading position=\"normal\" />;\n  };\n\n  const { disabled, selectedText, tooltip } = props;\n  const btnText = selectedText\n    ? t('Estimate selected query cost')\n    : t('Estimate cost');\n  return (\n    <span className=\"EstimateQueryCostButton\">\n      <ModalTrigger\n        modalTitle={t('Cost estimate')}\n        modalBody={renderModalBody()}\n        triggerNode={\n          <Button\n            style={{ height: 32, padding: '4px 15px' }}\n            onClick={onClick}\n            key=\"query-estimate-btn\"\n            tooltip={tooltip}\n            disabled={disabled}\n          >\n            {btnText}\n          </Button>\n        }\n      />\n    </span>\n  );\n};\n\nEstimateQueryCostButton.propTypes = propTypes;\nEstimateQueryCostButton.defaultProps = defaultProps;\n\nexport default EstimateQueryCostButton;\n"]},"metadata":{},"sourceType":"module"}