{"ast":null,"code":"import \"core-js/modules/web.dom-collections.iterator.js\";import _Object$values from \"@babel/runtime-corejs3/core-js-stable/object/values\";import _filterInstanceProperty from \"@babel/runtime-corejs3/core-js-stable/instance/filter\";import _Set from \"@babel/runtime-corejs3/core-js-stable/set\";import _includesInstanceProperty from \"@babel/runtime-corejs3/core-js-stable/instance/includes\";import _forEachInstanceProperty from \"@babel/runtime-corejs3/core-js-stable/instance/for-each\";(function () {var enterModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.enterModule : undefined;enterModule && enterModule(module);})();var __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default.signature : function (a) {return a;}; /**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { getChartMetadataRegistry, Behavior, EXTRA_FORM_DATA_APPEND_KEYS, EXTRA_FORM_DATA_OVERRIDE_KEYS, FeatureFlag } from '@superset-ui/core';\nimport extractUrlParams from 'src/dashboard/util/extractUrlParams';\nimport { isFeatureEnabled } from 'src/featureFlags';\nimport { CHART_TYPE, TAB_TYPE } from '../../util/componentTypes';\nimport { DASHBOARD_GRID_ID, DASHBOARD_ROOT_ID } from '../../util/constants';\nexport const getFormData = ({ datasetId, cascadingFilters = {}, groupby, inputRef, defaultDataMask, controlValues, filterType, sortMetric, adhoc_filters, time_range }) => {var _defaultDataMask$filt;\n  const otherProps = {};\n  if (datasetId) {\n    otherProps.datasource = `${datasetId}__table`;\n  }\n  if (groupby) {\n    otherProps.groupby = [groupby];\n  }\n  if (sortMetric) {\n    otherProps.sortMetric = sortMetric;\n  }\n  return {\n    ...controlValues,\n    ...otherProps,\n    adhoc_filters: adhoc_filters != null ? adhoc_filters : [],\n    extra_filters: [],\n    extra_form_data: cascadingFilters,\n    granularity_sqla: 'ds',\n    metrics: ['count'],\n    row_limit: 1000,\n    showSearch: true,\n    defaultValue: defaultDataMask == null ? void 0 : (_defaultDataMask$filt = defaultDataMask.filterState) == null ? void 0 : _defaultDataMask$filt.value,\n    time_range,\n    time_range_endpoints: ['inclusive', 'exclusive'],\n    url_params: extractUrlParams('regular'),\n    viz_type: filterType,\n    inputRef };\n\n};\nexport function mergeExtraFormData(originalExtra = {}, newExtra = {}) {\n  const mergedExtra = {};\n  _forEachInstanceProperty(EXTRA_FORM_DATA_APPEND_KEYS).call(EXTRA_FORM_DATA_APPEND_KEYS, key => {\n    const mergedValues = [\n    ...(originalExtra[key] || []),\n    ...(newExtra[key] || [])];\n\n    if (mergedValues.length) {\n      mergedExtra[key] = mergedValues;\n    }\n  });\n  _forEachInstanceProperty(EXTRA_FORM_DATA_OVERRIDE_KEYS).call(EXTRA_FORM_DATA_OVERRIDE_KEYS, key => {\n    const originalValue = originalExtra[key];\n    if (originalValue !== undefined) {\n      mergedExtra[key] = originalValue;\n    }\n    const newValue = newExtra[key];\n    if (newValue !== undefined) {\n      mergedExtra[key] = newValue;\n    }\n  });\n  return mergedExtra;\n}\nexport function isCrossFilter(vizType) {var _getChartMetadataRegi, _getChartMetadataRegi2;\n  // @ts-ignore need export from superset-ui `ItemWithValue`\n  return (_getChartMetadataRegi = getChartMetadataRegistry().items[vizType]) == null ? void 0 : (_getChartMetadataRegi2 = _getChartMetadataRegi.value.behaviors) == null ? void 0 : _includesInstanceProperty(_getChartMetadataRegi2).call(_getChartMetadataRegi2, Behavior.INTERACTIVE_CHART);\n}\nexport function getExtraFormData(dataMask, charts, filterIdsAppliedOnChart) {\n  let extraFormData = {};\n  _forEachInstanceProperty(filterIdsAppliedOnChart).call(filterIdsAppliedOnChart, key => {var _dataMask$key$extraFo, _dataMask$key;\n    extraFormData = mergeExtraFormData(extraFormData, (_dataMask$key$extraFo = (_dataMask$key = dataMask[key]) == null ? void 0 : _dataMask$key.extraFormData) != null ? _dataMask$key$extraFo : {});\n  });\n  return extraFormData;\n}\nexport function nativeFilterGate(behaviors) {\n  return !_includesInstanceProperty(behaviors).call(behaviors, Behavior.NATIVE_FILTER) ||\n  isFeatureEnabled(FeatureFlag.DASHBOARD_FILTERS_EXPERIMENTAL) &&\n  isFeatureEnabled(FeatureFlag.DASHBOARD_CROSS_FILTERS) &&\n  _includesInstanceProperty(behaviors).call(behaviors, Behavior.INTERACTIVE_CHART);\n}\nconst isComponentATab = (dashboardLayout, componentId) => dashboardLayout[componentId].type === TAB_TYPE;\nconst findTabsWithChartsInScopeHelper = (dashboardLayout, chartsInScope, componentId, tabIds, tabsToHighlight) => {var _context;\n  if (dashboardLayout[componentId].type === CHART_TYPE &&\n  _includesInstanceProperty(chartsInScope).call(chartsInScope, dashboardLayout[componentId].meta.chartId)) {\n    _forEachInstanceProperty(tabIds).call(tabIds, tabsToHighlight.add, tabsToHighlight);\n  }\n  if (dashboardLayout[componentId].children.length === 0 ||\n  isComponentATab(dashboardLayout, componentId) &&\n  tabsToHighlight.has(componentId)) {\n    return;\n  }\n  _forEachInstanceProperty(_context = dashboardLayout[componentId].children).call(_context, childId => findTabsWithChartsInScopeHelper(dashboardLayout, chartsInScope, childId, isComponentATab(dashboardLayout, childId) ? [...tabIds, childId] : tabIds, tabsToHighlight));\n};\nexport const findTabsWithChartsInScope = (dashboardLayout, chartsInScope) => {\n  const dashboardRoot = dashboardLayout[DASHBOARD_ROOT_ID];\n  const rootChildId = dashboardRoot.children[0];\n  const hasTopLevelTabs = rootChildId !== DASHBOARD_GRID_ID;\n  const tabsInScope = new _Set();\n  if (hasTopLevelTabs) {var _dashboardLayout$root;\n    (_dashboardLayout$root = dashboardLayout[rootChildId].children) == null ? void 0 : _forEachInstanceProperty(_dashboardLayout$root).call(_dashboardLayout$root, tabId => findTabsWithChartsInScopeHelper(dashboardLayout, chartsInScope, tabId, [tabId], tabsInScope));\n  } else\n  {var _context2, _context3;\n    _forEachInstanceProperty(_context2 = _filterInstanceProperty(_context3 = _Object$values(dashboardLayout)).call(_context3,\n    element => element.type === TAB_TYPE)).call(_context2,\n    element => findTabsWithChartsInScopeHelper(dashboardLayout, chartsInScope, element.id, [element.id], tabsInScope));\n  }\n  return tabsInScope;\n};;(function () {var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined;if (!reactHotLoader) {return;}reactHotLoader.register(getFormData, \"getFormData\", \"/app/superset-frontend/src/dashboard/components/nativeFilters/utils.ts\");reactHotLoader.register(mergeExtraFormData, \"mergeExtraFormData\", \"/app/superset-frontend/src/dashboard/components/nativeFilters/utils.ts\");reactHotLoader.register(isCrossFilter, \"isCrossFilter\", \"/app/superset-frontend/src/dashboard/components/nativeFilters/utils.ts\");reactHotLoader.register(getExtraFormData, \"getExtraFormData\", \"/app/superset-frontend/src/dashboard/components/nativeFilters/utils.ts\");reactHotLoader.register(nativeFilterGate, \"nativeFilterGate\", \"/app/superset-frontend/src/dashboard/components/nativeFilters/utils.ts\");reactHotLoader.register(isComponentATab, \"isComponentATab\", \"/app/superset-frontend/src/dashboard/components/nativeFilters/utils.ts\");reactHotLoader.register(findTabsWithChartsInScopeHelper, \"findTabsWithChartsInScopeHelper\", \"/app/superset-frontend/src/dashboard/components/nativeFilters/utils.ts\");reactHotLoader.register(findTabsWithChartsInScope, \"findTabsWithChartsInScope\", \"/app/superset-frontend/src/dashboard/components/nativeFilters/utils.ts\");})();;(function () {var leaveModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.leaveModule : undefined;leaveModule && leaveModule(module);})();","map":{"version":3,"sources":["/app/superset-frontend/src/dashboard/components/nativeFilters/utils.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport {\n  ExtraFormData,\n  QueryFormData,\n  getChartMetadataRegistry,\n  Behavior,\n  EXTRA_FORM_DATA_APPEND_KEYS,\n  EXTRA_FORM_DATA_OVERRIDE_KEYS,\n  AdhocFilter,\n  FeatureFlag,\n} from '@superset-ui/core';\nimport { Charts, DashboardLayout } from 'src/dashboard/types';\nimport { RefObject } from 'react';\nimport { DataMaskStateWithId } from 'src/dataMask/types';\nimport extractUrlParams from 'src/dashboard/util/extractUrlParams';\nimport { isFeatureEnabled } from 'src/featureFlags';\nimport { Filter } from './types';\nimport { CHART_TYPE, TAB_TYPE } from '../../util/componentTypes';\nimport { DASHBOARD_GRID_ID, DASHBOARD_ROOT_ID } from '../../util/constants';\n\nexport const getFormData = ({\n  datasetId,\n  cascadingFilters = {},\n  groupby,\n  inputRef,\n  defaultDataMask,\n  controlValues,\n  filterType,\n  sortMetric,\n  adhoc_filters,\n  time_range,\n}: Partial<Filter> & {\n  datasetId?: number;\n  inputRef?: RefObject<HTMLInputElement>;\n  cascadingFilters?: object;\n  groupby?: string;\n  adhoc_filters?: AdhocFilter[];\n  time_range?: string;\n}): Partial<QueryFormData> => {\n  const otherProps: {\n    datasource?: string;\n    groupby?: string[];\n    sortMetric?: string;\n  } = {};\n  if (datasetId) {\n    otherProps.datasource = `${datasetId}__table`;\n  }\n  if (groupby) {\n    otherProps.groupby = [groupby];\n  }\n  if (sortMetric) {\n    otherProps.sortMetric = sortMetric;\n  }\n  return {\n    ...controlValues,\n    ...otherProps,\n    adhoc_filters: adhoc_filters ?? [],\n    extra_filters: [],\n    extra_form_data: cascadingFilters,\n    granularity_sqla: 'ds',\n    metrics: ['count'],\n    row_limit: 1000,\n    showSearch: true,\n    defaultValue: defaultDataMask?.filterState?.value,\n    time_range,\n    time_range_endpoints: ['inclusive', 'exclusive'],\n    url_params: extractUrlParams('regular'),\n    viz_type: filterType,\n    inputRef,\n  };\n};\n\nexport function mergeExtraFormData(\n  originalExtra: ExtraFormData = {},\n  newExtra: ExtraFormData = {},\n): ExtraFormData {\n  const mergedExtra: ExtraFormData = {};\n  EXTRA_FORM_DATA_APPEND_KEYS.forEach((key: string) => {\n    const mergedValues = [\n      ...(originalExtra[key] || []),\n      ...(newExtra[key] || []),\n    ];\n    if (mergedValues.length) {\n      mergedExtra[key] = mergedValues;\n    }\n  });\n  EXTRA_FORM_DATA_OVERRIDE_KEYS.forEach((key: string) => {\n    const originalValue = originalExtra[key];\n    if (originalValue !== undefined) {\n      mergedExtra[key] = originalValue;\n    }\n    const newValue = newExtra[key];\n    if (newValue !== undefined) {\n      mergedExtra[key] = newValue;\n    }\n  });\n  return mergedExtra;\n}\n\nexport function isCrossFilter(vizType: string) {\n  // @ts-ignore need export from superset-ui `ItemWithValue`\n  return getChartMetadataRegistry().items[vizType]?.value.behaviors?.includes(\n    Behavior.INTERACTIVE_CHART,\n  );\n}\n\nexport function getExtraFormData(\n  dataMask: DataMaskStateWithId,\n  charts: Charts,\n  filterIdsAppliedOnChart: string[],\n): ExtraFormData {\n  let extraFormData: ExtraFormData = {};\n  filterIdsAppliedOnChart.forEach(key => {\n    extraFormData = mergeExtraFormData(\n      extraFormData,\n      dataMask[key]?.extraFormData ?? {},\n    );\n  });\n  return extraFormData;\n}\n\nexport function nativeFilterGate(behaviors: Behavior[]): boolean {\n  return (\n    !behaviors.includes(Behavior.NATIVE_FILTER) ||\n    (isFeatureEnabled(FeatureFlag.DASHBOARD_FILTERS_EXPERIMENTAL) &&\n      isFeatureEnabled(FeatureFlag.DASHBOARD_CROSS_FILTERS) &&\n      behaviors.includes(Behavior.INTERACTIVE_CHART))\n  );\n}\n\nconst isComponentATab = (\n  dashboardLayout: DashboardLayout,\n  componentId: string,\n) => dashboardLayout[componentId].type === TAB_TYPE;\n\nconst findTabsWithChartsInScopeHelper = (\n  dashboardLayout: DashboardLayout,\n  chartsInScope: number[],\n  componentId: string,\n  tabIds: string[],\n  tabsToHighlight: Set<string>,\n) => {\n  if (\n    dashboardLayout[componentId].type === CHART_TYPE &&\n    chartsInScope.includes(dashboardLayout[componentId].meta.chartId)\n  ) {\n    tabIds.forEach(tabsToHighlight.add, tabsToHighlight);\n  }\n  if (\n    dashboardLayout[componentId].children.length === 0 ||\n    (isComponentATab(dashboardLayout, componentId) &&\n      tabsToHighlight.has(componentId))\n  ) {\n    return;\n  }\n  dashboardLayout[componentId].children.forEach(childId =>\n    findTabsWithChartsInScopeHelper(\n      dashboardLayout,\n      chartsInScope,\n      childId,\n      isComponentATab(dashboardLayout, childId) ? [...tabIds, childId] : tabIds,\n      tabsToHighlight,\n    ),\n  );\n};\n\nexport const findTabsWithChartsInScope = (\n  dashboardLayout: DashboardLayout,\n  chartsInScope: number[],\n) => {\n  const dashboardRoot = dashboardLayout[DASHBOARD_ROOT_ID];\n  const rootChildId = dashboardRoot.children[0];\n  const hasTopLevelTabs = rootChildId !== DASHBOARD_GRID_ID;\n  const tabsInScope = new Set<string>();\n  if (hasTopLevelTabs) {\n    dashboardLayout[rootChildId].children?.forEach(tabId =>\n      findTabsWithChartsInScopeHelper(\n        dashboardLayout,\n        chartsInScope,\n        tabId,\n        [tabId],\n        tabsInScope,\n      ),\n    );\n  } else {\n    Object.values(dashboardLayout)\n      .filter(element => element.type === TAB_TYPE)\n      .forEach(element =>\n        findTabsWithChartsInScopeHelper(\n          dashboardLayout,\n          chartsInScope,\n          element.id,\n          [element.id],\n          tabsInScope,\n        ),\n      );\n  }\n  return tabsInScope;\n};\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}