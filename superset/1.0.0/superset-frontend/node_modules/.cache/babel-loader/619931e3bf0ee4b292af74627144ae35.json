{"ast":null,"code":"import \"core-js/modules/web.dom-collections.iterator.js\";import _reduceInstanceProperty from \"@babel/runtime-corejs3/core-js-stable/instance/reduce\";import _sortInstanceProperty from \"@babel/runtime-corejs3/core-js-stable/instance/sort\";import _findInstanceProperty from \"@babel/runtime-corejs3/core-js-stable/instance/find\";import _filterInstanceProperty from \"@babel/runtime-corejs3/core-js-stable/instance/filter\";import _spliceInstanceProperty from \"@babel/runtime-corejs3/core-js-stable/instance/splice\";import _Object$keys from \"@babel/runtime-corejs3/core-js-stable/object/keys\";import _valuesInstanceProperty from \"@babel/runtime-corejs3/core-js-stable/instance/values\";import _mapInstanceProperty from \"@babel/runtime-corejs3/core-js-stable/instance/map\";import _bindInstanceProperty from \"@babel/runtime-corejs3/core-js-stable/instance/bind\";(function () {var enterModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.enterModule : undefined;enterModule && enterModule(module);})();var __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default.signature : function (a) {return a;}; /**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport {\nt,\nlogging,\nSupersetClient,\nwithTheme,\nensureIsArray } from\n'@superset-ui/core';\n\nimport ControlHeader from 'src/explore/components/ControlHeader';\nimport adhocMetricType from 'src/explore/components/controls/MetricControl/adhocMetricType';\nimport savedMetricType from 'src/explore/components/controls/MetricControl/savedMetricType';\nimport AdhocMetric from 'src/explore/components/controls/MetricControl/AdhocMetric';\nimport {\nOperators,\nOPERATOR_ENUM_TO_OPERATOR_TYPE } from\n'src/explore/constants';\nimport FilterDefinitionOption from 'src/explore/components/controls/MetricControl/FilterDefinitionOption';\nimport {\nAddControlLabel,\nAddIconButton,\nHeaderContainer,\nLabelsContainer } from\n'src/explore/components/controls/OptionControls';\nimport Icons from 'src/components/Icons';\nimport AdhocFilterPopoverTrigger from 'src/explore/components/controls/FilterControl/AdhocFilterPopoverTrigger';\nimport AdhocFilterOption from 'src/explore/components/controls/FilterControl/AdhocFilterOption';\nimport AdhocFilter, {\nCLAUSES,\nEXPRESSION_TYPES } from\n'src/explore/components/controls/FilterControl/AdhocFilter';\nimport adhocFilterType from 'src/explore/components/controls/FilterControl/adhocFilterType';\nimport columnType from 'src/explore/components/controls/FilterControl/columnType';import { jsx as ___EmotionJSX } from \"@emotion/react\";\n\nconst selectedMetricType = PropTypes.oneOfType([\nPropTypes.string,\nadhocMetricType]);\n\n\nconst propTypes = {\n  label: PropTypes.oneOfType([PropTypes.object, PropTypes.string]),\n  name: PropTypes.string,\n  onChange: PropTypes.func,\n  value: PropTypes.arrayOf(adhocFilterType),\n  datasource: PropTypes.object,\n  columns: PropTypes.arrayOf(columnType),\n  savedMetrics: PropTypes.arrayOf(savedMetricType),\n  selectedMetrics: PropTypes.oneOfType([\n  selectedMetricType,\n  PropTypes.arrayOf(selectedMetricType)]),\n\n  isLoading: PropTypes.bool };\n\n\nconst defaultProps = {\n  name: '',\n  onChange: () => {},\n  columns: [],\n  savedMetrics: [],\n  selectedMetrics: [] };\n\n\nfunction isDictionaryForAdhocFilter(value) {\n  return value && !(value instanceof AdhocFilter) && value.expressionType;\n}\n\nclass AdhocFilterControl extends React.Component {\n  constructor(props) {var _context, _context2, _context3, _context4, _context5, _context6, _context7, _context8, _context9;\n    super(props);\n    this.optionsForSelect = _bindInstanceProperty(_context = this.optionsForSelect).call(_context, this);\n    this.onRemoveFilter = _bindInstanceProperty(_context2 = this.onRemoveFilter).call(_context2, this);\n    this.onNewFilter = _bindInstanceProperty(_context3 = this.onNewFilter).call(_context3, this);\n    this.onFilterEdit = _bindInstanceProperty(_context4 = this.onFilterEdit).call(_context4, this);\n    this.moveLabel = _bindInstanceProperty(_context5 = this.moveLabel).call(_context5, this);\n    this.onChange = _bindInstanceProperty(_context6 = this.onChange).call(_context6, this);\n    this.mapOption = _bindInstanceProperty(_context7 = this.mapOption).call(_context7, this);\n    this.getMetricExpression = _bindInstanceProperty(_context8 = this.getMetricExpression).call(_context8, this);\n\n    const filters = _mapInstanceProperty(_context9 = this.props.value || []).call(_context9, (filter) =>\n    isDictionaryForAdhocFilter(filter) ? new AdhocFilter(filter) : filter);\n\n\n    this.optionRenderer = option => ___EmotionJSX(FilterDefinitionOption, { option: option });\n    this.valueRenderer = (adhocFilter, index) =>\n    ___EmotionJSX(AdhocFilterOption, {\n      key: index,\n      index: index,\n      adhocFilter: adhocFilter,\n      onFilterEdit: this.onFilterEdit,\n      options: this.state.options,\n      datasource: this.props.datasource,\n      onRemoveFilter: () => this.onRemoveFilter(index),\n      onMoveLabel: this.moveLabel,\n      onDropLabel: () => this.props.onChange(_valuesInstanceProperty(this.state)),\n      partitionColumn: this.state.partitionColumn });\n\n\n    this.state = {\n      values: filters,\n      options: this.optionsForSelect(this.props),\n      partitionColumn: null };\n\n  }\n\n  componentDidMount() {\n    const { datasource } = this.props;\n    if (datasource && datasource.type === 'table') {var _datasource$database;\n      const dbId = (_datasource$database = datasource.database) == null ? void 0 : _datasource$database.id;\n      const {\n        datasource_name: name,\n        schema,\n        is_sqllab_view: isSqllabView } =\n      datasource;\n\n      if (!isSqllabView && dbId && name && schema) {\n        SupersetClient.get({\n          endpoint: `/superset/extra_table_metadata/${dbId}/${name}/${schema}/` }).\n\n        then(({ json }) => {\n          if (json && json.partitions) {\n            const { partitions } = json;\n            // for now only show latest_partition option\n            // when table datasource has only 1 partition key.\n            if (\n            partitions &&\n            partitions.cols &&\n            _Object$keys(partitions.cols).length === 1)\n            {\n              this.setState({ partitionColumn: partitions.cols[0] });\n            }\n          }\n        }).\n        catch(error => {\n          logging.error('fetch extra_table_metadata:', error.statusText);\n        });\n      }\n    }\n  }\n\n  UNSAFE_componentWillReceiveProps(nextProps) {\n    if (this.props.columns !== nextProps.columns) {\n      this.setState({ options: this.optionsForSelect(nextProps) });\n    }\n    if (this.props.value !== nextProps.value) {var _context10;\n      this.setState({\n        values: _mapInstanceProperty(_context10 = nextProps.value || []).call(_context10, (filter) =>\n        isDictionaryForAdhocFilter(filter) ? new AdhocFilter(filter) : filter) });\n\n\n    }\n  }\n\n  onRemoveFilter(index) {\n    const valuesCopy = [..._valuesInstanceProperty(this.state)];\n    _spliceInstanceProperty(valuesCopy).call(valuesCopy, index, 1);\n    this.setState(prevState => ({\n      ...prevState,\n      values: valuesCopy }));\n\n    this.props.onChange(valuesCopy);\n  }\n\n  onNewFilter(newFilter) {\n    const mappedOption = this.mapOption(newFilter);\n    if (mappedOption) {\n      this.setState(\n      prevState => ({\n        ...prevState,\n        values: [..._valuesInstanceProperty(prevState), mappedOption] }),\n\n      () => {\n        this.props.onChange(_valuesInstanceProperty(this.state));\n      });\n\n    }\n  }\n\n  onFilterEdit(changedFilter) {var _context11;\n    this.props.onChange(\n    _mapInstanceProperty(_context11 = _valuesInstanceProperty(this.state)).call(_context11, value => {\n      if (value.filterOptionName === changedFilter.filterOptionName) {\n        return changedFilter;\n      }\n      return value;\n    }));\n\n  }\n\n  onChange(opts) {var _context12, _context13;\n    const options = _filterInstanceProperty(_context12 = _mapInstanceProperty(_context13 = opts || []).call(_context13,\n    option => this.mapOption(option))).call(_context12,\n    option => option);\n    this.props.onChange(options);\n  }\n\n  getMetricExpression(savedMetricName) {var _context14;\n    return _findInstanceProperty(_context14 = this.props.savedMetrics).call(_context14,\n    savedMetric => savedMetric.metric_name === savedMetricName).\n    expression;\n  }\n\n  moveLabel(dragIndex, hoverIndex) {\n    const { values } = this.state;\n\n    const newValues = [...values];\n    [newValues[hoverIndex], newValues[dragIndex]] = [\n    newValues[dragIndex],\n    newValues[hoverIndex]];\n\n    this.setState({ values: newValues });\n  }\n\n  mapOption(option) {\n    // already a AdhocFilter, skip\n    if (option instanceof AdhocFilter) {\n      return option;\n    }\n    // via datasource saved metric\n    if (option.saved_metric_name) {\n      return new AdhocFilter({\n        expressionType:\n        this.props.datasource.type === 'druid' ?\n        EXPRESSION_TYPES.SIMPLE :\n        EXPRESSION_TYPES.SQL,\n        subject:\n        this.props.datasource.type === 'druid' ?\n        option.saved_metric_name :\n        this.getMetricExpression(option.saved_metric_name),\n        operator:\n        OPERATOR_ENUM_TO_OPERATOR_TYPE[Operators.GREATER_THAN].operation,\n        comparator: 0,\n        clause: CLAUSES.HAVING });\n\n    }\n    // has a custom label, meaning it's custom column\n    if (option.label) {\n      return new AdhocFilter({\n        expressionType:\n        this.props.datasource.type === 'druid' ?\n        EXPRESSION_TYPES.SIMPLE :\n        EXPRESSION_TYPES.SQL,\n        subject:\n        this.props.datasource.type === 'druid' ?\n        option.label :\n        new AdhocMetric(option).translateToSql(),\n        operator:\n        OPERATOR_ENUM_TO_OPERATOR_TYPE[Operators.GREATER_THAN].operation,\n        comparator: 0,\n        clause: CLAUSES.HAVING });\n\n    }\n    // add a new filter item\n    if (option.column_name) {\n      return new AdhocFilter({\n        expressionType: EXPRESSION_TYPES.SIMPLE,\n        subject: option.column_name,\n        operator: OPERATOR_ENUM_TO_OPERATOR_TYPE[Operators.EQUALS].operation,\n        comparator: '',\n        clause: CLAUSES.WHERE,\n        isNew: true });\n\n    }\n    return null;\n  }\n\n  optionsForSelect(props) {var _context15, _context16, _context17;\n    const options = _filterInstanceProperty(_context15 = [\n    ...props.columns,\n    ..._mapInstanceProperty(_context16 = ensureIsArray(props.selectedMetrics)).call(_context16,\n    (metric) =>\n    metric && (\n    typeof metric === 'string' ?\n    { saved_metric_name: metric } :\n    new AdhocMetric(metric)))]).call(_context15,\n\n    option => option);\n\n    return _sortInstanceProperty(_context17 = _reduceInstanceProperty(options).call(options,\n    (results, option) => {\n      if (option.saved_metric_name) {\n        results.push({\n          ...option,\n          filterOptionName: option.saved_metric_name });\n\n      } else if (option.column_name) {\n        results.push({\n          ...option,\n          filterOptionName: `_col_${option.column_name}` });\n\n      } else if (option instanceof AdhocMetric) {\n        results.push({\n          ...option,\n          filterOptionName: `_adhocmetric_${option.label}` });\n\n      }\n      return results;\n    }, [])).call(_context17,\n    (a, b) =>\n    (a.saved_metric_name || a.column_name || a.label).localeCompare(\n    b.saved_metric_name || b.column_name || b.label));\n\n\n  }\n\n  addNewFilterPopoverTrigger(trigger) {\n    return (\n      ___EmotionJSX(AdhocFilterPopoverTrigger, {\n        adhocFilter: new AdhocFilter({}),\n        datasource: this.props.datasource,\n        options: this.state.options,\n        onFilterEdit: this.onNewFilter,\n        partitionColumn: this.state.partitionColumn,\n        createNew: true },\n\n      trigger));\n\n\n  }\n\n  render() {var _context18;\n    const { theme } = this.props;\n    return (\n      ___EmotionJSX(\"div\", { className: \"metrics-select\", \"data-test\": \"adhoc-filter-control\" },\n      ___EmotionJSX(HeaderContainer, null,\n      ___EmotionJSX(ControlHeader, this.props),\n      this.addNewFilterPopoverTrigger(\n      ___EmotionJSX(AddIconButton, { \"data-test\": \"add-filter-button\" },\n      ___EmotionJSX(Icons.PlusLarge, {\n        iconSize: \"s\",\n        iconColor: theme.colors.grayscale.light5 })))),\n\n\n\n\n      ___EmotionJSX(LabelsContainer, null,\n      _valuesInstanceProperty(this.state).length > 0 ?\n      _mapInstanceProperty(_context18 = _valuesInstanceProperty(this.state)).call(_context18, (value, index) =>\n      this.valueRenderer(value, index)) :\n\n      this.addNewFilterPopoverTrigger(\n      ___EmotionJSX(AddControlLabel, null,\n      ___EmotionJSX(Icons.PlusSmall, { iconColor: theme.colors.grayscale.light1 }),\n      t('Add filter'))))));\n\n\n\n\n\n  } // @ts-ignore\n  __reactstandin__regenerateByEval(key, code) {// @ts-ignore\n    this[key] = eval(code);}}\nAdhocFilterControl.propTypes = propTypes;\nAdhocFilterControl.defaultProps = defaultProps;const _default =\n\nwithTheme(AdhocFilterControl);export default _default;;(function () {var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined;if (!reactHotLoader) {return;}reactHotLoader.register(selectedMetricType, \"selectedMetricType\", \"/app/superset-frontend/src/explore/components/controls/FilterControl/AdhocFilterControl/index.jsx\");reactHotLoader.register(propTypes, \"propTypes\", \"/app/superset-frontend/src/explore/components/controls/FilterControl/AdhocFilterControl/index.jsx\");reactHotLoader.register(defaultProps, \"defaultProps\", \"/app/superset-frontend/src/explore/components/controls/FilterControl/AdhocFilterControl/index.jsx\");reactHotLoader.register(isDictionaryForAdhocFilter, \"isDictionaryForAdhocFilter\", \"/app/superset-frontend/src/explore/components/controls/FilterControl/AdhocFilterControl/index.jsx\");reactHotLoader.register(AdhocFilterControl, \"AdhocFilterControl\", \"/app/superset-frontend/src/explore/components/controls/FilterControl/AdhocFilterControl/index.jsx\");reactHotLoader.register(_default, \"default\", \"/app/superset-frontend/src/explore/components/controls/FilterControl/AdhocFilterControl/index.jsx\");})();;(function () {var leaveModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.leaveModule : undefined;leaveModule && leaveModule(module);})();","map":{"version":3,"sources":["/app/superset-frontend/src/explore/components/controls/FilterControl/AdhocFilterControl/index.jsx"],"names":["React","PropTypes","t","logging","SupersetClient","withTheme","ensureIsArray","ControlHeader","adhocMetricType","savedMetricType","AdhocMetric","Operators","OPERATOR_ENUM_TO_OPERATOR_TYPE","FilterDefinitionOption","AddControlLabel","AddIconButton","HeaderContainer","LabelsContainer","Icons","AdhocFilterPopoverTrigger","AdhocFilterOption","AdhocFilter","CLAUSES","EXPRESSION_TYPES","adhocFilterType","columnType","selectedMetricType","oneOfType","string","propTypes","label","object","name","onChange","func","value","arrayOf","datasource","columns","savedMetrics","selectedMetrics","isLoading","bool","defaultProps","isDictionaryForAdhocFilter","expressionType","AdhocFilterControl","Component","constructor","props","optionsForSelect","onRemoveFilter","onNewFilter","onFilterEdit","moveLabel","mapOption","getMetricExpression","filters","filter","optionRenderer","option","valueRenderer","adhocFilter","index","state","options","partitionColumn","values","componentDidMount","type","dbId","database","id","datasource_name","schema","is_sqllab_view","isSqllabView","get","endpoint","then","json","partitions","cols","length","setState","catch","error","statusText","UNSAFE_componentWillReceiveProps","nextProps","valuesCopy","prevState","newFilter","mappedOption","changedFilter","filterOptionName","opts","savedMetricName","savedMetric","metric_name","expression","dragIndex","hoverIndex","newValues","saved_metric_name","SIMPLE","SQL","subject","operator","GREATER_THAN","operation","comparator","clause","HAVING","translateToSql","column_name","EQUALS","WHERE","isNew","metric","results","push","a","b","localeCompare","addNewFilterPopoverTrigger","trigger","render","theme","colors","grayscale","light5","light1"],"mappings":"4nCAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA;AACEC,CADF;AAEEC,OAFF;AAGEC,cAHF;AAIEC,SAJF;AAKEC,aALF;AAMO,mBANP;;AAQA,OAAOC,aAAP,MAA0B,sCAA1B;AACA,OAAOC,eAAP,MAA4B,+DAA5B;AACA,OAAOC,eAAP,MAA4B,+DAA5B;AACA,OAAOC,WAAP,MAAwB,2DAAxB;AACA;AACEC,SADF;AAEEC,8BAFF;AAGO,uBAHP;AAIA,OAAOC,sBAAP,MAAmC,sEAAnC;AACA;AACEC,eADF;AAEEC,aAFF;AAGEC,eAHF;AAIEC,eAJF;AAKO,gDALP;AAMA,OAAOC,KAAP,MAAkB,sBAAlB;AACA,OAAOC,yBAAP,MAAsC,yEAAtC;AACA,OAAOC,iBAAP,MAA8B,iEAA9B;AACA,OAAOC,WAAP;AACEC,OADF;AAEEC,gBAFF;AAGO,2DAHP;AAIA,OAAOC,eAAP,MAA4B,+DAA5B;AACA,OAAOC,UAAP,MAAuB,0DAAvB,C;;AAEA,MAAMC,kBAAkB,GAAGzB,SAAS,CAAC0B,SAAV,CAAoB;AAC7C1B,SAAS,CAAC2B,MADmC;AAE7CpB,eAF6C,CAApB,CAA3B;;;AAKA,MAAMqB,SAAS,GAAG;AAChBC,EAAAA,KAAK,EAAE7B,SAAS,CAAC0B,SAAV,CAAoB,CAAC1B,SAAS,CAAC8B,MAAX,EAAmB9B,SAAS,CAAC2B,MAA7B,CAApB,CADS;AAEhBI,EAAAA,IAAI,EAAE/B,SAAS,CAAC2B,MAFA;AAGhBK,EAAAA,QAAQ,EAAEhC,SAAS,CAACiC,IAHJ;AAIhBC,EAAAA,KAAK,EAAElC,SAAS,CAACmC,OAAV,CAAkBZ,eAAlB,CAJS;AAKhBa,EAAAA,UAAU,EAAEpC,SAAS,CAAC8B,MALN;AAMhBO,EAAAA,OAAO,EAAErC,SAAS,CAACmC,OAAV,CAAkBX,UAAlB,CANO;AAOhBc,EAAAA,YAAY,EAAEtC,SAAS,CAACmC,OAAV,CAAkB3B,eAAlB,CAPE;AAQhB+B,EAAAA,eAAe,EAAEvC,SAAS,CAAC0B,SAAV,CAAoB;AACnCD,EAAAA,kBADmC;AAEnCzB,EAAAA,SAAS,CAACmC,OAAV,CAAkBV,kBAAlB,CAFmC,CAApB,CARD;;AAYhBe,EAAAA,SAAS,EAAExC,SAAS,CAACyC,IAZL,EAAlB;;;AAeA,MAAMC,YAAY,GAAG;AACnBX,EAAAA,IAAI,EAAE,EADa;AAEnBC,EAAAA,QAAQ,EAAE,MAAM,CAAE,CAFC;AAGnBK,EAAAA,OAAO,EAAE,EAHU;AAInBC,EAAAA,YAAY,EAAE,EAJK;AAKnBC,EAAAA,eAAe,EAAE,EALE,EAArB;;;AAQA,SAASI,0BAAT,CAAoCT,KAApC,EAA2C;AACzC,SAAOA,KAAK,IAAI,EAAEA,KAAK,YAAYd,WAAnB,CAAT,IAA4Cc,KAAK,CAACU,cAAzD;AACD;;AAED,MAAMC,kBAAN,SAAiC9C,KAAK,CAAC+C,SAAvC,CAAiD;AAC/CC,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,UAAMA,KAAN;AACA,SAAKC,gBAAL,GAAwB,sCAAKA,gBAAL,iBAA2B,IAA3B,CAAxB;AACA,SAAKC,cAAL,GAAsB,uCAAKA,cAAL,kBAAyB,IAAzB,CAAtB;AACA,SAAKC,WAAL,GAAmB,uCAAKA,WAAL,kBAAsB,IAAtB,CAAnB;AACA,SAAKC,YAAL,GAAoB,uCAAKA,YAAL,kBAAuB,IAAvB,CAApB;AACA,SAAKC,SAAL,GAAiB,uCAAKA,SAAL,kBAAoB,IAApB,CAAjB;AACA,SAAKrB,QAAL,GAAgB,uCAAKA,QAAL,kBAAmB,IAAnB,CAAhB;AACA,SAAKsB,SAAL,GAAiB,uCAAKA,SAAL,kBAAoB,IAApB,CAAjB;AACA,SAAKC,mBAAL,GAA2B,uCAAKA,mBAAL,kBAA8B,IAA9B,CAA3B;;AAEA,UAAMC,OAAO,GAAG,iCAAC,KAAKR,KAAL,CAAWd,KAAX,IAAoB,EAArB,kBAA6B,CAAAuB,MAAM;AACjDd,IAAAA,0BAA0B,CAACc,MAAD,CAA1B,GAAqC,IAAIrC,WAAJ,CAAgBqC,MAAhB,CAArC,GAA+DA,MADjD,CAAhB;;;AAIA,SAAKC,cAAL,GAAsBC,MAAM,IAAI,cAAC,sBAAD,IAAwB,MAAM,EAAEA,MAAhC,GAAhC;AACA,SAAKC,aAAL,GAAqB,CAACC,WAAD,EAAcC,KAAd;AACnB,kBAAC,iBAAD;AACE,MAAA,GAAG,EAAEA,KADP;AAEE,MAAA,KAAK,EAAEA,KAFT;AAGE,MAAA,WAAW,EAAED,WAHf;AAIE,MAAA,YAAY,EAAE,KAAKT,YAJrB;AAKE,MAAA,OAAO,EAAE,KAAKW,KAAL,CAAWC,OALtB;AAME,MAAA,UAAU,EAAE,KAAKhB,KAAL,CAAWZ,UANzB;AAOE,MAAA,cAAc,EAAE,MAAM,KAAKc,cAAL,CAAoBY,KAApB,CAPxB;AAQE,MAAA,WAAW,EAAE,KAAKT,SARpB;AASE,MAAA,WAAW,EAAE,MAAM,KAAKL,KAAL,CAAWhB,QAAX,yBAAoB,KAAK+B,KAAzB,EATrB;AAUE,MAAA,eAAe,EAAE,KAAKA,KAAL,CAAWE,eAV9B,GADF;;;AAcA,SAAKF,KAAL,GAAa;AACXG,MAAAA,MAAM,EAAEV,OADG;AAEXQ,MAAAA,OAAO,EAAE,KAAKf,gBAAL,CAAsB,KAAKD,KAA3B,CAFE;AAGXiB,MAAAA,eAAe,EAAE,IAHN,EAAb;;AAKD;;AAEDE,EAAAA,iBAAiB,GAAG;AAClB,UAAM,EAAE/B,UAAF,KAAiB,KAAKY,KAA5B;AACA,QAAIZ,UAAU,IAAIA,UAAU,CAACgC,IAAX,KAAoB,OAAtC,EAA+C;AAC7C,YAAMC,IAAI,2BAAGjC,UAAU,CAACkC,QAAd,qBAAG,qBAAqBC,EAAlC;AACA,YAAM;AACJC,QAAAA,eAAe,EAAEzC,IADb;AAEJ0C,QAAAA,MAFI;AAGJC,QAAAA,cAAc,EAAEC,YAHZ;AAIFvC,MAAAA,UAJJ;;AAMA,UAAI,CAACuC,YAAD,IAAiBN,IAAjB,IAAyBtC,IAAzB,IAAiC0C,MAArC,EAA6C;AAC3CtE,QAAAA,cAAc,CAACyE,GAAf,CAAmB;AACjBC,UAAAA,QAAQ,EAAG,kCAAiCR,IAAK,IAAGtC,IAAK,IAAG0C,MAAO,GADlD,EAAnB;;AAGGK,QAAAA,IAHH,CAGQ,CAAC,EAAEC,IAAF,EAAD,KAAc;AAClB,cAAIA,IAAI,IAAIA,IAAI,CAACC,UAAjB,EAA6B;AAC3B,kBAAM,EAAEA,UAAF,KAAiBD,IAAvB;AACA;AACA;AACA;AACEC,YAAAA,UAAU;AACVA,YAAAA,UAAU,CAACC,IADX;AAEA,yBAAYD,UAAU,CAACC,IAAvB,EAA6BC,MAA7B,KAAwC,CAH1C;AAIE;AACA,mBAAKC,QAAL,CAAc,EAAElB,eAAe,EAAEe,UAAU,CAACC,IAAX,CAAgB,CAAhB,CAAnB,EAAd;AACD;AACF;AACF,SAhBH;AAiBGG,QAAAA,KAjBH,CAiBSC,KAAK,IAAI;AACdnF,UAAAA,OAAO,CAACmF,KAAR,CAAc,6BAAd,EAA6CA,KAAK,CAACC,UAAnD;AACD,SAnBH;AAoBD;AACF;AACF;;AAEDC,EAAAA,gCAAgC,CAACC,SAAD,EAAY;AAC1C,QAAI,KAAKxC,KAAL,CAAWX,OAAX,KAAuBmD,SAAS,CAACnD,OAArC,EAA8C;AAC5C,WAAK8C,QAAL,CAAc,EAAEnB,OAAO,EAAE,KAAKf,gBAAL,CAAsBuC,SAAtB,CAAX,EAAd;AACD;AACD,QAAI,KAAKxC,KAAL,CAAWd,KAAX,KAAqBsD,SAAS,CAACtD,KAAnC,EAA0C;AACxC,WAAKiD,QAAL,CAAc;AACZjB,QAAAA,MAAM,EAAE,kCAACsB,SAAS,CAACtD,KAAV,IAAmB,EAApB,mBAA4B,CAAAuB,MAAM;AACxCd,QAAAA,0BAA0B,CAACc,MAAD,CAA1B,GAAqC,IAAIrC,WAAJ,CAAgBqC,MAAhB,CAArC,GAA+DA,MADzD,CADI,EAAd;;;AAKD;AACF;;AAEDP,EAAAA,cAAc,CAACY,KAAD,EAAQ;AACpB,UAAM2B,UAAU,GAAG,CAAC,2BAAG,KAAK1B,KAAR,CAAD,CAAnB;AACA,4BAAA0B,UAAU,MAAV,CAAAA,UAAU,EAAQ3B,KAAR,EAAe,CAAf,CAAV;AACA,SAAKqB,QAAL,CAAcO,SAAS,KAAK;AAC1B,SAAGA,SADuB;AAE1BxB,MAAAA,MAAM,EAAEuB,UAFkB,EAAL,CAAvB;;AAIA,SAAKzC,KAAL,CAAWhB,QAAX,CAAoByD,UAApB;AACD;;AAEDtC,EAAAA,WAAW,CAACwC,SAAD,EAAY;AACrB,UAAMC,YAAY,GAAG,KAAKtC,SAAL,CAAeqC,SAAf,CAArB;AACA,QAAIC,YAAJ,EAAkB;AAChB,WAAKT,QAAL;AACEO,MAAAA,SAAS,KAAK;AACZ,WAAGA,SADS;AAEZxB,QAAAA,MAAM,EAAE,CAAC,2BAAGwB,SAAH,CAAD,EAAsBE,YAAtB,CAFI,EAAL,CADX;;AAKE,YAAM;AACJ,aAAK5C,KAAL,CAAWhB,QAAX,yBAAoB,KAAK+B,KAAzB;AACD,OAPH;;AASD;AACF;;AAEDX,EAAAA,YAAY,CAACyC,aAAD,EAAgB;AAC1B,SAAK7C,KAAL,CAAWhB,QAAX;AACE,mEAAK+B,KAAL,oBAAsB7B,KAAK,IAAI;AAC7B,UAAIA,KAAK,CAAC4D,gBAAN,KAA2BD,aAAa,CAACC,gBAA7C,EAA+D;AAC7D,eAAOD,aAAP;AACD;AACD,aAAO3D,KAAP;AACD,KALD,CADF;;AAQD;;AAEDF,EAAAA,QAAQ,CAAC+D,IAAD,EAAO;AACb,UAAM/B,OAAO,GAAG,uEAAC+B,IAAI,IAAI,EAAT;AACTpC,IAAAA,MAAM,IAAI,KAAKL,SAAL,CAAeK,MAAf,CADD;AAENA,IAAAA,MAAM,IAAIA,MAFJ,CAAhB;AAGA,SAAKX,KAAL,CAAWhB,QAAX,CAAoBgC,OAApB;AACD;;AAEDT,EAAAA,mBAAmB,CAACyC,eAAD,EAAkB;AACnC,WAAO,wCAAKhD,KAAL,CAAWV,YAAX;AACL2D,IAAAA,WAAW,IAAIA,WAAW,CAACC,WAAZ,KAA4BF,eADtC;AAELG,IAAAA,UAFF;AAGD;;AAED9C,EAAAA,SAAS,CAAC+C,SAAD,EAAYC,UAAZ,EAAwB;AAC/B,UAAM,EAAEnC,MAAF,KAAa,KAAKH,KAAxB;;AAEA,UAAMuC,SAAS,GAAG,CAAC,GAAGpC,MAAJ,CAAlB;AACA,KAACoC,SAAS,CAACD,UAAD,CAAV,EAAwBC,SAAS,CAACF,SAAD,CAAjC,IAAgD;AAC9CE,IAAAA,SAAS,CAACF,SAAD,CADqC;AAE9CE,IAAAA,SAAS,CAACD,UAAD,CAFqC,CAAhD;;AAIA,SAAKlB,QAAL,CAAc,EAAEjB,MAAM,EAAEoC,SAAV,EAAd;AACD;;AAEDhD,EAAAA,SAAS,CAACK,MAAD,EAAS;AAChB;AACA,QAAIA,MAAM,YAAYvC,WAAtB,EAAmC;AACjC,aAAOuC,MAAP;AACD;AACD;AACA,QAAIA,MAAM,CAAC4C,iBAAX,EAA8B;AAC5B,aAAO,IAAInF,WAAJ,CAAgB;AACrBwB,QAAAA,cAAc;AACZ,aAAKI,KAAL,CAAWZ,UAAX,CAAsBgC,IAAtB,KAA+B,OAA/B;AACI9C,QAAAA,gBAAgB,CAACkF,MADrB;AAEIlF,QAAAA,gBAAgB,CAACmF,GAJF;AAKrBC,QAAAA,OAAO;AACL,aAAK1D,KAAL,CAAWZ,UAAX,CAAsBgC,IAAtB,KAA+B,OAA/B;AACIT,QAAAA,MAAM,CAAC4C,iBADX;AAEI,aAAKhD,mBAAL,CAAyBI,MAAM,CAAC4C,iBAAhC,CARe;AASrBI,QAAAA,QAAQ;AACNhG,QAAAA,8BAA8B,CAACD,SAAS,CAACkG,YAAX,CAA9B,CAAuDC,SAVpC;AAWrBC,QAAAA,UAAU,EAAE,CAXS;AAYrBC,QAAAA,MAAM,EAAE1F,OAAO,CAAC2F,MAZK,EAAhB,CAAP;;AAcD;AACD;AACA,QAAIrD,MAAM,CAAC9B,KAAX,EAAkB;AAChB,aAAO,IAAIT,WAAJ,CAAgB;AACrBwB,QAAAA,cAAc;AACZ,aAAKI,KAAL,CAAWZ,UAAX,CAAsBgC,IAAtB,KAA+B,OAA/B;AACI9C,QAAAA,gBAAgB,CAACkF,MADrB;AAEIlF,QAAAA,gBAAgB,CAACmF,GAJF;AAKrBC,QAAAA,OAAO;AACL,aAAK1D,KAAL,CAAWZ,UAAX,CAAsBgC,IAAtB,KAA+B,OAA/B;AACIT,QAAAA,MAAM,CAAC9B,KADX;AAEI,YAAIpB,WAAJ,CAAgBkD,MAAhB,EAAwBsD,cAAxB,EARe;AASrBN,QAAAA,QAAQ;AACNhG,QAAAA,8BAA8B,CAACD,SAAS,CAACkG,YAAX,CAA9B,CAAuDC,SAVpC;AAWrBC,QAAAA,UAAU,EAAE,CAXS;AAYrBC,QAAAA,MAAM,EAAE1F,OAAO,CAAC2F,MAZK,EAAhB,CAAP;;AAcD;AACD;AACA,QAAIrD,MAAM,CAACuD,WAAX,EAAwB;AACtB,aAAO,IAAI9F,WAAJ,CAAgB;AACrBwB,QAAAA,cAAc,EAAEtB,gBAAgB,CAACkF,MADZ;AAErBE,QAAAA,OAAO,EAAE/C,MAAM,CAACuD,WAFK;AAGrBP,QAAAA,QAAQ,EAAEhG,8BAA8B,CAACD,SAAS,CAACyG,MAAX,CAA9B,CAAiDN,SAHtC;AAIrBC,QAAAA,UAAU,EAAE,EAJS;AAKrBC,QAAAA,MAAM,EAAE1F,OAAO,CAAC+F,KALK;AAMrBC,QAAAA,KAAK,EAAE,IANc,EAAhB,CAAP;;AAQD;AACD,WAAO,IAAP;AACD;;AAEDpE,EAAAA,gBAAgB,CAACD,KAAD,EAAQ;AACtB,UAAMgB,OAAO,GAAG;AACd,OAAGhB,KAAK,CAACX,OADK;AAEd,OAAG,kCAAAhC,aAAa,CAAC2C,KAAK,CAACT,eAAP,CAAb;AACD,KAAA+E,MAAM;AACJA,IAAAA,MAAM;AACL,WAAOA,MAAP,KAAkB,QAAlB;AACG,MAAEf,iBAAiB,EAAEe,MAArB,EADH;AAEG,QAAI7G,WAAJ,CAAgB6G,MAAhB,CAHE,CAFP,CAFW;;AASP3D,IAAAA,MAAM,IAAIA,MATH,CAAhB;;AAWA,WAAO,2DAAAK,OAAO,MAAP,CAAAA,OAAO;AACJ,KAACuD,OAAD,EAAU5D,MAAV,KAAqB;AAC3B,UAAIA,MAAM,CAAC4C,iBAAX,EAA8B;AAC5BgB,QAAAA,OAAO,CAACC,IAAR,CAAa;AACX,aAAG7D,MADQ;AAEXmC,UAAAA,gBAAgB,EAAEnC,MAAM,CAAC4C,iBAFd,EAAb;;AAID,OALD,MAKO,IAAI5C,MAAM,CAACuD,WAAX,EAAwB;AAC7BK,QAAAA,OAAO,CAACC,IAAR,CAAa;AACX,aAAG7D,MADQ;AAEXmC,UAAAA,gBAAgB,EAAG,QAAOnC,MAAM,CAACuD,WAAY,EAFlC,EAAb;;AAID,OALM,MAKA,IAAIvD,MAAM,YAAYlD,WAAtB,EAAmC;AACxC8G,QAAAA,OAAO,CAACC,IAAR,CAAa;AACX,aAAG7D,MADQ;AAEXmC,UAAAA,gBAAgB,EAAG,gBAAenC,MAAM,CAAC9B,KAAM,EAFpC,EAAb;;AAID;AACD,aAAO0F,OAAP;AACD,KAnBW,EAmBT,EAnBS,CAAP;AAoBC,KAACE,CAAD,EAAIC,CAAJ;AACJ,KAACD,CAAC,CAAClB,iBAAF,IAAuBkB,CAAC,CAACP,WAAzB,IAAwCO,CAAC,CAAC5F,KAA3C,EAAkD8F,aAAlD;AACED,IAAAA,CAAC,CAACnB,iBAAF,IAAuBmB,CAAC,CAACR,WAAzB,IAAwCQ,CAAC,CAAC7F,KAD5C,CArBG,CAAP;;;AAyBD;;AAED+F,EAAAA,0BAA0B,CAACC,OAAD,EAAU;AAClC;AACE,oBAAC,yBAAD;AACE,QAAA,WAAW,EAAE,IAAIzG,WAAJ,CAAgB,EAAhB,CADf;AAEE,QAAA,UAAU,EAAE,KAAK4B,KAAL,CAAWZ,UAFzB;AAGE,QAAA,OAAO,EAAE,KAAK2B,KAAL,CAAWC,OAHtB;AAIE,QAAA,YAAY,EAAE,KAAKb,WAJrB;AAKE,QAAA,eAAe,EAAE,KAAKY,KAAL,CAAWE,eAL9B;AAME,QAAA,SAAS,MANX;;AAQG4D,MAAAA,OARH,CADF;;;AAYD;;AAEDC,EAAAA,MAAM,GAAG;AACP,UAAM,EAAEC,KAAF,KAAY,KAAK/E,KAAvB;AACA;AACE,6BAAK,SAAS,EAAC,gBAAf,EAAgC,aAAU,sBAA1C;AACE,oBAAC,eAAD;AACE,oBAAC,aAAD,EAAmB,KAAKA,KAAxB,CADF;AAEG,WAAK4E,0BAAL;AACC,oBAAC,aAAD,IAAe,aAAU,mBAAzB;AACE,oBAAC,KAAD,CAAO,SAAP;AACE,QAAA,QAAQ,EAAC,GADX;AAEE,QAAA,SAAS,EAAEG,KAAK,CAACC,MAAN,CAAaC,SAAb,CAAuBC,MAFpC,GADF,CADD,CAFH,CADF;;;;;AAYE,oBAAC,eAAD;AACG,mCAAKnE,KAAL,EAAkBmB,MAAlB,GAA2B,CAA3B;AACG,qEAAKnB,KAAL,oBAAsB,CAAC7B,KAAD,EAAQ4B,KAAR;AACpB,WAAKF,aAAL,CAAmB1B,KAAnB,EAA0B4B,KAA1B,CADF,CADH;;AAIG,WAAK8D,0BAAL;AACE,oBAAC,eAAD;AACE,oBAAC,KAAD,CAAO,SAAP,IAAiB,SAAS,EAAEG,KAAK,CAACC,MAAN,CAAaC,SAAb,CAAuBE,MAAnD,GADF;AAEGlI,MAAAA,CAAC,CAAC,YAAD,CAFJ,CADF,CALN,CAZF,CADF;;;;;;AA2BD,GA1R8C;AAAA;AAAA;AA6RjD4C,kBAAkB,CAACjB,SAAnB,GAA+BA,SAA/B;AACAiB,kBAAkB,CAACH,YAAnB,GAAkCA,YAAlC,C;;AAEetC,SAAS,CAACyC,kBAAD,C,CAAxB,wB,iLAhUMpB,kB,qJAKAG,S,4IAeAc,Y,+IAQGC,0B,6JAIHE,kB","sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport {\n  t,\n  logging,\n  SupersetClient,\n  withTheme,\n  ensureIsArray,\n} from '@superset-ui/core';\n\nimport ControlHeader from 'src/explore/components/ControlHeader';\nimport adhocMetricType from 'src/explore/components/controls/MetricControl/adhocMetricType';\nimport savedMetricType from 'src/explore/components/controls/MetricControl/savedMetricType';\nimport AdhocMetric from 'src/explore/components/controls/MetricControl/AdhocMetric';\nimport {\n  Operators,\n  OPERATOR_ENUM_TO_OPERATOR_TYPE,\n} from 'src/explore/constants';\nimport FilterDefinitionOption from 'src/explore/components/controls/MetricControl/FilterDefinitionOption';\nimport {\n  AddControlLabel,\n  AddIconButton,\n  HeaderContainer,\n  LabelsContainer,\n} from 'src/explore/components/controls/OptionControls';\nimport Icons from 'src/components/Icons';\nimport AdhocFilterPopoverTrigger from 'src/explore/components/controls/FilterControl/AdhocFilterPopoverTrigger';\nimport AdhocFilterOption from 'src/explore/components/controls/FilterControl/AdhocFilterOption';\nimport AdhocFilter, {\n  CLAUSES,\n  EXPRESSION_TYPES,\n} from 'src/explore/components/controls/FilterControl/AdhocFilter';\nimport adhocFilterType from 'src/explore/components/controls/FilterControl/adhocFilterType';\nimport columnType from 'src/explore/components/controls/FilterControl/columnType';\n\nconst selectedMetricType = PropTypes.oneOfType([\n  PropTypes.string,\n  adhocMetricType,\n]);\n\nconst propTypes = {\n  label: PropTypes.oneOfType([PropTypes.object, PropTypes.string]),\n  name: PropTypes.string,\n  onChange: PropTypes.func,\n  value: PropTypes.arrayOf(adhocFilterType),\n  datasource: PropTypes.object,\n  columns: PropTypes.arrayOf(columnType),\n  savedMetrics: PropTypes.arrayOf(savedMetricType),\n  selectedMetrics: PropTypes.oneOfType([\n    selectedMetricType,\n    PropTypes.arrayOf(selectedMetricType),\n  ]),\n  isLoading: PropTypes.bool,\n};\n\nconst defaultProps = {\n  name: '',\n  onChange: () => {},\n  columns: [],\n  savedMetrics: [],\n  selectedMetrics: [],\n};\n\nfunction isDictionaryForAdhocFilter(value) {\n  return value && !(value instanceof AdhocFilter) && value.expressionType;\n}\n\nclass AdhocFilterControl extends React.Component {\n  constructor(props) {\n    super(props);\n    this.optionsForSelect = this.optionsForSelect.bind(this);\n    this.onRemoveFilter = this.onRemoveFilter.bind(this);\n    this.onNewFilter = this.onNewFilter.bind(this);\n    this.onFilterEdit = this.onFilterEdit.bind(this);\n    this.moveLabel = this.moveLabel.bind(this);\n    this.onChange = this.onChange.bind(this);\n    this.mapOption = this.mapOption.bind(this);\n    this.getMetricExpression = this.getMetricExpression.bind(this);\n\n    const filters = (this.props.value || []).map(filter =>\n      isDictionaryForAdhocFilter(filter) ? new AdhocFilter(filter) : filter,\n    );\n\n    this.optionRenderer = option => <FilterDefinitionOption option={option} />;\n    this.valueRenderer = (adhocFilter, index) => (\n      <AdhocFilterOption\n        key={index}\n        index={index}\n        adhocFilter={adhocFilter}\n        onFilterEdit={this.onFilterEdit}\n        options={this.state.options}\n        datasource={this.props.datasource}\n        onRemoveFilter={() => this.onRemoveFilter(index)}\n        onMoveLabel={this.moveLabel}\n        onDropLabel={() => this.props.onChange(this.state.values)}\n        partitionColumn={this.state.partitionColumn}\n      />\n    );\n    this.state = {\n      values: filters,\n      options: this.optionsForSelect(this.props),\n      partitionColumn: null,\n    };\n  }\n\n  componentDidMount() {\n    const { datasource } = this.props;\n    if (datasource && datasource.type === 'table') {\n      const dbId = datasource.database?.id;\n      const {\n        datasource_name: name,\n        schema,\n        is_sqllab_view: isSqllabView,\n      } = datasource;\n\n      if (!isSqllabView && dbId && name && schema) {\n        SupersetClient.get({\n          endpoint: `/superset/extra_table_metadata/${dbId}/${name}/${schema}/`,\n        })\n          .then(({ json }) => {\n            if (json && json.partitions) {\n              const { partitions } = json;\n              // for now only show latest_partition option\n              // when table datasource has only 1 partition key.\n              if (\n                partitions &&\n                partitions.cols &&\n                Object.keys(partitions.cols).length === 1\n              ) {\n                this.setState({ partitionColumn: partitions.cols[0] });\n              }\n            }\n          })\n          .catch(error => {\n            logging.error('fetch extra_table_metadata:', error.statusText);\n          });\n      }\n    }\n  }\n\n  UNSAFE_componentWillReceiveProps(nextProps) {\n    if (this.props.columns !== nextProps.columns) {\n      this.setState({ options: this.optionsForSelect(nextProps) });\n    }\n    if (this.props.value !== nextProps.value) {\n      this.setState({\n        values: (nextProps.value || []).map(filter =>\n          isDictionaryForAdhocFilter(filter) ? new AdhocFilter(filter) : filter,\n        ),\n      });\n    }\n  }\n\n  onRemoveFilter(index) {\n    const valuesCopy = [...this.state.values];\n    valuesCopy.splice(index, 1);\n    this.setState(prevState => ({\n      ...prevState,\n      values: valuesCopy,\n    }));\n    this.props.onChange(valuesCopy);\n  }\n\n  onNewFilter(newFilter) {\n    const mappedOption = this.mapOption(newFilter);\n    if (mappedOption) {\n      this.setState(\n        prevState => ({\n          ...prevState,\n          values: [...prevState.values, mappedOption],\n        }),\n        () => {\n          this.props.onChange(this.state.values);\n        },\n      );\n    }\n  }\n\n  onFilterEdit(changedFilter) {\n    this.props.onChange(\n      this.state.values.map(value => {\n        if (value.filterOptionName === changedFilter.filterOptionName) {\n          return changedFilter;\n        }\n        return value;\n      }),\n    );\n  }\n\n  onChange(opts) {\n    const options = (opts || [])\n      .map(option => this.mapOption(option))\n      .filter(option => option);\n    this.props.onChange(options);\n  }\n\n  getMetricExpression(savedMetricName) {\n    return this.props.savedMetrics.find(\n      savedMetric => savedMetric.metric_name === savedMetricName,\n    ).expression;\n  }\n\n  moveLabel(dragIndex, hoverIndex) {\n    const { values } = this.state;\n\n    const newValues = [...values];\n    [newValues[hoverIndex], newValues[dragIndex]] = [\n      newValues[dragIndex],\n      newValues[hoverIndex],\n    ];\n    this.setState({ values: newValues });\n  }\n\n  mapOption(option) {\n    // already a AdhocFilter, skip\n    if (option instanceof AdhocFilter) {\n      return option;\n    }\n    // via datasource saved metric\n    if (option.saved_metric_name) {\n      return new AdhocFilter({\n        expressionType:\n          this.props.datasource.type === 'druid'\n            ? EXPRESSION_TYPES.SIMPLE\n            : EXPRESSION_TYPES.SQL,\n        subject:\n          this.props.datasource.type === 'druid'\n            ? option.saved_metric_name\n            : this.getMetricExpression(option.saved_metric_name),\n        operator:\n          OPERATOR_ENUM_TO_OPERATOR_TYPE[Operators.GREATER_THAN].operation,\n        comparator: 0,\n        clause: CLAUSES.HAVING,\n      });\n    }\n    // has a custom label, meaning it's custom column\n    if (option.label) {\n      return new AdhocFilter({\n        expressionType:\n          this.props.datasource.type === 'druid'\n            ? EXPRESSION_TYPES.SIMPLE\n            : EXPRESSION_TYPES.SQL,\n        subject:\n          this.props.datasource.type === 'druid'\n            ? option.label\n            : new AdhocMetric(option).translateToSql(),\n        operator:\n          OPERATOR_ENUM_TO_OPERATOR_TYPE[Operators.GREATER_THAN].operation,\n        comparator: 0,\n        clause: CLAUSES.HAVING,\n      });\n    }\n    // add a new filter item\n    if (option.column_name) {\n      return new AdhocFilter({\n        expressionType: EXPRESSION_TYPES.SIMPLE,\n        subject: option.column_name,\n        operator: OPERATOR_ENUM_TO_OPERATOR_TYPE[Operators.EQUALS].operation,\n        comparator: '',\n        clause: CLAUSES.WHERE,\n        isNew: true,\n      });\n    }\n    return null;\n  }\n\n  optionsForSelect(props) {\n    const options = [\n      ...props.columns,\n      ...ensureIsArray(props.selectedMetrics).map(\n        metric =>\n          metric &&\n          (typeof metric === 'string'\n            ? { saved_metric_name: metric }\n            : new AdhocMetric(metric)),\n      ),\n    ].filter(option => option);\n\n    return options\n      .reduce((results, option) => {\n        if (option.saved_metric_name) {\n          results.push({\n            ...option,\n            filterOptionName: option.saved_metric_name,\n          });\n        } else if (option.column_name) {\n          results.push({\n            ...option,\n            filterOptionName: `_col_${option.column_name}`,\n          });\n        } else if (option instanceof AdhocMetric) {\n          results.push({\n            ...option,\n            filterOptionName: `_adhocmetric_${option.label}`,\n          });\n        }\n        return results;\n      }, [])\n      .sort((a, b) =>\n        (a.saved_metric_name || a.column_name || a.label).localeCompare(\n          b.saved_metric_name || b.column_name || b.label,\n        ),\n      );\n  }\n\n  addNewFilterPopoverTrigger(trigger) {\n    return (\n      <AdhocFilterPopoverTrigger\n        adhocFilter={new AdhocFilter({})}\n        datasource={this.props.datasource}\n        options={this.state.options}\n        onFilterEdit={this.onNewFilter}\n        partitionColumn={this.state.partitionColumn}\n        createNew\n      >\n        {trigger}\n      </AdhocFilterPopoverTrigger>\n    );\n  }\n\n  render() {\n    const { theme } = this.props;\n    return (\n      <div className=\"metrics-select\" data-test=\"adhoc-filter-control\">\n        <HeaderContainer>\n          <ControlHeader {...this.props} />\n          {this.addNewFilterPopoverTrigger(\n            <AddIconButton data-test=\"add-filter-button\">\n              <Icons.PlusLarge\n                iconSize=\"s\"\n                iconColor={theme.colors.grayscale.light5}\n              />\n            </AddIconButton>,\n          )}\n        </HeaderContainer>\n        <LabelsContainer>\n          {this.state.values.length > 0\n            ? this.state.values.map((value, index) =>\n                this.valueRenderer(value, index),\n              )\n            : this.addNewFilterPopoverTrigger(\n                <AddControlLabel>\n                  <Icons.PlusSmall iconColor={theme.colors.grayscale.light1} />\n                  {t('Add filter')}\n                </AddControlLabel>,\n              )}\n        </LabelsContainer>\n      </div>\n    );\n  }\n}\n\nAdhocFilterControl.propTypes = propTypes;\nAdhocFilterControl.defaultProps = defaultProps;\n\nexport default withTheme(AdhocFilterControl);\n"]},"metadata":{},"sourceType":"module"}