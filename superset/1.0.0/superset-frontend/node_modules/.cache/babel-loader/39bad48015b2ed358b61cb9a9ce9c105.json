{"ast":null,"code":"import _Object$keys from \"@babel/runtime-corejs3/core-js-stable/object/keys\";import _includesInstanceProperty from \"@babel/runtime-corejs3/core-js-stable/instance/includes\";import _filterInstanceProperty from \"@babel/runtime-corejs3/core-js-stable/instance/filter\";import _mapInstanceProperty from \"@babel/runtime-corejs3/core-js-stable/instance/map\";(function () {var enterModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.enterModule : undefined;enterModule && enterModule(module);})();var __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default.signature : function (a) {return a;}; /**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React from 'react';\nimport ValidatedInput from 'src/components/Form/LabeledErrorBoundInput';\nimport { StyledFormHeader, formScrollableStyles, validatedFormStyles } from './styles';import { jsx as ___EmotionJSX } from \"@emotion/react\";\nexport const FormFieldOrder = [\n'host',\n'port',\n'database',\n'username',\n'password',\n'database_name'];\n\nconst hostField = ({ required, changeMethods, getValidation, validationErrors }) => ___EmotionJSX(ValidatedInput, { id: \"host\", name: \"host\", required: required, validationMethods: { onBlur: getValidation }, errorMessage: validationErrors == null ? void 0 : validationErrors.host, placeholder: \"e.g. 127.0.0.1\", className: \"form-group-w-50\", label: \"Host\", onChange: changeMethods.onParametersChange });\nconst portField = ({ required, changeMethods, getValidation, validationErrors }) => ___EmotionJSX(ValidatedInput, { id: \"port\", name: \"port\", required: required, validationMethods: { onBlur: getValidation }, errorMessage: validationErrors == null ? void 0 : validationErrors.port, placeholder: \"e.g. 5432\", className: \"form-group-w-50\", label: \"Port\", onChange: changeMethods.onParametersChange });\nconst databaseField = ({ required, changeMethods, getValidation, validationErrors }) => ___EmotionJSX(ValidatedInput, { id: \"database\", name: \"database\", required: required, validationMethods: { onBlur: getValidation }, errorMessage: validationErrors == null ? void 0 : validationErrors.database, placeholder: \"e.g. world_population\", label: \"Database name\", onChange: changeMethods.onParametersChange, helpText: \"Copy the name of the PostgreSQL database you are trying to connect to.\" });\nconst usernameField = ({ required, changeMethods, getValidation, validationErrors }) => ___EmotionJSX(ValidatedInput, { id: \"username\", name: \"username\", required: required, validationMethods: { onBlur: getValidation }, errorMessage: validationErrors == null ? void 0 : validationErrors.username, placeholder: \"e.g. Analytics\", label: \"Username\", onChange: changeMethods.onParametersChange });\nconst passwordField = ({ required, changeMethods, getValidation, validationErrors }) => ___EmotionJSX(ValidatedInput, { id: \"password\", name: \"password\", required: required, validationMethods: { onBlur: getValidation }, errorMessage: validationErrors == null ? void 0 : validationErrors.password, placeholder: \"e.g. ********\", label: \"Password\", onChange: changeMethods.onParametersChange });\nconst displayField = ({ required, changeMethods, getValidation, validationErrors }) => ___EmotionJSX(ValidatedInput, { id: \"database_name\", name: \"database_name\", required: required, validationMethods: { onBlur: getValidation }, errorMessage: validationErrors == null ? void 0 : validationErrors.database_name, placeholder: \"\", label: \"Display Name\", onChange: changeMethods.onChange, helpText: \"Pick a nickname for this database to display as in Superset.\" });\nconst FORM_FIELD_MAP = {\n  host: hostField,\n  port: portField,\n  database: databaseField,\n  username: usernameField,\n  password: passwordField,\n  database_name: displayField };\n\nconst DatabaseConnectionForm = ({ dbModel: { name, parameters }, onParametersChange, onChange, validationErrors, getValidation }) => {var _context;return ___EmotionJSX(React.Fragment, null,\n  ___EmotionJSX(StyledFormHeader, null,\n  ___EmotionJSX(\"h4\", null, \"Enter the required \", name, \" credentials\"),\n  ___EmotionJSX(\"p\", { className: \"helper\" }, \"Need help? Learn more about connecting to \",\n  name, \".\")),\n\n\n  ___EmotionJSX(\"div\", {\n    // @ts-ignore\n    css: theme => [\n    formScrollableStyles,\n    validatedFormStyles(theme)] },\n\n  parameters &&\n  _mapInstanceProperty(_context = _filterInstanceProperty(FormFieldOrder).call(FormFieldOrder, key => {var _context2;return _includesInstanceProperty(_context2 = _Object$keys(parameters.properties)).call(_context2, key) ||\n    key === 'database_name';})).call(_context, field => {var _context3;return FORM_FIELD_MAP[field]({\n      required: _includesInstanceProperty(_context3 = parameters.required).call(_context3, field),\n      changeMethods: { onParametersChange, onChange },\n      validationErrors,\n      getValidation,\n      key: field });})));};\n\n\n\nexport const FormFieldMap = FORM_FIELD_MAP;const _default =\nDatabaseConnectionForm;export default _default;;(function () {var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined;if (!reactHotLoader) {return;}reactHotLoader.register(FormFieldOrder, \"FormFieldOrder\", \"/app/superset-frontend/src/views/CRUD/data/database/DatabaseModal/DatabaseConnectionForm.tsx\");reactHotLoader.register(hostField, \"hostField\", \"/app/superset-frontend/src/views/CRUD/data/database/DatabaseModal/DatabaseConnectionForm.tsx\");reactHotLoader.register(portField, \"portField\", \"/app/superset-frontend/src/views/CRUD/data/database/DatabaseModal/DatabaseConnectionForm.tsx\");reactHotLoader.register(databaseField, \"databaseField\", \"/app/superset-frontend/src/views/CRUD/data/database/DatabaseModal/DatabaseConnectionForm.tsx\");reactHotLoader.register(usernameField, \"usernameField\", \"/app/superset-frontend/src/views/CRUD/data/database/DatabaseModal/DatabaseConnectionForm.tsx\");reactHotLoader.register(passwordField, \"passwordField\", \"/app/superset-frontend/src/views/CRUD/data/database/DatabaseModal/DatabaseConnectionForm.tsx\");reactHotLoader.register(displayField, \"displayField\", \"/app/superset-frontend/src/views/CRUD/data/database/DatabaseModal/DatabaseConnectionForm.tsx\");reactHotLoader.register(FORM_FIELD_MAP, \"FORM_FIELD_MAP\", \"/app/superset-frontend/src/views/CRUD/data/database/DatabaseModal/DatabaseConnectionForm.tsx\");reactHotLoader.register(DatabaseConnectionForm, \"DatabaseConnectionForm\", \"/app/superset-frontend/src/views/CRUD/data/database/DatabaseModal/DatabaseConnectionForm.tsx\");reactHotLoader.register(FormFieldMap, \"FormFieldMap\", \"/app/superset-frontend/src/views/CRUD/data/database/DatabaseModal/DatabaseConnectionForm.tsx\");reactHotLoader.register(_default, \"default\", \"/app/superset-frontend/src/views/CRUD/data/database/DatabaseModal/DatabaseConnectionForm.tsx\");})();;(function () {var leaveModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.leaveModule : undefined;leaveModule && leaveModule(module);})();","map":{"version":3,"sources":["/app/superset-frontend/src/views/CRUD/data/database/DatabaseModal/DatabaseConnectionForm.tsx"],"names":[],"mappings":"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","sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React, { FormEvent } from 'react';\nimport { SupersetTheme, JsonObject } from '@superset-ui/core';\nimport { InputProps } from 'antd/lib/input';\nimport ValidatedInput from 'src/components/Form/LabeledErrorBoundInput';\nimport {\n  StyledFormHeader,\n  formScrollableStyles,\n  validatedFormStyles,\n} from './styles';\nimport { DatabaseForm } from '../types';\n\nexport const FormFieldOrder = [\n  'host',\n  'port',\n  'database',\n  'username',\n  'password',\n  'database_name',\n];\n\ninterface FieldPropTypes {\n  required: boolean;\n  changeMethods: { onParametersChange: (value: any) => string } & {\n    onChange: (value: any) => string;\n  };\n  validationErrors: JsonObject | null;\n  getValidation: () => void;\n}\n\nconst hostField = ({\n  required,\n  changeMethods,\n  getValidation,\n  validationErrors,\n}: FieldPropTypes) => (\n  <ValidatedInput\n    id=\"host\"\n    name=\"host\"\n    required={required}\n    validationMethods={{ onBlur: getValidation }}\n    errorMessage={validationErrors?.host}\n    placeholder=\"e.g. 127.0.0.1\"\n    className=\"form-group-w-50\"\n    label=\"Host\"\n    onChange={changeMethods.onParametersChange}\n  />\n);\nconst portField = ({\n  required,\n  changeMethods,\n  getValidation,\n  validationErrors,\n}: FieldPropTypes) => (\n  <ValidatedInput\n    id=\"port\"\n    name=\"port\"\n    required={required}\n    validationMethods={{ onBlur: getValidation }}\n    errorMessage={validationErrors?.port}\n    placeholder=\"e.g. 5432\"\n    className=\"form-group-w-50\"\n    label=\"Port\"\n    onChange={changeMethods.onParametersChange}\n  />\n);\nconst databaseField = ({\n  required,\n  changeMethods,\n  getValidation,\n  validationErrors,\n}: FieldPropTypes) => (\n  <ValidatedInput\n    id=\"database\"\n    name=\"database\"\n    required={required}\n    validationMethods={{ onBlur: getValidation }}\n    errorMessage={validationErrors?.database}\n    placeholder=\"e.g. world_population\"\n    label=\"Database name\"\n    onChange={changeMethods.onParametersChange}\n    helpText=\"Copy the name of the PostgreSQL database you are trying to connect to.\"\n  />\n);\nconst usernameField = ({\n  required,\n  changeMethods,\n  getValidation,\n  validationErrors,\n}: FieldPropTypes) => (\n  <ValidatedInput\n    id=\"username\"\n    name=\"username\"\n    required={required}\n    validationMethods={{ onBlur: getValidation }}\n    errorMessage={validationErrors?.username}\n    placeholder=\"e.g. Analytics\"\n    label=\"Username\"\n    onChange={changeMethods.onParametersChange}\n  />\n);\nconst passwordField = ({\n  required,\n  changeMethods,\n  getValidation,\n  validationErrors,\n}: FieldPropTypes) => (\n  <ValidatedInput\n    id=\"password\"\n    name=\"password\"\n    required={required}\n    validationMethods={{ onBlur: getValidation }}\n    errorMessage={validationErrors?.password}\n    placeholder=\"e.g. ********\"\n    label=\"Password\"\n    onChange={changeMethods.onParametersChange}\n  />\n);\nconst displayField = ({\n  required,\n  changeMethods,\n  getValidation,\n  validationErrors,\n}: FieldPropTypes) => (\n  <ValidatedInput\n    id=\"database_name\"\n    name=\"database_name\"\n    required={required}\n    validationMethods={{ onBlur: getValidation }}\n    errorMessage={validationErrors?.database_name}\n    placeholder=\"\"\n    label=\"Display Name\"\n    onChange={changeMethods.onChange}\n    helpText=\"Pick a nickname for this database to display as in Superset.\"\n  />\n);\n\nconst FORM_FIELD_MAP = {\n  host: hostField,\n  port: portField,\n  database: databaseField,\n  username: usernameField,\n  password: passwordField,\n  database_name: displayField,\n};\n\nconst DatabaseConnectionForm = ({\n  dbModel: { name, parameters },\n  onParametersChange,\n  onChange,\n  validationErrors,\n  getValidation,\n}: {\n  dbModel: DatabaseForm;\n  onParametersChange: (\n    event: FormEvent<InputProps> | { target: HTMLInputElement },\n  ) => void;\n  onChange: (\n    event: FormEvent<InputProps> | { target: HTMLInputElement },\n  ) => void;\n  validationErrors: JsonObject | null;\n  getValidation: () => void;\n}) => (\n  <>\n    <StyledFormHeader>\n      <h4>Enter the required {name} credentials</h4>\n      <p className=\"helper\">\n        Need help? Learn more about connecting to {name}.\n      </p>\n    </StyledFormHeader>\n    <div\n      // @ts-ignore\n      css={(theme: SupersetTheme) => [\n        formScrollableStyles,\n        validatedFormStyles(theme),\n      ]}\n    >\n      {parameters &&\n        FormFieldOrder.filter(\n          (key: string) =>\n            Object.keys(parameters.properties).includes(key) ||\n            key === 'database_name',\n        ).map(field =>\n          FORM_FIELD_MAP[field]({\n            required: parameters.required.includes(field),\n            changeMethods: { onParametersChange, onChange },\n            validationErrors,\n            getValidation,\n            key: field,\n          }),\n        )}\n    </div>\n  </>\n);\nexport const FormFieldMap = FORM_FIELD_MAP;\n\nexport default DatabaseConnectionForm;\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}