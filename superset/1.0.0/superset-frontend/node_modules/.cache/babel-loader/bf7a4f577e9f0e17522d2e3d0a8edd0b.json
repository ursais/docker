{"ast":null,"code":"import _bindInstanceProperty from \"@babel/runtime-corejs3/core-js-stable/instance/bind\";(function () {var enterModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.enterModule : undefined;enterModule && enterModule(module);})();var __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default.signature : function (a) {return a;}; /**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React from 'react';\nimport Popover from 'src/components/Popover';\nimport AdhocMetricEditPopoverTitle from 'src/explore/components/controls/MetricControl/AdhocMetricEditPopoverTitle';\nimport { ExplorePopoverContent } from 'src/explore/components/ExploreContentPopover';\nimport AdhocMetricEditPopover, { SAVED_TAB_KEY } from './AdhocMetricEditPopover';import { jsx as ___EmotionJSX } from \"@emotion/react\";\nclass AdhocMetricPopoverTrigger extends React.PureComponent {\n  constructor(props) {var _context, _context2, _context3, _context4, _context5, _context6, _context7;\n    super(props);\n    this.onPopoverResize = _bindInstanceProperty(_context = this.onPopoverResize).call(_context, this);\n    this.onLabelChange = _bindInstanceProperty(_context2 = this.onLabelChange).call(_context2, this);\n    this.closePopover = _bindInstanceProperty(_context3 = this.closePopover).call(_context3, this);\n    this.togglePopover = _bindInstanceProperty(_context4 = this.togglePopover).call(_context4, this);\n    this.getCurrentTab = _bindInstanceProperty(_context5 = this.getCurrentTab).call(_context5, this);\n    this.getCurrentLabel = _bindInstanceProperty(_context6 = this.getCurrentLabel).call(_context6, this);\n    this.onChange = _bindInstanceProperty(_context7 = this.onChange).call(_context7, this);\n    this.state = {\n      popoverVisible: false,\n      title: {\n        label: props.adhocMetric.label,\n        hasCustomLabel: props.adhocMetric.hasCustomLabel },\n\n      currentLabel: '',\n      labelModified: false,\n      isTitleEditDisabled: false };\n\n  }\n  onLabelChange(e) {var _this$props$adhocMetr;\n    const { verbose_name, metric_name } = this.props.savedMetric;\n    const defaultMetricLabel = (_this$props$adhocMetr = this.props.adhocMetric) == null ? void 0 : _this$props$adhocMetr.getDefaultLabel();\n    const label = e.target.value;\n    this.setState(state => ({\n      title: {\n        label: label ||\n        state.currentLabel ||\n        verbose_name ||\n        metric_name ||\n        defaultMetricLabel,\n        hasCustomLabel: !!label },\n\n      labelModified: true }));\n\n  }\n  onPopoverResize() {\n    this.forceUpdate();\n  }\n  closePopover() {\n    this.togglePopover(false);\n    this.setState({\n      labelModified: false });\n\n  }\n  togglePopover(visible) {\n    this.setState({\n      popoverVisible: visible });\n\n  }\n  getCurrentTab(tab) {\n    this.setState({\n      isTitleEditDisabled: tab === SAVED_TAB_KEY });\n\n  }\n  getCurrentLabel({ savedMetricLabel, adhocMetricLabel }) {\n    const currentLabel = savedMetricLabel || adhocMetricLabel;\n    this.setState({\n      currentLabel,\n      labelModified: true });\n\n    if (savedMetricLabel || !this.state.title.hasCustomLabel) {\n      this.setState({\n        title: {\n          label: currentLabel,\n          hasCustomLabel: false } });\n\n\n    }\n  }\n  onChange(newMetric, oldMetric) {\n    this.props.onMetricEdit({ ...newMetric, ...this.state.title }, oldMetric);\n  }\n  render() {\n    const { adhocMetric, savedMetric, columns, savedMetricsOptions, datasourceType, isControlledComponent } = this.props;\n    const { verbose_name, metric_name } = savedMetric;\n    const { hasCustomLabel, label } = adhocMetric;\n    const adhocMetricLabel = hasCustomLabel ?\n    label :\n    adhocMetric.getDefaultLabel();\n    const title = this.state.labelModified ?\n    this.state.title :\n    {\n      label: verbose_name || metric_name || adhocMetricLabel,\n      hasCustomLabel };\n\n    const { visible, togglePopover, closePopover } = isControlledComponent ?\n    {\n      visible: this.props.visible,\n      togglePopover: this.props.togglePopover,\n      closePopover: this.props.closePopover } :\n\n    {\n      visible: this.state.popoverVisible,\n      togglePopover: this.togglePopover,\n      closePopover: this.closePopover };\n\n    const overlayContent = ___EmotionJSX(ExplorePopoverContent, null,\n    ___EmotionJSX(AdhocMetricEditPopover, { adhocMetric: adhocMetric, title: title, columns: columns, savedMetricsOptions: savedMetricsOptions, savedMetric: savedMetric, datasourceType: datasourceType, onResize: this.onPopoverResize, onClose: closePopover, onChange: this.onChange, getCurrentTab: this.getCurrentTab, getCurrentLabel: this.getCurrentLabel }));\n\n    const popoverTitle = ___EmotionJSX(AdhocMetricEditPopoverTitle, { title: title, onChange: this.onLabelChange, isEditDisabled: this.state.isTitleEditDisabled });\n    return ___EmotionJSX(Popover, { placement: \"right\", trigger: \"click\", content: overlayContent, defaultVisible: visible, visible: visible, onVisibleChange: togglePopover, title: popoverTitle, destroyTooltipOnHide: this.props.createNew },\n    this.props.children);\n\n  } // @ts-ignore\n  __reactstandin__regenerateByEval(key, code) {// @ts-ignore\n    this[key] = eval(code);}}const _default = AdhocMetricPopoverTrigger;export default _default;;(function () {var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined;if (!reactHotLoader) {return;}reactHotLoader.register(AdhocMetricPopoverTrigger, \"AdhocMetricPopoverTrigger\", \"/app/superset-frontend/src/explore/components/controls/MetricControl/AdhocMetricPopoverTrigger.tsx\");reactHotLoader.register(_default, \"default\", \"/app/superset-frontend/src/explore/components/controls/MetricControl/AdhocMetricPopoverTrigger.tsx\");})();;(function () {var leaveModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.leaveModule : undefined;leaveModule && leaveModule(module);})();","map":{"version":3,"sources":["/app/superset-frontend/src/explore/components/controls/MetricControl/AdhocMetricPopoverTrigger.tsx"],"names":[],"mappings":"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","sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React, { ReactNode } from 'react';\nimport { Metric } from '@superset-ui/core';\nimport Popover from 'src/components/Popover';\nimport AdhocMetricEditPopoverTitle from 'src/explore/components/controls/MetricControl/AdhocMetricEditPopoverTitle';\nimport { ExplorePopoverContent } from 'src/explore/components/ExploreContentPopover';\nimport AdhocMetricEditPopover, {\n  SAVED_TAB_KEY,\n} from './AdhocMetricEditPopover';\nimport AdhocMetric from './AdhocMetric';\nimport { savedMetricType } from './types';\n\nexport type AdhocMetricPopoverTriggerProps = {\n  adhocMetric: AdhocMetric;\n  onMetricEdit(newMetric: Metric, oldMetric: Metric): void;\n  columns: { column_name: string; type: string }[];\n  savedMetricsOptions: savedMetricType[];\n  savedMetric: savedMetricType;\n  datasourceType: string;\n  children: ReactNode;\n  createNew?: boolean;\n  isControlledComponent?: boolean;\n  visible?: boolean;\n  togglePopover?: (visible: boolean) => void;\n  closePopover?: () => void;\n};\n\nexport type AdhocMetricPopoverTriggerState = {\n  popoverVisible: boolean;\n  title: { label: string; hasCustomLabel: boolean };\n  currentLabel: string;\n  labelModified: boolean;\n  isTitleEditDisabled: boolean;\n};\n\nclass AdhocMetricPopoverTrigger extends React.PureComponent<\n  AdhocMetricPopoverTriggerProps,\n  AdhocMetricPopoverTriggerState\n> {\n  constructor(props: AdhocMetricPopoverTriggerProps) {\n    super(props);\n    this.onPopoverResize = this.onPopoverResize.bind(this);\n    this.onLabelChange = this.onLabelChange.bind(this);\n    this.closePopover = this.closePopover.bind(this);\n    this.togglePopover = this.togglePopover.bind(this);\n    this.getCurrentTab = this.getCurrentTab.bind(this);\n    this.getCurrentLabel = this.getCurrentLabel.bind(this);\n    this.onChange = this.onChange.bind(this);\n\n    this.state = {\n      popoverVisible: false,\n      title: {\n        label: props.adhocMetric.label,\n        hasCustomLabel: props.adhocMetric.hasCustomLabel,\n      },\n      currentLabel: '',\n      labelModified: false,\n      isTitleEditDisabled: false,\n    };\n  }\n\n  onLabelChange(e: any) {\n    const { verbose_name, metric_name } = this.props.savedMetric;\n    const defaultMetricLabel = this.props.adhocMetric?.getDefaultLabel();\n    const label = e.target.value;\n    this.setState(state => ({\n      title: {\n        label:\n          label ||\n          state.currentLabel ||\n          verbose_name ||\n          metric_name ||\n          defaultMetricLabel,\n        hasCustomLabel: !!label,\n      },\n      labelModified: true,\n    }));\n  }\n\n  onPopoverResize() {\n    this.forceUpdate();\n  }\n\n  closePopover() {\n    this.togglePopover(false);\n    this.setState({\n      labelModified: false,\n    });\n  }\n\n  togglePopover(visible: boolean) {\n    this.setState({\n      popoverVisible: visible,\n    });\n  }\n\n  getCurrentTab(tab: string) {\n    this.setState({\n      isTitleEditDisabled: tab === SAVED_TAB_KEY,\n    });\n  }\n\n  getCurrentLabel({\n    savedMetricLabel,\n    adhocMetricLabel,\n  }: {\n    savedMetricLabel: string;\n    adhocMetricLabel: string;\n  }) {\n    const currentLabel = savedMetricLabel || adhocMetricLabel;\n    this.setState({\n      currentLabel,\n      labelModified: true,\n    });\n    if (savedMetricLabel || !this.state.title.hasCustomLabel) {\n      this.setState({\n        title: {\n          label: currentLabel,\n          hasCustomLabel: false,\n        },\n      });\n    }\n  }\n\n  onChange(newMetric: Metric, oldMetric: Metric) {\n    this.props.onMetricEdit({ ...newMetric, ...this.state.title }, oldMetric);\n  }\n\n  render() {\n    const {\n      adhocMetric,\n      savedMetric,\n      columns,\n      savedMetricsOptions,\n      datasourceType,\n      isControlledComponent,\n    } = this.props;\n    const { verbose_name, metric_name } = savedMetric;\n    const { hasCustomLabel, label } = adhocMetric;\n    const adhocMetricLabel = hasCustomLabel\n      ? label\n      : adhocMetric.getDefaultLabel();\n    const title = this.state.labelModified\n      ? this.state.title\n      : {\n          label: verbose_name || metric_name || adhocMetricLabel,\n          hasCustomLabel,\n        };\n\n    const { visible, togglePopover, closePopover } = isControlledComponent\n      ? {\n          visible: this.props.visible,\n          togglePopover: this.props.togglePopover,\n          closePopover: this.props.closePopover,\n        }\n      : {\n          visible: this.state.popoverVisible,\n          togglePopover: this.togglePopover,\n          closePopover: this.closePopover,\n        };\n\n    const overlayContent = (\n      <ExplorePopoverContent>\n        <AdhocMetricEditPopover\n          adhocMetric={adhocMetric}\n          title={title}\n          columns={columns}\n          savedMetricsOptions={savedMetricsOptions}\n          savedMetric={savedMetric}\n          datasourceType={datasourceType}\n          onResize={this.onPopoverResize}\n          onClose={closePopover}\n          onChange={this.onChange}\n          getCurrentTab={this.getCurrentTab}\n          getCurrentLabel={this.getCurrentLabel}\n        />\n      </ExplorePopoverContent>\n    );\n\n    const popoverTitle = (\n      <AdhocMetricEditPopoverTitle\n        title={title}\n        onChange={this.onLabelChange}\n        isEditDisabled={this.state.isTitleEditDisabled}\n      />\n    );\n\n    return (\n      <Popover\n        placement=\"right\"\n        trigger=\"click\"\n        content={overlayContent}\n        defaultVisible={visible}\n        visible={visible}\n        onVisibleChange={togglePopover}\n        title={popoverTitle}\n        destroyTooltipOnHide={this.props.createNew}\n      >\n        {this.props.children}\n      </Popover>\n    );\n  }\n}\n\nexport default AdhocMetricPopoverTrigger;\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}