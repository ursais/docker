{"ast":null,"code":"import \"core-js/modules/web.dom-collections.iterator.js\";import _filterInstanceProperty from \"@babel/runtime-corejs3/core-js-stable/instance/filter\";import _mapInstanceProperty from \"@babel/runtime-corejs3/core-js-stable/instance/map\";(function () {var enterModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.enterModule : undefined;enterModule && enterModule(module);})();var __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default.signature : function (a) {return a;}; /**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { SupersetClient, t, styled } from '@superset-ui/core';\nimport React, { useState, useMemo, useCallback } from 'react';\nimport rison from 'rison';\nimport moment from 'moment';\nimport { createFetchRelated, createFetchDistinct, createErrorHandler } from 'src/views/CRUD/utils';\nimport Popover from 'src/components/Popover';\nimport withToasts from 'src/messageToasts/enhancers/withToasts';\nimport { useListViewResource } from 'src/views/CRUD/hooks';\nimport ConfirmStatusChange from 'src/components/ConfirmStatusChange';\nimport handleResourceExport from 'src/utils/export';\nimport SubMenu from 'src/components/Menu/SubMenu';\nimport ListView, { FilterOperator } from 'src/components/ListView';\nimport Loading from 'src/components/Loading';\nimport DeleteModal from 'src/components/DeleteModal';\nimport ActionsBar from 'src/components/ListView/ActionsBar';\nimport { Tooltip } from 'src/components/Tooltip';\nimport { commonMenuData } from 'src/views/CRUD/data/common';\nimport copyTextToClipboard from 'src/utils/copy';\nimport { isFeatureEnabled, FeatureFlag } from 'src/featureFlags';\nimport ImportModelsModal from 'src/components/ImportModal/index';\nimport Icons from 'src/components/Icons';\nimport SavedQueryPreviewModal from './SavedQueryPreviewModal';import { jsx as ___EmotionJSX } from \"@emotion/react\";\nconst PAGE_SIZE = 25;\nconst PASSWORDS_NEEDED_MESSAGE = t('The passwords for the databases below are needed in order to ' +\n'import them together with the saved queries. Please note that the ' +\n'\"Secure Extra\" and \"Certificate\" sections of ' +\n'the database configuration are not present in export files, and ' +\n'should be added manually after the import if they are needed.');\nconst CONFIRM_OVERWRITE_MESSAGE = t('You are importing one or more saved queries that already exist. ' +\n'Overwriting might cause you to lose some of your work. Are you ' +\n'sure you want to overwrite?');\nconst StyledTableLabel = styled.div`\n  .count {\n    margin-left: 5px;\n    color: ${({ theme }) => theme.colors.primary.base};\n    text-decoration: underline;\n    cursor: pointer;\n  }\n`;\nconst StyledPopoverItem = styled.div`\n  color: ${({ theme }) => theme.colors.grayscale.dark2};\n`;\nfunction SavedQueryList({ addDangerToast, addSuccessToast, user }) {\n  const { state: { loading, resourceCount: queryCount, resourceCollection: queries, bulkSelectEnabled }, hasPerm, fetchData, toggleBulkSelect, refreshData } = useListViewResource('saved_query', t('Saved queries'), addDangerToast);\n  const [queryCurrentlyDeleting, setQueryCurrentlyDeleting] = useState(null);\n  const [savedQueryCurrentlyPreviewing, setSavedQueryCurrentlyPreviewing] = useState(null);\n  const [importingSavedQuery, showImportModal] = useState(false);\n  const [passwordFields, setPasswordFields] = useState([]);\n  const [preparingExport, setPreparingExport] = useState(false);\n  const openSavedQueryImportModal = () => {\n    showImportModal(true);\n  };\n  const closeSavedQueryImportModal = () => {\n    showImportModal(false);\n  };\n  const handleSavedQueryImport = () => {\n    showImportModal(false);\n    refreshData();\n  };\n  const canEdit = hasPerm('can_write');\n  const canDelete = hasPerm('can_write');\n  const canExport = hasPerm('can_read') && isFeatureEnabled(FeatureFlag.VERSIONED_EXPORT);\n  const openNewQuery = () => {\n    window.open(`${window.location.origin}/superset/sqllab?new=true`);\n  };\n  const handleSavedQueryPreview = useCallback(id => {\n    SupersetClient.get({\n      endpoint: `/api/v1/saved_query/${id}` }).\n    then(({ json = {} }) => {\n      setSavedQueryCurrentlyPreviewing({ ...json.result });\n    }, createErrorHandler(errMsg => addDangerToast(t('There was an issue previewing the selected query %s', errMsg))));\n  }, [addDangerToast]);\n  const menuData = {\n    activeChild: 'Saved queries',\n    ...commonMenuData };\n\n  const subMenuButtons = [];\n  if (canDelete) {\n    subMenuButtons.push({\n      name: t('Bulk select'),\n      onClick: toggleBulkSelect,\n      buttonStyle: 'secondary' });\n\n  }\n  subMenuButtons.push({\n    name: ___EmotionJSX(React.Fragment, null,\n    ___EmotionJSX(\"i\", { className: \"fa fa-plus\" }), \" \", t('Query')),\n\n    onClick: openNewQuery,\n    buttonStyle: 'primary' });\n\n  if (isFeatureEnabled(FeatureFlag.VERSIONED_EXPORT)) {\n    subMenuButtons.push({\n      name: ___EmotionJSX(Tooltip, { id: \"import-tooltip\", title: t('Import queries'), placement: \"bottomRight\", \"data-test\": \"import-tooltip-test\" },\n      ___EmotionJSX(Icons.Import, { \"data-test\": \"import-icon\" })),\n\n      buttonStyle: 'link',\n      onClick: openSavedQueryImportModal,\n      'data-test': 'import-button' });\n\n  }\n  menuData.buttons = subMenuButtons;\n  // Action methods\n  const openInSqlLab = id => {\n    window.open(`${window.location.origin}/superset/sqllab?savedQueryId=${id}`);\n  };\n  const copyQueryLink = useCallback(id => {\n    copyTextToClipboard(`${window.location.origin}/superset/sqllab?savedQueryId=${id}`).\n    then(() => {\n      addSuccessToast(t('Link Copied!'));\n    }).\n    catch(() => {\n      addDangerToast(t('Sorry, your browser does not support copying.'));\n    });\n  }, [addDangerToast, addSuccessToast]);\n  const handleQueryDelete = ({ id, label }) => {\n    SupersetClient.delete({\n      endpoint: `/api/v1/saved_query/${id}` }).\n    then(() => {\n      refreshData();\n      setQueryCurrentlyDeleting(null);\n      addSuccessToast(t('Deleted: %s', label));\n    }, createErrorHandler(errMsg => addDangerToast(t('There was an issue deleting %s: %s', label, errMsg))));\n  };\n  const handleBulkSavedQueryExport = savedQueriesToExport => {\n    const ids = _mapInstanceProperty(savedQueriesToExport).call(savedQueriesToExport, ({ id }) => id);\n    handleResourceExport('saved_query', ids, () => {\n      setPreparingExport(false);\n    });\n    setPreparingExport(true);\n  };\n  const handleBulkQueryDelete = queriesToDelete => {\n    SupersetClient.delete({\n      endpoint: `/api/v1/saved_query/?q=${rison.encode(_mapInstanceProperty(queriesToDelete).call(queriesToDelete, ({ id }) => id))}` }).\n    then(({ json = {} }) => {\n      refreshData();\n      addSuccessToast(json.message);\n    }, createErrorHandler(errMsg => addDangerToast(t('There was an issue deleting the selected queries: %s', errMsg))));\n  };\n  const initialSort = [{ id: 'changed_on_delta_humanized', desc: true }];\n  const columns = useMemo(() => [\n  {\n    accessor: 'label',\n    Header: t('Name') },\n\n  {\n    accessor: 'database.database_name',\n    Header: t('Database'),\n    size: 'xl' },\n\n  {\n    accessor: 'database',\n    hidden: true,\n    disableSortBy: true },\n\n  {\n    accessor: 'schema',\n    Header: t('Schema'),\n    size: 'xl' },\n\n  {\n    Cell: ({ row: { original: { sql_tables: tables = [] } } }) => {\n      const names = _mapInstanceProperty(tables).call(tables, table => table.table);\n      const main = (names == null ? void 0 : names.shift()) || '';\n      if (names.length) {\n        return ___EmotionJSX(StyledTableLabel, null,\n        ___EmotionJSX(\"span\", null, main),\n        ___EmotionJSX(Popover, { placement: \"right\", title: t('TABLES'), trigger: \"click\", content: ___EmotionJSX(React.Fragment, null,\n          _mapInstanceProperty(names).call(names, name => ___EmotionJSX(StyledPopoverItem, { key: name }, name))) },\n\n        ___EmotionJSX(\"span\", { className: \"count\" }, \"(+\", names.length, \")\")));\n\n\n      }\n      return main;\n    },\n    accessor: 'sql_tables',\n    Header: t('Tables'),\n    size: 'xl',\n    disableSortBy: true },\n\n  {\n    Cell: ({ row: { original: { created_on: createdOn } } }) => {\n      const date = new Date(createdOn);\n      const utc = new Date(Date.UTC(date.getFullYear(), date.getMonth(), date.getDate(), date.getHours(), date.getMinutes(), date.getSeconds(), date.getMilliseconds()));\n      return moment(utc).fromNow();\n    },\n    Header: t('Created on'),\n    accessor: 'created_on',\n    size: 'xl' },\n\n  {\n    Cell: ({ row: { original: { changed_on_delta_humanized: changedOn } } }) => changedOn,\n    Header: t('Modified'),\n    accessor: 'changed_on_delta_humanized',\n    size: 'xl' },\n\n  {\n    Cell: ({ row: { original } }) => {var _context;\n      const handlePreview = () => {\n        handleSavedQueryPreview(original.id);\n      };\n      const handleEdit = () => openInSqlLab(original.id);\n      const handleCopy = () => copyQueryLink(original.id);\n      const handleExport = () => handleBulkSavedQueryExport([original]);\n      const handleDelete = () => setQueryCurrentlyDeleting(original);\n      const actions = _filterInstanceProperty(_context = [\n      {\n        label: 'preview-action',\n        tooltip: t('Query preview'),\n        placement: 'bottom',\n        icon: 'Binoculars',\n        onClick: handlePreview },\n\n      canEdit && {\n        label: 'edit-action',\n        tooltip: t('Edit query'),\n        placement: 'bottom',\n        icon: 'Edit',\n        onClick: handleEdit },\n\n      {\n        label: 'copy-action',\n        tooltip: t('Copy query URL'),\n        placement: 'bottom',\n        icon: 'Copy',\n        onClick: handleCopy },\n\n      canExport && {\n        label: 'export-action',\n        tooltip: t('Export query'),\n        placement: 'bottom',\n        icon: 'Share',\n        onClick: handleExport },\n\n      canDelete && {\n        label: 'delete-action',\n        tooltip: t('Delete query'),\n        placement: 'bottom',\n        icon: 'Trash',\n        onClick: handleDelete }]).call(_context,\n\n      item => !!item);\n      return ___EmotionJSX(ActionsBar, { actions: actions });\n    },\n    Header: t('Actions'),\n    id: 'actions',\n    disableSortBy: true }],\n\n  [canDelete, canEdit, canExport, copyQueryLink, handleSavedQueryPreview]);\n  const filters = useMemo(() => [\n  {\n    Header: t('Database'),\n    id: 'database',\n    input: 'select',\n    operator: FilterOperator.relationOneMany,\n    unfilteredLabel: 'All',\n    fetchSelects: createFetchRelated('saved_query', 'database', createErrorHandler(errMsg => addDangerToast(t('An error occurred while fetching dataset datasource values: %s', errMsg)))),\n    paginate: true },\n\n  {\n    Header: t('Schema'),\n    id: 'schema',\n    input: 'select',\n    operator: FilterOperator.equals,\n    unfilteredLabel: 'All',\n    fetchSelects: createFetchDistinct('saved_query', 'schema', createErrorHandler(errMsg => addDangerToast(t('An error occurred while fetching schema values: %s', errMsg)))),\n    paginate: true },\n\n  {\n    Header: t('Search'),\n    id: 'label',\n    input: 'search',\n    operator: FilterOperator.allText }],\n\n  [addDangerToast]);\n  return ___EmotionJSX(React.Fragment, null,\n  ___EmotionJSX(SubMenu, menuData),\n  queryCurrentlyDeleting && ___EmotionJSX(DeleteModal, { description: t('This action will permanently delete the saved query.'), onConfirm: () => {\n      if (queryCurrentlyDeleting) {\n        handleQueryDelete(queryCurrentlyDeleting);\n      }\n    }, onHide: () => setQueryCurrentlyDeleting(null), open: true, title: t('Delete Query?') }),\n  savedQueryCurrentlyPreviewing && ___EmotionJSX(SavedQueryPreviewModal, { fetchData: handleSavedQueryPreview, onHide: () => setSavedQueryCurrentlyPreviewing(null), savedQuery: savedQueryCurrentlyPreviewing, queries: queries, openInSqlLab: openInSqlLab, show: true }),\n  ___EmotionJSX(ConfirmStatusChange, { title: t('Please confirm'), description: t('Are you sure you want to delete the selected queries?'), onConfirm: handleBulkQueryDelete },\n  confirmDelete => {\n    const bulkActions = [];\n    if (canDelete) {\n      bulkActions.push({\n        key: 'delete',\n        name: t('Delete'),\n        onSelect: confirmDelete,\n        type: 'danger' });\n\n    }\n    if (canExport) {\n      bulkActions.push({\n        key: 'export',\n        name: t('Export'),\n        type: 'primary',\n        onSelect: handleBulkSavedQueryExport });\n\n    }\n    return ___EmotionJSX(ListView, { className: \"saved_query-list-view\", columns: columns, count: queryCount, data: queries, fetchData: fetchData, filters: filters, initialSort: initialSort, loading: loading, pageSize: PAGE_SIZE, bulkActions: bulkActions, bulkSelectEnabled: bulkSelectEnabled, disableBulkSelect: toggleBulkSelect, highlightRowId: savedQueryCurrentlyPreviewing == null ? void 0 : savedQueryCurrentlyPreviewing.id });\n  }),\n\n\n  ___EmotionJSX(ImportModelsModal, { resourceName: \"saved_query\", resourceLabel: t('queries'), passwordsNeededMessage: PASSWORDS_NEEDED_MESSAGE, confirmOverwriteMessage: CONFIRM_OVERWRITE_MESSAGE, addDangerToast: addDangerToast, addSuccessToast: addSuccessToast, onModelImport: handleSavedQueryImport, show: importingSavedQuery, onHide: closeSavedQueryImportModal, passwordFields: passwordFields, setPasswordFields: setPasswordFields }),\n  preparingExport && ___EmotionJSX(Loading, null));\n\n}__signature__(SavedQueryList, \"useListViewResource{{ state: { loading, resourceCount: queryCount, resourceCollection: queries, bulkSelectEnabled, }, hasPerm, fetchData, toggleBulkSelect, refreshData, }}\\nuseState{[queryCurrentlyDeleting, setQueryCurrentlyDeleting,](null)}\\nuseState{[savedQueryCurrentlyPreviewing, setSavedQueryCurrentlyPreviewing,](null)}\\nuseState{[importingSavedQuery, showImportModal](false)}\\nuseState{[passwordFields, setPasswordFields]([])}\\nuseState{[preparingExport, setPreparingExport](false)}\\nuseCallback{handleSavedQueryPreview}\\nuseCallback{copyQueryLink}\\nuseMemo{columns}\\nuseMemo{filters}\", () => [useListViewResource]);const _default =\nwithToasts(SavedQueryList);export default _default;;(function () {var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined;if (!reactHotLoader) {return;}reactHotLoader.register(PAGE_SIZE, \"PAGE_SIZE\", \"/app/superset-frontend/src/views/CRUD/data/savedquery/SavedQueryList.tsx\");reactHotLoader.register(PASSWORDS_NEEDED_MESSAGE, \"PASSWORDS_NEEDED_MESSAGE\", \"/app/superset-frontend/src/views/CRUD/data/savedquery/SavedQueryList.tsx\");reactHotLoader.register(CONFIRM_OVERWRITE_MESSAGE, \"CONFIRM_OVERWRITE_MESSAGE\", \"/app/superset-frontend/src/views/CRUD/data/savedquery/SavedQueryList.tsx\");reactHotLoader.register(StyledTableLabel, \"StyledTableLabel\", \"/app/superset-frontend/src/views/CRUD/data/savedquery/SavedQueryList.tsx\");reactHotLoader.register(StyledPopoverItem, \"StyledPopoverItem\", \"/app/superset-frontend/src/views/CRUD/data/savedquery/SavedQueryList.tsx\");reactHotLoader.register(SavedQueryList, \"SavedQueryList\", \"/app/superset-frontend/src/views/CRUD/data/savedquery/SavedQueryList.tsx\");reactHotLoader.register(_default, \"default\", \"/app/superset-frontend/src/views/CRUD/data/savedquery/SavedQueryList.tsx\");})();;(function () {var leaveModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.leaveModule : undefined;leaveModule && leaveModule(module);})();","map":{"version":3,"sources":["/app/superset-frontend/src/views/CRUD/data/savedquery/SavedQueryList.tsx"],"names":[],"mappings":"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","sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport { SupersetClient, t, styled } from '@superset-ui/core';\nimport React, { useState, useMemo, useCallback } from 'react';\nimport rison from 'rison';\nimport moment from 'moment';\nimport {\n  createFetchRelated,\n  createFetchDistinct,\n  createErrorHandler,\n} from 'src/views/CRUD/utils';\nimport Popover from 'src/components/Popover';\nimport withToasts from 'src/messageToasts/enhancers/withToasts';\nimport { useListViewResource } from 'src/views/CRUD/hooks';\nimport ConfirmStatusChange from 'src/components/ConfirmStatusChange';\nimport handleResourceExport from 'src/utils/export';\nimport SubMenu, {\n  SubMenuProps,\n  ButtonProps,\n} from 'src/components/Menu/SubMenu';\nimport ListView, {\n  ListViewProps,\n  Filters,\n  FilterOperator,\n} from 'src/components/ListView';\nimport Loading from 'src/components/Loading';\nimport DeleteModal from 'src/components/DeleteModal';\nimport ActionsBar, { ActionProps } from 'src/components/ListView/ActionsBar';\nimport { Tooltip } from 'src/components/Tooltip';\nimport { commonMenuData } from 'src/views/CRUD/data/common';\nimport { SavedQueryObject } from 'src/views/CRUD/types';\nimport copyTextToClipboard from 'src/utils/copy';\nimport { isFeatureEnabled, FeatureFlag } from 'src/featureFlags';\nimport ImportModelsModal from 'src/components/ImportModal/index';\nimport Icons from 'src/components/Icons';\nimport SavedQueryPreviewModal from './SavedQueryPreviewModal';\n\nconst PAGE_SIZE = 25;\nconst PASSWORDS_NEEDED_MESSAGE = t(\n  'The passwords for the databases below are needed in order to ' +\n    'import them together with the saved queries. Please note that the ' +\n    '\"Secure Extra\" and \"Certificate\" sections of ' +\n    'the database configuration are not present in export files, and ' +\n    'should be added manually after the import if they are needed.',\n);\nconst CONFIRM_OVERWRITE_MESSAGE = t(\n  'You are importing one or more saved queries that already exist. ' +\n    'Overwriting might cause you to lose some of your work. Are you ' +\n    'sure you want to overwrite?',\n);\n\ninterface SavedQueryListProps {\n  addDangerToast: (msg: string) => void;\n  addSuccessToast: (msg: string) => void;\n  user: {\n    userId: string | number;\n  };\n}\n\nconst StyledTableLabel = styled.div`\n  .count {\n    margin-left: 5px;\n    color: ${({ theme }) => theme.colors.primary.base};\n    text-decoration: underline;\n    cursor: pointer;\n  }\n`;\n\nconst StyledPopoverItem = styled.div`\n  color: ${({ theme }) => theme.colors.grayscale.dark2};\n`;\n\nfunction SavedQueryList({\n  addDangerToast,\n  addSuccessToast,\n  user,\n}: SavedQueryListProps) {\n  const {\n    state: {\n      loading,\n      resourceCount: queryCount,\n      resourceCollection: queries,\n      bulkSelectEnabled,\n    },\n    hasPerm,\n    fetchData,\n    toggleBulkSelect,\n    refreshData,\n  } = useListViewResource<SavedQueryObject>(\n    'saved_query',\n    t('Saved queries'),\n    addDangerToast,\n  );\n  const [\n    queryCurrentlyDeleting,\n    setQueryCurrentlyDeleting,\n  ] = useState<SavedQueryObject | null>(null);\n  const [\n    savedQueryCurrentlyPreviewing,\n    setSavedQueryCurrentlyPreviewing,\n  ] = useState<SavedQueryObject | null>(null);\n  const [importingSavedQuery, showImportModal] = useState<boolean>(false);\n  const [passwordFields, setPasswordFields] = useState<string[]>([]);\n  const [preparingExport, setPreparingExport] = useState<boolean>(false);\n\n  const openSavedQueryImportModal = () => {\n    showImportModal(true);\n  };\n\n  const closeSavedQueryImportModal = () => {\n    showImportModal(false);\n  };\n\n  const handleSavedQueryImport = () => {\n    showImportModal(false);\n    refreshData();\n  };\n\n  const canEdit = hasPerm('can_write');\n  const canDelete = hasPerm('can_write');\n  const canExport =\n    hasPerm('can_read') && isFeatureEnabled(FeatureFlag.VERSIONED_EXPORT);\n\n  const openNewQuery = () => {\n    window.open(`${window.location.origin}/superset/sqllab?new=true`);\n  };\n\n  const handleSavedQueryPreview = useCallback(\n    (id: number) => {\n      SupersetClient.get({\n        endpoint: `/api/v1/saved_query/${id}`,\n      }).then(\n        ({ json = {} }) => {\n          setSavedQueryCurrentlyPreviewing({ ...json.result });\n        },\n        createErrorHandler(errMsg =>\n          addDangerToast(\n            t('There was an issue previewing the selected query %s', errMsg),\n          ),\n        ),\n      );\n    },\n    [addDangerToast],\n  );\n\n  const menuData: SubMenuProps = {\n    activeChild: 'Saved queries',\n    ...commonMenuData,\n  };\n\n  const subMenuButtons: Array<ButtonProps> = [];\n\n  if (canDelete) {\n    subMenuButtons.push({\n      name: t('Bulk select'),\n      onClick: toggleBulkSelect,\n      buttonStyle: 'secondary',\n    });\n  }\n\n  subMenuButtons.push({\n    name: (\n      <>\n        <i className=\"fa fa-plus\" /> {t('Query')}\n      </>\n    ),\n    onClick: openNewQuery,\n    buttonStyle: 'primary',\n  });\n\n  if (isFeatureEnabled(FeatureFlag.VERSIONED_EXPORT)) {\n    subMenuButtons.push({\n      name: (\n        <Tooltip\n          id=\"import-tooltip\"\n          title={t('Import queries')}\n          placement=\"bottomRight\"\n          data-test=\"import-tooltip-test\"\n        >\n          <Icons.Import data-test=\"import-icon\" />\n        </Tooltip>\n      ),\n      buttonStyle: 'link',\n      onClick: openSavedQueryImportModal,\n      'data-test': 'import-button',\n    });\n  }\n\n  menuData.buttons = subMenuButtons;\n\n  // Action methods\n  const openInSqlLab = (id: number) => {\n    window.open(`${window.location.origin}/superset/sqllab?savedQueryId=${id}`);\n  };\n\n  const copyQueryLink = useCallback(\n    (id: number) => {\n      copyTextToClipboard(\n        `${window.location.origin}/superset/sqllab?savedQueryId=${id}`,\n      )\n        .then(() => {\n          addSuccessToast(t('Link Copied!'));\n        })\n        .catch(() => {\n          addDangerToast(t('Sorry, your browser does not support copying.'));\n        });\n    },\n    [addDangerToast, addSuccessToast],\n  );\n\n  const handleQueryDelete = ({ id, label }: SavedQueryObject) => {\n    SupersetClient.delete({\n      endpoint: `/api/v1/saved_query/${id}`,\n    }).then(\n      () => {\n        refreshData();\n        setQueryCurrentlyDeleting(null);\n        addSuccessToast(t('Deleted: %s', label));\n      },\n      createErrorHandler(errMsg =>\n        addDangerToast(t('There was an issue deleting %s: %s', label, errMsg)),\n      ),\n    );\n  };\n\n  const handleBulkSavedQueryExport = (\n    savedQueriesToExport: SavedQueryObject[],\n  ) => {\n    const ids = savedQueriesToExport.map(({ id }) => id);\n    handleResourceExport('saved_query', ids, () => {\n      setPreparingExport(false);\n    });\n    setPreparingExport(true);\n  };\n\n  const handleBulkQueryDelete = (queriesToDelete: SavedQueryObject[]) => {\n    SupersetClient.delete({\n      endpoint: `/api/v1/saved_query/?q=${rison.encode(\n        queriesToDelete.map(({ id }) => id),\n      )}`,\n    }).then(\n      ({ json = {} }) => {\n        refreshData();\n        addSuccessToast(json.message);\n      },\n      createErrorHandler(errMsg =>\n        addDangerToast(\n          t('There was an issue deleting the selected queries: %s', errMsg),\n        ),\n      ),\n    );\n  };\n\n  const initialSort = [{ id: 'changed_on_delta_humanized', desc: true }];\n  const columns = useMemo(\n    () => [\n      {\n        accessor: 'label',\n        Header: t('Name'),\n      },\n      {\n        accessor: 'database.database_name',\n        Header: t('Database'),\n        size: 'xl',\n      },\n      {\n        accessor: 'database',\n        hidden: true,\n        disableSortBy: true,\n      },\n      {\n        accessor: 'schema',\n        Header: t('Schema'),\n        size: 'xl',\n      },\n      {\n        Cell: ({\n          row: {\n            original: { sql_tables: tables = [] },\n          },\n        }: any) => {\n          const names = tables.map((table: any) => table.table);\n          const main = names?.shift() || '';\n\n          if (names.length) {\n            return (\n              <StyledTableLabel>\n                <span>{main}</span>\n                <Popover\n                  placement=\"right\"\n                  title={t('TABLES')}\n                  trigger=\"click\"\n                  content={\n                    <>\n                      {names.map((name: string) => (\n                        <StyledPopoverItem key={name}>{name}</StyledPopoverItem>\n                      ))}\n                    </>\n                  }\n                >\n                  <span className=\"count\">(+{names.length})</span>\n                </Popover>\n              </StyledTableLabel>\n            );\n          }\n\n          return main;\n        },\n        accessor: 'sql_tables',\n        Header: t('Tables'),\n        size: 'xl',\n        disableSortBy: true,\n      },\n      {\n        Cell: ({\n          row: {\n            original: { created_on: createdOn },\n          },\n        }: any) => {\n          const date = new Date(createdOn);\n          const utc = new Date(\n            Date.UTC(\n              date.getFullYear(),\n              date.getMonth(),\n              date.getDate(),\n              date.getHours(),\n              date.getMinutes(),\n              date.getSeconds(),\n              date.getMilliseconds(),\n            ),\n          );\n\n          return moment(utc).fromNow();\n        },\n        Header: t('Created on'),\n        accessor: 'created_on',\n        size: 'xl',\n      },\n      {\n        Cell: ({\n          row: {\n            original: { changed_on_delta_humanized: changedOn },\n          },\n        }: any) => changedOn,\n        Header: t('Modified'),\n        accessor: 'changed_on_delta_humanized',\n        size: 'xl',\n      },\n      {\n        Cell: ({ row: { original } }: any) => {\n          const handlePreview = () => {\n            handleSavedQueryPreview(original.id);\n          };\n          const handleEdit = () => openInSqlLab(original.id);\n          const handleCopy = () => copyQueryLink(original.id);\n          const handleExport = () => handleBulkSavedQueryExport([original]);\n          const handleDelete = () => setQueryCurrentlyDeleting(original);\n\n          const actions = [\n            {\n              label: 'preview-action',\n              tooltip: t('Query preview'),\n              placement: 'bottom',\n              icon: 'Binoculars',\n              onClick: handlePreview,\n            },\n            canEdit && {\n              label: 'edit-action',\n              tooltip: t('Edit query'),\n              placement: 'bottom',\n              icon: 'Edit',\n              onClick: handleEdit,\n            },\n            {\n              label: 'copy-action',\n              tooltip: t('Copy query URL'),\n              placement: 'bottom',\n              icon: 'Copy',\n              onClick: handleCopy,\n            },\n            canExport && {\n              label: 'export-action',\n              tooltip: t('Export query'),\n              placement: 'bottom',\n              icon: 'Share',\n              onClick: handleExport,\n            },\n            canDelete && {\n              label: 'delete-action',\n              tooltip: t('Delete query'),\n              placement: 'bottom',\n              icon: 'Trash',\n              onClick: handleDelete,\n            },\n          ].filter(item => !!item);\n\n          return <ActionsBar actions={actions as ActionProps[]} />;\n        },\n        Header: t('Actions'),\n        id: 'actions',\n        disableSortBy: true,\n      },\n    ],\n    [canDelete, canEdit, canExport, copyQueryLink, handleSavedQueryPreview],\n  );\n\n  const filters: Filters = useMemo(\n    () => [\n      {\n        Header: t('Database'),\n        id: 'database',\n        input: 'select',\n        operator: FilterOperator.relationOneMany,\n        unfilteredLabel: 'All',\n        fetchSelects: createFetchRelated(\n          'saved_query',\n          'database',\n          createErrorHandler(errMsg =>\n            addDangerToast(\n              t(\n                'An error occurred while fetching dataset datasource values: %s',\n                errMsg,\n              ),\n            ),\n          ),\n        ),\n        paginate: true,\n      },\n      {\n        Header: t('Schema'),\n        id: 'schema',\n        input: 'select',\n        operator: FilterOperator.equals,\n        unfilteredLabel: 'All',\n        fetchSelects: createFetchDistinct(\n          'saved_query',\n          'schema',\n          createErrorHandler(errMsg =>\n            addDangerToast(\n              t('An error occurred while fetching schema values: %s', errMsg),\n            ),\n          ),\n        ),\n        paginate: true,\n      },\n      {\n        Header: t('Search'),\n        id: 'label',\n        input: 'search',\n        operator: FilterOperator.allText,\n      },\n    ],\n    [addDangerToast],\n  );\n\n  return (\n    <>\n      <SubMenu {...menuData} />\n      {queryCurrentlyDeleting && (\n        <DeleteModal\n          description={t(\n            'This action will permanently delete the saved query.',\n          )}\n          onConfirm={() => {\n            if (queryCurrentlyDeleting) {\n              handleQueryDelete(queryCurrentlyDeleting);\n            }\n          }}\n          onHide={() => setQueryCurrentlyDeleting(null)}\n          open\n          title={t('Delete Query?')}\n        />\n      )}\n      {savedQueryCurrentlyPreviewing && (\n        <SavedQueryPreviewModal\n          fetchData={handleSavedQueryPreview}\n          onHide={() => setSavedQueryCurrentlyPreviewing(null)}\n          savedQuery={savedQueryCurrentlyPreviewing}\n          queries={queries}\n          openInSqlLab={openInSqlLab}\n          show\n        />\n      )}\n      <ConfirmStatusChange\n        title={t('Please confirm')}\n        description={t('Are you sure you want to delete the selected queries?')}\n        onConfirm={handleBulkQueryDelete}\n      >\n        {confirmDelete => {\n          const bulkActions: ListViewProps['bulkActions'] = [];\n          if (canDelete) {\n            bulkActions.push({\n              key: 'delete',\n              name: t('Delete'),\n              onSelect: confirmDelete,\n              type: 'danger',\n            });\n          }\n          if (canExport) {\n            bulkActions.push({\n              key: 'export',\n              name: t('Export'),\n              type: 'primary',\n              onSelect: handleBulkSavedQueryExport,\n            });\n          }\n          return (\n            <ListView<SavedQueryObject>\n              className=\"saved_query-list-view\"\n              columns={columns}\n              count={queryCount}\n              data={queries}\n              fetchData={fetchData}\n              filters={filters}\n              initialSort={initialSort}\n              loading={loading}\n              pageSize={PAGE_SIZE}\n              bulkActions={bulkActions}\n              bulkSelectEnabled={bulkSelectEnabled}\n              disableBulkSelect={toggleBulkSelect}\n              highlightRowId={savedQueryCurrentlyPreviewing?.id}\n            />\n          );\n        }}\n      </ConfirmStatusChange>\n\n      <ImportModelsModal\n        resourceName=\"saved_query\"\n        resourceLabel={t('queries')}\n        passwordsNeededMessage={PASSWORDS_NEEDED_MESSAGE}\n        confirmOverwriteMessage={CONFIRM_OVERWRITE_MESSAGE}\n        addDangerToast={addDangerToast}\n        addSuccessToast={addSuccessToast}\n        onModelImport={handleSavedQueryImport}\n        show={importingSavedQuery}\n        onHide={closeSavedQueryImportModal}\n        passwordFields={passwordFields}\n        setPasswordFields={setPasswordFields}\n      />\n      {preparingExport && <Loading />}\n    </>\n  );\n}\n\nexport default withToasts(SavedQueryList);\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}