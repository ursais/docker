{"ast":null,"code":"import _filterInstanceProperty from \"@babel/runtime-corejs3/core-js-stable/instance/filter\";import _forEachInstanceProperty from \"@babel/runtime-corejs3/core-js-stable/instance/for-each\";(function () {var enterModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.enterModule : undefined;enterModule && enterModule(module);})();var __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default.signature : function (a) {return a;}; /**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { InfoTooltipWithTrigger } from '@superset-ui/chart-controls';\nimport React from 'react';\nimport { Checkbox } from 'src/common/components';\nimport { getChartControlPanelRegistry, styled, t } from '@superset-ui/core';\nimport { Tooltip } from 'src/components/Tooltip';\nimport { FormItem } from 'src/components/Form';\nimport { getControlItems, setNativeFilterFieldValues } from './utils';\nimport { StyledRowFormItem } from './FiltersConfigForm';import { jsx as ___EmotionJSX } from \"@emotion/react\";\nconst CleanFormItem = styled(FormItem)`\n  margin-bottom: 0;\n`;\nexport default function getControlItemsMap({ disabled, forceUpdate, form, filterId, filterType, filterToEdit, formFilter }) {var _getControlItems, _context;\n  const controlPanelRegistry = getChartControlPanelRegistry();\n  const controlItems = (_getControlItems = getControlItems(controlPanelRegistry.get(filterType))) != null ? _getControlItems : [];\n  const map = {};\n  _forEachInstanceProperty(_context = _filterInstanceProperty(controlItems).call(controlItems,\n  controlItem => {var _controlItem$config;return (controlItem == null ? void 0 : (_controlItem$config = controlItem.config) == null ? void 0 : _controlItem$config.renderTrigger) &&\n    controlItem.name !== 'sortAscending';})).call(_context,\n  controlItem => {var _filterToEdit$control, _filterToEdit$control2, _controlItem$config2, _controlItem$config3;\n    const initialValue = (_filterToEdit$control = filterToEdit == null ? void 0 : (_filterToEdit$control2 = filterToEdit.controlValues) == null ? void 0 : _filterToEdit$control2[controlItem.name]) != null ? _filterToEdit$control :\n    controlItem == null ? void 0 : (_controlItem$config2 = controlItem.config) == null ? void 0 : _controlItem$config2.default;\n    const element = ___EmotionJSX(React.Fragment, null,\n    ___EmotionJSX(CleanFormItem, { name: ['filters', filterId, 'requiredFirst', controlItem.name], hidden: true, initialValue: (controlItem == null ? void 0 : (_controlItem$config3 = controlItem.config) == null ? void 0 : _controlItem$config3.requiredFirst) && (filterToEdit == null ? void 0 : filterToEdit.requiredFirst) }),\n    ___EmotionJSX(Tooltip, { key: controlItem.name, placement: \"left\", title: controlItem.config.affectsDataMask &&\n      disabled &&\n      t('Populate \"Default value\" to enable this control') },\n    ___EmotionJSX(StyledRowFormItem, { key: controlItem.name, name: ['filters', filterId, 'controlValues', controlItem.name], initialValue: initialValue, valuePropName: \"checked\", colon: false },\n    ___EmotionJSX(Checkbox, { disabled: controlItem.config.affectsDataMask && disabled, onChange: ({ target: { checked } }) => {\n        if (controlItem.config.requiredFirst) {\n          setNativeFilterFieldValues(form, filterId, {\n            requiredFirst: {\n              ...(formFilter == null ? void 0 : formFilter.requiredFirst),\n              [controlItem.name]: checked } });\n\n\n        }\n        if (controlItem.config.resetConfig) {\n          setNativeFilterFieldValues(form, filterId, {\n            defaultDataMask: null });\n\n        }\n        forceUpdate();\n      } },\n    controlItem.config.label, ' ',\n    controlItem.config.description && ___EmotionJSX(InfoTooltipWithTrigger, { placement: \"top\", label: controlItem.config.name, tooltip: controlItem.config.description })))));\n\n\n\n\n    map[controlItem.name] = { element, checked: initialValue };\n  });\n  return map;\n};(function () {var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined;if (!reactHotLoader) {return;}reactHotLoader.register(CleanFormItem, \"CleanFormItem\", \"/app/superset-frontend/src/dashboard/components/nativeFilters/FiltersConfigModal/FiltersConfigForm/getControlItemsMap.tsx\");reactHotLoader.register(getControlItemsMap, \"getControlItemsMap\", \"/app/superset-frontend/src/dashboard/components/nativeFilters/FiltersConfigModal/FiltersConfigForm/getControlItemsMap.tsx\");})();;(function () {var leaveModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.leaveModule : undefined;leaveModule && leaveModule(module);})();","map":{"version":3,"sources":["/app/superset-frontend/src/dashboard/components/nativeFilters/FiltersConfigModal/FiltersConfigForm/getControlItemsMap.tsx"],"names":[],"mappings":"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","sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport {\n  CustomControlItem,\n  InfoTooltipWithTrigger,\n} from '@superset-ui/chart-controls';\nimport React from 'react';\nimport { Checkbox } from 'src/common/components';\nimport { FormInstance } from 'antd/lib/form';\nimport { getChartControlPanelRegistry, styled, t } from '@superset-ui/core';\nimport { Tooltip } from 'src/components/Tooltip';\nimport { FormItem } from 'src/components/Form';\nimport { getControlItems, setNativeFilterFieldValues } from './utils';\nimport { NativeFiltersForm, NativeFiltersFormItem } from '../types';\nimport { StyledRowFormItem } from './FiltersConfigForm';\nimport { Filter } from '../../types';\n\nexport interface ControlItemsProps {\n  disabled: boolean;\n  forceUpdate: Function;\n  form: FormInstance<NativeFiltersForm>;\n  filterId: string;\n  filterType: string;\n  filterToEdit?: Filter;\n  formFilter?: NativeFiltersFormItem;\n}\n\nconst CleanFormItem = styled(FormItem)`\n  margin-bottom: 0;\n`;\n\nexport default function getControlItemsMap({\n  disabled,\n  forceUpdate,\n  form,\n  filterId,\n  filterType,\n  filterToEdit,\n  formFilter,\n}: ControlItemsProps) {\n  const controlPanelRegistry = getChartControlPanelRegistry();\n  const controlItems =\n    getControlItems(controlPanelRegistry.get(filterType)) ?? [];\n  const map: Record<\n    string,\n    { element: React.ReactNode; checked: boolean }\n  > = {};\n\n  controlItems\n    .filter(\n      (controlItem: CustomControlItem) =>\n        controlItem?.config?.renderTrigger &&\n        controlItem.name !== 'sortAscending',\n    )\n    .forEach(controlItem => {\n      const initialValue =\n        filterToEdit?.controlValues?.[controlItem.name] ??\n        controlItem?.config?.default;\n      const element = (\n        <>\n          <CleanFormItem\n            name={['filters', filterId, 'requiredFirst', controlItem.name]}\n            hidden\n            initialValue={\n              controlItem?.config?.requiredFirst && filterToEdit?.requiredFirst\n            }\n          />\n          <Tooltip\n            key={controlItem.name}\n            placement=\"left\"\n            title={\n              controlItem.config.affectsDataMask &&\n              disabled &&\n              t('Populate \"Default value\" to enable this control')\n            }\n          >\n            <StyledRowFormItem\n              key={controlItem.name}\n              name={['filters', filterId, 'controlValues', controlItem.name]}\n              initialValue={initialValue}\n              valuePropName=\"checked\"\n              colon={false}\n            >\n              <Checkbox\n                disabled={controlItem.config.affectsDataMask && disabled}\n                onChange={({ target: { checked } }) => {\n                  if (controlItem.config.requiredFirst) {\n                    setNativeFilterFieldValues(form, filterId, {\n                      requiredFirst: {\n                        ...formFilter?.requiredFirst,\n                        [controlItem.name]: checked,\n                      },\n                    });\n                  }\n                  if (controlItem.config.resetConfig) {\n                    setNativeFilterFieldValues(form, filterId, {\n                      defaultDataMask: null,\n                    });\n                  }\n                  forceUpdate();\n                }}\n              >\n                {controlItem.config.label}{' '}\n                {controlItem.config.description && (\n                  <InfoTooltipWithTrigger\n                    placement=\"top\"\n                    label={controlItem.config.name}\n                    tooltip={controlItem.config.description}\n                  />\n                )}\n              </Checkbox>\n            </StyledRowFormItem>\n          </Tooltip>\n        </>\n      );\n      map[controlItem.name] = { element, checked: initialValue };\n    });\n  return map;\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}