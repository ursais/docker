{"ast":null,"code":"import _mapInstanceProperty from \"@babel/runtime-corejs3/core-js-stable/instance/map\";import _bindInstanceProperty from \"@babel/runtime-corejs3/core-js-stable/instance/bind\";(function () {var enterModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.enterModule : undefined;enterModule && enterModule(module);})();var __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default.signature : function (a) {return a;}; /**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React from 'react';\nimport cx from 'classnames';import { jsx as ___EmotionJSX } from \"@emotion/react\";\nexport default class WithPopoverMenu extends React.PureComponent {\n  constructor(props) {var _context, _context2;\n    super(props);\n    this.state = {\n      isFocused: props.isFocused };\n\n    this.setRef = _bindInstanceProperty(_context = this.setRef).call(_context, this);\n    this.handleClick = _bindInstanceProperty(_context2 = this.handleClick).call(_context2, this);\n  }\n  UNSAFE_componentWillReceiveProps(nextProps) {\n    if (nextProps.editMode && nextProps.isFocused && !this.state.isFocused) {\n      document.addEventListener('click', this.handleClick);\n      document.addEventListener('drag', this.handleClick);\n      this.setState({ isFocused: true });\n    } else\n    if (this.state.isFocused && !nextProps.editMode) {\n      document.removeEventListener('click', this.handleClick);\n      document.removeEventListener('drag', this.handleClick);\n      this.setState({ isFocused: false });\n    }\n  }\n  componentWillUnmount() {\n    document.removeEventListener('click', this.handleClick);\n    document.removeEventListener('drag', this.handleClick);\n  }\n  setRef(ref) {\n    this.container = ref;\n  }\n  handleClick(event) {\n    if (!this.props.editMode) {\n      return;\n    }\n    const { onChangeFocus, shouldFocus: shouldFocusFunc, disableClick } = this.props;\n    const shouldFocus = shouldFocusFunc(event, this.container);\n    if (!disableClick && shouldFocus && !this.state.isFocused) {\n      // if not focused, set focus and add a window event listener to capture outside clicks\n      // this enables us to not set a click listener for ever item on a dashboard\n      document.addEventListener('click', this.handleClick);\n      document.addEventListener('drag', this.handleClick);\n      this.setState(() => ({ isFocused: true }));\n      if (onChangeFocus) {\n        onChangeFocus(true);\n      }\n    } else\n    if (!shouldFocus && this.state.isFocused) {\n      document.removeEventListener('click', this.handleClick);\n      document.removeEventListener('drag', this.handleClick);\n      this.setState(() => ({ isFocused: false }));\n      if (onChangeFocus) {\n        onChangeFocus(false);\n      }\n    }\n  }\n  render() {var _menuItems$length;\n    const { children, menuItems, editMode, style } = this.props;\n    const { isFocused } = this.state;\n    return ___EmotionJSX(\"div\", { ref: this.setRef, onClick: this.handleClick, role: \"none\", className: cx('with-popover-menu', editMode && isFocused && 'with-popover-menu--focused'), style: style },\n    children,\n    editMode && isFocused && ((_menuItems$length = menuItems == null ? void 0 : menuItems.length) != null ? _menuItems$length : 0) > 0 && ___EmotionJSX(\"div\", { className: \"popover-menu\" },\n    _mapInstanceProperty(menuItems).call(menuItems, (node, i) => ___EmotionJSX(\"div\", { className: \"menu-item\", key: `menu-item-${i}` },\n    node))));\n\n\n\n  } // @ts-ignore\n  __reactstandin__regenerateByEval(key, code) {// @ts-ignore\n    this[key] = eval(code);}}WithPopoverMenu.defaultProps = {\n  children: null,\n  disableClick: false,\n  onChangeFocus: null,\n  menuItems: [],\n  isFocused: false,\n  shouldFocus: (event, container) => {var _event$target$parentN;return (container == null ? void 0 : container.contains(event.target)) ||\n    event.target.id === 'menu-item' ||\n    ((_event$target$parentN = event.target.parentNode) == null ? void 0 : _event$target$parentN.id) === 'menu-item';},\n  style: null };;(function () {var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined;if (!reactHotLoader) {return;}reactHotLoader.register(WithPopoverMenu, \"WithPopoverMenu\", \"/app/superset-frontend/src/dashboard/components/menu/WithPopoverMenu.tsx\");})();;(function () {var leaveModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.leaveModule : undefined;leaveModule && leaveModule(module);})();","map":{"version":3,"sources":["/app/superset-frontend/src/dashboard/components/menu/WithPopoverMenu.tsx"],"names":[],"mappings":"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","sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React from 'react';\nimport cx from 'classnames';\n\ntype ShouldFocusContainer = HTMLDivElement & {\n  contains: (event_target: EventTarget & HTMLElement) => Boolean;\n};\n\ninterface WithPopoverMenuProps {\n  children: React.ReactNode;\n  disableClick: Boolean;\n  menuItems: React.ReactNode[];\n  onChangeFocus: (focus: Boolean) => void;\n  isFocused: Boolean;\n  // Event argument is left as \"any\" because of the clash. In defaultProps it seems\n  // like it should be React.FocusEvent<>, however from handleClick() we can also\n  // derive that type is EventListenerOrEventListenerObject.\n  shouldFocus: (event: any, container: ShouldFocusContainer) => Boolean;\n  editMode: Boolean;\n  style: React.CSSProperties;\n}\n\ninterface WithPopoverMenuState {\n  isFocused: Boolean;\n}\n\nexport default class WithPopoverMenu extends React.PureComponent<\n  WithPopoverMenuProps,\n  WithPopoverMenuState\n> {\n  container: ShouldFocusContainer;\n\n  static defaultProps = {\n    children: null,\n    disableClick: false,\n    onChangeFocus: null,\n    menuItems: [],\n    isFocused: false,\n    shouldFocus: (event: any, container: ShouldFocusContainer) =>\n      container?.contains(event.target) ||\n      event.target.id === 'menu-item' ||\n      event.target.parentNode?.id === 'menu-item',\n    style: null,\n  };\n\n  constructor(props: WithPopoverMenuProps) {\n    super(props);\n    this.state = {\n      isFocused: props.isFocused!,\n    };\n    this.setRef = this.setRef.bind(this);\n    this.handleClick = this.handleClick.bind(this);\n  }\n\n  UNSAFE_componentWillReceiveProps(nextProps: WithPopoverMenuProps) {\n    if (nextProps.editMode && nextProps.isFocused && !this.state.isFocused) {\n      document.addEventListener('click', this.handleClick);\n      document.addEventListener('drag', this.handleClick);\n      this.setState({ isFocused: true });\n    } else if (this.state.isFocused && !nextProps.editMode) {\n      document.removeEventListener('click', this.handleClick);\n      document.removeEventListener('drag', this.handleClick);\n      this.setState({ isFocused: false });\n    }\n  }\n\n  componentWillUnmount() {\n    document.removeEventListener('click', this.handleClick);\n    document.removeEventListener('drag', this.handleClick);\n  }\n\n  setRef(ref: ShouldFocusContainer) {\n    this.container = ref;\n  }\n\n  handleClick(event: any) {\n    if (!this.props.editMode) {\n      return;\n    }\n    const {\n      onChangeFocus,\n      shouldFocus: shouldFocusFunc,\n      disableClick,\n    } = this.props;\n\n    const shouldFocus = shouldFocusFunc(event, this.container);\n\n    if (!disableClick && shouldFocus && !this.state.isFocused) {\n      // if not focused, set focus and add a window event listener to capture outside clicks\n      // this enables us to not set a click listener for ever item on a dashboard\n      document.addEventListener('click', this.handleClick);\n      document.addEventListener('drag', this.handleClick);\n      this.setState(() => ({ isFocused: true }));\n      if (onChangeFocus) {\n        onChangeFocus(true);\n      }\n    } else if (!shouldFocus && this.state.isFocused) {\n      document.removeEventListener('click', this.handleClick);\n      document.removeEventListener('drag', this.handleClick);\n      this.setState(() => ({ isFocused: false }));\n      if (onChangeFocus) {\n        onChangeFocus(false);\n      }\n    }\n  }\n\n  render() {\n    const { children, menuItems, editMode, style } = this.props;\n    const { isFocused } = this.state;\n\n    return (\n      <div\n        ref={this.setRef}\n        onClick={this.handleClick}\n        role=\"none\"\n        className={cx(\n          'with-popover-menu',\n          editMode && isFocused && 'with-popover-menu--focused',\n        )}\n        style={style}\n      >\n        {children}\n        {editMode && isFocused && (menuItems?.length ?? 0) > 0 && (\n          <div className=\"popover-menu\">\n            {menuItems.map((node: React.ReactNode, i: Number) => (\n              <div className=\"menu-item\" key={`menu-item-${i}`}>\n                {node}\n              </div>\n            ))}\n          </div>\n        )}\n      </div>\n    );\n  }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}