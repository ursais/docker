{"ast":null,"code":"import _filterInstanceProperty from \"@babel/runtime-corejs3/core-js-stable/instance/filter\";import _isInteger from \"lodash/isInteger\";(function () {var enterModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.enterModule : undefined;enterModule && enterModule(module);})();var __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default.signature : function (a) {return a;}; /**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React from 'react';\nimport { t } from '@superset-ui/core';\n\nimport { Col, InputNumber, Row } from 'src/common/components';\nimport { DatePicker } from 'src/components/DatePicker';\nimport { Radio } from 'src/components/Radio';\nimport { Select } from 'src/components/Select';\nimport { InfoTooltipWithTrigger } from '@superset-ui/chart-controls';\nimport { SINCE_GRAIN_OPTIONS, SINCE_MODE_OPTIONS, UNTIL_GRAIN_OPTIONS, UNTIL_MODE_OPTIONS, MOMENT_FORMAT, MIDNIGHT, customTimeRangeDecode, customTimeRangeEncode, dttmToMoment } from 'src/explore/components/controls/DateFilterControl/utils';import { jsx as ___EmotionJSX } from \"@emotion/react\";\nexport function CustomFrame(props) {\n  const { customRange, matchedFlag } = customTimeRangeDecode(props.value);\n  if (!matchedFlag) {\n    props.onChange(customTimeRangeEncode(customRange));\n  }\n  const { sinceDatetime, sinceMode, sinceGrain, sinceGrainValue, untilDatetime, untilMode, untilGrain, untilGrainValue, anchorValue, anchorMode } = { ...customRange };\n  function onChange(control, value) {\n    props.onChange(customTimeRangeEncode({\n      ...customRange,\n      [control]: value }));\n\n  }\n  function onGrainValue(control, value) {\n    // only positive values in grainValue controls\n    if (_isInteger(value) && value > 0) {\n      props.onChange(customTimeRangeEncode({\n        ...customRange,\n        [control]: value }));\n\n    }\n  }\n  function onAnchorMode(option) {\n    const radioValue = option.target.value;\n    if (radioValue === 'now') {\n      props.onChange(customTimeRangeEncode({\n        ...customRange,\n        anchorValue: 'now',\n        anchorMode: radioValue }));\n\n    } else\n    {\n      props.onChange(customTimeRangeEncode({\n        ...customRange,\n        anchorValue: MIDNIGHT,\n        anchorMode: radioValue }));\n\n    }\n  }\n  return ___EmotionJSX(\"div\", { \"data-test\": \"custom-frame\" },\n  ___EmotionJSX(\"div\", { className: \"section-title\" }, t('Configure custom time range')),\n  ___EmotionJSX(Row, { gutter: 24 },\n  ___EmotionJSX(Col, { span: 12 },\n  ___EmotionJSX(\"div\", { className: \"control-label\" },\n  t('START (INCLUSIVE)'), ' ',\n  ___EmotionJSX(InfoTooltipWithTrigger, { tooltip: t('Start date included in time range'), placement: \"right\" })),\n\n  ___EmotionJSX(Select, { options: SINCE_MODE_OPTIONS, value: _filterInstanceProperty(SINCE_MODE_OPTIONS).call(SINCE_MODE_OPTIONS, option => option.value === sinceMode), onChange: option => onChange('sinceMode', option.value) }),\n  sinceMode === 'specific' && ___EmotionJSX(Row, null,\n  ___EmotionJSX(DatePicker, { showTime: true, defaultValue: dttmToMoment(sinceDatetime), onChange: datetime => onChange('sinceDatetime', datetime.format(MOMENT_FORMAT)), allowClear: false })),\n\n  sinceMode === 'relative' && ___EmotionJSX(Row, { gutter: 8 },\n  ___EmotionJSX(Col, { span: 11 },\n\n  ___EmotionJSX(InputNumber, { placeholder: t('Relative quantity'), value: Math.abs(sinceGrainValue), min: 1, defaultValue: 1, onChange: value => onGrainValue('sinceGrainValue', value || 1), onStep: value => onGrainValue('sinceGrainValue', value || 1) })),\n\n  ___EmotionJSX(Col, { span: 13 },\n  ___EmotionJSX(Select, { options: SINCE_GRAIN_OPTIONS, value: _filterInstanceProperty(SINCE_GRAIN_OPTIONS).call(SINCE_GRAIN_OPTIONS, option => option.value === sinceGrain), onChange: option => onChange('sinceGrain', option.value) })))),\n\n\n\n  ___EmotionJSX(Col, { span: 12 },\n  ___EmotionJSX(\"div\", { className: \"control-label\" },\n  t('END (EXCLUSIVE)'), ' ',\n  ___EmotionJSX(InfoTooltipWithTrigger, { tooltip: t('End date excluded from time range'), placement: \"right\" })),\n\n  ___EmotionJSX(Select, { options: UNTIL_MODE_OPTIONS, value: _filterInstanceProperty(UNTIL_MODE_OPTIONS).call(UNTIL_MODE_OPTIONS, option => option.value === untilMode), onChange: option => onChange('untilMode', option.value) }),\n  untilMode === 'specific' && ___EmotionJSX(Row, null,\n  ___EmotionJSX(DatePicker, { showTime: true, defaultValue: dttmToMoment(untilDatetime), onChange: datetime => onChange('untilDatetime', datetime.format(MOMENT_FORMAT)), allowClear: false })),\n\n  untilMode === 'relative' && ___EmotionJSX(Row, { gutter: 8 },\n  ___EmotionJSX(Col, { span: 11 },\n  ___EmotionJSX(InputNumber, { placeholder: t('Relative quantity'), value: untilGrainValue, min: 1, defaultValue: 1, onChange: value => onGrainValue('untilGrainValue', value || 1), onStep: value => onGrainValue('untilGrainValue', value || 1) })),\n\n  ___EmotionJSX(Col, { span: 13 },\n  ___EmotionJSX(Select, { options: UNTIL_GRAIN_OPTIONS, value: _filterInstanceProperty(UNTIL_GRAIN_OPTIONS).call(UNTIL_GRAIN_OPTIONS, option => option.value === untilGrain), onChange: option => onChange('untilGrain', option.value) }))))),\n\n\n\n\n  sinceMode === 'relative' && untilMode === 'relative' && ___EmotionJSX(\"div\", { className: \"control-anchor-to\" },\n  ___EmotionJSX(\"div\", { className: \"control-label\" }, t('Anchor to')),\n  ___EmotionJSX(Row, { align: \"middle\" },\n  ___EmotionJSX(Col, null,\n  ___EmotionJSX(Radio.Group, { onChange: onAnchorMode, defaultValue: \"now\", value: anchorMode },\n  ___EmotionJSX(Radio, { key: \"now\", value: \"now\" },\n  t('NOW')),\n\n  ___EmotionJSX(Radio, { key: \"specific\", value: \"specific\" },\n  t('Date/Time')))),\n\n\n\n  anchorMode !== 'now' && ___EmotionJSX(Col, null,\n  ___EmotionJSX(DatePicker, { showTime: true, defaultValue: dttmToMoment(anchorValue), onChange: datetime => onChange('anchorValue', datetime.format(MOMENT_FORMAT)), allowClear: false, className: \"control-anchor-to-datetime\" })))));\n\n\n\n\n};(function () {var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined;if (!reactHotLoader) {return;}reactHotLoader.register(CustomFrame, \"CustomFrame\", \"/app/superset-frontend/src/explore/components/controls/DateFilterControl/components/CustomFrame.tsx\");})();;(function () {var leaveModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.leaveModule : undefined;leaveModule && leaveModule(module);})();","map":{"version":3,"sources":["/app/superset-frontend/src/explore/components/controls/DateFilterControl/components/CustomFrame.tsx"],"names":[],"mappings":"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","sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React from 'react';\nimport { t } from '@superset-ui/core';\nimport { Moment } from 'moment';\nimport { isInteger } from 'lodash';\nimport { Col, InputNumber, Row } from 'src/common/components';\nimport { DatePicker } from 'src/components/DatePicker';\nimport { Radio } from 'src/components/Radio';\nimport { Select } from 'src/components/Select';\nimport { InfoTooltipWithTrigger } from '@superset-ui/chart-controls';\nimport {\n  SINCE_GRAIN_OPTIONS,\n  SINCE_MODE_OPTIONS,\n  UNTIL_GRAIN_OPTIONS,\n  UNTIL_MODE_OPTIONS,\n  MOMENT_FORMAT,\n  MIDNIGHT,\n  customTimeRangeDecode,\n  customTimeRangeEncode,\n  dttmToMoment,\n} from 'src/explore/components/controls/DateFilterControl/utils';\nimport {\n  CustomRangeKey,\n  SelectOptionType,\n  FrameComponentProps,\n} from 'src/explore/components/controls/DateFilterControl/types';\n\nexport function CustomFrame(props: FrameComponentProps) {\n  const { customRange, matchedFlag } = customTimeRangeDecode(props.value);\n  if (!matchedFlag) {\n    props.onChange(customTimeRangeEncode(customRange));\n  }\n  const {\n    sinceDatetime,\n    sinceMode,\n    sinceGrain,\n    sinceGrainValue,\n    untilDatetime,\n    untilMode,\n    untilGrain,\n    untilGrainValue,\n    anchorValue,\n    anchorMode,\n  } = { ...customRange };\n\n  function onChange(control: CustomRangeKey, value: string) {\n    props.onChange(\n      customTimeRangeEncode({\n        ...customRange,\n        [control]: value,\n      }),\n    );\n  }\n\n  function onGrainValue(\n    control: 'sinceGrainValue' | 'untilGrainValue',\n    value: string | number,\n  ) {\n    // only positive values in grainValue controls\n    if (isInteger(value) && value > 0) {\n      props.onChange(\n        customTimeRangeEncode({\n          ...customRange,\n          [control]: value,\n        }),\n      );\n    }\n  }\n\n  function onAnchorMode(option: any) {\n    const radioValue = option.target.value;\n    if (radioValue === 'now') {\n      props.onChange(\n        customTimeRangeEncode({\n          ...customRange,\n          anchorValue: 'now',\n          anchorMode: radioValue,\n        }),\n      );\n    } else {\n      props.onChange(\n        customTimeRangeEncode({\n          ...customRange,\n          anchorValue: MIDNIGHT,\n          anchorMode: radioValue,\n        }),\n      );\n    }\n  }\n\n  return (\n    <div data-test=\"custom-frame\">\n      <div className=\"section-title\">{t('Configure custom time range')}</div>\n      <Row gutter={24}>\n        <Col span={12}>\n          <div className=\"control-label\">\n            {t('START (INCLUSIVE)')}{' '}\n            <InfoTooltipWithTrigger\n              tooltip={t('Start date included in time range')}\n              placement=\"right\"\n            />\n          </div>\n          <Select\n            options={SINCE_MODE_OPTIONS}\n            value={SINCE_MODE_OPTIONS.filter(\n              option => option.value === sinceMode,\n            )}\n            onChange={(option: SelectOptionType) =>\n              onChange('sinceMode', option.value)\n            }\n          />\n          {sinceMode === 'specific' && (\n            <Row>\n              <DatePicker\n                showTime\n                defaultValue={dttmToMoment(sinceDatetime)}\n                onChange={(datetime: Moment) =>\n                  onChange('sinceDatetime', datetime.format(MOMENT_FORMAT))\n                }\n                allowClear={false}\n              />\n            </Row>\n          )}\n          {sinceMode === 'relative' && (\n            <Row gutter={8}>\n              <Col span={11}>\n                {/* Make sure sinceGrainValue looks like a positive integer */}\n                <InputNumber\n                  placeholder={t('Relative quantity')}\n                  value={Math.abs(sinceGrainValue)}\n                  min={1}\n                  defaultValue={1}\n                  onChange={value =>\n                    onGrainValue('sinceGrainValue', value || 1)\n                  }\n                  onStep={value => onGrainValue('sinceGrainValue', value || 1)}\n                />\n              </Col>\n              <Col span={13}>\n                <Select\n                  options={SINCE_GRAIN_OPTIONS}\n                  value={SINCE_GRAIN_OPTIONS.filter(\n                    option => option.value === sinceGrain,\n                  )}\n                  onChange={(option: SelectOptionType) =>\n                    onChange('sinceGrain', option.value)\n                  }\n                />\n              </Col>\n            </Row>\n          )}\n        </Col>\n        <Col span={12}>\n          <div className=\"control-label\">\n            {t('END (EXCLUSIVE)')}{' '}\n            <InfoTooltipWithTrigger\n              tooltip={t('End date excluded from time range')}\n              placement=\"right\"\n            />\n          </div>\n          <Select\n            options={UNTIL_MODE_OPTIONS}\n            value={UNTIL_MODE_OPTIONS.filter(\n              option => option.value === untilMode,\n            )}\n            onChange={(option: SelectOptionType) =>\n              onChange('untilMode', option.value)\n            }\n          />\n          {untilMode === 'specific' && (\n            <Row>\n              <DatePicker\n                showTime\n                defaultValue={dttmToMoment(untilDatetime)}\n                onChange={(datetime: Moment) =>\n                  onChange('untilDatetime', datetime.format(MOMENT_FORMAT))\n                }\n                allowClear={false}\n              />\n            </Row>\n          )}\n          {untilMode === 'relative' && (\n            <Row gutter={8}>\n              <Col span={11}>\n                <InputNumber\n                  placeholder={t('Relative quantity')}\n                  value={untilGrainValue}\n                  min={1}\n                  defaultValue={1}\n                  onChange={value =>\n                    onGrainValue('untilGrainValue', value || 1)\n                  }\n                  onStep={value => onGrainValue('untilGrainValue', value || 1)}\n                />\n              </Col>\n              <Col span={13}>\n                <Select\n                  options={UNTIL_GRAIN_OPTIONS}\n                  value={UNTIL_GRAIN_OPTIONS.filter(\n                    option => option.value === untilGrain,\n                  )}\n                  onChange={(option: SelectOptionType) =>\n                    onChange('untilGrain', option.value)\n                  }\n                />\n              </Col>\n            </Row>\n          )}\n        </Col>\n      </Row>\n      {sinceMode === 'relative' && untilMode === 'relative' && (\n        <div className=\"control-anchor-to\">\n          <div className=\"control-label\">{t('Anchor to')}</div>\n          <Row align=\"middle\">\n            <Col>\n              <Radio.Group\n                onChange={onAnchorMode}\n                defaultValue=\"now\"\n                value={anchorMode}\n              >\n                <Radio key=\"now\" value=\"now\">\n                  {t('NOW')}\n                </Radio>\n                <Radio key=\"specific\" value=\"specific\">\n                  {t('Date/Time')}\n                </Radio>\n              </Radio.Group>\n            </Col>\n            {anchorMode !== 'now' && (\n              <Col>\n                <DatePicker\n                  showTime\n                  defaultValue={dttmToMoment(anchorValue)}\n                  onChange={(datetime: Moment) =>\n                    onChange('anchorValue', datetime.format(MOMENT_FORMAT))\n                  }\n                  allowClear={false}\n                  className=\"control-anchor-to-datetime\"\n                />\n              </Col>\n            )}\n          </Row>\n        </div>\n      )}\n    </div>\n  );\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}