{"ast":null,"code":"import \"core-js/modules/web.dom-collections.iterator.js\";import _mapInstanceProperty from \"@babel/runtime-corejs3/core-js-stable/instance/map\";import _forEachInstanceProperty from \"@babel/runtime-corejs3/core-js-stable/instance/for-each\";import _spliceInstanceProperty from \"@babel/runtime-corejs3/core-js-stable/instance/splice\";import _sliceInstanceProperty from \"@babel/runtime-corejs3/core-js-stable/instance/slice\";(function () {var enterModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.enterModule : undefined;enterModule && enterModule(module);})();var __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default.signature : function (a) {return a;}; /**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React, { useState, useEffect } from 'react';\nimport { styled, t, SupersetClient } from '@superset-ui/core';\nimport rison from 'rison';\nimport { useSingleViewResource } from 'src/views/CRUD/hooks';\nimport Icon from 'src/components/Icon';\nimport { Switch } from 'src/components/Switch';\nimport Modal from 'src/components/Modal';\nimport { Radio } from 'src/components/Radio';\nimport { AsyncSelect, NativeGraySelect as Select } from 'src/components/Select';\nimport { FeatureFlag, isFeatureEnabled } from 'src/featureFlags';\nimport withToasts from 'src/messageToasts/enhancers/withToasts';\nimport TextAreaControl from 'src/explore/components/controls/TextAreaControl';\nimport { AlertReportCronScheduler } from './components/AlertReportCronScheduler';\nimport { NotificationMethod } from './components/NotificationMethod';import { jsx as ___EmotionJSX } from \"@emotion/react\";\nconst SELECT_PAGE_SIZE = 2000; // temporary fix for paginated query\nconst TIMEOUT_MIN = 1;\nconst NOTIFICATION_METHODS = ['Email', 'Slack'];\nconst DEFAULT_NOTIFICATION_FORMAT = 'PNG';\nconst CONDITIONS = [\n{\n  label: t('< (Smaller than)'),\n  value: '<' },\n\n{\n  label: t('> (Larger than)'),\n  value: '>' },\n\n{\n  label: t('<= (Smaller or equal)'),\n  value: '<=' },\n\n{\n  label: t('>= (Larger or equal)'),\n  value: '>=' },\n\n{\n  label: t('== (Is equal)'),\n  value: '==' },\n\n{\n  label: t('!= (Is not equal)'),\n  value: '!=' },\n\n{\n  label: t('Not null'),\n  value: 'not null' }];\n\n\nconst RETENTION_OPTIONS = [\n{\n  label: t('None'),\n  value: 0 },\n\n{\n  label: t('30 days'),\n  value: 30 },\n\n{\n  label: t('60 days'),\n  value: 60 },\n\n{\n  label: t('90 days'),\n  value: 90 }];\n\n\nconst DEFAULT_RETENTION = 90;\nconst DEFAULT_WORKING_TIMEOUT = 3600;\nconst DEFAULT_CRON_VALUE = '0 * * * *'; // every hour\nconst DEFAULT_ALERT = {\n  active: true,\n  crontab: DEFAULT_CRON_VALUE,\n  log_retention: DEFAULT_RETENTION,\n  working_timeout: DEFAULT_WORKING_TIMEOUT,\n  name: '',\n  owners: [],\n  recipients: [],\n  sql: '',\n  validator_config_json: {},\n  validator_type: '',\n  grace_period: undefined };\n\nconst StyledModal = styled(Modal)`\n  .ant-modal-body {\n    overflow: initial;\n  }\n`;\nconst StyledIcon = styled(Icon)`\n  margin: auto ${({ theme }) => theme.gridUnit * 2}px auto 0;\n`;\nconst StyledSectionContainer = styled.div`\n  display: flex;\n  min-width: 1000px;\n  flex-direction: column;\n\n  .header-section {\n    display: flex;\n    flex: 0 0 auto;\n    align-items: center;\n    width: 100%;\n    padding: ${({ theme }) => theme.gridUnit * 4}px;\n    border-bottom: 1px solid ${({ theme }) => theme.colors.grayscale.light2};\n  }\n\n  .column-section {\n    display: flex;\n    flex: 1 1 auto;\n\n    .column {\n      flex: 1 1 auto;\n      min-width: calc(33.33% - ${({ theme }) => theme.gridUnit * 8}px);\n      padding: ${({ theme }) => theme.gridUnit * 4}px;\n\n      .async-select {\n        margin: 10px 0 20px;\n      }\n\n      &.condition {\n        border-right: 1px solid ${({ theme }) => theme.colors.grayscale.light2};\n      }\n\n      &.message {\n        border-left: 1px solid ${({ theme }) => theme.colors.grayscale.light2};\n      }\n    }\n  }\n\n  .inline-container {\n    display: flex;\n    flex-direction: row;\n    align-items: center;\n    &.wrap {\n      flex-wrap: wrap;\n    }\n\n    > div {\n      flex: 1 1 auto;\n    }\n\n    &.add-margin {\n      margin-bottom: 5px;\n    }\n\n    .styled-input {\n      margin: 0 0 0 10px;\n\n      input {\n        flex: 0 0 auto;\n      }\n    }\n  }\n\n  .hide-dropdown {\n    display: none;\n  }\n`;\nconst StyledSectionTitle = styled.div`\n  display: flex;\n  align-items: center;\n  margin: ${({ theme }) => theme.gridUnit * 2}px auto\n    ${({ theme }) => theme.gridUnit * 4}px auto;\n\n  h4 {\n    margin: 0;\n  }\n\n  .required {\n    margin-left: ${({ theme }) => theme.gridUnit}px;\n    color: ${({ theme }) => theme.colors.error.base};\n  }\n`;\nconst StyledSwitchContainer = styled.div`\n  display: flex;\n  align-items: center;\n  margin-top: 10px;\n\n  .switch-label {\n    margin-left: 10px;\n  }\n`;\nexport const StyledInputContainer = styled.div`\n  flex: 1 1 auto;\n  margin: ${({ theme }) => theme.gridUnit * 2}px;\n  margin-top: 0;\n\n  .helper {\n    display: block;\n    color: ${({ theme }) => theme.colors.grayscale.base};\n    font-size: ${({ theme }) => theme.typography.sizes.s - 1}px;\n    padding: ${({ theme }) => theme.gridUnit}px 0;\n    text-align: left;\n  }\n\n  .required {\n    margin-left: ${({ theme }) => theme.gridUnit / 2}px;\n    color: ${({ theme }) => theme.colors.error.base};\n  }\n\n  .input-container {\n    display: flex;\n    align-items: center;\n\n    > div {\n      width: 100%;\n    }\n\n    label {\n      display: flex;\n      margin-right: ${({ theme }) => theme.gridUnit * 2}px;\n    }\n\n    i {\n      margin: 0 ${({ theme }) => theme.gridUnit}px;\n    }\n  }\n\n  input,\n  textarea,\n  .Select,\n  .ant-select {\n    flex: 1 1 auto;\n  }\n\n  input[disabled] {\n    color: ${({ theme }) => theme.colors.grayscale.base};\n  }\n\n  textarea {\n    height: 300px;\n    resize: none;\n  }\n\n  input::placeholder,\n  textarea::placeholder,\n  .Select__placeholder {\n    color: ${({ theme }) => theme.colors.grayscale.light1};\n  }\n\n  textarea,\n  input[type='text'],\n  input[type='number'],\n  .Select__control,\n  .ant-select-single .ant-select-selector {\n    padding: ${({ theme }) => theme.gridUnit * 1.5}px\n      ${({ theme }) => theme.gridUnit * 2}px;\n    border-style: none;\n    border: 1px solid ${({ theme }) => theme.colors.grayscale.light2};\n    border-radius: ${({ theme }) => theme.gridUnit}px;\n\n    .ant-select-selection-placeholder,\n    .ant-select-selection-item {\n      line-height: 24px;\n    }\n\n    &[name='description'] {\n      flex: 1 1 auto;\n    }\n  }\n\n  .Select__control {\n    padding: 2px 0;\n  }\n\n  .input-label {\n    margin-left: 10px;\n  }\n`;\nconst StyledRadio = styled(Radio)`\n  display: block;\n  line-height: ${({ theme }) => theme.gridUnit * 7}px;\n`;\nconst StyledRadioGroup = styled(Radio.Group)`\n  margin-left: ${({ theme }) => theme.gridUnit * 5.5}px;\n`;\n// Notification Method components\nconst StyledNotificationAddButton = styled.div`\n  color: ${({ theme }) => theme.colors.primary.dark1};\n  cursor: pointer;\n\n  i {\n    margin-right: ${({ theme }) => theme.gridUnit * 2}px;\n  }\n\n  &.disabled {\n    color: ${({ theme }) => theme.colors.grayscale.light1};\n    cursor: default;\n  }\n`;\nconst NotificationMethodAdd = ({ status = 'active', onClick }) => {\n  if (status === 'hidden') {\n    return null;\n  }\n  const checkStatus = () => {\n    if (status !== 'disabled') {\n      onClick();\n    }\n  };\n  return ___EmotionJSX(StyledNotificationAddButton, { className: status, onClick: checkStatus },\n  ___EmotionJSX(\"i\", { className: \"fa fa-plus\" }), ' ',\n  status === 'active' ?\n  t('Add notification method') :\n  t('Add delivery method'));\n\n};\nconst AlertReportModal = ({ addDangerToast, onAdd, onHide, show, alert = null, isReport = false }) => {var _currentAlert$validat5, _currentAlert$validat6;\n  const [disableSave, setDisableSave] = useState(true);\n  const [currentAlert, setCurrentAlert] = useState();\n  const [isHidden, setIsHidden] = useState(true);\n  const [contentType, setContentType] = useState('dashboard');\n  const [reportFormat, setReportFormat] = useState(DEFAULT_NOTIFICATION_FORMAT);\n  // Dropdown options\n  const [conditionNotNull, setConditionNotNull] = useState(false);\n  const [sourceOptions, setSourceOptions] = useState([]);\n  const [dashboardOptions, setDashboardOptions] = useState([]);\n  const [chartOptions, setChartOptions] = useState([]);\n  const isEditMode = alert !== null;\n  const formatOptionEnabled = contentType === 'chart' && (\n  isFeatureEnabled(FeatureFlag.ALERTS_ATTACH_REPORTS) || isReport);\n  const [notificationAddState, setNotificationAddState] = useState('active');\n  const [notificationSettings, setNotificationSettings] = useState([]);\n  const onNotificationAdd = () => {\n    const settings = _sliceInstanceProperty(notificationSettings).call(notificationSettings);\n    settings.push({\n      recipients: '',\n      options: NOTIFICATION_METHODS });\n\n    setNotificationSettings(settings);\n    setNotificationAddState(settings.length === NOTIFICATION_METHODS.length ? 'hidden' : 'disabled');\n  };\n  const updateNotificationSetting = (index, setting) => {\n    const settings = _sliceInstanceProperty(notificationSettings).call(notificationSettings);\n    settings[index] = setting;\n    setNotificationSettings(settings);\n    if (setting.method !== undefined && notificationAddState !== 'hidden') {\n      setNotificationAddState('active');\n    }\n  };\n  const removeNotificationSetting = index => {\n    const settings = _sliceInstanceProperty(notificationSettings).call(notificationSettings);\n    _spliceInstanceProperty(settings).call(settings, index, 1);\n    setNotificationSettings(settings);\n    setNotificationAddState('active');\n  };\n  // Alert fetch logic\n  const { state: { loading, resource, error: fetchError }, fetchResource, createResource, updateResource, clearError } = useSingleViewResource('report', t('report'), addDangerToast);\n  // Functions\n  const hide = () => {\n    clearError();\n    setIsHidden(true);\n    onHide();\n    setNotificationSettings([]);\n    setCurrentAlert({ ...DEFAULT_ALERT });\n    setNotificationAddState('active');\n  };\n  const onSave = () => {var _currentAlert$chart, _currentAlert$dashboa, _currentAlert$databas, _context;\n    // Notification Settings\n    const recipients = [];\n    _forEachInstanceProperty(notificationSettings).call(notificationSettings, setting => {\n      if (setting.method && setting.recipients.length) {\n        recipients.push({\n          recipient_config_json: {\n            target: setting.recipients },\n\n          type: setting.method });\n\n      }\n    });\n    const data = {\n      ...currentAlert,\n      type: isReport ? 'Report' : 'Alert',\n      validator_type: conditionNotNull ? 'not null' : 'operator',\n      validator_config_json: conditionNotNull ?\n      {} :\n      currentAlert == null ? void 0 : currentAlert.validator_config_json,\n      chart: contentType === 'chart' ? currentAlert == null ? void 0 : (_currentAlert$chart = currentAlert.chart) == null ? void 0 : _currentAlert$chart.value : null,\n      dashboard: contentType === 'dashboard' ? currentAlert == null ? void 0 : (_currentAlert$dashboa = currentAlert.dashboard) == null ? void 0 : _currentAlert$dashboa.value : null,\n      database: currentAlert == null ? void 0 : (_currentAlert$databas = currentAlert.database) == null ? void 0 : _currentAlert$databas.value,\n      owners: _mapInstanceProperty(_context = (currentAlert == null ? void 0 : currentAlert.owners) || []).call(_context, owner => owner.value),\n      recipients,\n      report_format: contentType === 'dashboard' ?\n      DEFAULT_NOTIFICATION_FORMAT :\n      reportFormat || DEFAULT_NOTIFICATION_FORMAT };\n\n    if (data.recipients && !data.recipients.length) {\n      delete data.recipients;\n    }\n    data.context_markdown = 'string';\n    if (isEditMode) {\n      // Edit\n      if (currentAlert && currentAlert.id) {\n        const update_id = currentAlert.id;\n        delete data.id;\n        delete data.created_by;\n        delete data.last_eval_dttm;\n        delete data.last_state;\n        delete data.last_value;\n        delete data.last_value_row_json;\n        updateResource(update_id, data).then(response => {\n          if (!response) {\n            return;\n          }\n          if (onAdd) {\n            onAdd();\n          }\n          hide();\n        });\n      }\n    } else\n    if (currentAlert) {\n      // Create\n      createResource(data).then(response => {\n        if (!response) {\n          return;\n        }\n        if (onAdd) {\n          onAdd(response);\n        }\n        hide();\n      });\n    }\n  };\n  // Fetch data to populate form dropdowns\n  const loadOwnerOptions = (input = '') => {\n    const query = rison.encode({ filter: input, page_size: SELECT_PAGE_SIZE });\n    return SupersetClient.get({\n      endpoint: `/api/v1/report/related/owners?q=${query}` }).\n    then(response => {var _context2;return _mapInstanceProperty(_context2 = response.json.result).call(_context2, item => ({\n        value: item.value,\n        label: item.text }));},\n    badResponse => []);\n  };\n  const loadSourceOptions = (input = '') => {\n    const query = rison.encode({ filter: input, page_size: SELECT_PAGE_SIZE });\n    return SupersetClient.get({\n      endpoint: `/api/v1/report/related/database?q=${query}` }).\n    then(response => {var _context3;\n      const list = _mapInstanceProperty(_context3 = response.json.result).call(_context3, item => ({\n        value: item.value,\n        label: item.text }));\n\n      setSourceOptions(list);\n      // Find source if current alert has one set\n      if (currentAlert &&\n      currentAlert.database &&\n      !currentAlert.database.label) {\n        updateAlertState('database', getSourceData());\n      }\n      return list;\n    }, badResponse => []);\n  };\n  const getSourceData = db => {\n    const database = db || (currentAlert == null ? void 0 : currentAlert.database);\n    if (!database || database.label) {\n      return null;\n    }\n    let result;\n    // Cycle through source options to find the selected option\n    _forEachInstanceProperty(sourceOptions).call(sourceOptions, source => {\n      if (source.value === database.value || source.value === database.id) {\n        result = source;\n      }\n    });\n    return result;\n  };\n  const loadDashboardOptions = (input = '') => {\n    const query = rison.encode({ filter: input, page_size: SELECT_PAGE_SIZE });\n    return SupersetClient.get({\n      endpoint: `/api/v1/report/related/dashboard?q=${query}` }).\n    then(response => {var _context4;\n      const list = _mapInstanceProperty(_context4 = response.json.result).call(_context4, item => ({\n        value: item.value,\n        label: item.text }));\n\n      setDashboardOptions(list);\n      // Find source if current alert has one set\n      if (currentAlert &&\n      currentAlert.dashboard &&\n      !currentAlert.dashboard.label) {\n        updateAlertState('dashboard', getDashboardData());\n      }\n      return list;\n    }, badResponse => []);\n  };\n  const getDashboardData = db => {\n    const dashboard = db || (currentAlert == null ? void 0 : currentAlert.dashboard);\n    if (!dashboard || dashboard.label) {\n      return null;\n    }\n    let result;\n    // Cycle through dashboard options to find the selected option\n    _forEachInstanceProperty(dashboardOptions).call(dashboardOptions, dash => {\n      if (dash.value === dashboard.value || dash.value === dashboard.id) {\n        result = dash;\n      }\n    });\n    return result;\n  };\n  const loadChartOptions = (input = '') => {\n    const query = rison.encode({ filter: input, page_size: SELECT_PAGE_SIZE });\n    return SupersetClient.get({\n      endpoint: `/api/v1/report/related/chart?q=${query}` }).\n    then(response => {var _context5;\n      const list = _mapInstanceProperty(_context5 = response.json.result).call(_context5, item => ({\n        value: item.value,\n        label: item.text }));\n\n      setChartOptions(list);\n      // Find source if current alert has one set\n      if (currentAlert && currentAlert.chart && !currentAlert.chart.label) {\n        updateAlertState('chart', getChartData());\n      }\n      return list;\n    }, badResponse => []);\n  };\n  const getChartData = chartData => {\n    const chart = chartData || (currentAlert == null ? void 0 : currentAlert.chart);\n    if (!chart || chart.label) {\n      return null;\n    }\n    let result;\n    // Cycle through chart options to find the selected option\n    _forEachInstanceProperty(chartOptions).call(chartOptions, slice => {\n      if (slice.value === chart.value || slice.value === chart.id) {\n        result = slice;\n      }\n    });\n    return result;\n  };\n  // Updating alert/report state\n  const updateAlertState = (name, value) => {\n    setCurrentAlert(currentAlertData => ({\n      ...currentAlertData,\n      [name]: value }));\n\n  };\n  // Handle input/textarea updates\n  const onTextChange = event => {\n    const { target } = event;\n    updateAlertState(target.name, target.value);\n  };\n  const onTimeoutVerifyChange = event => {\n    const { target } = event;\n    const value = +target.value;\n    // Need to make sure grace period is not lower than TIMEOUT_MIN\n    if (value === 0) {\n      updateAlertState(target.name, null);\n    } else\n    {\n      updateAlertState(target.name, value ? Math.max(value, TIMEOUT_MIN) : value);\n    }\n  };\n  const onSQLChange = value => {\n    updateAlertState('sql', value || '');\n  };\n  const onOwnersChange = value => {\n    updateAlertState('owners', value || []);\n  };\n  const onSourceChange = value => {\n    updateAlertState('database', value || []);\n  };\n  const onDashboardChange = dashboard => {\n    updateAlertState('dashboard', dashboard || undefined);\n    updateAlertState('chart', null);\n  };\n  const onChartChange = chart => {\n    updateAlertState('chart', chart || undefined);\n    updateAlertState('dashboard', null);\n  };\n  const onActiveSwitch = checked => {\n    updateAlertState('active', checked);\n  };\n  const onConditionChange = op => {var _currentAlert$validat;\n    setConditionNotNull(op === 'not null');\n    const config = {\n      op,\n      threshold: currentAlert ? (_currentAlert$validat =\n      currentAlert.validator_config_json) == null ? void 0 : _currentAlert$validat.threshold :\n      undefined };\n\n    updateAlertState('validator_config_json', config);\n  };\n  const onThresholdChange = event => {var _currentAlert$validat2;\n    const { target } = event;\n    const config = {\n      op: currentAlert ? (_currentAlert$validat2 = currentAlert.validator_config_json) == null ? void 0 : _currentAlert$validat2.op : undefined,\n      threshold: target.value };\n\n    updateAlertState('validator_config_json', config);\n  };\n  const onLogRetentionChange = retention => {\n    updateAlertState('log_retention', retention);\n  };\n  const onContentTypeChange = event => {\n    const { target } = event;\n    setContentType(target.value);\n  };\n  const onFormatChange = event => {\n    const { target } = event;\n    setReportFormat(target.value);\n  };\n  // Make sure notification settings has the required info\n  const checkNotificationSettings = () => {\n    if (!notificationSettings.length) {\n      return false;\n    }\n    let hasInfo = false;\n    _forEachInstanceProperty(notificationSettings).call(notificationSettings, setting => {var _setting$recipients;\n      if (!!setting.method && (_setting$recipients = setting.recipients) != null && _setting$recipients.length) {\n        hasInfo = true;\n      }\n    });\n    return hasInfo;\n  };\n  const validate = () => {var _currentAlert$name, _currentAlert$owners, _currentAlert$crontab;\n    if (currentAlert && (_currentAlert$name =\n    currentAlert.name) != null && _currentAlert$name.length && (_currentAlert$owners =\n    currentAlert.owners) != null && _currentAlert$owners.length && (_currentAlert$crontab =\n    currentAlert.crontab) != null && _currentAlert$crontab.length &&\n    currentAlert.working_timeout !== undefined && (\n    contentType === 'dashboard' && !!currentAlert.dashboard ||\n    contentType === 'chart' && !!currentAlert.chart) &&\n    checkNotificationSettings()) {var _currentAlert$sql, _currentAlert$validat3, _currentAlert$validat4;\n      if (isReport) {\n        setDisableSave(false);\n      } else\n      if (!!currentAlert.database && (_currentAlert$sql =\n      currentAlert.sql) != null && _currentAlert$sql.length && (\n      conditionNotNull || !!((_currentAlert$validat3 = currentAlert.validator_config_json) != null && _currentAlert$validat3.op)) && (\n      conditionNotNull ||\n      ((_currentAlert$validat4 = currentAlert.validator_config_json) == null ? void 0 : _currentAlert$validat4.threshold) !== undefined)) {\n        setDisableSave(false);\n      } else\n      {\n        setDisableSave(true);\n      }\n    } else\n    {\n      setDisableSave(true);\n    }\n  };\n  // Initialize\n  useEffect(() => {\n    if (isEditMode && (\n    !currentAlert ||\n    !currentAlert.id ||\n    alert && alert.id !== currentAlert.id ||\n    isHidden && show)) {\n      if (alert && alert.id !== null && !loading && !fetchError) {\n        const id = alert.id || 0;\n        fetchResource(id);\n      }\n    } else\n    if (!isEditMode && (\n    !currentAlert || currentAlert.id || isHidden && show)) {\n      setCurrentAlert({ ...DEFAULT_ALERT });\n      setNotificationSettings([]);\n      setNotificationAddState('active');\n    }\n  }, [alert]);\n  useEffect(() => {\n    if (resource) {var _context6, _context7;\n      // Add notification settings\n      const settings = _mapInstanceProperty(_context6 = resource.recipients || []).call(_context6, setting => {\n        const config = typeof setting.recipient_config_json === 'string' ?\n        JSON.parse(setting.recipient_config_json) :\n        {};\n        return {\n          method: setting.type,\n          // @ts-ignore: Type not assignable\n          recipients: config.target || setting.recipient_config_json,\n          options: NOTIFICATION_METHODS };\n\n      });\n      setNotificationSettings(settings);\n      setNotificationAddState(settings.length === NOTIFICATION_METHODS.length ? 'hidden' : 'active');\n      setContentType(resource.chart ? 'chart' : 'dashboard');\n      setReportFormat(resource.chart ?\n      resource.report_format || DEFAULT_NOTIFICATION_FORMAT :\n      DEFAULT_NOTIFICATION_FORMAT);\n      const validatorConfig = typeof resource.validator_config_json === 'string' ?\n      JSON.parse(resource.validator_config_json) :\n      resource.validator_config_json;\n      setConditionNotNull(resource.validator_type === 'not null');\n      setCurrentAlert({\n        ...resource,\n        chart: resource.chart ?\n        getChartData(resource.chart) || {\n          value: resource.chart.id,\n          label: resource.chart.slice_name } :\n\n        undefined,\n        dashboard: resource.dashboard ?\n        getDashboardData(resource.dashboard) || {\n          value: resource.dashboard.id,\n          label: resource.dashboard.dashboard_title } :\n\n        undefined,\n        database: resource.database ?\n        getSourceData(resource.database) || {\n          value: resource.database.id,\n          label: resource.database.database_name } :\n\n        undefined,\n        owners: _mapInstanceProperty(_context7 = resource.owners || []).call(_context7, owner => ({\n          value: owner.id,\n          label: `${owner.first_name} ${owner.last_name}` })),\n\n        // @ts-ignore: Type not assignable\n        validator_config_json: resource.validator_type === 'not null' ?\n        {\n          op: 'not null' } :\n\n        validatorConfig });\n\n    }\n  }, [resource]);\n  // Validation\n  const currentAlertSafe = currentAlert || {};\n  useEffect(() => {\n    validate();\n  }, [\n  currentAlertSafe.name,\n  currentAlertSafe.owners,\n  currentAlertSafe.database,\n  currentAlertSafe.sql,\n  currentAlertSafe.validator_config_json,\n  currentAlertSafe.crontab,\n  currentAlertSafe.working_timeout,\n  currentAlertSafe.dashboard,\n  currentAlertSafe.chart,\n  contentType,\n  notificationSettings,\n  conditionNotNull]);\n\n  // Show/hide\n  if (isHidden && show) {\n    setIsHidden(false);\n  }\n  // Dropdown options\n  const conditionOptions = _mapInstanceProperty(CONDITIONS).call(CONDITIONS, condition => ___EmotionJSX(Select.Option, { key: condition.value, value: condition.value },\n  condition.label));\n\n  const retentionOptions = _mapInstanceProperty(RETENTION_OPTIONS).call(RETENTION_OPTIONS, option => ___EmotionJSX(Select.Option, { key: option.value, value: option.value },\n  option.label));\n\n  return ___EmotionJSX(StyledModal, { className: \"no-content-padding\", responsive: true, disablePrimaryButton: disableSave, onHandledPrimaryAction: onSave, onHide: hide, primaryButtonName: isEditMode ? t('Save') : t('Add'), show: show, width: \"100%\", maxWidth: \"1450px\", title: ___EmotionJSX(\"h4\", { \"data-test\": \"alert-report-modal-title\" },\n    isEditMode ? ___EmotionJSX(StyledIcon, { name: \"edit-alt\" }) : ___EmotionJSX(StyledIcon, { name: \"plus-large\" }),\n    isEditMode ?\n    t(`Edit ${isReport ? 'Report' : 'Alert'}`) :\n    t(`Add ${isReport ? 'Report' : 'Alert'}`)) },\n\n  ___EmotionJSX(StyledSectionContainer, null,\n  ___EmotionJSX(\"div\", { className: \"header-section\" },\n  ___EmotionJSX(StyledInputContainer, null,\n  ___EmotionJSX(\"div\", { className: \"control-label\" },\n  isReport ? t('Report name') : t('Alert name'),\n  ___EmotionJSX(\"span\", { className: \"required\" }, \"*\")),\n\n  ___EmotionJSX(\"div\", { className: \"input-container\" },\n  ___EmotionJSX(\"input\", { type: \"text\", name: \"name\", value: currentAlert ? currentAlert.name : '', placeholder: isReport ? t('Report name') : t('Alert name'), onChange: onTextChange }))),\n\n\n  ___EmotionJSX(StyledInputContainer, null,\n  ___EmotionJSX(\"div\", { className: \"control-label\" },\n  t('Owners'),\n  ___EmotionJSX(\"span\", { className: \"required\" }, \"*\")),\n\n  ___EmotionJSX(\"div\", { \"data-test\": \"owners-select\", className: \"input-container\" },\n  ___EmotionJSX(AsyncSelect, { name: \"owners\", isMulti: true, value: currentAlert ? currentAlert.owners : [], loadOptions: loadOwnerOptions, defaultOptions: true // load options on render\n    , cacheOptions: true, onChange: onOwnersChange }))),\n\n\n  ___EmotionJSX(StyledInputContainer, null,\n  ___EmotionJSX(\"div\", { className: \"control-label\" }, t('Description')),\n  ___EmotionJSX(\"div\", { className: \"input-container\" },\n  ___EmotionJSX(\"input\", { type: \"text\", name: \"description\", value: currentAlert ? currentAlert.description || '' : '', placeholder: t('Description'), onChange: onTextChange }))),\n\n\n  ___EmotionJSX(StyledSwitchContainer, null,\n  ___EmotionJSX(Switch, { onChange: onActiveSwitch, checked: currentAlert ? currentAlert.active : true }),\n  ___EmotionJSX(\"div\", { className: \"switch-label\" }, \"Active\"))),\n\n\n  ___EmotionJSX(\"div\", { className: \"column-section\" },\n  !isReport && ___EmotionJSX(\"div\", { className: \"column condition\" },\n  ___EmotionJSX(StyledSectionTitle, null,\n  ___EmotionJSX(\"h4\", null, t('Alert condition'))),\n\n  ___EmotionJSX(StyledInputContainer, null,\n  ___EmotionJSX(\"div\", { className: \"control-label\" },\n  t('Database'),\n  ___EmotionJSX(\"span\", { className: \"required\" }, \"*\")),\n\n  ___EmotionJSX(\"div\", { className: \"input-container\" },\n  ___EmotionJSX(AsyncSelect, { name: \"source\", value: currentAlert && currentAlert.database ?\n    {\n      value: currentAlert.database.value,\n      label: currentAlert.database.label } :\n\n    undefined, loadOptions: loadSourceOptions, defaultOptions: true // load options on render\n    , cacheOptions: true, onChange: onSourceChange }))),\n\n\n  ___EmotionJSX(StyledInputContainer, null,\n  ___EmotionJSX(\"div\", { className: \"control-label\" },\n  t('SQL Query'),\n  ___EmotionJSX(\"span\", { className: \"required\" }, \"*\")),\n\n  ___EmotionJSX(TextAreaControl, { name: \"sql\", language: \"sql\", offerEditInModal: false, minLines: 15, maxLines: 15, onChange: onSQLChange, readOnly: false, value: currentAlert ? currentAlert.sql : '' })),\n\n  ___EmotionJSX(\"div\", { className: \"inline-container wrap\" },\n  ___EmotionJSX(StyledInputContainer, null,\n  ___EmotionJSX(\"div\", { className: \"control-label\" },\n  t('Trigger Alert If...'),\n  ___EmotionJSX(\"span\", { className: \"required\" }, \"*\")),\n\n  ___EmotionJSX(\"div\", { className: \"input-container\" },\n  ___EmotionJSX(Select, { onChange: onConditionChange, placeholder: \"Condition\", defaultValue: currentAlert ?\n    ((_currentAlert$validat5 = currentAlert.validator_config_json) == null ? void 0 : _currentAlert$validat5.op) || undefined :\n    undefined, value: currentAlert ?\n    ((_currentAlert$validat6 = currentAlert.validator_config_json) == null ? void 0 : _currentAlert$validat6.op) || undefined :\n    undefined },\n  conditionOptions))),\n\n\n\n  ___EmotionJSX(StyledInputContainer, null,\n  ___EmotionJSX(\"div\", { className: \"control-label\" },\n  t('Value'),\n  ___EmotionJSX(\"span\", { className: \"required\" }, \"*\")),\n\n  ___EmotionJSX(\"div\", { className: \"input-container\" },\n  ___EmotionJSX(\"input\", { type: \"number\", name: \"threshold\", disabled: conditionNotNull, value: currentAlert &&\n    currentAlert.validator_config_json &&\n    currentAlert.validator_config_json.threshold !==\n    undefined ?\n    currentAlert.validator_config_json.threshold :\n    '', placeholder: t('Value'), onChange: onThresholdChange }))))),\n\n\n\n\n  ___EmotionJSX(\"div\", { className: \"column schedule\" },\n  ___EmotionJSX(StyledSectionTitle, null,\n  ___EmotionJSX(\"h4\", null,\n  isReport ?\n  t('Report schedule') :\n  t('Alert condition schedule')),\n\n  ___EmotionJSX(\"span\", { className: \"required\" }, \"*\")),\n\n  ___EmotionJSX(AlertReportCronScheduler, { value: currentAlert && currentAlert.crontab || DEFAULT_CRON_VALUE, onChange: newVal => updateAlertState('crontab', newVal) }),\n  ___EmotionJSX(StyledSectionTitle, null,\n  ___EmotionJSX(\"h4\", null, t('Schedule settings'))),\n\n  ___EmotionJSX(StyledInputContainer, null,\n  ___EmotionJSX(\"div\", { className: \"control-label\" },\n  t('Log retention'),\n  ___EmotionJSX(\"span\", { className: \"required\" }, \"*\")),\n\n  ___EmotionJSX(\"div\", { className: \"input-container\" },\n  ___EmotionJSX(Select, { onChange: onLogRetentionChange, placeholder: true, defaultValue: currentAlert ?\n    currentAlert.log_retention || DEFAULT_RETENTION :\n    DEFAULT_RETENTION, value: currentAlert ?\n    currentAlert.log_retention || DEFAULT_RETENTION :\n    DEFAULT_RETENTION },\n  retentionOptions))),\n\n\n\n  ___EmotionJSX(StyledInputContainer, null,\n  ___EmotionJSX(\"div\", { className: \"control-label\" },\n  t('Working timeout'),\n  ___EmotionJSX(\"span\", { className: \"required\" }, \"*\")),\n\n  ___EmotionJSX(\"div\", { className: \"input-container\" },\n  ___EmotionJSX(\"input\", { type: \"number\", min: \"1\", name: \"working_timeout\", value: (currentAlert == null ? void 0 : currentAlert.working_timeout) || '', placeholder: t('Time in seconds'), onChange: onTimeoutVerifyChange }),\n  ___EmotionJSX(\"span\", { className: \"input-label\" }, \"seconds\"))),\n\n\n  !isReport && ___EmotionJSX(StyledInputContainer, null,\n  ___EmotionJSX(\"div\", { className: \"control-label\" }, t('Grace period')),\n  ___EmotionJSX(\"div\", { className: \"input-container\" },\n  ___EmotionJSX(\"input\", { type: \"number\", min: \"1\", name: \"grace_period\", value: (currentAlert == null ? void 0 : currentAlert.grace_period) || '', placeholder: t('Time in seconds'), onChange: onTimeoutVerifyChange }),\n  ___EmotionJSX(\"span\", { className: \"input-label\" }, \"seconds\")))),\n\n\n\n  ___EmotionJSX(\"div\", { className: \"column message\" },\n  ___EmotionJSX(StyledSectionTitle, null,\n  ___EmotionJSX(\"h4\", null, t('Message content')),\n  ___EmotionJSX(\"span\", { className: \"required\" }, \"*\")),\n\n  ___EmotionJSX(Radio.Group, { onChange: onContentTypeChange, value: contentType },\n  ___EmotionJSX(StyledRadio, { value: \"dashboard\" }, t('Dashboard')),\n  ___EmotionJSX(StyledRadio, { value: \"chart\" }, t('Chart'))),\n\n  formatOptionEnabled && ___EmotionJSX(\"div\", { className: \"inline-container\" },\n  ___EmotionJSX(StyledRadioGroup, { onChange: onFormatChange, value: reportFormat },\n  ___EmotionJSX(StyledRadio, { value: \"PNG\" }, t('Send as PNG')),\n  ___EmotionJSX(StyledRadio, { value: \"CSV\" }, t('Send as CSV')))),\n\n\n  ___EmotionJSX(AsyncSelect, { className: contentType === 'chart' ?\n    'async-select' :\n    'hide-dropdown async-select', name: \"chart\", value: currentAlert && currentAlert.chart ?\n    {\n      value: currentAlert.chart.value,\n      label: currentAlert.chart.label } :\n\n    undefined, loadOptions: loadChartOptions, defaultOptions: true // load options on render\n    , cacheOptions: true, onChange: onChartChange }),\n  ___EmotionJSX(AsyncSelect, { className: contentType === 'dashboard' ?\n    'async-select' :\n    'hide-dropdown async-select', name: \"dashboard\", value: currentAlert && currentAlert.dashboard ?\n    {\n      value: currentAlert.dashboard.value,\n      label: currentAlert.dashboard.label } :\n\n    undefined, loadOptions: loadDashboardOptions, defaultOptions: true // load options on render\n    , cacheOptions: true, onChange: onDashboardChange }),\n  ___EmotionJSX(StyledSectionTitle, null,\n  ___EmotionJSX(\"h4\", null, t('Notification method')),\n  ___EmotionJSX(\"span\", { className: \"required\" }, \"*\")),\n\n  _mapInstanceProperty(notificationSettings).call(notificationSettings, (notificationSetting, i) => ___EmotionJSX(NotificationMethod, { setting: notificationSetting, index: i, onUpdate: updateNotificationSetting, onRemove: removeNotificationSetting })),\n  ___EmotionJSX(NotificationMethodAdd, { \"data-test\": \"notification-add\", status: notificationAddState, onClick: onNotificationAdd })))));\n\n\n\n\n};__signature__(AlertReportModal, \"useState{[disableSave, setDisableSave](true)}\\nuseState{[currentAlert, setCurrentAlert,]}\\nuseState{[isHidden, setIsHidden](true)}\\nuseState{[contentType, setContentType]('dashboard')}\\nuseState{[reportFormat, setReportFormat](DEFAULT_NOTIFICATION_FORMAT)}\\nuseState{[conditionNotNull, setConditionNotNull](false)}\\nuseState{[sourceOptions, setSourceOptions]([])}\\nuseState{[dashboardOptions, setDashboardOptions]([])}\\nuseState{[chartOptions, setChartOptions]([])}\\nuseState{[notificationAddState, setNotificationAddState,]('active')}\\nuseState{[notificationSettings, setNotificationSettings]([])}\\nuseSingleViewResource{{ state: { loading, resource, error: fetchError }, fetchResource, createResource, updateResource, clearError, }}\\nuseEffect{}\\nuseEffect{}\\nuseEffect{}\", () => [useSingleViewResource]);const _default =\nwithToasts(AlertReportModal);export default _default;;(function () {var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined;if (!reactHotLoader) {return;}reactHotLoader.register(SELECT_PAGE_SIZE, \"SELECT_PAGE_SIZE\", \"/app/superset-frontend/src/views/CRUD/alert/AlertReportModal.tsx\");reactHotLoader.register(TIMEOUT_MIN, \"TIMEOUT_MIN\", \"/app/superset-frontend/src/views/CRUD/alert/AlertReportModal.tsx\");reactHotLoader.register(NOTIFICATION_METHODS, \"NOTIFICATION_METHODS\", \"/app/superset-frontend/src/views/CRUD/alert/AlertReportModal.tsx\");reactHotLoader.register(DEFAULT_NOTIFICATION_FORMAT, \"DEFAULT_NOTIFICATION_FORMAT\", \"/app/superset-frontend/src/views/CRUD/alert/AlertReportModal.tsx\");reactHotLoader.register(CONDITIONS, \"CONDITIONS\", \"/app/superset-frontend/src/views/CRUD/alert/AlertReportModal.tsx\");reactHotLoader.register(RETENTION_OPTIONS, \"RETENTION_OPTIONS\", \"/app/superset-frontend/src/views/CRUD/alert/AlertReportModal.tsx\");reactHotLoader.register(DEFAULT_RETENTION, \"DEFAULT_RETENTION\", \"/app/superset-frontend/src/views/CRUD/alert/AlertReportModal.tsx\");reactHotLoader.register(DEFAULT_WORKING_TIMEOUT, \"DEFAULT_WORKING_TIMEOUT\", \"/app/superset-frontend/src/views/CRUD/alert/AlertReportModal.tsx\");reactHotLoader.register(DEFAULT_CRON_VALUE, \"DEFAULT_CRON_VALUE\", \"/app/superset-frontend/src/views/CRUD/alert/AlertReportModal.tsx\");reactHotLoader.register(DEFAULT_ALERT, \"DEFAULT_ALERT\", \"/app/superset-frontend/src/views/CRUD/alert/AlertReportModal.tsx\");reactHotLoader.register(StyledModal, \"StyledModal\", \"/app/superset-frontend/src/views/CRUD/alert/AlertReportModal.tsx\");reactHotLoader.register(StyledIcon, \"StyledIcon\", \"/app/superset-frontend/src/views/CRUD/alert/AlertReportModal.tsx\");reactHotLoader.register(StyledSectionContainer, \"StyledSectionContainer\", \"/app/superset-frontend/src/views/CRUD/alert/AlertReportModal.tsx\");reactHotLoader.register(StyledSectionTitle, \"StyledSectionTitle\", \"/app/superset-frontend/src/views/CRUD/alert/AlertReportModal.tsx\");reactHotLoader.register(StyledSwitchContainer, \"StyledSwitchContainer\", \"/app/superset-frontend/src/views/CRUD/alert/AlertReportModal.tsx\");reactHotLoader.register(StyledInputContainer, \"StyledInputContainer\", \"/app/superset-frontend/src/views/CRUD/alert/AlertReportModal.tsx\");reactHotLoader.register(StyledRadio, \"StyledRadio\", \"/app/superset-frontend/src/views/CRUD/alert/AlertReportModal.tsx\");reactHotLoader.register(StyledRadioGroup, \"StyledRadioGroup\", \"/app/superset-frontend/src/views/CRUD/alert/AlertReportModal.tsx\");reactHotLoader.register(StyledNotificationAddButton, \"StyledNotificationAddButton\", \"/app/superset-frontend/src/views/CRUD/alert/AlertReportModal.tsx\");reactHotLoader.register(NotificationMethodAdd, \"NotificationMethodAdd\", \"/app/superset-frontend/src/views/CRUD/alert/AlertReportModal.tsx\");reactHotLoader.register(AlertReportModal, \"AlertReportModal\", \"/app/superset-frontend/src/views/CRUD/alert/AlertReportModal.tsx\");reactHotLoader.register(_default, \"default\", \"/app/superset-frontend/src/views/CRUD/alert/AlertReportModal.tsx\");})();;(function () {var leaveModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.leaveModule : undefined;leaveModule && leaveModule(module);})();","map":{"version":3,"sources":["/app/superset-frontend/src/views/CRUD/alert/AlertReportModal.tsx"],"names":[],"mappings":"4sBAAA;;;;;;;;;;;;;;;;;AAiBG;AACH,OAAO,KAAP,IAAmC,QAAnC,EAA6C,SAA7C,QAA8D,OAA9D;AACA,SAAS,MAAT,EAAiB,CAAjB,EAAoB,cAApB,QAA0C,mBAA1C;AACA,OAAO,KAAP,MAAkB,OAAlB;AACA,SAAS,qBAAT,QAAsC,sBAAtC;AAEA,OAAO,IAAP,MAAiB,qBAAjB;AACA,SAAS,MAAT,QAAuB,uBAAvB;AACA,OAAO,KAAP,MAAkB,sBAAlB;AACA,SAAS,KAAT,QAAsB,sBAAtB;AACA,SAAS,WAAT,EAAsB,gBAAgB,IAAI,MAA1C,QAAwD,uBAAxD;AACA,SAAS,WAAT,EAAsB,gBAAtB,QAA8C,kBAA9C;AACA,OAAO,UAAP,MAAuB,wCAAvB;AAEA,OAAO,eAAP,MAA4B,iDAA5B;AACA,SAAS,wBAAT,QAAyC,uCAAzC;AACA,SAAS,kBAAT,QAAmC,iCAAnC,C;AAYA,MAAM,gBAAgB,GAAG,IAAzB,C,CAA+B;AAC/B,MAAM,WAAW,GAAG,CAApB;AAgBA,MAAM,oBAAoB,GAAyB,CAAC,OAAD,EAAU,OAAV,CAAnD;AACA,MAAM,2BAA2B,GAAG,KAApC;AACA,MAAM,UAAU,GAAG;AACjB;AACE,EAAA,KAAK,EAAE,CAAC,CAAC,kBAAD,CADV;AAEE,EAAA,KAAK,EAAE,GAFT,EADiB;;AAKjB;AACE,EAAA,KAAK,EAAE,CAAC,CAAC,iBAAD,CADV;AAEE,EAAA,KAAK,EAAE,GAFT,EALiB;;AASjB;AACE,EAAA,KAAK,EAAE,CAAC,CAAC,uBAAD,CADV;AAEE,EAAA,KAAK,EAAE,IAFT,EATiB;;AAajB;AACE,EAAA,KAAK,EAAE,CAAC,CAAC,sBAAD,CADV;AAEE,EAAA,KAAK,EAAE,IAFT,EAbiB;;AAiBjB;AACE,EAAA,KAAK,EAAE,CAAC,CAAC,eAAD,CADV;AAEE,EAAA,KAAK,EAAE,IAFT,EAjBiB;;AAqBjB;AACE,EAAA,KAAK,EAAE,CAAC,CAAC,mBAAD,CADV;AAEE,EAAA,KAAK,EAAE,IAFT,EArBiB;;AAyBjB;AACE,EAAA,KAAK,EAAE,CAAC,CAAC,UAAD,CADV;AAEE,EAAA,KAAK,EAAE,UAFT,EAzBiB,CAAnB;;;AA+BA,MAAM,iBAAiB,GAAG;AACxB;AACE,EAAA,KAAK,EAAE,CAAC,CAAC,MAAD,CADV;AAEE,EAAA,KAAK,EAAE,CAFT,EADwB;;AAKxB;AACE,EAAA,KAAK,EAAE,CAAC,CAAC,SAAD,CADV;AAEE,EAAA,KAAK,EAAE,EAFT,EALwB;;AASxB;AACE,EAAA,KAAK,EAAE,CAAC,CAAC,SAAD,CADV;AAEE,EAAA,KAAK,EAAE,EAFT,EATwB;;AAaxB;AACE,EAAA,KAAK,EAAE,CAAC,CAAC,SAAD,CADV;AAEE,EAAA,KAAK,EAAE,EAFT,EAbwB,CAA1B;;;AAmBA,MAAM,iBAAiB,GAAG,EAA1B;AACA,MAAM,uBAAuB,GAAG,IAAhC;AACA,MAAM,kBAAkB,GAAG,WAA3B,C,CAAwC;AACxC,MAAM,aAAa,GAAG;AACpB,EAAA,MAAM,EAAE,IADY;AAEpB,EAAA,OAAO,EAAE,kBAFW;AAGpB,EAAA,aAAa,EAAE,iBAHK;AAIpB,EAAA,eAAe,EAAE,uBAJG;AAKpB,EAAA,IAAI,EAAE,EALc;AAMpB,EAAA,MAAM,EAAE,EANY;AAOpB,EAAA,UAAU,EAAE,EAPQ;AAQpB,EAAA,GAAG,EAAE,EARe;AASpB,EAAA,qBAAqB,EAAE,EATH;AAUpB,EAAA,cAAc,EAAE,EAVI;AAWpB,EAAA,YAAY,EAAE,SAXM,EAAtB;;AAcA,MAAM,WAAW,GAAG,MAAM,CAAC,KAAD,CAAO;;;;AAIhC,CAJD;AAMA,MAAM,UAAU,GAAG,MAAM,CAAC,IAAD,CAAM;iBACd,CAAC,EAAE,KAAF,EAAD,KAAe,KAAK,CAAC,QAAN,GAAiB,CAAC;AACjD,CAFD;AAIA,MAAM,sBAAsB,GAAG,MAAM,CAAC,GAAG;;;;;;;;;;eAU1B,CAAC,EAAE,KAAF,EAAD,KAAe,KAAK,CAAC,QAAN,GAAiB,CAAC;+BACjB,CAAC,EAAE,KAAF,EAAD,KAAe,KAAK,CAAC,MAAN,CAAa,SAAb,CAAuB,MAAM;;;;;;;;;iCAS1C,CAAC,EAAE,KAAF,EAAD,KAAe,KAAK,CAAC,QAAN,GAAiB,CAAC;iBACjD,CAAC,EAAE,KAAF,EAAD,KAAe,KAAK,CAAC,QAAN,GAAiB,CAAC;;;;;;;kCAOhB,CAAC,EAAE,KAAF,EAAD,KAAe,KAAK,CAAC,MAAN,CAAa,SAAb,CAAuB,MAAM;;;;iCAI7C,CAAC,EAAE,KAAF,EAAD,KAAe,KAAK,CAAC,MAAN,CAAa,SAAb,CAAuB,MAAM;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAiC5E,CAjED;AAmEA,MAAM,kBAAkB,GAAG,MAAM,CAAC,GAAG;;;YAGzB,CAAC,EAAE,KAAF,EAAD,KAAe,KAAK,CAAC,QAAN,GAAiB,CAAC;MACvC,CAAC,EAAE,KAAF,EAAD,KAAe,KAAK,CAAC,QAAN,GAAiB,CAAC;;;;;;;mBAOpB,CAAC,EAAE,KAAF,EAAD,KAAe,KAAK,CAAC,QAAQ;aACnC,CAAC,EAAE,KAAF,EAAD,KAAe,KAAK,CAAC,MAAN,CAAa,KAAb,CAAmB,IAAI;;AAElD,CAdD;AAgBA,MAAM,qBAAqB,GAAG,MAAM,CAAC,GAAG;;;;;;;;AAQvC,CARD;AAUA,OAAO,MAAM,oBAAoB,GAAG,MAAM,CAAC,GAAG;;YAElC,CAAC,EAAE,KAAF,EAAD,KAAe,KAAK,CAAC,QAAN,GAAiB,CAAC;;;;;aAKhC,CAAC,EAAE,KAAF,EAAD,KAAe,KAAK,CAAC,MAAN,CAAa,SAAb,CAAuB,IAAI;iBACtC,CAAC,EAAE,KAAF,EAAD,KAAe,KAAK,CAAC,UAAN,CAAiB,KAAjB,CAAuB,CAAvB,GAA2B,CAAC;eAC7C,CAAC,EAAE,KAAF,EAAD,KAAe,KAAK,CAAC,QAAQ;;;;;mBAKzB,CAAC,EAAE,KAAF,EAAD,KAAe,KAAK,CAAC,QAAN,GAAiB,CAAC;aACvC,CAAC,EAAE,KAAF,EAAD,KAAe,KAAK,CAAC,MAAN,CAAa,KAAb,CAAmB,IAAI;;;;;;;;;;;;;sBAa7B,CAAC,EAAE,KAAF,EAAD,KAAe,KAAK,CAAC,QAAN,GAAiB,CAAC;;;;kBAIrC,CAAC,EAAE,KAAF,EAAD,KAAe,KAAK,CAAC,QAAQ;;;;;;;;;;;;aAYlC,CAAC,EAAE,KAAF,EAAD,KAAe,KAAK,CAAC,MAAN,CAAa,SAAb,CAAuB,IAAI;;;;;;;;;;;aAW1C,CAAC,EAAE,KAAF,EAAD,KAAe,KAAK,CAAC,MAAN,CAAa,SAAb,CAAuB,MAAM;;;;;;;;eAQ1C,CAAC,EAAE,KAAF,EAAD,KAAe,KAAK,CAAC,QAAN,GAAiB,GAAG;QAC1C,CAAC,EAAE,KAAF,EAAD,KAAe,KAAK,CAAC,QAAN,GAAiB,CAAC;;wBAEjB,CAAC,EAAE,KAAF,EAAD,KAAe,KAAK,CAAC,MAAN,CAAa,SAAb,CAAuB,MAAM;qBAC/C,CAAC,EAAE,KAAF,EAAD,KAAe,KAAK,CAAC,QAAQ;;;;;;;;;;;;;;;;;;;AAmBjD,CAtFM;AAwFP,MAAM,WAAW,GAAG,MAAM,CAAC,KAAD,CAAO;;iBAEhB,CAAC,EAAE,KAAF,EAAD,KAAe,KAAK,CAAC,QAAN,GAAiB,CAAC;AACjD,CAHD;AAKA,MAAM,gBAAgB,GAAG,MAAM,CAAC,KAAK,CAAC,KAAP,CAAa;iBAC3B,CAAC,EAAE,KAAF,EAAD,KAAe,KAAK,CAAC,QAAN,GAAiB,GAAG;AACnD,CAFD;AAIA;AACA,MAAM,2BAA2B,GAAG,MAAM,CAAC,GAAG;WACnC,CAAC,EAAE,KAAF,EAAD,KAAe,KAAK,CAAC,MAAN,CAAa,OAAb,CAAqB,KAAK;;;;oBAIhC,CAAC,EAAE,KAAF,EAAD,KAAe,KAAK,CAAC,QAAN,GAAiB,CAAC;;;;aAIxC,CAAC,EAAE,KAAF,EAAD,KAAe,KAAK,CAAC,MAAN,CAAa,SAAb,CAAuB,MAAM;;;AAGxD,CAZD;AAqBA,MAAM,qBAAqB,GAAkD,CAAC,EAC5E,MAAM,GAAG,QADmE,EAE5E,OAF4E,EAAD,KAGxE;AACH,MAAI,MAAM,KAAK,QAAf,EAAyB;AACvB,WAAO,IAAP;AACD;AAED,QAAM,WAAW,GAAG,MAAK;AACvB,QAAI,MAAM,KAAK,UAAf,EAA2B;AACzB,MAAA,OAAO;AACR;AACF,GAJD;AAMA,SACE,cAAC,2BAAD,IAA6B,SAAS,EAAE,MAAxC,EAAgD,OAAO,EAAE,WAAzD;AACE,uBAAG,SAAS,EAAC,YAAb,GADF,EAC+B,GAD/B;AAEG,EAAA,MAAM,KAAK,QAAX;AACG,EAAA,CAAC,CAAC,yBAAD,CADJ;AAEG,EAAA,CAAC,CAAC,qBAAD,CAJP,CADF;;AAQD,CAtBD;AAgCA,MAAM,gBAAgB,GAA6C,CAAC,EAClE,cADkE,EAElE,KAFkE,EAGlE,MAHkE,EAIlE,IAJkE,EAKlE,KAAK,GAAG,IAL0D,EAMlE,QAAQ,GAAG,KANuD,EAAD,KAO9D;AACH,QAAM,CAAC,WAAD,EAAc,cAAd,IAAgC,QAAQ,CAAU,IAAV,CAA9C;AACA,QAAM,CACJ,YADI,EAEJ,eAFI,IAGF,QAAQ,EAHZ;AAIA,QAAM,CAAC,QAAD,EAAW,WAAX,IAA0B,QAAQ,CAAU,IAAV,CAAxC;AACA,QAAM,CAAC,WAAD,EAAc,cAAd,IAAgC,QAAQ,CAAS,WAAT,CAA9C;AACA,QAAM,CAAC,YAAD,EAAe,eAAf,IAAkC,QAAQ,CAC9C,2BAD8C,CAAhD;AAIA;AACA,QAAM,CAAC,gBAAD,EAAmB,mBAAnB,IAA0C,QAAQ,CAAU,KAAV,CAAxD;AACA,QAAM,CAAC,aAAD,EAAgB,gBAAhB,IAAoC,QAAQ,CAAe,EAAf,CAAlD;AACA,QAAM,CAAC,gBAAD,EAAmB,mBAAnB,IAA0C,QAAQ,CAAe,EAAf,CAAxD;AACA,QAAM,CAAC,YAAD,EAAe,eAAf,IAAkC,QAAQ,CAAe,EAAf,CAAhD;AAEA,QAAM,UAAU,GAAG,KAAK,KAAK,IAA7B;AACA,QAAM,mBAAmB,GACvB,WAAW,KAAK,OAAhB;AACC,EAAA,gBAAgB,CAAC,WAAW,CAAC,qBAAb,CAAhB,IAAuD,QADxD,CADF;AAIA,QAAM,CACJ,oBADI,EAEJ,uBAFI,IAGF,QAAQ,CAAwB,QAAxB,CAHZ;AAIA,QAAM,CAAC,oBAAD,EAAuB,uBAAvB,IAAkD,QAAQ,CAE9D,EAF8D,CAAhE;AAIA,QAAM,iBAAiB,GAAG,MAAK;AAC7B,UAAM,QAAQ,GAA0B,uBAAA,oBAAoB,MAApB,CAAA,oBAAoB,CAA5D;AAEA,IAAA,QAAQ,CAAC,IAAT,CAAc;AACZ,MAAA,UAAU,EAAE,EADA;AAEZ,MAAA,OAAO,EAAE,oBAFG,EAAd;;AAKA,IAAA,uBAAuB,CAAC,QAAD,CAAvB;AACA,IAAA,uBAAuB,CACrB,QAAQ,CAAC,MAAT,KAAoB,oBAAoB,CAAC,MAAzC,GAAkD,QAAlD,GAA6D,UADxC,CAAvB;AAGD,GAZD;AAcA,QAAM,yBAAyB,GAAG,CAChC,KADgC,EAEhC,OAFgC,KAG9B;AACF,UAAM,QAAQ,GAAG,uBAAA,oBAAoB,MAApB,CAAA,oBAAoB,CAArC;AAEA,IAAA,QAAQ,CAAC,KAAD,CAAR,GAAkB,OAAlB;AACA,IAAA,uBAAuB,CAAC,QAAD,CAAvB;AAEA,QAAI,OAAO,CAAC,MAAR,KAAmB,SAAnB,IAAgC,oBAAoB,KAAK,QAA7D,EAAuE;AACrE,MAAA,uBAAuB,CAAC,QAAD,CAAvB;AACD;AACF,GAZD;AAcA,QAAM,yBAAyB,GAAI,KAAD,IAAkB;AAClD,UAAM,QAAQ,GAAG,uBAAA,oBAAoB,MAApB,CAAA,oBAAoB,CAArC;AAEA,4BAAA,QAAQ,MAAR,CAAA,QAAQ,EAAQ,KAAR,EAAe,CAAf,CAAR;AACA,IAAA,uBAAuB,CAAC,QAAD,CAAvB;AACA,IAAA,uBAAuB,CAAC,QAAD,CAAvB;AACD,GAND;AAQA;AACA,QAAM,EACJ,KAAK,EAAE,EAAE,OAAF,EAAW,QAAX,EAAqB,KAAK,EAAE,UAA5B,EADH,EAEJ,aAFI,EAGJ,cAHI,EAIJ,cAJI,EAKJ,UALI,KAMF,qBAAqB,CAAc,QAAd,EAAwB,CAAC,CAAC,QAAD,CAAzB,EAAqC,cAArC,CANzB;AAQA;AACA,QAAM,IAAI,GAAG,MAAK;AAChB,IAAA,UAAU;AACV,IAAA,WAAW,CAAC,IAAD,CAAX;AACA,IAAA,MAAM;AACN,IAAA,uBAAuB,CAAC,EAAD,CAAvB;AACA,IAAA,eAAe,CAAC,EAAE,GAAG,aAAL,EAAD,CAAf;AACA,IAAA,uBAAuB,CAAC,QAAD,CAAvB;AACD,GAPD;AASA,QAAM,MAAM,GAAG,MAAK;AAClB;AACA,UAAM,UAAU,GAAgB,EAAhC;AAEA,6BAAA,oBAAoB,MAApB,CAAA,oBAAoB,EAAS,OAAO,IAAG;AACrC,UAAI,OAAO,CAAC,MAAR,IAAkB,OAAO,CAAC,UAAR,CAAmB,MAAzC,EAAiD;AAC/C,QAAA,UAAU,CAAC,IAAX,CAAgB;AACd,UAAA,qBAAqB,EAAE;AACrB,YAAA,MAAM,EAAE,OAAO,CAAC,UADK,EADT;;AAId,UAAA,IAAI,EAAE,OAAO,CAAC,MAJA,EAAhB;;AAMD;AACF,KATmB,CAApB;AAWA,UAAM,IAAI,GAAQ;AAChB,SAAG,YADa;AAEhB,MAAA,IAAI,EAAE,QAAQ,GAAG,QAAH,GAAc,OAFZ;AAGhB,MAAA,cAAc,EAAE,gBAAgB,GAAG,UAAH,GAAgB,UAHhC;AAIhB,MAAA,qBAAqB,EAAE,gBAAgB;AACnC,QADmC;AAEnC,MAAA,YAFmC,oBAEnC,YAAY,CAAE,qBANF;AAOhB,MAAA,KAAK,EAAE,WAAW,KAAK,OAAhB,GAA0B,YAA1B,2CAA0B,YAAY,CAAE,KAAxC,qBAA0B,oBAAqB,KAA/C,GAAuD,IAP9C;AAQhB,MAAA,SAAS,EACP,WAAW,KAAK,WAAhB,GAA8B,YAA9B,6CAA8B,YAAY,CAAE,SAA5C,qBAA8B,sBAAyB,KAAvD,GAA+D,IATjD;AAUhB,MAAA,QAAQ,EAAE,YAAF,6CAAE,YAAY,CAAE,QAAhB,qBAAE,sBAAwB,KAVlB;AAWhB,MAAA,MAAM,EAAE,gCAAC,CAAA,YAAY,QAAZ,YAAA,YAAY,CAAE,MAAd,KAAwB,EAAzB,iBACN,KAAK,IAAK,KAAoB,CAAC,KADzB,CAXQ;AAchB,MAAA,UAdgB;AAehB,MAAA,aAAa,EACX,WAAW,KAAK,WAAhB;AACI,MAAA,2BADJ;AAEI,MAAA,YAAY,IAAI,2BAlBN,EAAlB;;AAqBA,QAAI,IAAI,CAAC,UAAL,IAAmB,CAAC,IAAI,CAAC,UAAL,CAAgB,MAAxC,EAAgD;AAC9C,aAAO,IAAI,CAAC,UAAZ;AACD;AAED,IAAA,IAAI,CAAC,gBAAL,GAAwB,QAAxB;AAEA,QAAI,UAAJ,EAAgB;AACd;AACA,UAAI,YAAY,IAAI,YAAY,CAAC,EAAjC,EAAqC;AACnC,cAAM,SAAS,GAAG,YAAY,CAAC,EAA/B;AAEA,eAAO,IAAI,CAAC,EAAZ;AACA,eAAO,IAAI,CAAC,UAAZ;AACA,eAAO,IAAI,CAAC,cAAZ;AACA,eAAO,IAAI,CAAC,UAAZ;AACA,eAAO,IAAI,CAAC,UAAZ;AACA,eAAO,IAAI,CAAC,mBAAZ;AAEA,QAAA,cAAc,CAAC,SAAD,EAAY,IAAZ,CAAd,CAAgC,IAAhC,CAAqC,QAAQ,IAAG;AAC9C,cAAI,CAAC,QAAL,EAAe;AACb;AACD;AAED,cAAI,KAAJ,EAAW;AACT,YAAA,KAAK;AACN;AAED,UAAA,IAAI;AACL,SAVD;AAWD;AACF,KAxBD;AAwBO,QAAI,YAAJ,EAAkB;AACvB;AACA,MAAA,cAAc,CAAC,IAAD,CAAd,CAAqB,IAArB,CAA0B,QAAQ,IAAG;AACnC,YAAI,CAAC,QAAL,EAAe;AACb;AACD;AAED,YAAI,KAAJ,EAAW;AACT,UAAA,KAAK,CAAC,QAAD,CAAL;AACD;AAED,QAAA,IAAI;AACL,OAVD;AAWD;AACF,GAhFD;AAkFA;AACA,QAAM,gBAAgB,GAAG,CAAC,KAAK,GAAG,EAAT,KAAe;AACtC,UAAM,KAAK,GAAG,KAAK,CAAC,MAAN,CAAa,EAAE,MAAM,EAAE,KAAV,EAAiB,SAAS,EAAE,gBAA5B,EAAb,CAAd;AACA,WAAO,cAAc,CAAC,GAAf,CAAmB;AACxB,MAAA,QAAQ,EAAE,mCAAmC,KAAK,EAD1B,EAAnB;AAEJ,IAAA,IAFI,CAGL,QAAQ,0BACN,iCAAA,QAAQ,CAAC,IAAT,CAAc,MAAd,kBAA0B,IAAD,KAAgB;AACvC,QAAA,KAAK,EAAE,IAAI,CAAC,KAD2B;AAEvC,QAAA,KAAK,EAAE,IAAI,CAAC,IAF2B,EAAhB,CAAzB,CADM,EAHH;AAQL,IAAA,WAAW,IAAI,EARV,CAAP;AAUD,GAZD;AAcA,QAAM,iBAAiB,GAAG,CAAC,KAAK,GAAG,EAAT,KAAe;AACvC,UAAM,KAAK,GAAG,KAAK,CAAC,MAAN,CAAa,EAAE,MAAM,EAAE,KAAV,EAAiB,SAAS,EAAE,gBAA5B,EAAb,CAAd;AACA,WAAO,cAAc,CAAC,GAAf,CAAmB;AACxB,MAAA,QAAQ,EAAE,qCAAqC,KAAK,EAD5B,EAAnB;AAEJ,IAAA,IAFI,CAGL,QAAQ,IAAG;AACT,YAAM,IAAI,GAAG,iCAAA,QAAQ,CAAC,IAAT,CAAc,MAAd,kBAA0B,IAAD,KAAgB;AACpD,QAAA,KAAK,EAAE,IAAI,CAAC,KADwC;AAEpD,QAAA,KAAK,EAAE,IAAI,CAAC,IAFwC,EAAhB,CAAzB,CAAb;;AAKA,MAAA,gBAAgB,CAAC,IAAD,CAAhB;AAEA;AACA,UACE,YAAY;AACZ,MAAA,YAAY,CAAC,QADb;AAEA,OAAC,YAAY,CAAC,QAAb,CAAsB,KAHzB,EAIE;AACA,QAAA,gBAAgB,CAAC,UAAD,EAAa,aAAa,EAA1B,CAAhB;AACD;AAED,aAAO,IAAP;AACD,KArBI,EAsBL,WAAW,IAAI,EAtBV,CAAP;AAwBD,GA1BD;AA4BA,QAAM,aAAa,GAAI,EAAD,IAAoB;AACxC,UAAM,QAAQ,GAAG,EAAE,KAAI,YAAJ,oBAAI,YAAY,CAAE,QAAlB,CAAnB;AAEA,QAAI,CAAC,QAAD,IAAa,QAAQ,CAAC,KAA1B,EAAiC;AAC/B,aAAO,IAAP;AACD;AAED,QAAI,MAAJ;AAEA;AACA,6BAAA,aAAa,MAAb,CAAA,aAAa,EAAS,MAAM,IAAG;AAC7B,UAAI,MAAM,CAAC,KAAP,KAAiB,QAAQ,CAAC,KAA1B,IAAmC,MAAM,CAAC,KAAP,KAAiB,QAAQ,CAAC,EAAjE,EAAqE;AACnE,QAAA,MAAM,GAAG,MAAT;AACD;AACF,KAJY,CAAb;AAMA,WAAO,MAAP;AACD,GAjBD;AAmBA,QAAM,oBAAoB,GAAG,CAAC,KAAK,GAAG,EAAT,KAAe;AAC1C,UAAM,KAAK,GAAG,KAAK,CAAC,MAAN,CAAa,EAAE,MAAM,EAAE,KAAV,EAAiB,SAAS,EAAE,gBAA5B,EAAb,CAAd;AACA,WAAO,cAAc,CAAC,GAAf,CAAmB;AACxB,MAAA,QAAQ,EAAE,sCAAsC,KAAK,EAD7B,EAAnB;AAEJ,IAAA,IAFI,CAGL,QAAQ,IAAG;AACT,YAAM,IAAI,GAAG,iCAAA,QAAQ,CAAC,IAAT,CAAc,MAAd,kBAA0B,IAAD,KAAgB;AACpD,QAAA,KAAK,EAAE,IAAI,CAAC,KADwC;AAEpD,QAAA,KAAK,EAAE,IAAI,CAAC,IAFwC,EAAhB,CAAzB,CAAb;;AAKA,MAAA,mBAAmB,CAAC,IAAD,CAAnB;AAEA;AACA,UACE,YAAY;AACZ,MAAA,YAAY,CAAC,SADb;AAEA,OAAC,YAAY,CAAC,SAAb,CAAuB,KAH1B,EAIE;AACA,QAAA,gBAAgB,CAAC,WAAD,EAAc,gBAAgB,EAA9B,CAAhB;AACD;AAED,aAAO,IAAP;AACD,KArBI,EAsBL,WAAW,IAAI,EAtBV,CAAP;AAwBD,GA1BD;AA4BA,QAAM,gBAAgB,GAAI,EAAD,IAAoB;AAC3C,UAAM,SAAS,GAAG,EAAE,KAAI,YAAJ,oBAAI,YAAY,CAAE,SAAlB,CAApB;AAEA,QAAI,CAAC,SAAD,IAAc,SAAS,CAAC,KAA5B,EAAmC;AACjC,aAAO,IAAP;AACD;AAED,QAAI,MAAJ;AAEA;AACA,6BAAA,gBAAgB,MAAhB,CAAA,gBAAgB,EAAS,IAAI,IAAG;AAC9B,UAAI,IAAI,CAAC,KAAL,KAAe,SAAS,CAAC,KAAzB,IAAkC,IAAI,CAAC,KAAL,KAAe,SAAS,CAAC,EAA/D,EAAmE;AACjE,QAAA,MAAM,GAAG,IAAT;AACD;AACF,KAJe,CAAhB;AAMA,WAAO,MAAP;AACD,GAjBD;AAmBA,QAAM,gBAAgB,GAAG,CAAC,KAAK,GAAG,EAAT,KAAe;AACtC,UAAM,KAAK,GAAG,KAAK,CAAC,MAAN,CAAa,EAAE,MAAM,EAAE,KAAV,EAAiB,SAAS,EAAE,gBAA5B,EAAb,CAAd;AACA,WAAO,cAAc,CAAC,GAAf,CAAmB;AACxB,MAAA,QAAQ,EAAE,kCAAkC,KAAK,EADzB,EAAnB;AAEJ,IAAA,IAFI,CAGL,QAAQ,IAAG;AACT,YAAM,IAAI,GAAG,iCAAA,QAAQ,CAAC,IAAT,CAAc,MAAd,kBAA0B,IAAD,KAAgB;AACpD,QAAA,KAAK,EAAE,IAAI,CAAC,KADwC;AAEpD,QAAA,KAAK,EAAE,IAAI,CAAC,IAFwC,EAAhB,CAAzB,CAAb;;AAKA,MAAA,eAAe,CAAC,IAAD,CAAf;AAEA;AACA,UAAI,YAAY,IAAI,YAAY,CAAC,KAA7B,IAAsC,CAAC,YAAY,CAAC,KAAb,CAAmB,KAA9D,EAAqE;AACnE,QAAA,gBAAgB,CAAC,OAAD,EAAU,YAAY,EAAtB,CAAhB;AACD;AAED,aAAO,IAAP;AACD,KAjBI,EAkBL,WAAW,IAAI,EAlBV,CAAP;AAoBD,GAtBD;AAwBA,QAAM,YAAY,GAAI,SAAD,IAA2B;AAC9C,UAAM,KAAK,GAAG,SAAS,KAAI,YAAJ,oBAAI,YAAY,CAAE,KAAlB,CAAvB;AAEA,QAAI,CAAC,KAAD,IAAU,KAAK,CAAC,KAApB,EAA2B;AACzB,aAAO,IAAP;AACD;AAED,QAAI,MAAJ;AAEA;AACA,6BAAA,YAAY,MAAZ,CAAA,YAAY,EAAS,KAAK,IAAG;AAC3B,UAAI,KAAK,CAAC,KAAN,KAAgB,KAAK,CAAC,KAAtB,IAA+B,KAAK,CAAC,KAAN,KAAgB,KAAK,CAAC,EAAzD,EAA6D;AAC3D,QAAA,MAAM,GAAG,KAAT;AACD;AACF,KAJW,CAAZ;AAMA,WAAO,MAAP;AACD,GAjBD;AAmBA;AACA,QAAM,gBAAgB,GAAG,CAAC,IAAD,EAAe,KAAf,KAA6B;AACpD,IAAA,eAAe,CAAC,gBAAgB,KAAK;AACnC,SAAG,gBADgC;AAEnC,OAAC,IAAD,GAAQ,KAF2B,EAAL,CAAjB,CAAf;;AAID,GALD;AAOA;AACA,QAAM,YAAY,GAChB,KADmB,IAEjB;AACF,UAAM,EAAE,MAAF,KAAa,KAAnB;AAEA,IAAA,gBAAgB,CAAC,MAAM,CAAC,IAAR,EAAc,MAAM,CAAC,KAArB,CAAhB;AACD,GAND;AAQA,QAAM,qBAAqB,GACzB,KAD4B,IAE1B;AACF,UAAM,EAAE,MAAF,KAAa,KAAnB;AACA,UAAM,KAAK,GAAG,CAAC,MAAM,CAAC,KAAtB;AAEA;AACA,QAAI,KAAK,KAAK,CAAd,EAAiB;AACf,MAAA,gBAAgB,CAAC,MAAM,CAAC,IAAR,EAAc,IAAd,CAAhB;AACD,KAFD;AAEO;AACL,MAAA,gBAAgB,CACd,MAAM,CAAC,IADO,EAEd,KAAK,GAAG,IAAI,CAAC,GAAL,CAAS,KAAT,EAAgB,WAAhB,CAAH,GAAkC,KAFzB,CAAhB;AAID;AACF,GAfD;AAiBA,QAAM,WAAW,GAAI,KAAD,IAAkB;AACpC,IAAA,gBAAgB,CAAC,KAAD,EAAQ,KAAK,IAAI,EAAjB,CAAhB;AACD,GAFD;AAIA,QAAM,cAAc,GAAI,KAAD,IAAwB;AAC7C,IAAA,gBAAgB,CAAC,QAAD,EAAW,KAAK,IAAI,EAApB,CAAhB;AACD,GAFD;AAIA,QAAM,cAAc,GAAI,KAAD,IAAwB;AAC7C,IAAA,gBAAgB,CAAC,UAAD,EAAa,KAAK,IAAI,EAAtB,CAAhB;AACD,GAFD;AAIA,QAAM,iBAAiB,GAAI,SAAD,IAA2B;AACnD,IAAA,gBAAgB,CAAC,WAAD,EAAc,SAAS,IAAI,SAA3B,CAAhB;AACA,IAAA,gBAAgB,CAAC,OAAD,EAAU,IAAV,CAAhB;AACD,GAHD;AAKA,QAAM,aAAa,GAAI,KAAD,IAAuB;AAC3C,IAAA,gBAAgB,CAAC,OAAD,EAAU,KAAK,IAAI,SAAnB,CAAhB;AACA,IAAA,gBAAgB,CAAC,WAAD,EAAc,IAAd,CAAhB;AACD,GAHD;AAKA,QAAM,cAAc,GAAI,OAAD,IAAqB;AAC1C,IAAA,gBAAgB,CAAC,QAAD,EAAW,OAAX,CAAhB;AACD,GAFD;AAIA,QAAM,iBAAiB,GAAI,EAAD,IAAiB;AACzC,IAAA,mBAAmB,CAAC,EAAE,KAAK,UAAR,CAAnB;AAEA,UAAM,MAAM,GAAG;AACb,MAAA,EADa;AAEb,MAAA,SAAS,EAAE,YAAY;AACnB,MAAA,YAAY,CAAC,qBADM,qBACnB,sBAAoC,SADjB;AAEnB,MAAA,SAJS,EAAf;;AAOA,IAAA,gBAAgB,CAAC,uBAAD,EAA0B,MAA1B,CAAhB;AACD,GAXD;AAaA,QAAM,iBAAiB,GAAI,KAAD,IAA+C;AACvE,UAAM,EAAE,MAAF,KAAa,KAAnB;AAEA,UAAM,MAAM,GAAG;AACb,MAAA,EAAE,EAAE,YAAY,6BAAG,YAAY,CAAC,qBAAhB,qBAAG,uBAAoC,EAAvC,GAA4C,SAD/C;AAEb,MAAA,SAAS,EAAE,MAAM,CAAC,KAFL,EAAf;;AAKA,IAAA,gBAAgB,CAAC,uBAAD,EAA0B,MAA1B,CAAhB;AACD,GATD;AAWA,QAAM,oBAAoB,GAAI,SAAD,IAAsB;AACjD,IAAA,gBAAgB,CAAC,eAAD,EAAkB,SAAlB,CAAhB;AACD,GAFD;AAIA,QAAM,mBAAmB,GAAI,KAAD,IAAe;AACzC,UAAM,EAAE,MAAF,KAAa,KAAnB;AAEA,IAAA,cAAc,CAAC,MAAM,CAAC,KAAR,CAAd;AACD,GAJD;AAMA,QAAM,cAAc,GAAI,KAAD,IAAe;AACpC,UAAM,EAAE,MAAF,KAAa,KAAnB;AAEA,IAAA,eAAe,CAAC,MAAM,CAAC,KAAR,CAAf;AACD,GAJD;AAMA;AACA,QAAM,yBAAyB,GAAG,MAAK;AACrC,QAAI,CAAC,oBAAoB,CAAC,MAA1B,EAAkC;AAChC,aAAO,KAAP;AACD;AAED,QAAI,OAAO,GAAG,KAAd;AAEA,6BAAA,oBAAoB,MAApB,CAAA,oBAAoB,EAAS,OAAO,IAAG;AACrC,UAAI,CAAC,CAAC,OAAO,CAAC,MAAV,2BAAoB,OAAO,CAAC,UAA5B,aAAoB,oBAAoB,MAA5C,EAAoD;AAClD,QAAA,OAAO,GAAG,IAAV;AACD;AACF,KAJmB,CAApB;AAMA,WAAO,OAAP;AACD,GAdD;AAgBA,QAAM,QAAQ,GAAG,MAAK;AACpB,QACE,YAAY;AACZ,IAAA,YAAY,CAAC,IADD,aACZ,mBAAmB,MADnB;AAEA,IAAA,YAAY,CAAC,MAFb,aAEA,qBAAqB,MAFrB;AAGA,IAAA,YAAY,CAAC,OAHb,aAGA,sBAAsB,MAHtB;AAIA,IAAA,YAAY,CAAC,eAAb,KAAiC,SAJjC;AAKE,IAAA,WAAW,KAAK,WAAhB,IAA+B,CAAC,CAAC,YAAY,CAAC,SAA/C;AACE,IAAA,WAAW,KAAK,OAAhB,IAA2B,CAAC,CAAC,YAAY,CAAC,KAN7C;AAOA,IAAA,yBAAyB,EAR3B,EASE;AACA,UAAI,QAAJ,EAAc;AACZ,QAAA,cAAc,CAAC,KAAD,CAAd;AACD,OAFD;AAEO,UACL,CAAC,CAAC,YAAY,CAAC,QAAf;AACA,MAAA,YAAY,CAAC,GADb,aACA,kBAAkB,MADlB;AAEC,MAAA,gBAAgB,IAAI,CAAC,4BAAC,YAAY,CAAC,qBAAd,aAAC,uBAAoC,EAArC,CAFtB;AAGC,MAAA,gBAAgB;AACf,iCAAA,YAAY,CAAC,qBAAb,4CAAoC,SAApC,MAAkD,SAJpD,CADK,EAML;AACA,QAAA,cAAc,CAAC,KAAD,CAAd;AACD,OARM;AAQA;AACL,QAAA,cAAc,CAAC,IAAD,CAAd;AACD;AACF,KAvBD;AAuBO;AACL,MAAA,cAAc,CAAC,IAAD,CAAd;AACD;AACF,GA3BD;AA6BA;AACA,EAAA,SAAS,CAAC,MAAK;AACb,QACE,UAAU;AACT,KAAC,YAAD;AACC,KAAC,YAAY,CAAC,EADf;AAEE,IAAA,KAAK,IAAI,KAAK,CAAC,EAAN,KAAa,YAAY,CAAC,EAFrC;AAGE,IAAA,QAAQ,IAAI,IAJL,CADZ,EAME;AACA,UAAI,KAAK,IAAI,KAAK,CAAC,EAAN,KAAa,IAAtB,IAA8B,CAAC,OAA/B,IAA0C,CAAC,UAA/C,EAA2D;AACzD,cAAM,EAAE,GAAG,KAAK,CAAC,EAAN,IAAY,CAAvB;AACA,QAAA,aAAa,CAAC,EAAD,CAAb;AACD;AACF,KAXD;AAWO,QACL,CAAC,UAAD;AACC,KAAC,YAAD,IAAiB,YAAY,CAAC,EAA9B,IAAqC,QAAQ,IAAI,IADlD,CADK,EAGL;AACA,MAAA,eAAe,CAAC,EAAE,GAAG,aAAL,EAAD,CAAf;AACA,MAAA,uBAAuB,CAAC,EAAD,CAAvB;AACA,MAAA,uBAAuB,CAAC,QAAD,CAAvB;AACD;AACF,GApBQ,EAoBN,CAAC,KAAD,CApBM,CAAT;AAsBA,EAAA,SAAS,CAAC,MAAK;AACb,QAAI,QAAJ,EAAc;AACZ;AACA,YAAM,QAAQ,GAAG,iCAAC,QAAQ,CAAC,UAAT,IAAuB,EAAxB,kBAAgC,OAAO,IAAG;AACzD,cAAM,MAAM,GACV,OAAO,OAAO,CAAC,qBAAf,KAAyC,QAAzC;AACI,QAAA,IAAI,CAAC,KAAL,CAAW,OAAO,CAAC,qBAAnB,CADJ;AAEI,UAHN;AAIA,eAAO;AACL,UAAA,MAAM,EAAE,OAAO,CAAC,IADX;AAEL;AACA,UAAA,UAAU,EAAE,MAAM,CAAC,MAAP,IAAiB,OAAO,CAAC,qBAHhC;AAIL,UAAA,OAAO,EAAE,oBAJJ,EAAP;;AAMD,OAXgB,CAAjB;AAaA,MAAA,uBAAuB,CAAC,QAAD,CAAvB;AACA,MAAA,uBAAuB,CACrB,QAAQ,CAAC,MAAT,KAAoB,oBAAoB,CAAC,MAAzC,GAAkD,QAAlD,GAA6D,QADxC,CAAvB;AAGA,MAAA,cAAc,CAAC,QAAQ,CAAC,KAAT,GAAiB,OAAjB,GAA2B,WAA5B,CAAd;AACA,MAAA,eAAe,CACb,QAAQ,CAAC,KAAT;AACI,MAAA,QAAQ,CAAC,aAAT,IAA0B,2BAD9B;AAEI,MAAA,2BAHS,CAAf;AAKA,YAAM,eAAe,GACnB,OAAO,QAAQ,CAAC,qBAAhB,KAA0C,QAA1C;AACI,MAAA,IAAI,CAAC,KAAL,CAAW,QAAQ,CAAC,qBAApB,CADJ;AAEI,MAAA,QAAQ,CAAC,qBAHf;AAKA,MAAA,mBAAmB,CAAC,QAAQ,CAAC,cAAT,KAA4B,UAA7B,CAAnB;AAEA,MAAA,eAAe,CAAC;AACd,WAAG,QADW;AAEd,QAAA,KAAK,EAAE,QAAQ,CAAC,KAAT;AACH,QAAA,YAAY,CAAC,QAAQ,CAAC,KAAV,CAAZ,IAAgC;AAC9B,UAAA,KAAK,EAAG,QAAQ,CAAC,KAAT,CAA+B,EADT;AAE9B,UAAA,KAAK,EAAG,QAAQ,CAAC,KAAT,CAA+B,UAFT,EAD7B;;AAKH,QAAA,SAPU;AAQd,QAAA,SAAS,EAAE,QAAQ,CAAC,SAAT;AACP,QAAA,gBAAgB,CAAC,QAAQ,CAAC,SAAV,CAAhB,IAAwC;AACtC,UAAA,KAAK,EAAG,QAAQ,CAAC,SAAT,CAAuC,EADT;AAEtC,UAAA,KAAK,EAAG,QAAQ,CAAC,SAAT,CAAuC,eAFT,EADjC;;AAKP,QAAA,SAbU;AAcd,QAAA,QAAQ,EAAE,QAAQ,CAAC,QAAT;AACN,QAAA,aAAa,CAAC,QAAQ,CAAC,QAAV,CAAb,IAAoC;AAClC,UAAA,KAAK,EAAG,QAAQ,CAAC,QAAT,CAAqC,EADX;AAElC,UAAA,KAAK,EAAG,QAAQ,CAAC,QAAT,CAAqC,aAFX,EAD9B;;AAKN,QAAA,SAnBU;AAoBd,QAAA,MAAM,EAAE,iCAAC,QAAQ,CAAC,MAAT,IAAmB,EAApB,kBAA4B,KAAK,KAAK;AAC5C,UAAA,KAAK,EAAE,KAAK,CAAC,EAD+B;AAE5C,UAAA,KAAK,EAAE,GAAI,KAAe,CAAC,UAAU,IAAK,KAAe,CAAC,SAAS,EAFvB,EAAL,CAAjC,CApBM;;AAwBd;AACA,QAAA,qBAAqB,EACnB,QAAQ,CAAC,cAAT,KAA4B,UAA5B;AACI;AACE,UAAA,EAAE,EAAE,UADN,EADJ;;AAII,QAAA,eA9BQ,EAAD,CAAf;;AAgCD;AACF,GAlEQ,EAkEN,CAAC,QAAD,CAlEM,CAAT;AAoEA;AACA,QAAM,gBAAgB,GAAG,YAAY,IAAI,EAAzC;AACA,EAAA,SAAS,CAAC,MAAK;AACb,IAAA,QAAQ;AACT,GAFQ,EAEN;AACD,EAAA,gBAAgB,CAAC,IADhB;AAED,EAAA,gBAAgB,CAAC,MAFhB;AAGD,EAAA,gBAAgB,CAAC,QAHhB;AAID,EAAA,gBAAgB,CAAC,GAJhB;AAKD,EAAA,gBAAgB,CAAC,qBALhB;AAMD,EAAA,gBAAgB,CAAC,OANhB;AAOD,EAAA,gBAAgB,CAAC,eAPhB;AAQD,EAAA,gBAAgB,CAAC,SARhB;AASD,EAAA,gBAAgB,CAAC,KAThB;AAUD,EAAA,WAVC;AAWD,EAAA,oBAXC;AAYD,EAAA,gBAZC,CAFM,CAAT;;AAiBA;AACA,MAAI,QAAQ,IAAI,IAAhB,EAAsB;AACpB,IAAA,WAAW,CAAC,KAAD,CAAX;AACD;AAED;AACA,QAAM,gBAAgB,GAAG,qBAAA,UAAU,MAAV,CAAA,UAAU,EAAK,SAAS,IAC/C,cAAC,MAAD,CAAQ,MAAR,IAAe,GAAG,EAAE,SAAS,CAAC,KAA9B,EAAqC,KAAK,EAAE,SAAS,CAAC,KAAtD;AACG,EAAA,SAAS,CAAC,KADb,CADiC,CAAnC;;AAMA,QAAM,gBAAgB,GAAG,qBAAA,iBAAiB,MAAjB,CAAA,iBAAiB,EAAK,MAAM,IACnD,cAAC,MAAD,CAAQ,MAAR,IAAe,GAAG,EAAE,MAAM,CAAC,KAA3B,EAAkC,KAAK,EAAE,MAAM,CAAC,KAAhD;AACG,EAAA,MAAM,CAAC,KADV,CADwC,CAA1C;;AAMA,SACE,cAAC,WAAD,IACE,SAAS,EAAC,oBADZ,EAEE,UAAU,MAFZ,EAGE,oBAAoB,EAAE,WAHxB,EAIE,sBAAsB,EAAE,MAJ1B,EAKE,MAAM,EAAE,IALV,EAME,iBAAiB,EAAE,UAAU,GAAG,CAAC,CAAC,MAAD,CAAJ,GAAe,CAAC,CAAC,KAAD,CAN/C,EAOE,IAAI,EAAE,IAPR,EAQE,KAAK,EAAC,MARR,EASE,QAAQ,EAAC,QATX,EAUE,KAAK,EACH,sBAAI,aAAU,0BAAd;AACG,IAAA,UAAU,GACT,cAAC,UAAD,IAAY,IAAI,EAAC,UAAjB,GADS,GAGT,cAAC,UAAD,IAAY,IAAI,EAAC,YAAjB,GAJJ;AAMG,IAAA,UAAU;AACP,IAAA,CAAC,CAAC,QAAQ,QAAQ,GAAG,QAAH,GAAc,OAAO,EAAtC,CADM;AAEP,IAAA,CAAC,CAAC,OAAO,QAAQ,GAAG,QAAH,GAAc,OAAO,EAArC,CARP,CAXJ;;AAuBE,gBAAC,sBAAD;AACE,yBAAK,SAAS,EAAC,gBAAf;AACE,gBAAC,oBAAD;AACE,yBAAK,SAAS,EAAC,eAAf;AACG,EAAA,QAAQ,GAAG,CAAC,CAAC,aAAD,CAAJ,GAAsB,CAAC,CAAC,YAAD,CADlC;AAEE,0BAAM,SAAS,EAAC,UAAhB,QAFF,CADF;;AAKE,yBAAK,SAAS,EAAC,iBAAf;AACE,2BACE,IAAI,EAAC,MADP,EAEE,IAAI,EAAC,MAFP,EAGE,KAAK,EAAE,YAAY,GAAG,YAAY,CAAC,IAAhB,GAAuB,EAH5C,EAIE,WAAW,EAAE,QAAQ,GAAG,CAAC,CAAC,aAAD,CAAJ,GAAsB,CAAC,CAAC,YAAD,CAJ9C,EAKE,QAAQ,EAAE,YALZ,GADF,CALF,CADF;;;AAgBE,gBAAC,oBAAD;AACE,yBAAK,SAAS,EAAC,eAAf;AACG,EAAA,CAAC,CAAC,QAAD,CADJ;AAEE,0BAAM,SAAS,EAAC,UAAhB,QAFF,CADF;;AAKE,yBAAK,aAAU,eAAf,EAA+B,SAAS,EAAC,iBAAzC;AACE,gBAAC,WAAD,IACE,IAAI,EAAC,QADP,EAEE,OAAO,MAFT,EAGE,KAAK,EAAE,YAAY,GAAG,YAAY,CAAC,MAAhB,GAAyB,EAH9C,EAIE,WAAW,EAAE,gBAJf,EAKE,cAAc,MALhB,CAKiB;AALjB,MAME,YAAY,MANd,EAOE,QAAQ,EAAE,cAPZ,GADF,CALF,CAhBF;;;AAiCE,gBAAC,oBAAD;AACE,yBAAK,SAAS,EAAC,eAAf,IAAgC,CAAC,CAAC,aAAD,CAAjC,CADF;AAEE,yBAAK,SAAS,EAAC,iBAAf;AACE,2BACE,IAAI,EAAC,MADP,EAEE,IAAI,EAAC,aAFP,EAGE,KAAK,EAAE,YAAY,GAAG,YAAY,CAAC,WAAb,IAA4B,EAA/B,GAAoC,EAHzD,EAIE,WAAW,EAAE,CAAC,CAAC,aAAD,CAJhB,EAKE,QAAQ,EAAE,YALZ,GADF,CAFF,CAjCF;;;AA6CE,gBAAC,qBAAD;AACE,gBAAC,MAAD,IACE,QAAQ,EAAE,cADZ,EAEE,OAAO,EAAE,YAAY,GAAG,YAAY,CAAC,MAAhB,GAAyB,IAFhD,GADF;AAKE,yBAAK,SAAS,EAAC,cAAf,aALF,CA7CF,CADF;;;AAsDE,yBAAK,SAAS,EAAC,gBAAf;AACG,GAAC,QAAD,IACC,uBAAK,SAAS,EAAC,kBAAf;AACE,gBAAC,kBAAD;AACE,4BAAK,CAAC,CAAC,iBAAD,CAAN,CADF,CADF;;AAIE,gBAAC,oBAAD;AACE,yBAAK,SAAS,EAAC,eAAf;AACG,EAAA,CAAC,CAAC,UAAD,CADJ;AAEE,0BAAM,SAAS,EAAC,UAAhB,QAFF,CADF;;AAKE,yBAAK,SAAS,EAAC,iBAAf;AACE,gBAAC,WAAD,IACE,IAAI,EAAC,QADP,EAEE,KAAK,EACH,YAAY,IAAI,YAAY,CAAC,QAA7B;AACI;AACE,MAAA,KAAK,EAAE,YAAY,CAAC,QAAb,CAAsB,KAD/B;AAEE,MAAA,KAAK,EAAE,YAAY,CAAC,QAAb,CAAsB,KAF/B,EADJ;;AAKI,IAAA,SARR,EAUE,WAAW,EAAE,iBAVf,EAWE,cAAc,MAXhB,CAWiB;AAXjB,MAYE,YAAY,MAZd,EAaE,QAAQ,EAAE,cAbZ,GADF,CALF,CAJF;;;AA2BE,gBAAC,oBAAD;AACE,yBAAK,SAAS,EAAC,eAAf;AACG,EAAA,CAAC,CAAC,WAAD,CADJ;AAEE,0BAAM,SAAS,EAAC,UAAhB,QAFF,CADF;;AAKE,gBAAC,eAAD,IACE,IAAI,EAAC,KADP,EAEE,QAAQ,EAAC,KAFX,EAGE,gBAAgB,EAAE,KAHpB,EAIE,QAAQ,EAAE,EAJZ,EAKE,QAAQ,EAAE,EALZ,EAME,QAAQ,EAAE,WANZ,EAOE,QAAQ,EAAE,KAPZ,EAQE,KAAK,EAAE,YAAY,GAAG,YAAY,CAAC,GAAhB,GAAsB,EAR3C,GALF,CA3BF;;AA2CE,yBAAK,SAAS,EAAC,uBAAf;AACE,gBAAC,oBAAD;AACE,yBAAK,SAAS,EAAC,eAAf;AACG,EAAA,CAAC,CAAC,qBAAD,CADJ;AAEE,0BAAM,SAAS,EAAC,UAAhB,QAFF,CADF;;AAKE,yBAAK,SAAS,EAAC,iBAAf;AACE,gBAAC,MAAD,IACE,QAAQ,EAAE,iBADZ,EAEE,WAAW,EAAC,WAFd,EAGE,YAAY,EACV,YAAY;AACR,+BAAA,YAAY,CAAC,qBAAb,4CAAoC,EAApC,KAA0C,SADlC;AAER,IAAA,SANR,EAQE,KAAK,EACH,YAAY;AACR,+BAAA,YAAY,CAAC,qBAAb,4CAAoC,EAApC,KAA0C,SADlC;AAER,IAAA,SAXR;AAcG,EAAA,gBAdH,CADF,CALF,CADF;;;;AAyBE,gBAAC,oBAAD;AACE,yBAAK,SAAS,EAAC,eAAf;AACG,EAAA,CAAC,CAAC,OAAD,CADJ;AAEE,0BAAM,SAAS,EAAC,UAAhB,QAFF,CADF;;AAKE,yBAAK,SAAS,EAAC,iBAAf;AACE,2BACE,IAAI,EAAC,QADP,EAEE,IAAI,EAAC,WAFP,EAGE,QAAQ,EAAE,gBAHZ,EAIE,KAAK,EACH,YAAY;AACZ,IAAA,YAAY,CAAC,qBADb;AAEA,IAAA,YAAY,CAAC,qBAAb,CAAmC,SAAnC;AACE,IAAA,SAHF;AAII,IAAA,YAAY,CAAC,qBAAb,CAAmC,SAJvC;AAKI,MAVR,EAYE,WAAW,EAAE,CAAC,CAAC,OAAD,CAZhB,EAaE,QAAQ,EAAE,iBAbZ,GADF,CALF,CAzBF,CA3CF,CAFJ;;;;;AAgGE,yBAAK,SAAS,EAAC,iBAAf;AACE,gBAAC,kBAAD;AACE;AACG,EAAA,QAAQ;AACL,EAAA,CAAC,CAAC,iBAAD,CADI;AAEL,EAAA,CAAC,CAAC,0BAAD,CAHP,CADF;;AAME,0BAAM,SAAS,EAAC,UAAhB,QANF,CADF;;AASE,gBAAC,wBAAD,IACE,KAAK,EACF,YAAY,IAAI,YAAY,CAAC,OAA9B,IAA0C,kBAF9C,EAIE,QAAQ,EAAE,MAAM,IAAI,gBAAgB,CAAC,SAAD,EAAY,MAAZ,CAJtC,GATF;AAeE,gBAAC,kBAAD;AACE,4BAAK,CAAC,CAAC,mBAAD,CAAN,CADF,CAfF;;AAkBE,gBAAC,oBAAD;AACE,yBAAK,SAAS,EAAC,eAAf;AACG,EAAA,CAAC,CAAC,eAAD,CADJ;AAEE,0BAAM,SAAS,EAAC,UAAhB,QAFF,CADF;;AAKE,yBAAK,SAAS,EAAC,iBAAf;AACE,gBAAC,MAAD,IACE,QAAQ,EAAE,oBADZ,EAEE,WAAW,MAFb,EAGE,YAAY,EACV,YAAY;AACR,IAAA,YAAY,CAAC,aAAb,IAA8B,iBADtB;AAER,IAAA,iBANR,EAQE,KAAK,EACH,YAAY;AACR,IAAA,YAAY,CAAC,aAAb,IAA8B,iBADtB;AAER,IAAA,iBAXR;AAcG,EAAA,gBAdH,CADF,CALF,CAlBF;;;;AA0CE,gBAAC,oBAAD;AACE,yBAAK,SAAS,EAAC,eAAf;AACG,EAAA,CAAC,CAAC,iBAAD,CADJ;AAEE,0BAAM,SAAS,EAAC,UAAhB,QAFF,CADF;;AAKE,yBAAK,SAAS,EAAC,iBAAf;AACE,2BACE,IAAI,EAAC,QADP,EAEE,GAAG,EAAC,GAFN,EAGE,IAAI,EAAC,iBAHP,EAIE,KAAK,EAAE,CAAA,YAAY,QAAZ,YAAA,YAAY,CAAE,eAAd,KAAiC,EAJ1C,EAKE,WAAW,EAAE,CAAC,CAAC,iBAAD,CALhB,EAME,QAAQ,EAAE,qBANZ,GADF;AASE,0BAAM,SAAS,EAAC,aAAhB,cATF,CALF,CA1CF;;;AA2DG,GAAC,QAAD,IACC,cAAC,oBAAD;AACE,yBAAK,SAAS,EAAC,eAAf,IAAgC,CAAC,CAAC,cAAD,CAAjC,CADF;AAEE,yBAAK,SAAS,EAAC,iBAAf;AACE,2BACE,IAAI,EAAC,QADP,EAEE,GAAG,EAAC,GAFN,EAGE,IAAI,EAAC,cAHP,EAIE,KAAK,EAAE,CAAA,YAAY,QAAZ,YAAA,YAAY,CAAE,YAAd,KAA8B,EAJvC,EAKE,WAAW,EAAE,CAAC,CAAC,iBAAD,CALhB,EAME,QAAQ,EAAE,qBANZ,GADF;AASE,0BAAM,SAAS,EAAC,aAAhB,cATF,CAFF,CA5DJ,CAhGF;;;;AA4KE,yBAAK,SAAS,EAAC,gBAAf;AACE,gBAAC,kBAAD;AACE,4BAAK,CAAC,CAAC,iBAAD,CAAN,CADF;AAEE,0BAAM,SAAS,EAAC,UAAhB,QAFF,CADF;;AAKE,gBAAC,KAAD,CAAO,KAAP,IAAa,QAAQ,EAAE,mBAAvB,EAA4C,KAAK,EAAE,WAAnD;AACE,gBAAC,WAAD,IAAa,KAAK,EAAC,WAAnB,IAAgC,CAAC,CAAC,WAAD,CAAjC,CADF;AAEE,gBAAC,WAAD,IAAa,KAAK,EAAC,OAAnB,IAA4B,CAAC,CAAC,OAAD,CAA7B,CAFF,CALF;;AASG,EAAA,mBAAmB,IAClB,uBAAK,SAAS,EAAC,kBAAf;AACE,gBAAC,gBAAD,IACE,QAAQ,EAAE,cADZ,EAEE,KAAK,EAAE,YAFT;AAIE,gBAAC,WAAD,IAAa,KAAK,EAAC,KAAnB,IAA0B,CAAC,CAAC,aAAD,CAA3B,CAJF;AAKE,gBAAC,WAAD,IAAa,KAAK,EAAC,KAAnB,IAA0B,CAAC,CAAC,aAAD,CAA3B,CALF,CADF,CAVJ;;;AAoBE,gBAAC,WAAD,IACE,SAAS,EACP,WAAW,KAAK,OAAhB;AACI,kBADJ;AAEI,gCAJR,EAME,IAAI,EAAC,OANP,EAOE,KAAK,EACH,YAAY,IAAI,YAAY,CAAC,KAA7B;AACI;AACE,MAAA,KAAK,EAAE,YAAY,CAAC,KAAb,CAAmB,KAD5B;AAEE,MAAA,KAAK,EAAE,YAAY,CAAC,KAAb,CAAmB,KAF5B,EADJ;;AAKI,IAAA,SAbR,EAeE,WAAW,EAAE,gBAff,EAgBE,cAAc,MAhBhB,CAgBiB;AAhBjB,MAiBE,YAAY,MAjBd,EAkBE,QAAQ,EAAE,aAlBZ,GApBF;AAwCE,gBAAC,WAAD,IACE,SAAS,EACP,WAAW,KAAK,WAAhB;AACI,kBADJ;AAEI,gCAJR,EAME,IAAI,EAAC,WANP,EAOE,KAAK,EACH,YAAY,IAAI,YAAY,CAAC,SAA7B;AACI;AACE,MAAA,KAAK,EAAE,YAAY,CAAC,SAAb,CAAuB,KADhC;AAEE,MAAA,KAAK,EAAE,YAAY,CAAC,SAAb,CAAuB,KAFhC,EADJ;;AAKI,IAAA,SAbR,EAeE,WAAW,EAAE,oBAff,EAgBE,cAAc,MAhBhB,CAgBiB;AAhBjB,MAiBE,YAAY,MAjBd,EAkBE,QAAQ,EAAE,iBAlBZ,GAxCF;AA4DE,gBAAC,kBAAD;AACE,4BAAK,CAAC,CAAC,qBAAD,CAAN,CADF;AAEE,0BAAM,SAAS,EAAC,UAAhB,QAFF,CA5DF;;AAgEG,uBAAA,oBAAoB,MAApB,CAAA,oBAAoB,EAAK,CAAC,mBAAD,EAAsB,CAAtB,KACxB,cAAC,kBAAD,IACE,OAAO,EAAE,mBADX,EAEE,KAAK,EAAE,CAFT,EAGE,QAAQ,EAAE,yBAHZ,EAIE,QAAQ,EAAE,yBAJZ,GADmB,CAhEvB;AAwEE,gBAAC,qBAAD,IACE,aAAU,kBADZ,EAEE,MAAM,EAAE,oBAFV,EAGE,OAAO,EAAE,iBAHX,GAxEF,CA5KF,CAtDF,CAvBF,CADF;;;;;AA4UD,CAr6BD,C,cAAM,gB,kxBAiFA,qB;AAs1BS,UAAU,CAAC,gBAAD,C,CAAzB,wB,iLA3vCM,gB,kHACA,W,6GAgBA,oB,sHACA,2B,6HACA,U,4GA+BA,iB,mHAmBA,iB,mHACA,uB,yHACA,kB,oHACA,a,+GAcA,W,6GAMA,U,4GAIA,sB,wHAmEA,kB,oHAgBA,qB,uHAUO,oB,sHAwFP,W,6GAKA,gB,kHAKA,2B,6HAqBA,qB,uHAgCA,gB","sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React, { FunctionComponent, useState, useEffect } from 'react';\nimport { styled, t, SupersetClient } from '@superset-ui/core';\nimport rison from 'rison';\nimport { useSingleViewResource } from 'src/views/CRUD/hooks';\n\nimport Icon from 'src/components/Icon';\nimport { Switch } from 'src/components/Switch';\nimport Modal from 'src/components/Modal';\nimport { Radio } from 'src/components/Radio';\nimport { AsyncSelect, NativeGraySelect as Select } from 'src/components/Select';\nimport { FeatureFlag, isFeatureEnabled } from 'src/featureFlags';\nimport withToasts from 'src/messageToasts/enhancers/withToasts';\nimport Owner from 'src/types/Owner';\nimport TextAreaControl from 'src/explore/components/controls/TextAreaControl';\nimport { AlertReportCronScheduler } from './components/AlertReportCronScheduler';\nimport { NotificationMethod } from './components/NotificationMethod';\n\nimport {\n  AlertObject,\n  ChartObject,\n  DashboardObject,\n  DatabaseObject,\n  MetaObject,\n  Operator,\n  Recipient,\n} from './types';\n\nconst SELECT_PAGE_SIZE = 2000; // temporary fix for paginated query\nconst TIMEOUT_MIN = 1;\n\ntype SelectValue = {\n  value: string;\n  label: string;\n};\n\ninterface AlertReportModalProps {\n  addDangerToast: (msg: string) => void;\n  alert?: AlertObject | null;\n  isReport?: boolean;\n  onAdd?: (alert?: AlertObject) => void;\n  onHide: () => void;\n  show: boolean;\n}\n\nconst NOTIFICATION_METHODS: NotificationMethod[] = ['Email', 'Slack'];\nconst DEFAULT_NOTIFICATION_FORMAT = 'PNG';\nconst CONDITIONS = [\n  {\n    label: t('< (Smaller than)'),\n    value: '<',\n  },\n  {\n    label: t('> (Larger than)'),\n    value: '>',\n  },\n  {\n    label: t('<= (Smaller or equal)'),\n    value: '<=',\n  },\n  {\n    label: t('>= (Larger or equal)'),\n    value: '>=',\n  },\n  {\n    label: t('== (Is equal)'),\n    value: '==',\n  },\n  {\n    label: t('!= (Is not equal)'),\n    value: '!=',\n  },\n  {\n    label: t('Not null'),\n    value: 'not null',\n  },\n];\n\nconst RETENTION_OPTIONS = [\n  {\n    label: t('None'),\n    value: 0,\n  },\n  {\n    label: t('30 days'),\n    value: 30,\n  },\n  {\n    label: t('60 days'),\n    value: 60,\n  },\n  {\n    label: t('90 days'),\n    value: 90,\n  },\n];\n\nconst DEFAULT_RETENTION = 90;\nconst DEFAULT_WORKING_TIMEOUT = 3600;\nconst DEFAULT_CRON_VALUE = '0 * * * *'; // every hour\nconst DEFAULT_ALERT = {\n  active: true,\n  crontab: DEFAULT_CRON_VALUE,\n  log_retention: DEFAULT_RETENTION,\n  working_timeout: DEFAULT_WORKING_TIMEOUT,\n  name: '',\n  owners: [],\n  recipients: [],\n  sql: '',\n  validator_config_json: {},\n  validator_type: '',\n  grace_period: undefined,\n};\n\nconst StyledModal = styled(Modal)`\n  .ant-modal-body {\n    overflow: initial;\n  }\n`;\n\nconst StyledIcon = styled(Icon)`\n  margin: auto ${({ theme }) => theme.gridUnit * 2}px auto 0;\n`;\n\nconst StyledSectionContainer = styled.div`\n  display: flex;\n  min-width: 1000px;\n  flex-direction: column;\n\n  .header-section {\n    display: flex;\n    flex: 0 0 auto;\n    align-items: center;\n    width: 100%;\n    padding: ${({ theme }) => theme.gridUnit * 4}px;\n    border-bottom: 1px solid ${({ theme }) => theme.colors.grayscale.light2};\n  }\n\n  .column-section {\n    display: flex;\n    flex: 1 1 auto;\n\n    .column {\n      flex: 1 1 auto;\n      min-width: calc(33.33% - ${({ theme }) => theme.gridUnit * 8}px);\n      padding: ${({ theme }) => theme.gridUnit * 4}px;\n\n      .async-select {\n        margin: 10px 0 20px;\n      }\n\n      &.condition {\n        border-right: 1px solid ${({ theme }) => theme.colors.grayscale.light2};\n      }\n\n      &.message {\n        border-left: 1px solid ${({ theme }) => theme.colors.grayscale.light2};\n      }\n    }\n  }\n\n  .inline-container {\n    display: flex;\n    flex-direction: row;\n    align-items: center;\n    &.wrap {\n      flex-wrap: wrap;\n    }\n\n    > div {\n      flex: 1 1 auto;\n    }\n\n    &.add-margin {\n      margin-bottom: 5px;\n    }\n\n    .styled-input {\n      margin: 0 0 0 10px;\n\n      input {\n        flex: 0 0 auto;\n      }\n    }\n  }\n\n  .hide-dropdown {\n    display: none;\n  }\n`;\n\nconst StyledSectionTitle = styled.div`\n  display: flex;\n  align-items: center;\n  margin: ${({ theme }) => theme.gridUnit * 2}px auto\n    ${({ theme }) => theme.gridUnit * 4}px auto;\n\n  h4 {\n    margin: 0;\n  }\n\n  .required {\n    margin-left: ${({ theme }) => theme.gridUnit}px;\n    color: ${({ theme }) => theme.colors.error.base};\n  }\n`;\n\nconst StyledSwitchContainer = styled.div`\n  display: flex;\n  align-items: center;\n  margin-top: 10px;\n\n  .switch-label {\n    margin-left: 10px;\n  }\n`;\n\nexport const StyledInputContainer = styled.div`\n  flex: 1 1 auto;\n  margin: ${({ theme }) => theme.gridUnit * 2}px;\n  margin-top: 0;\n\n  .helper {\n    display: block;\n    color: ${({ theme }) => theme.colors.grayscale.base};\n    font-size: ${({ theme }) => theme.typography.sizes.s - 1}px;\n    padding: ${({ theme }) => theme.gridUnit}px 0;\n    text-align: left;\n  }\n\n  .required {\n    margin-left: ${({ theme }) => theme.gridUnit / 2}px;\n    color: ${({ theme }) => theme.colors.error.base};\n  }\n\n  .input-container {\n    display: flex;\n    align-items: center;\n\n    > div {\n      width: 100%;\n    }\n\n    label {\n      display: flex;\n      margin-right: ${({ theme }) => theme.gridUnit * 2}px;\n    }\n\n    i {\n      margin: 0 ${({ theme }) => theme.gridUnit}px;\n    }\n  }\n\n  input,\n  textarea,\n  .Select,\n  .ant-select {\n    flex: 1 1 auto;\n  }\n\n  input[disabled] {\n    color: ${({ theme }) => theme.colors.grayscale.base};\n  }\n\n  textarea {\n    height: 300px;\n    resize: none;\n  }\n\n  input::placeholder,\n  textarea::placeholder,\n  .Select__placeholder {\n    color: ${({ theme }) => theme.colors.grayscale.light1};\n  }\n\n  textarea,\n  input[type='text'],\n  input[type='number'],\n  .Select__control,\n  .ant-select-single .ant-select-selector {\n    padding: ${({ theme }) => theme.gridUnit * 1.5}px\n      ${({ theme }) => theme.gridUnit * 2}px;\n    border-style: none;\n    border: 1px solid ${({ theme }) => theme.colors.grayscale.light2};\n    border-radius: ${({ theme }) => theme.gridUnit}px;\n\n    .ant-select-selection-placeholder,\n    .ant-select-selection-item {\n      line-height: 24px;\n    }\n\n    &[name='description'] {\n      flex: 1 1 auto;\n    }\n  }\n\n  .Select__control {\n    padding: 2px 0;\n  }\n\n  .input-label {\n    margin-left: 10px;\n  }\n`;\n\nconst StyledRadio = styled(Radio)`\n  display: block;\n  line-height: ${({ theme }) => theme.gridUnit * 7}px;\n`;\n\nconst StyledRadioGroup = styled(Radio.Group)`\n  margin-left: ${({ theme }) => theme.gridUnit * 5.5}px;\n`;\n\n// Notification Method components\nconst StyledNotificationAddButton = styled.div`\n  color: ${({ theme }) => theme.colors.primary.dark1};\n  cursor: pointer;\n\n  i {\n    margin-right: ${({ theme }) => theme.gridUnit * 2}px;\n  }\n\n  &.disabled {\n    color: ${({ theme }) => theme.colors.grayscale.light1};\n    cursor: default;\n  }\n`;\n\ntype NotificationAddStatus = 'active' | 'disabled' | 'hidden';\n\ninterface NotificationMethodAddProps {\n  status: NotificationAddStatus;\n  onClick: () => void;\n}\n\nconst NotificationMethodAdd: FunctionComponent<NotificationMethodAddProps> = ({\n  status = 'active',\n  onClick,\n}) => {\n  if (status === 'hidden') {\n    return null;\n  }\n\n  const checkStatus = () => {\n    if (status !== 'disabled') {\n      onClick();\n    }\n  };\n\n  return (\n    <StyledNotificationAddButton className={status} onClick={checkStatus}>\n      <i className=\"fa fa-plus\" />{' '}\n      {status === 'active'\n        ? t('Add notification method')\n        : t('Add delivery method')}\n    </StyledNotificationAddButton>\n  );\n};\n\ntype NotificationMethod = 'Email' | 'Slack';\n\ntype NotificationSetting = {\n  method?: NotificationMethod;\n  recipients: string;\n  options: NotificationMethod[];\n};\n\nconst AlertReportModal: FunctionComponent<AlertReportModalProps> = ({\n  addDangerToast,\n  onAdd,\n  onHide,\n  show,\n  alert = null,\n  isReport = false,\n}) => {\n  const [disableSave, setDisableSave] = useState<boolean>(true);\n  const [\n    currentAlert,\n    setCurrentAlert,\n  ] = useState<Partial<AlertObject> | null>();\n  const [isHidden, setIsHidden] = useState<boolean>(true);\n  const [contentType, setContentType] = useState<string>('dashboard');\n  const [reportFormat, setReportFormat] = useState<string>(\n    DEFAULT_NOTIFICATION_FORMAT,\n  );\n\n  // Dropdown options\n  const [conditionNotNull, setConditionNotNull] = useState<boolean>(false);\n  const [sourceOptions, setSourceOptions] = useState<MetaObject[]>([]);\n  const [dashboardOptions, setDashboardOptions] = useState<MetaObject[]>([]);\n  const [chartOptions, setChartOptions] = useState<MetaObject[]>([]);\n\n  const isEditMode = alert !== null;\n  const formatOptionEnabled =\n    contentType === 'chart' &&\n    (isFeatureEnabled(FeatureFlag.ALERTS_ATTACH_REPORTS) || isReport);\n\n  const [\n    notificationAddState,\n    setNotificationAddState,\n  ] = useState<NotificationAddStatus>('active');\n  const [notificationSettings, setNotificationSettings] = useState<\n    NotificationSetting[]\n  >([]);\n\n  const onNotificationAdd = () => {\n    const settings: NotificationSetting[] = notificationSettings.slice();\n\n    settings.push({\n      recipients: '',\n      options: NOTIFICATION_METHODS, // TODO: Need better logic for this\n    });\n\n    setNotificationSettings(settings);\n    setNotificationAddState(\n      settings.length === NOTIFICATION_METHODS.length ? 'hidden' : 'disabled',\n    );\n  };\n\n  const updateNotificationSetting = (\n    index: number,\n    setting: NotificationSetting,\n  ) => {\n    const settings = notificationSettings.slice();\n\n    settings[index] = setting;\n    setNotificationSettings(settings);\n\n    if (setting.method !== undefined && notificationAddState !== 'hidden') {\n      setNotificationAddState('active');\n    }\n  };\n\n  const removeNotificationSetting = (index: number) => {\n    const settings = notificationSettings.slice();\n\n    settings.splice(index, 1);\n    setNotificationSettings(settings);\n    setNotificationAddState('active');\n  };\n\n  // Alert fetch logic\n  const {\n    state: { loading, resource, error: fetchError },\n    fetchResource,\n    createResource,\n    updateResource,\n    clearError,\n  } = useSingleViewResource<AlertObject>('report', t('report'), addDangerToast);\n\n  // Functions\n  const hide = () => {\n    clearError();\n    setIsHidden(true);\n    onHide();\n    setNotificationSettings([]);\n    setCurrentAlert({ ...DEFAULT_ALERT });\n    setNotificationAddState('active');\n  };\n\n  const onSave = () => {\n    // Notification Settings\n    const recipients: Recipient[] = [];\n\n    notificationSettings.forEach(setting => {\n      if (setting.method && setting.recipients.length) {\n        recipients.push({\n          recipient_config_json: {\n            target: setting.recipients,\n          },\n          type: setting.method,\n        });\n      }\n    });\n\n    const data: any = {\n      ...currentAlert,\n      type: isReport ? 'Report' : 'Alert',\n      validator_type: conditionNotNull ? 'not null' : 'operator',\n      validator_config_json: conditionNotNull\n        ? {}\n        : currentAlert?.validator_config_json,\n      chart: contentType === 'chart' ? currentAlert?.chart?.value : null,\n      dashboard:\n        contentType === 'dashboard' ? currentAlert?.dashboard?.value : null,\n      database: currentAlert?.database?.value,\n      owners: (currentAlert?.owners || []).map(\n        owner => (owner as MetaObject).value,\n      ),\n      recipients,\n      report_format:\n        contentType === 'dashboard'\n          ? DEFAULT_NOTIFICATION_FORMAT\n          : reportFormat || DEFAULT_NOTIFICATION_FORMAT,\n    };\n\n    if (data.recipients && !data.recipients.length) {\n      delete data.recipients;\n    }\n\n    data.context_markdown = 'string';\n\n    if (isEditMode) {\n      // Edit\n      if (currentAlert && currentAlert.id) {\n        const update_id = currentAlert.id;\n\n        delete data.id;\n        delete data.created_by;\n        delete data.last_eval_dttm;\n        delete data.last_state;\n        delete data.last_value;\n        delete data.last_value_row_json;\n\n        updateResource(update_id, data).then(response => {\n          if (!response) {\n            return;\n          }\n\n          if (onAdd) {\n            onAdd();\n          }\n\n          hide();\n        });\n      }\n    } else if (currentAlert) {\n      // Create\n      createResource(data).then(response => {\n        if (!response) {\n          return;\n        }\n\n        if (onAdd) {\n          onAdd(response);\n        }\n\n        hide();\n      });\n    }\n  };\n\n  // Fetch data to populate form dropdowns\n  const loadOwnerOptions = (input = '') => {\n    const query = rison.encode({ filter: input, page_size: SELECT_PAGE_SIZE });\n    return SupersetClient.get({\n      endpoint: `/api/v1/report/related/owners?q=${query}`,\n    }).then(\n      response =>\n        response.json.result.map((item: any) => ({\n          value: item.value,\n          label: item.text,\n        })),\n      badResponse => [],\n    );\n  };\n\n  const loadSourceOptions = (input = '') => {\n    const query = rison.encode({ filter: input, page_size: SELECT_PAGE_SIZE });\n    return SupersetClient.get({\n      endpoint: `/api/v1/report/related/database?q=${query}`,\n    }).then(\n      response => {\n        const list = response.json.result.map((item: any) => ({\n          value: item.value,\n          label: item.text,\n        }));\n\n        setSourceOptions(list);\n\n        // Find source if current alert has one set\n        if (\n          currentAlert &&\n          currentAlert.database &&\n          !currentAlert.database.label\n        ) {\n          updateAlertState('database', getSourceData());\n        }\n\n        return list;\n      },\n      badResponse => [],\n    );\n  };\n\n  const getSourceData = (db?: MetaObject) => {\n    const database = db || currentAlert?.database;\n\n    if (!database || database.label) {\n      return null;\n    }\n\n    let result;\n\n    // Cycle through source options to find the selected option\n    sourceOptions.forEach(source => {\n      if (source.value === database.value || source.value === database.id) {\n        result = source;\n      }\n    });\n\n    return result;\n  };\n\n  const loadDashboardOptions = (input = '') => {\n    const query = rison.encode({ filter: input, page_size: SELECT_PAGE_SIZE });\n    return SupersetClient.get({\n      endpoint: `/api/v1/report/related/dashboard?q=${query}`,\n    }).then(\n      response => {\n        const list = response.json.result.map((item: any) => ({\n          value: item.value,\n          label: item.text,\n        }));\n\n        setDashboardOptions(list);\n\n        // Find source if current alert has one set\n        if (\n          currentAlert &&\n          currentAlert.dashboard &&\n          !currentAlert.dashboard.label\n        ) {\n          updateAlertState('dashboard', getDashboardData());\n        }\n\n        return list;\n      },\n      badResponse => [],\n    );\n  };\n\n  const getDashboardData = (db?: MetaObject) => {\n    const dashboard = db || currentAlert?.dashboard;\n\n    if (!dashboard || dashboard.label) {\n      return null;\n    }\n\n    let result;\n\n    // Cycle through dashboard options to find the selected option\n    dashboardOptions.forEach(dash => {\n      if (dash.value === dashboard.value || dash.value === dashboard.id) {\n        result = dash;\n      }\n    });\n\n    return result;\n  };\n\n  const loadChartOptions = (input = '') => {\n    const query = rison.encode({ filter: input, page_size: SELECT_PAGE_SIZE });\n    return SupersetClient.get({\n      endpoint: `/api/v1/report/related/chart?q=${query}`,\n    }).then(\n      response => {\n        const list = response.json.result.map((item: any) => ({\n          value: item.value,\n          label: item.text,\n        }));\n\n        setChartOptions(list);\n\n        // Find source if current alert has one set\n        if (currentAlert && currentAlert.chart && !currentAlert.chart.label) {\n          updateAlertState('chart', getChartData());\n        }\n\n        return list;\n      },\n      badResponse => [],\n    );\n  };\n\n  const getChartData = (chartData?: MetaObject) => {\n    const chart = chartData || currentAlert?.chart;\n\n    if (!chart || chart.label) {\n      return null;\n    }\n\n    let result;\n\n    // Cycle through chart options to find the selected option\n    chartOptions.forEach(slice => {\n      if (slice.value === chart.value || slice.value === chart.id) {\n        result = slice;\n      }\n    });\n\n    return result;\n  };\n\n  // Updating alert/report state\n  const updateAlertState = (name: string, value: any) => {\n    setCurrentAlert(currentAlertData => ({\n      ...currentAlertData,\n      [name]: value,\n    }));\n  };\n\n  // Handle input/textarea updates\n  const onTextChange = (\n    event: React.ChangeEvent<HTMLTextAreaElement | HTMLInputElement>,\n  ) => {\n    const { target } = event;\n\n    updateAlertState(target.name, target.value);\n  };\n\n  const onTimeoutVerifyChange = (\n    event: React.ChangeEvent<HTMLTextAreaElement | HTMLInputElement>,\n  ) => {\n    const { target } = event;\n    const value = +target.value;\n\n    // Need to make sure grace period is not lower than TIMEOUT_MIN\n    if (value === 0) {\n      updateAlertState(target.name, null);\n    } else {\n      updateAlertState(\n        target.name,\n        value ? Math.max(value, TIMEOUT_MIN) : value,\n      );\n    }\n  };\n\n  const onSQLChange = (value: string) => {\n    updateAlertState('sql', value || '');\n  };\n\n  const onOwnersChange = (value: Array<Owner>) => {\n    updateAlertState('owners', value || []);\n  };\n\n  const onSourceChange = (value: Array<Owner>) => {\n    updateAlertState('database', value || []);\n  };\n\n  const onDashboardChange = (dashboard: SelectValue) => {\n    updateAlertState('dashboard', dashboard || undefined);\n    updateAlertState('chart', null);\n  };\n\n  const onChartChange = (chart: SelectValue) => {\n    updateAlertState('chart', chart || undefined);\n    updateAlertState('dashboard', null);\n  };\n\n  const onActiveSwitch = (checked: boolean) => {\n    updateAlertState('active', checked);\n  };\n\n  const onConditionChange = (op: Operator) => {\n    setConditionNotNull(op === 'not null');\n\n    const config = {\n      op,\n      threshold: currentAlert\n        ? currentAlert.validator_config_json?.threshold\n        : undefined,\n    };\n\n    updateAlertState('validator_config_json', config);\n  };\n\n  const onThresholdChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const { target } = event;\n\n    const config = {\n      op: currentAlert ? currentAlert.validator_config_json?.op : undefined,\n      threshold: target.value,\n    };\n\n    updateAlertState('validator_config_json', config);\n  };\n\n  const onLogRetentionChange = (retention: number) => {\n    updateAlertState('log_retention', retention);\n  };\n\n  const onContentTypeChange = (event: any) => {\n    const { target } = event;\n\n    setContentType(target.value);\n  };\n\n  const onFormatChange = (event: any) => {\n    const { target } = event;\n\n    setReportFormat(target.value);\n  };\n\n  // Make sure notification settings has the required info\n  const checkNotificationSettings = () => {\n    if (!notificationSettings.length) {\n      return false;\n    }\n\n    let hasInfo = false;\n\n    notificationSettings.forEach(setting => {\n      if (!!setting.method && setting.recipients?.length) {\n        hasInfo = true;\n      }\n    });\n\n    return hasInfo;\n  };\n\n  const validate = () => {\n    if (\n      currentAlert &&\n      currentAlert.name?.length &&\n      currentAlert.owners?.length &&\n      currentAlert.crontab?.length &&\n      currentAlert.working_timeout !== undefined &&\n      ((contentType === 'dashboard' && !!currentAlert.dashboard) ||\n        (contentType === 'chart' && !!currentAlert.chart)) &&\n      checkNotificationSettings()\n    ) {\n      if (isReport) {\n        setDisableSave(false);\n      } else if (\n        !!currentAlert.database &&\n        currentAlert.sql?.length &&\n        (conditionNotNull || !!currentAlert.validator_config_json?.op) &&\n        (conditionNotNull ||\n          currentAlert.validator_config_json?.threshold !== undefined)\n      ) {\n        setDisableSave(false);\n      } else {\n        setDisableSave(true);\n      }\n    } else {\n      setDisableSave(true);\n    }\n  };\n\n  // Initialize\n  useEffect(() => {\n    if (\n      isEditMode &&\n      (!currentAlert ||\n        !currentAlert.id ||\n        (alert && alert.id !== currentAlert.id) ||\n        (isHidden && show))\n    ) {\n      if (alert && alert.id !== null && !loading && !fetchError) {\n        const id = alert.id || 0;\n        fetchResource(id);\n      }\n    } else if (\n      !isEditMode &&\n      (!currentAlert || currentAlert.id || (isHidden && show))\n    ) {\n      setCurrentAlert({ ...DEFAULT_ALERT });\n      setNotificationSettings([]);\n      setNotificationAddState('active');\n    }\n  }, [alert]);\n\n  useEffect(() => {\n    if (resource) {\n      // Add notification settings\n      const settings = (resource.recipients || []).map(setting => {\n        const config =\n          typeof setting.recipient_config_json === 'string'\n            ? JSON.parse(setting.recipient_config_json)\n            : {};\n        return {\n          method: setting.type as NotificationMethod,\n          // @ts-ignore: Type not assignable\n          recipients: config.target || setting.recipient_config_json,\n          options: NOTIFICATION_METHODS as NotificationMethod[], // Need better logic for this\n        };\n      });\n\n      setNotificationSettings(settings);\n      setNotificationAddState(\n        settings.length === NOTIFICATION_METHODS.length ? 'hidden' : 'active',\n      );\n      setContentType(resource.chart ? 'chart' : 'dashboard');\n      setReportFormat(\n        resource.chart\n          ? resource.report_format || DEFAULT_NOTIFICATION_FORMAT\n          : DEFAULT_NOTIFICATION_FORMAT,\n      );\n      const validatorConfig =\n        typeof resource.validator_config_json === 'string'\n          ? JSON.parse(resource.validator_config_json)\n          : resource.validator_config_json;\n\n      setConditionNotNull(resource.validator_type === 'not null');\n\n      setCurrentAlert({\n        ...resource,\n        chart: resource.chart\n          ? getChartData(resource.chart) || {\n              value: (resource.chart as ChartObject).id,\n              label: (resource.chart as ChartObject).slice_name,\n            }\n          : undefined,\n        dashboard: resource.dashboard\n          ? getDashboardData(resource.dashboard) || {\n              value: (resource.dashboard as DashboardObject).id,\n              label: (resource.dashboard as DashboardObject).dashboard_title,\n            }\n          : undefined,\n        database: resource.database\n          ? getSourceData(resource.database) || {\n              value: (resource.database as DatabaseObject).id,\n              label: (resource.database as DatabaseObject).database_name,\n            }\n          : undefined,\n        owners: (resource.owners || []).map(owner => ({\n          value: owner.id,\n          label: `${(owner as Owner).first_name} ${(owner as Owner).last_name}`,\n        })),\n        // @ts-ignore: Type not assignable\n        validator_config_json:\n          resource.validator_type === 'not null'\n            ? {\n                op: 'not null',\n              }\n            : validatorConfig,\n      });\n    }\n  }, [resource]);\n\n  // Validation\n  const currentAlertSafe = currentAlert || {};\n  useEffect(() => {\n    validate();\n  }, [\n    currentAlertSafe.name,\n    currentAlertSafe.owners,\n    currentAlertSafe.database,\n    currentAlertSafe.sql,\n    currentAlertSafe.validator_config_json,\n    currentAlertSafe.crontab,\n    currentAlertSafe.working_timeout,\n    currentAlertSafe.dashboard,\n    currentAlertSafe.chart,\n    contentType,\n    notificationSettings,\n    conditionNotNull,\n  ]);\n\n  // Show/hide\n  if (isHidden && show) {\n    setIsHidden(false);\n  }\n\n  // Dropdown options\n  const conditionOptions = CONDITIONS.map(condition => (\n    <Select.Option key={condition.value} value={condition.value}>\n      {condition.label}\n    </Select.Option>\n  ));\n\n  const retentionOptions = RETENTION_OPTIONS.map(option => (\n    <Select.Option key={option.value} value={option.value}>\n      {option.label}\n    </Select.Option>\n  ));\n\n  return (\n    <StyledModal\n      className=\"no-content-padding\"\n      responsive\n      disablePrimaryButton={disableSave}\n      onHandledPrimaryAction={onSave}\n      onHide={hide}\n      primaryButtonName={isEditMode ? t('Save') : t('Add')}\n      show={show}\n      width=\"100%\"\n      maxWidth=\"1450px\"\n      title={\n        <h4 data-test=\"alert-report-modal-title\">\n          {isEditMode ? (\n            <StyledIcon name=\"edit-alt\" />\n          ) : (\n            <StyledIcon name=\"plus-large\" />\n          )}\n          {isEditMode\n            ? t(`Edit ${isReport ? 'Report' : 'Alert'}`)\n            : t(`Add ${isReport ? 'Report' : 'Alert'}`)}\n        </h4>\n      }\n    >\n      <StyledSectionContainer>\n        <div className=\"header-section\">\n          <StyledInputContainer>\n            <div className=\"control-label\">\n              {isReport ? t('Report name') : t('Alert name')}\n              <span className=\"required\">*</span>\n            </div>\n            <div className=\"input-container\">\n              <input\n                type=\"text\"\n                name=\"name\"\n                value={currentAlert ? currentAlert.name : ''}\n                placeholder={isReport ? t('Report name') : t('Alert name')}\n                onChange={onTextChange}\n              />\n            </div>\n          </StyledInputContainer>\n          <StyledInputContainer>\n            <div className=\"control-label\">\n              {t('Owners')}\n              <span className=\"required\">*</span>\n            </div>\n            <div data-test=\"owners-select\" className=\"input-container\">\n              <AsyncSelect\n                name=\"owners\"\n                isMulti\n                value={currentAlert ? currentAlert.owners : []}\n                loadOptions={loadOwnerOptions}\n                defaultOptions // load options on render\n                cacheOptions\n                onChange={onOwnersChange}\n              />\n            </div>\n          </StyledInputContainer>\n          <StyledInputContainer>\n            <div className=\"control-label\">{t('Description')}</div>\n            <div className=\"input-container\">\n              <input\n                type=\"text\"\n                name=\"description\"\n                value={currentAlert ? currentAlert.description || '' : ''}\n                placeholder={t('Description')}\n                onChange={onTextChange}\n              />\n            </div>\n          </StyledInputContainer>\n          <StyledSwitchContainer>\n            <Switch\n              onChange={onActiveSwitch}\n              checked={currentAlert ? currentAlert.active : true}\n            />\n            <div className=\"switch-label\">Active</div>\n          </StyledSwitchContainer>\n        </div>\n        <div className=\"column-section\">\n          {!isReport && (\n            <div className=\"column condition\">\n              <StyledSectionTitle>\n                <h4>{t('Alert condition')}</h4>\n              </StyledSectionTitle>\n              <StyledInputContainer>\n                <div className=\"control-label\">\n                  {t('Database')}\n                  <span className=\"required\">*</span>\n                </div>\n                <div className=\"input-container\">\n                  <AsyncSelect\n                    name=\"source\"\n                    value={\n                      currentAlert && currentAlert.database\n                        ? {\n                            value: currentAlert.database.value,\n                            label: currentAlert.database.label,\n                          }\n                        : undefined\n                    }\n                    loadOptions={loadSourceOptions}\n                    defaultOptions // load options on render\n                    cacheOptions\n                    onChange={onSourceChange}\n                  />\n                </div>\n              </StyledInputContainer>\n              <StyledInputContainer>\n                <div className=\"control-label\">\n                  {t('SQL Query')}\n                  <span className=\"required\">*</span>\n                </div>\n                <TextAreaControl\n                  name=\"sql\"\n                  language=\"sql\"\n                  offerEditInModal={false}\n                  minLines={15}\n                  maxLines={15}\n                  onChange={onSQLChange}\n                  readOnly={false}\n                  value={currentAlert ? currentAlert.sql : ''}\n                />\n              </StyledInputContainer>\n              <div className=\"inline-container wrap\">\n                <StyledInputContainer>\n                  <div className=\"control-label\">\n                    {t('Trigger Alert If...')}\n                    <span className=\"required\">*</span>\n                  </div>\n                  <div className=\"input-container\">\n                    <Select\n                      onChange={onConditionChange}\n                      placeholder=\"Condition\"\n                      defaultValue={\n                        currentAlert\n                          ? currentAlert.validator_config_json?.op || undefined\n                          : undefined\n                      }\n                      value={\n                        currentAlert\n                          ? currentAlert.validator_config_json?.op || undefined\n                          : undefined\n                      }\n                    >\n                      {conditionOptions}\n                    </Select>\n                  </div>\n                </StyledInputContainer>\n                <StyledInputContainer>\n                  <div className=\"control-label\">\n                    {t('Value')}\n                    <span className=\"required\">*</span>\n                  </div>\n                  <div className=\"input-container\">\n                    <input\n                      type=\"number\"\n                      name=\"threshold\"\n                      disabled={conditionNotNull}\n                      value={\n                        currentAlert &&\n                        currentAlert.validator_config_json &&\n                        currentAlert.validator_config_json.threshold !==\n                          undefined\n                          ? currentAlert.validator_config_json.threshold\n                          : ''\n                      }\n                      placeholder={t('Value')}\n                      onChange={onThresholdChange}\n                    />\n                  </div>\n                </StyledInputContainer>\n              </div>\n            </div>\n          )}\n          <div className=\"column schedule\">\n            <StyledSectionTitle>\n              <h4>\n                {isReport\n                  ? t('Report schedule')\n                  : t('Alert condition schedule')}\n              </h4>\n              <span className=\"required\">*</span>\n            </StyledSectionTitle>\n            <AlertReportCronScheduler\n              value={\n                (currentAlert && currentAlert.crontab) || DEFAULT_CRON_VALUE\n              }\n              onChange={newVal => updateAlertState('crontab', newVal)}\n            />\n            <StyledSectionTitle>\n              <h4>{t('Schedule settings')}</h4>\n            </StyledSectionTitle>\n            <StyledInputContainer>\n              <div className=\"control-label\">\n                {t('Log retention')}\n                <span className=\"required\">*</span>\n              </div>\n              <div className=\"input-container\">\n                <Select\n                  onChange={onLogRetentionChange}\n                  placeholder\n                  defaultValue={\n                    currentAlert\n                      ? currentAlert.log_retention || DEFAULT_RETENTION\n                      : DEFAULT_RETENTION\n                  }\n                  value={\n                    currentAlert\n                      ? currentAlert.log_retention || DEFAULT_RETENTION\n                      : DEFAULT_RETENTION\n                  }\n                >\n                  {retentionOptions}\n                </Select>\n              </div>\n            </StyledInputContainer>\n            <StyledInputContainer>\n              <div className=\"control-label\">\n                {t('Working timeout')}\n                <span className=\"required\">*</span>\n              </div>\n              <div className=\"input-container\">\n                <input\n                  type=\"number\"\n                  min=\"1\"\n                  name=\"working_timeout\"\n                  value={currentAlert?.working_timeout || ''}\n                  placeholder={t('Time in seconds')}\n                  onChange={onTimeoutVerifyChange}\n                />\n                <span className=\"input-label\">seconds</span>\n              </div>\n            </StyledInputContainer>\n            {!isReport && (\n              <StyledInputContainer>\n                <div className=\"control-label\">{t('Grace period')}</div>\n                <div className=\"input-container\">\n                  <input\n                    type=\"number\"\n                    min=\"1\"\n                    name=\"grace_period\"\n                    value={currentAlert?.grace_period || ''}\n                    placeholder={t('Time in seconds')}\n                    onChange={onTimeoutVerifyChange}\n                  />\n                  <span className=\"input-label\">seconds</span>\n                </div>\n              </StyledInputContainer>\n            )}\n          </div>\n          <div className=\"column message\">\n            <StyledSectionTitle>\n              <h4>{t('Message content')}</h4>\n              <span className=\"required\">*</span>\n            </StyledSectionTitle>\n            <Radio.Group onChange={onContentTypeChange} value={contentType}>\n              <StyledRadio value=\"dashboard\">{t('Dashboard')}</StyledRadio>\n              <StyledRadio value=\"chart\">{t('Chart')}</StyledRadio>\n            </Radio.Group>\n            {formatOptionEnabled && (\n              <div className=\"inline-container\">\n                <StyledRadioGroup\n                  onChange={onFormatChange}\n                  value={reportFormat}\n                >\n                  <StyledRadio value=\"PNG\">{t('Send as PNG')}</StyledRadio>\n                  <StyledRadio value=\"CSV\">{t('Send as CSV')}</StyledRadio>\n                </StyledRadioGroup>\n              </div>\n            )}\n            <AsyncSelect\n              className={\n                contentType === 'chart'\n                  ? 'async-select'\n                  : 'hide-dropdown async-select'\n              }\n              name=\"chart\"\n              value={\n                currentAlert && currentAlert.chart\n                  ? {\n                      value: currentAlert.chart.value,\n                      label: currentAlert.chart.label,\n                    }\n                  : undefined\n              }\n              loadOptions={loadChartOptions}\n              defaultOptions // load options on render\n              cacheOptions\n              onChange={onChartChange}\n            />\n            <AsyncSelect\n              className={\n                contentType === 'dashboard'\n                  ? 'async-select'\n                  : 'hide-dropdown async-select'\n              }\n              name=\"dashboard\"\n              value={\n                currentAlert && currentAlert.dashboard\n                  ? {\n                      value: currentAlert.dashboard.value,\n                      label: currentAlert.dashboard.label,\n                    }\n                  : undefined\n              }\n              loadOptions={loadDashboardOptions}\n              defaultOptions // load options on render\n              cacheOptions\n              onChange={onDashboardChange}\n            />\n            <StyledSectionTitle>\n              <h4>{t('Notification method')}</h4>\n              <span className=\"required\">*</span>\n            </StyledSectionTitle>\n            {notificationSettings.map((notificationSetting, i) => (\n              <NotificationMethod\n                setting={notificationSetting}\n                index={i}\n                onUpdate={updateNotificationSetting}\n                onRemove={removeNotificationSetting}\n              />\n            ))}\n            <NotificationMethodAdd\n              data-test=\"notification-add\"\n              status={notificationAddState}\n              onClick={onNotificationAdd}\n            />\n          </div>\n        </div>\n      </StyledSectionContainer>\n    </StyledModal>\n  );\n};\n\nexport default withToasts(AlertReportModal);\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}