{"ast":null,"code":"import \"core-js/modules/web.dom-collections.iterator.js\";import _mapInstanceProperty from \"@babel/runtime-corejs3/core-js-stable/instance/map\";(function () {var enterModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.enterModule : undefined;enterModule && enterModule(module);})();var __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default.signature : function (a) {return a;}; /**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React, { useState } from 'react';\nimport { styled, t } from '@superset-ui/core';\nimport { NativeGraySelect as Select } from 'src/components/Select';\nimport Icon from 'src/components/Icon';\nimport { StyledInputContainer } from '../AlertReportModal';import { jsx as ___EmotionJSX } from \"@emotion/react\";\nconst StyledNotificationMethod = styled.div`\n  margin-bottom: 10px;\n\n  .input-container {\n    textarea {\n      height: auto;\n    }\n  }\n\n  .inline-container {\n    margin-bottom: 10px;\n\n    .input-container {\n      margin-left: 10px;\n    }\n\n    > div {\n      margin: 0;\n    }\n\n    .delete-button {\n      margin-left: 10px;\n      padding-top: 3px;\n    }\n  }\n`;\nexport const NotificationMethod = ({ setting = null, index, onUpdate, onRemove }) => {var _context;\n  const { method, recipients, options } = setting || {};\n  const [recipientValue, setRecipientValue] = useState(recipients || '');\n  if (!setting) {\n    return null;\n  }\n  const onMethodChange = method => {\n    // Since we're swapping the method, reset the recipients\n    setRecipientValue('');\n    if (onUpdate) {\n      const updatedSetting = {\n        ...setting,\n        method,\n        recipients: '' };\n\n      onUpdate(index, updatedSetting);\n    }\n  };\n  const onRecipientsChange = event => {\n    const { target } = event;\n    setRecipientValue(target.value);\n    if (onUpdate) {\n      const updatedSetting = {\n        ...setting,\n        recipients: target.value };\n\n      onUpdate(index, updatedSetting);\n    }\n  };\n  // Set recipients\n  if (!!recipients && recipientValue !== recipients) {\n    setRecipientValue(recipients);\n  }\n  const methodOptions = _mapInstanceProperty(_context = options || []).call(_context, method => ___EmotionJSX(Select.Option, { key: method, value: method },\n  t(method)));\n\n  return ___EmotionJSX(StyledNotificationMethod, null,\n  ___EmotionJSX(\"div\", { className: \"inline-container\" },\n  ___EmotionJSX(StyledInputContainer, null,\n  ___EmotionJSX(\"div\", { className: \"input-container\" },\n  ___EmotionJSX(Select, { \"data-test\": \"select-delivery-method\", onChange: onMethodChange, placeholder: \"Select Delivery Method\", defaultValue: method, value: method },\n  methodOptions))),\n\n\n\n  method !== undefined && !!onRemove ? ___EmotionJSX(\"span\", { role: \"button\", tabIndex: 0, className: \"delete-button\", onClick: () => onRemove(index) },\n  ___EmotionJSX(Icon, { name: \"trash\" })) :\n  null),\n\n  method !== undefined ? ___EmotionJSX(StyledInputContainer, null,\n  ___EmotionJSX(\"div\", { className: \"control-label\" }, t(method)),\n  ___EmotionJSX(\"div\", { className: \"input-container\" },\n  ___EmotionJSX(\"textarea\", { name: \"recipients\", value: recipientValue, onChange: onRecipientsChange })),\n\n  ___EmotionJSX(\"div\", { className: \"helper\" },\n  t('Recipients are separated by \",\" or \";\"'))) :\n\n  null);\n\n};__signature__(NotificationMethod, \"useState{[recipientValue, setRecipientValue](recipients || '')}\");;(function () {var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined;if (!reactHotLoader) {return;}reactHotLoader.register(StyledNotificationMethod, \"StyledNotificationMethod\", \"/app/superset-frontend/src/views/CRUD/alert/components/NotificationMethod.tsx\");reactHotLoader.register(NotificationMethod, \"NotificationMethod\", \"/app/superset-frontend/src/views/CRUD/alert/components/NotificationMethod.tsx\");})();;(function () {var leaveModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.leaveModule : undefined;leaveModule && leaveModule(module);})();","map":{"version":3,"sources":["/app/superset-frontend/src/views/CRUD/alert/components/NotificationMethod.tsx"],"names":[],"mappings":"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","sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React, { FunctionComponent, useState } from 'react';\nimport { styled, t } from '@superset-ui/core';\nimport { NativeGraySelect as Select } from 'src/components/Select';\nimport Icon from 'src/components/Icon';\nimport { StyledInputContainer } from '../AlertReportModal';\n\nconst StyledNotificationMethod = styled.div`\n  margin-bottom: 10px;\n\n  .input-container {\n    textarea {\n      height: auto;\n    }\n  }\n\n  .inline-container {\n    margin-bottom: 10px;\n\n    .input-container {\n      margin-left: 10px;\n    }\n\n    > div {\n      margin: 0;\n    }\n\n    .delete-button {\n      margin-left: 10px;\n      padding-top: 3px;\n    }\n  }\n`;\n\ntype NotificationMethod = 'Email' | 'Slack';\n\ntype NotificationSetting = {\n  method?: NotificationMethod;\n  recipients: string;\n  options: NotificationMethod[];\n};\n\ninterface NotificationMethodProps {\n  setting?: NotificationSetting | null;\n  index: number;\n  onUpdate?: (index: number, updatedSetting: NotificationSetting) => void;\n  onRemove?: (index: number) => void;\n}\n\nexport const NotificationMethod: FunctionComponent<NotificationMethodProps> = ({\n  setting = null,\n  index,\n  onUpdate,\n  onRemove,\n}) => {\n  const { method, recipients, options } = setting || {};\n  const [recipientValue, setRecipientValue] = useState<string>(\n    recipients || '',\n  );\n\n  if (!setting) {\n    return null;\n  }\n\n  const onMethodChange = (method: NotificationMethod) => {\n    // Since we're swapping the method, reset the recipients\n    setRecipientValue('');\n    if (onUpdate) {\n      const updatedSetting = {\n        ...setting,\n        method,\n        recipients: '',\n      };\n\n      onUpdate(index, updatedSetting);\n    }\n  };\n\n  const onRecipientsChange = (\n    event: React.ChangeEvent<HTMLTextAreaElement>,\n  ) => {\n    const { target } = event;\n\n    setRecipientValue(target.value);\n\n    if (onUpdate) {\n      const updatedSetting = {\n        ...setting,\n        recipients: target.value,\n      };\n\n      onUpdate(index, updatedSetting);\n    }\n  };\n\n  // Set recipients\n  if (!!recipients && recipientValue !== recipients) {\n    setRecipientValue(recipients);\n  }\n\n  const methodOptions = (options || []).map((method: NotificationMethod) => (\n    <Select.Option key={method} value={method}>\n      {t(method)}\n    </Select.Option>\n  ));\n\n  return (\n    <StyledNotificationMethod>\n      <div className=\"inline-container\">\n        <StyledInputContainer>\n          <div className=\"input-container\">\n            <Select\n              data-test=\"select-delivery-method\"\n              onChange={onMethodChange}\n              placeholder=\"Select Delivery Method\"\n              defaultValue={method}\n              value={method}\n            >\n              {methodOptions}\n            </Select>\n          </div>\n        </StyledInputContainer>\n        {method !== undefined && !!onRemove ? (\n          <span\n            role=\"button\"\n            tabIndex={0}\n            className=\"delete-button\"\n            onClick={() => onRemove(index)}\n          >\n            <Icon name=\"trash\" />\n          </span>\n        ) : null}\n      </div>\n      {method !== undefined ? (\n        <StyledInputContainer>\n          <div className=\"control-label\">{t(method)}</div>\n          <div className=\"input-container\">\n            <textarea\n              name=\"recipients\"\n              value={recipientValue}\n              onChange={onRecipientsChange}\n            />\n          </div>\n          <div className=\"helper\">\n            {t('Recipients are separated by \",\" or \";\"')}\n          </div>\n        </StyledInputContainer>\n      ) : null}\n    </StyledNotificationMethod>\n  );\n};\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}