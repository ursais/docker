{"ast":null,"code":"import _indexOfInstanceProperty from \"@babel/runtime-corejs3/core-js-stable/instance/index-of\";import _Object$values from \"@babel/runtime-corejs3/core-js-stable/object/values\";import _filterInstanceProperty from \"@babel/runtime-corejs3/core-js-stable/instance/filter\";import _mapInstanceProperty from \"@babel/runtime-corejs3/core-js-stable/instance/map\";import _findInstanceProperty from \"@babel/runtime-corejs3/core-js-stable/instance/find\";import _Object$keys from \"@babel/runtime-corejs3/core-js-stable/object/keys\";import _setTimeout from \"@babel/runtime-corejs3/core-js-stable/set-timeout\";import _bindInstanceProperty from \"@babel/runtime-corejs3/core-js-stable/instance/bind\";(function () {var enterModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.enterModule : undefined;enterModule && enterModule(module);})();var __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default.signature : function (a) {return a;}; /**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n/* eslint-env browser */\nimport moment from 'moment';\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { styled, CategoricalColorNamespace, t } from '@superset-ui/core';\nimport ButtonGroup from 'src/components/ButtonGroup';\n\nimport {\nLOG_ACTIONS_PERIODIC_RENDER_DASHBOARD,\nLOG_ACTIONS_FORCE_REFRESH_DASHBOARD,\nLOG_ACTIONS_TOGGLE_EDIT_DASHBOARD } from\n'src/logger/LogUtils';\n\nimport Icon from 'src/components/Icon';\nimport Button from 'src/components/Button';\nimport EditableTitle from 'src/components/EditableTitle';\nimport FaveStar from 'src/components/FaveStar';\nimport { safeStringify } from 'src/utils/safeStringify';\nimport HeaderActionsDropdown from 'src/dashboard/components/Header/HeaderActionsDropdown';\nimport PublishedStatus from 'src/dashboard/components/PublishedStatus';\nimport UndoRedoKeyListeners from 'src/dashboard/components/UndoRedoKeyListeners';\nimport PropertiesModal from 'src/dashboard/components/PropertiesModal';\nimport { chartPropShape } from 'src/dashboard/util/propShapes';\nimport {\nUNDO_LIMIT,\nSAVE_TYPE_OVERWRITE,\nDASHBOARD_POSITION_DATA_LIMIT } from\n'src/dashboard/util/constants';\nimport setPeriodicRunner from 'src/dashboard/util/setPeriodicRunner';\nimport { options as PeriodicRefreshOptions } from 'src/dashboard/components/RefreshIntervalModal';import { jsx as ___EmotionJSX } from \"@emotion/react\";\n\nconst propTypes = {\n  addSuccessToast: PropTypes.func.isRequired,\n  addDangerToast: PropTypes.func.isRequired,\n  addWarningToast: PropTypes.func.isRequired,\n  dashboardInfo: PropTypes.object.isRequired,\n  dashboardTitle: PropTypes.string.isRequired,\n  charts: PropTypes.objectOf(chartPropShape).isRequired,\n  layout: PropTypes.object.isRequired,\n  expandedSlices: PropTypes.object.isRequired,\n  customCss: PropTypes.string.isRequired,\n  colorNamespace: PropTypes.string,\n  colorScheme: PropTypes.string,\n  setColorSchemeAndUnsavedChanges: PropTypes.func.isRequired,\n  isStarred: PropTypes.bool.isRequired,\n  isPublished: PropTypes.bool.isRequired,\n  isLoading: PropTypes.bool.isRequired,\n  onSave: PropTypes.func.isRequired,\n  onChange: PropTypes.func.isRequired,\n  fetchFaveStar: PropTypes.func.isRequired,\n  fetchCharts: PropTypes.func.isRequired,\n  saveFaveStar: PropTypes.func.isRequired,\n  savePublished: PropTypes.func.isRequired,\n  updateDashboardTitle: PropTypes.func.isRequired,\n  editMode: PropTypes.bool.isRequired,\n  setEditMode: PropTypes.func.isRequired,\n  showBuilderPane: PropTypes.func.isRequired,\n  updateCss: PropTypes.func.isRequired,\n  logEvent: PropTypes.func.isRequired,\n  hasUnsavedChanges: PropTypes.bool.isRequired,\n  maxUndoHistoryExceeded: PropTypes.bool.isRequired,\n  lastModifiedTime: PropTypes.number.isRequired,\n\n  // redux\n  onUndo: PropTypes.func.isRequired,\n  onRedo: PropTypes.func.isRequired,\n  undoLength: PropTypes.number.isRequired,\n  redoLength: PropTypes.number.isRequired,\n  setMaxUndoHistoryExceeded: PropTypes.func.isRequired,\n  maxUndoHistoryToast: PropTypes.func.isRequired,\n  refreshFrequency: PropTypes.number.isRequired,\n  shouldPersistRefreshFrequency: PropTypes.bool.isRequired,\n  setRefreshFrequency: PropTypes.func.isRequired,\n  dashboardInfoChanged: PropTypes.func.isRequired,\n  dashboardTitleChanged: PropTypes.func.isRequired };\n\n\nconst defaultProps = {\n  colorNamespace: undefined,\n  colorScheme: undefined };\n\n\n// Styled Components\nconst StyledDashboardHeader = styled.div`\n  background: ${({ theme }) => theme.colors.grayscale.light5};\n  display: flex;\n  flex-direction: row;\n  align-items: center;\n  justify-content: space-between;\n  padding: 0 ${({ theme }) => theme.gridUnit * 6}px;\n  border-bottom: 1px solid ${({ theme }) => theme.colors.grayscale.light2};\n\n  button,\n  .fave-unfave-icon {\n    margin-left: ${({ theme }) => theme.gridUnit * 2}px;\n  }\n  .button-container {\n    display: flex;\n    flex-direction: row;\n    flex-wrap: nowrap;\n    .action-button {\n      font-size: ${({ theme }) => theme.typography.sizes.xl}px;\n    }\n  }\n`;\n\nclass Header extends React.PureComponent {\n  static discardChanges() {\n    window.location.reload();\n  }\n\n  constructor(props) {var _context, _context2, _context3, _context4, _context5, _context6, _context7, _context8, _context9;\n    super(props);\n    this.state = {\n      didNotifyMaxUndoHistoryToast: false,\n      emphasizeUndo: false,\n      showingPropertiesModal: false };\n\n\n    this.handleChangeText = _bindInstanceProperty(_context = this.handleChangeText).call(_context, this);\n    this.handleCtrlZ = _bindInstanceProperty(_context2 = this.handleCtrlZ).call(_context2, this);\n    this.handleCtrlY = _bindInstanceProperty(_context3 = this.handleCtrlY).call(_context3, this);\n    this.toggleEditMode = _bindInstanceProperty(_context4 = this.toggleEditMode).call(_context4, this);\n    this.forceRefresh = _bindInstanceProperty(_context5 = this.forceRefresh).call(_context5, this);\n    this.startPeriodicRender = _bindInstanceProperty(_context6 = this.startPeriodicRender).call(_context6, this);\n    this.overwriteDashboard = _bindInstanceProperty(_context7 = this.overwriteDashboard).call(_context7, this);\n    this.showPropertiesModal = _bindInstanceProperty(_context8 = this.showPropertiesModal).call(_context8, this);\n    this.hidePropertiesModal = _bindInstanceProperty(_context9 = this.hidePropertiesModal).call(_context9, this);\n  }\n\n  componentDidMount() {\n    const { refreshFrequency } = this.props;\n    this.startPeriodicRender(refreshFrequency * 1000);\n  }\n\n  UNSAFE_componentWillReceiveProps(nextProps) {\n    if (\n    UNDO_LIMIT - nextProps.undoLength <= 0 &&\n    !this.state.didNotifyMaxUndoHistoryToast)\n    {\n      this.setState(() => ({ didNotifyMaxUndoHistoryToast: true }));\n      this.props.maxUndoHistoryToast();\n    }\n    if (\n    nextProps.undoLength > UNDO_LIMIT &&\n    !this.props.maxUndoHistoryExceeded)\n    {\n      this.props.setMaxUndoHistoryExceeded();\n    }\n  }\n\n  componentWillUnmount() {\n    clearTimeout(this.ctrlYTimeout);\n    clearTimeout(this.ctrlZTimeout);\n  }\n\n  handleChangeText(nextText) {\n    const { updateDashboardTitle, onChange } = this.props;\n    if (nextText && this.props.dashboardTitle !== nextText) {\n      updateDashboardTitle(nextText);\n      onChange();\n    }\n  }\n\n  handleCtrlY() {\n    this.props.onRedo();\n    this.setState({ emphasizeRedo: true }, () => {\n      if (this.ctrlYTimeout) clearTimeout(this.ctrlYTimeout);\n      this.ctrlYTimeout = _setTimeout(() => {\n        this.setState({ emphasizeRedo: false });\n      }, 100);\n    });\n  }\n\n  handleCtrlZ() {\n    this.props.onUndo();\n    this.setState({ emphasizeUndo: true }, () => {\n      if (this.ctrlZTimeout) clearTimeout(this.ctrlZTimeout);\n      this.ctrlZTimeout = _setTimeout(() => {\n        this.setState({ emphasizeUndo: false });\n      }, 100);\n    });\n  }\n\n  forceRefresh() {\n    if (!this.props.isLoading) {\n      const chartList = _Object$keys(this.props.charts);\n      this.props.logEvent(LOG_ACTIONS_FORCE_REFRESH_DASHBOARD, {\n        force: true,\n        interval: 0,\n        chartCount: chartList.length });\n\n\n      return this.props.fetchCharts(\n      chartList,\n      true,\n      0,\n      this.props.dashboardInfo.id);\n\n    }\n    return false;\n  }\n\n  startPeriodicRender(interval) {\n    let intervalMessage;\n    if (interval) {\n      const predefinedValue = _findInstanceProperty(PeriodicRefreshOptions).call(PeriodicRefreshOptions,\n      option => option.value === interval / 1000);\n\n      if (predefinedValue) {\n        intervalMessage = predefinedValue.label;\n      } else {\n        intervalMessage = moment.duration(interval, 'millisecond').humanize();\n      }\n    }\n\n    const periodicRender = () => {var _context10, _context11;\n      const { fetchCharts, logEvent, charts, dashboardInfo } = this.props;\n      const { metadata } = dashboardInfo;\n      const immune = metadata.timed_refresh_immune_slices || [];\n      const affectedCharts = _mapInstanceProperty(_context10 = _filterInstanceProperty(_context11 = _Object$values(charts)).call(_context11,\n      chart => _indexOfInstanceProperty(immune).call(immune, chart.id) === -1)).call(_context10,\n      chart => chart.id);\n\n      logEvent(LOG_ACTIONS_PERIODIC_RENDER_DASHBOARD, {\n        interval,\n        chartCount: affectedCharts.length });\n\n      this.props.addWarningToast(\n      t(\n      `This dashboard is currently force refreshing; the next force refresh will be in %s.`,\n      intervalMessage));\n\n\n\n      return fetchCharts(\n      affectedCharts,\n      true,\n      interval * 0.2,\n      dashboardInfo.id);\n\n    };\n\n    this.refreshTimer = setPeriodicRunner({\n      interval,\n      periodicRender,\n      refreshTimer: this.refreshTimer });\n\n  }\n\n  toggleEditMode() {\n    this.props.logEvent(LOG_ACTIONS_TOGGLE_EDIT_DASHBOARD, {\n      edit_mode: !this.props.editMode });\n\n    this.props.setEditMode(!this.props.editMode);\n  }\n\n  overwriteDashboard() {var _dashboardInfo$metada, _dashboardInfo$metada2;\n    const {\n      dashboardTitle,\n      layout: positions,\n      expandedSlices,\n      customCss,\n      colorNamespace,\n      colorScheme,\n      dashboardInfo,\n      refreshFrequency: currentRefreshFrequency,\n      shouldPersistRefreshFrequency,\n      lastModifiedTime } =\n    this.props;\n\n    const scale = CategoricalColorNamespace.getScale(\n    colorScheme,\n    colorNamespace);\n\n\n    // use the colorScheme for default labels\n    let labelColors = colorScheme ? scale.getColorMap() : {};\n    // but allow metadata to overwrite if it exists\n    // eslint-disable-next-line camelcase\n    const metadataLabelColors = (_dashboardInfo$metada = dashboardInfo.metadata) == null ? void 0 : _dashboardInfo$metada.label_colors;\n    if (metadataLabelColors) {\n      labelColors = { ...labelColors, ...metadataLabelColors };\n    }\n\n    // check refresh frequency is for current session or persist\n    const refreshFrequency = shouldPersistRefreshFrequency ?\n    currentRefreshFrequency : (_dashboardInfo$metada2 =\n    dashboardInfo.metadata) == null ? void 0 : _dashboardInfo$metada2.refresh_frequency; // eslint-disable-line camelcase\n\n    const data = {\n      positions,\n      expanded_slices: expandedSlices,\n      css: customCss,\n      color_namespace: colorNamespace,\n      color_scheme: colorScheme,\n      label_colors: labelColors,\n      dashboard_title: dashboardTitle,\n      refresh_frequency: refreshFrequency,\n      last_modified_time: lastModifiedTime };\n\n\n    // make sure positions data less than DB storage limitation:\n    const positionJSONLength = safeStringify(positions).length;\n    const limit =\n    dashboardInfo.common.conf.SUPERSET_DASHBOARD_POSITION_DATA_LIMIT ||\n    DASHBOARD_POSITION_DATA_LIMIT;\n    if (positionJSONLength >= limit) {\n      this.props.addDangerToast(\n      t(\n      'Your dashboard is too large. Please reduce the size before save it.'));\n\n\n    } else {\n      if (positionJSONLength >= limit * 0.9) {\n        this.props.addWarningToast('Your dashboard is near the size limit.');\n      }\n\n      this.props.onSave(data, dashboardInfo.id, SAVE_TYPE_OVERWRITE);\n    }\n  }\n\n  showPropertiesModal() {\n    this.setState({ showingPropertiesModal: true });\n  }\n\n  hidePropertiesModal() {\n    this.setState({ showingPropertiesModal: false });\n  }\n\n  render() {\n    const {\n      dashboardTitle,\n      layout,\n      expandedSlices,\n      customCss,\n      colorNamespace,\n      setColorSchemeAndUnsavedChanges,\n      colorScheme,\n      onUndo,\n      onRedo,\n      undoLength,\n      redoLength,\n      onChange,\n      onSave,\n      updateCss,\n      editMode,\n      isPublished,\n      dashboardInfo,\n      hasUnsavedChanges,\n      isLoading,\n      refreshFrequency,\n      shouldPersistRefreshFrequency,\n      setRefreshFrequency,\n      lastModifiedTime } =\n    this.props;\n\n    const userCanEdit = dashboardInfo.dash_edit_perm;\n    const userCanShare = dashboardInfo.dash_share_perm;\n    const userCanSaveAs = dashboardInfo.dash_save_perm;\n    const refreshLimit =\n    dashboardInfo.common.conf.SUPERSET_DASHBOARD_PERIODICAL_REFRESH_LIMIT;\n    const refreshWarning =\n    dashboardInfo.common.conf.\n    SUPERSET_DASHBOARD_PERIODICAL_REFRESH_WARNING_MESSAGE;\n\n    return (\n      ___EmotionJSX(StyledDashboardHeader, {\n        className: \"dashboard-header\",\n        \"data-test\": \"dashboard-header\",\n        \"data-test-id\": `${dashboardInfo.id}` },\n\n      ___EmotionJSX(\"div\", { className: \"dashboard-component-header header-large\" },\n      ___EmotionJSX(EditableTitle, {\n        title: dashboardTitle,\n        canEdit: userCanEdit && editMode,\n        onSaveTitle: this.handleChangeText,\n        showTooltip: false }),\n\n      ___EmotionJSX(PublishedStatus, {\n        dashboardId: dashboardInfo.id,\n        isPublished: isPublished,\n        savePublished: this.props.savePublished,\n        canEdit: userCanEdit,\n        canSave: userCanSaveAs }),\n\n      dashboardInfo.userId &&\n      ___EmotionJSX(FaveStar, {\n        itemId: dashboardInfo.id,\n        fetchFaveStar: this.props.fetchFaveStar,\n        saveFaveStar: this.props.saveFaveStar,\n        isStarred: this.props.isStarred,\n        showTooltip: true })),\n\n\n\n\n      ___EmotionJSX(\"div\", { className: \"button-container\" },\n      userCanSaveAs &&\n      ___EmotionJSX(\"div\", {\n        className: \"button-container\",\n        \"data-test\": \"dashboard-edit-actions\" },\n\n      editMode &&\n      ___EmotionJSX(React.Fragment, null,\n      ___EmotionJSX(ButtonGroup, { className: \"m-r-5\" },\n      ___EmotionJSX(Button, {\n        buttonSize: \"small\",\n        onClick: onUndo,\n        disabled: undoLength < 1,\n        buttonStyle:\n        this.state.emphasizeUndo ? 'primary' : undefined },\n\n\n      ___EmotionJSX(\"i\", {\n        title: \"Undo\",\n        className: \"undo-action fa fa-reply\",\n        \"data-test\": \"undo-action\" }), \"\\xA0\"),\n\n\n\n      ___EmotionJSX(Button, {\n        buttonSize: \"small\",\n        onClick: onRedo,\n        disabled: redoLength < 1,\n        buttonStyle:\n        this.state.emphasizeRedo ? 'primary' : undefined }, \"\\xA0\",\n\n\n\n      ___EmotionJSX(\"i\", { title: \"Redo\", className: \"redo-action fa fa-share\" }))),\n\n\n      ___EmotionJSX(Button, {\n        buttonSize: \"small\",\n        className: \"m-r-5\",\n        onClick: this.constructor.discardChanges,\n        buttonStyle: \"default\",\n        \"data-test\": \"discard-changes-button\" },\n\n      t('Discard changes')),\n\n      ___EmotionJSX(Button, {\n        buttonSize: \"small\",\n        disabled: !hasUnsavedChanges,\n        buttonStyle: \"primary\",\n        onClick: this.overwriteDashboard,\n        \"data-test\": \"header-save-button\" },\n\n      t('Save')))),\n\n\n\n\n\n      editMode &&\n      ___EmotionJSX(UndoRedoKeyListeners, {\n        onUndo: this.handleCtrlZ,\n        onRedo: this.handleCtrlY }),\n\n\n\n      !editMode && userCanEdit &&\n      ___EmotionJSX(React.Fragment, null,\n      ___EmotionJSX(\"span\", {\n        role: \"button\",\n        title: t('Edit dashboard'),\n        tabIndex: 0,\n        className: \"action-button\",\n        onClick: this.toggleEditMode },\n\n      ___EmotionJSX(Icon, { name: \"edit-alt\" }))),\n\n\n\n\n      this.state.showingPropertiesModal &&\n      ___EmotionJSX(PropertiesModal, {\n        dashboardId: dashboardInfo.id,\n        show: this.state.showingPropertiesModal,\n        onHide: this.hidePropertiesModal,\n        colorScheme: this.props.colorScheme,\n        onSubmit: updates => {\n          const {\n            dashboardInfoChanged,\n            dashboardTitleChanged } =\n          this.props;\n          dashboardInfoChanged({\n            slug: updates.slug,\n            metadata: JSON.parse(updates.jsonMetadata) });\n\n          setColorSchemeAndUnsavedChanges(updates.colorScheme);\n          dashboardTitleChanged(updates.title);\n          if (updates.slug) {\n            window.history.pushState(\n            { event: 'dashboard_properties_changed' },\n            '',\n            `/superset/dashboard/${updates.slug}/`);\n\n          }\n        } }),\n\n\n\n      ___EmotionJSX(HeaderActionsDropdown, {\n        addSuccessToast: this.props.addSuccessToast,\n        addDangerToast: this.props.addDangerToast,\n        dashboardId: dashboardInfo.id,\n        dashboardTitle: dashboardTitle,\n        dashboardInfo: dashboardInfo,\n        layout: layout,\n        expandedSlices: expandedSlices,\n        customCss: customCss,\n        colorNamespace: colorNamespace,\n        colorScheme: colorScheme,\n        onSave: onSave,\n        onChange: onChange,\n        forceRefreshAllCharts: this.forceRefresh,\n        startPeriodicRender: this.startPeriodicRender,\n        refreshFrequency: refreshFrequency,\n        shouldPersistRefreshFrequency: shouldPersistRefreshFrequency,\n        setRefreshFrequency: setRefreshFrequency,\n        updateCss: updateCss,\n        editMode: editMode,\n        hasUnsavedChanges: hasUnsavedChanges,\n        userCanEdit: userCanEdit,\n        userCanShare: userCanShare,\n        userCanSave: userCanSaveAs,\n        isLoading: isLoading,\n        showPropertiesModal: this.showPropertiesModal,\n        refreshLimit: refreshLimit,\n        refreshWarning: refreshWarning,\n        lastModifiedTime: lastModifiedTime }))));\n\n\n\n\n  } // @ts-ignore\n  __reactstandin__regenerateByEval(key, code) {// @ts-ignore\n    this[key] = eval(code);}}\nHeader.propTypes = propTypes;\nHeader.defaultProps = defaultProps;const _default =\n\nHeader;export default _default;;(function () {var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined;if (!reactHotLoader) {return;}reactHotLoader.register(propTypes, \"propTypes\", \"/app/superset-frontend/src/dashboard/components/Header/index.jsx\");reactHotLoader.register(defaultProps, \"defaultProps\", \"/app/superset-frontend/src/dashboard/components/Header/index.jsx\");reactHotLoader.register(StyledDashboardHeader, \"StyledDashboardHeader\", \"/app/superset-frontend/src/dashboard/components/Header/index.jsx\");reactHotLoader.register(Header, \"Header\", \"/app/superset-frontend/src/dashboard/components/Header/index.jsx\");reactHotLoader.register(_default, \"default\", \"/app/superset-frontend/src/dashboard/components/Header/index.jsx\");})();;(function () {var leaveModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.leaveModule : undefined;leaveModule && leaveModule(module);})();","map":{"version":3,"sources":["/app/superset-frontend/src/dashboard/components/Header/index.jsx"],"names":["moment","React","PropTypes","styled","CategoricalColorNamespace","t","ButtonGroup","LOG_ACTIONS_PERIODIC_RENDER_DASHBOARD","LOG_ACTIONS_FORCE_REFRESH_DASHBOARD","LOG_ACTIONS_TOGGLE_EDIT_DASHBOARD","Icon","Button","EditableTitle","FaveStar","safeStringify","HeaderActionsDropdown","PublishedStatus","UndoRedoKeyListeners","PropertiesModal","chartPropShape","UNDO_LIMIT","SAVE_TYPE_OVERWRITE","DASHBOARD_POSITION_DATA_LIMIT","setPeriodicRunner","options","PeriodicRefreshOptions","propTypes","addSuccessToast","func","isRequired","addDangerToast","addWarningToast","dashboardInfo","object","dashboardTitle","string","charts","objectOf","layout","expandedSlices","customCss","colorNamespace","colorScheme","setColorSchemeAndUnsavedChanges","isStarred","bool","isPublished","isLoading","onSave","onChange","fetchFaveStar","fetchCharts","saveFaveStar","savePublished","updateDashboardTitle","editMode","setEditMode","showBuilderPane","updateCss","logEvent","hasUnsavedChanges","maxUndoHistoryExceeded","lastModifiedTime","number","onUndo","onRedo","undoLength","redoLength","setMaxUndoHistoryExceeded","maxUndoHistoryToast","refreshFrequency","shouldPersistRefreshFrequency","setRefreshFrequency","dashboardInfoChanged","dashboardTitleChanged","defaultProps","undefined","StyledDashboardHeader","div","theme","colors","grayscale","light5","gridUnit","light2","typography","sizes","xl","Header","PureComponent","discardChanges","window","location","reload","constructor","props","state","didNotifyMaxUndoHistoryToast","emphasizeUndo","showingPropertiesModal","handleChangeText","handleCtrlZ","handleCtrlY","toggleEditMode","forceRefresh","startPeriodicRender","overwriteDashboard","showPropertiesModal","hidePropertiesModal","componentDidMount","UNSAFE_componentWillReceiveProps","nextProps","setState","componentWillUnmount","clearTimeout","ctrlYTimeout","ctrlZTimeout","nextText","emphasizeRedo","chartList","force","interval","chartCount","length","id","intervalMessage","predefinedValue","option","value","label","duration","humanize","periodicRender","metadata","immune","timed_refresh_immune_slices","affectedCharts","chart","refreshTimer","edit_mode","positions","currentRefreshFrequency","scale","getScale","labelColors","getColorMap","metadataLabelColors","label_colors","refresh_frequency","data","expanded_slices","css","color_namespace","color_scheme","dashboard_title","last_modified_time","positionJSONLength","limit","common","conf","SUPERSET_DASHBOARD_POSITION_DATA_LIMIT","render","userCanEdit","dash_edit_perm","userCanShare","dash_share_perm","userCanSaveAs","dash_save_perm","refreshLimit","SUPERSET_DASHBOARD_PERIODICAL_REFRESH_LIMIT","refreshWarning","SUPERSET_DASHBOARD_PERIODICAL_REFRESH_WARNING_MESSAGE","userId","updates","slug","JSON","parse","jsonMetadata","title","history","pushState","event"],"mappings":"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","sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n/* eslint-env browser */\nimport moment from 'moment';\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { styled, CategoricalColorNamespace, t } from '@superset-ui/core';\nimport ButtonGroup from 'src/components/ButtonGroup';\n\nimport {\n  LOG_ACTIONS_PERIODIC_RENDER_DASHBOARD,\n  LOG_ACTIONS_FORCE_REFRESH_DASHBOARD,\n  LOG_ACTIONS_TOGGLE_EDIT_DASHBOARD,\n} from 'src/logger/LogUtils';\n\nimport Icon from 'src/components/Icon';\nimport Button from 'src/components/Button';\nimport EditableTitle from 'src/components/EditableTitle';\nimport FaveStar from 'src/components/FaveStar';\nimport { safeStringify } from 'src/utils/safeStringify';\nimport HeaderActionsDropdown from 'src/dashboard/components/Header/HeaderActionsDropdown';\nimport PublishedStatus from 'src/dashboard/components/PublishedStatus';\nimport UndoRedoKeyListeners from 'src/dashboard/components/UndoRedoKeyListeners';\nimport PropertiesModal from 'src/dashboard/components/PropertiesModal';\nimport { chartPropShape } from 'src/dashboard/util/propShapes';\nimport {\n  UNDO_LIMIT,\n  SAVE_TYPE_OVERWRITE,\n  DASHBOARD_POSITION_DATA_LIMIT,\n} from 'src/dashboard/util/constants';\nimport setPeriodicRunner from 'src/dashboard/util/setPeriodicRunner';\nimport { options as PeriodicRefreshOptions } from 'src/dashboard/components/RefreshIntervalModal';\n\nconst propTypes = {\n  addSuccessToast: PropTypes.func.isRequired,\n  addDangerToast: PropTypes.func.isRequired,\n  addWarningToast: PropTypes.func.isRequired,\n  dashboardInfo: PropTypes.object.isRequired,\n  dashboardTitle: PropTypes.string.isRequired,\n  charts: PropTypes.objectOf(chartPropShape).isRequired,\n  layout: PropTypes.object.isRequired,\n  expandedSlices: PropTypes.object.isRequired,\n  customCss: PropTypes.string.isRequired,\n  colorNamespace: PropTypes.string,\n  colorScheme: PropTypes.string,\n  setColorSchemeAndUnsavedChanges: PropTypes.func.isRequired,\n  isStarred: PropTypes.bool.isRequired,\n  isPublished: PropTypes.bool.isRequired,\n  isLoading: PropTypes.bool.isRequired,\n  onSave: PropTypes.func.isRequired,\n  onChange: PropTypes.func.isRequired,\n  fetchFaveStar: PropTypes.func.isRequired,\n  fetchCharts: PropTypes.func.isRequired,\n  saveFaveStar: PropTypes.func.isRequired,\n  savePublished: PropTypes.func.isRequired,\n  updateDashboardTitle: PropTypes.func.isRequired,\n  editMode: PropTypes.bool.isRequired,\n  setEditMode: PropTypes.func.isRequired,\n  showBuilderPane: PropTypes.func.isRequired,\n  updateCss: PropTypes.func.isRequired,\n  logEvent: PropTypes.func.isRequired,\n  hasUnsavedChanges: PropTypes.bool.isRequired,\n  maxUndoHistoryExceeded: PropTypes.bool.isRequired,\n  lastModifiedTime: PropTypes.number.isRequired,\n\n  // redux\n  onUndo: PropTypes.func.isRequired,\n  onRedo: PropTypes.func.isRequired,\n  undoLength: PropTypes.number.isRequired,\n  redoLength: PropTypes.number.isRequired,\n  setMaxUndoHistoryExceeded: PropTypes.func.isRequired,\n  maxUndoHistoryToast: PropTypes.func.isRequired,\n  refreshFrequency: PropTypes.number.isRequired,\n  shouldPersistRefreshFrequency: PropTypes.bool.isRequired,\n  setRefreshFrequency: PropTypes.func.isRequired,\n  dashboardInfoChanged: PropTypes.func.isRequired,\n  dashboardTitleChanged: PropTypes.func.isRequired,\n};\n\nconst defaultProps = {\n  colorNamespace: undefined,\n  colorScheme: undefined,\n};\n\n// Styled Components\nconst StyledDashboardHeader = styled.div`\n  background: ${({ theme }) => theme.colors.grayscale.light5};\n  display: flex;\n  flex-direction: row;\n  align-items: center;\n  justify-content: space-between;\n  padding: 0 ${({ theme }) => theme.gridUnit * 6}px;\n  border-bottom: 1px solid ${({ theme }) => theme.colors.grayscale.light2};\n\n  button,\n  .fave-unfave-icon {\n    margin-left: ${({ theme }) => theme.gridUnit * 2}px;\n  }\n  .button-container {\n    display: flex;\n    flex-direction: row;\n    flex-wrap: nowrap;\n    .action-button {\n      font-size: ${({ theme }) => theme.typography.sizes.xl}px;\n    }\n  }\n`;\n\nclass Header extends React.PureComponent {\n  static discardChanges() {\n    window.location.reload();\n  }\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      didNotifyMaxUndoHistoryToast: false,\n      emphasizeUndo: false,\n      showingPropertiesModal: false,\n    };\n\n    this.handleChangeText = this.handleChangeText.bind(this);\n    this.handleCtrlZ = this.handleCtrlZ.bind(this);\n    this.handleCtrlY = this.handleCtrlY.bind(this);\n    this.toggleEditMode = this.toggleEditMode.bind(this);\n    this.forceRefresh = this.forceRefresh.bind(this);\n    this.startPeriodicRender = this.startPeriodicRender.bind(this);\n    this.overwriteDashboard = this.overwriteDashboard.bind(this);\n    this.showPropertiesModal = this.showPropertiesModal.bind(this);\n    this.hidePropertiesModal = this.hidePropertiesModal.bind(this);\n  }\n\n  componentDidMount() {\n    const { refreshFrequency } = this.props;\n    this.startPeriodicRender(refreshFrequency * 1000);\n  }\n\n  UNSAFE_componentWillReceiveProps(nextProps) {\n    if (\n      UNDO_LIMIT - nextProps.undoLength <= 0 &&\n      !this.state.didNotifyMaxUndoHistoryToast\n    ) {\n      this.setState(() => ({ didNotifyMaxUndoHistoryToast: true }));\n      this.props.maxUndoHistoryToast();\n    }\n    if (\n      nextProps.undoLength > UNDO_LIMIT &&\n      !this.props.maxUndoHistoryExceeded\n    ) {\n      this.props.setMaxUndoHistoryExceeded();\n    }\n  }\n\n  componentWillUnmount() {\n    clearTimeout(this.ctrlYTimeout);\n    clearTimeout(this.ctrlZTimeout);\n  }\n\n  handleChangeText(nextText) {\n    const { updateDashboardTitle, onChange } = this.props;\n    if (nextText && this.props.dashboardTitle !== nextText) {\n      updateDashboardTitle(nextText);\n      onChange();\n    }\n  }\n\n  handleCtrlY() {\n    this.props.onRedo();\n    this.setState({ emphasizeRedo: true }, () => {\n      if (this.ctrlYTimeout) clearTimeout(this.ctrlYTimeout);\n      this.ctrlYTimeout = setTimeout(() => {\n        this.setState({ emphasizeRedo: false });\n      }, 100);\n    });\n  }\n\n  handleCtrlZ() {\n    this.props.onUndo();\n    this.setState({ emphasizeUndo: true }, () => {\n      if (this.ctrlZTimeout) clearTimeout(this.ctrlZTimeout);\n      this.ctrlZTimeout = setTimeout(() => {\n        this.setState({ emphasizeUndo: false });\n      }, 100);\n    });\n  }\n\n  forceRefresh() {\n    if (!this.props.isLoading) {\n      const chartList = Object.keys(this.props.charts);\n      this.props.logEvent(LOG_ACTIONS_FORCE_REFRESH_DASHBOARD, {\n        force: true,\n        interval: 0,\n        chartCount: chartList.length,\n      });\n\n      return this.props.fetchCharts(\n        chartList,\n        true,\n        0,\n        this.props.dashboardInfo.id,\n      );\n    }\n    return false;\n  }\n\n  startPeriodicRender(interval) {\n    let intervalMessage;\n    if (interval) {\n      const predefinedValue = PeriodicRefreshOptions.find(\n        option => option.value === interval / 1000,\n      );\n      if (predefinedValue) {\n        intervalMessage = predefinedValue.label;\n      } else {\n        intervalMessage = moment.duration(interval, 'millisecond').humanize();\n      }\n    }\n\n    const periodicRender = () => {\n      const { fetchCharts, logEvent, charts, dashboardInfo } = this.props;\n      const { metadata } = dashboardInfo;\n      const immune = metadata.timed_refresh_immune_slices || [];\n      const affectedCharts = Object.values(charts)\n        .filter(chart => immune.indexOf(chart.id) === -1)\n        .map(chart => chart.id);\n\n      logEvent(LOG_ACTIONS_PERIODIC_RENDER_DASHBOARD, {\n        interval,\n        chartCount: affectedCharts.length,\n      });\n      this.props.addWarningToast(\n        t(\n          `This dashboard is currently force refreshing; the next force refresh will be in %s.`,\n          intervalMessage,\n        ),\n      );\n\n      return fetchCharts(\n        affectedCharts,\n        true,\n        interval * 0.2,\n        dashboardInfo.id,\n      );\n    };\n\n    this.refreshTimer = setPeriodicRunner({\n      interval,\n      periodicRender,\n      refreshTimer: this.refreshTimer,\n    });\n  }\n\n  toggleEditMode() {\n    this.props.logEvent(LOG_ACTIONS_TOGGLE_EDIT_DASHBOARD, {\n      edit_mode: !this.props.editMode,\n    });\n    this.props.setEditMode(!this.props.editMode);\n  }\n\n  overwriteDashboard() {\n    const {\n      dashboardTitle,\n      layout: positions,\n      expandedSlices,\n      customCss,\n      colorNamespace,\n      colorScheme,\n      dashboardInfo,\n      refreshFrequency: currentRefreshFrequency,\n      shouldPersistRefreshFrequency,\n      lastModifiedTime,\n    } = this.props;\n\n    const scale = CategoricalColorNamespace.getScale(\n      colorScheme,\n      colorNamespace,\n    );\n\n    // use the colorScheme for default labels\n    let labelColors = colorScheme ? scale.getColorMap() : {};\n    // but allow metadata to overwrite if it exists\n    // eslint-disable-next-line camelcase\n    const metadataLabelColors = dashboardInfo.metadata?.label_colors;\n    if (metadataLabelColors) {\n      labelColors = { ...labelColors, ...metadataLabelColors };\n    }\n\n    // check refresh frequency is for current session or persist\n    const refreshFrequency = shouldPersistRefreshFrequency\n      ? currentRefreshFrequency\n      : dashboardInfo.metadata?.refresh_frequency; // eslint-disable-line camelcase\n\n    const data = {\n      positions,\n      expanded_slices: expandedSlices,\n      css: customCss,\n      color_namespace: colorNamespace,\n      color_scheme: colorScheme,\n      label_colors: labelColors,\n      dashboard_title: dashboardTitle,\n      refresh_frequency: refreshFrequency,\n      last_modified_time: lastModifiedTime,\n    };\n\n    // make sure positions data less than DB storage limitation:\n    const positionJSONLength = safeStringify(positions).length;\n    const limit =\n      dashboardInfo.common.conf.SUPERSET_DASHBOARD_POSITION_DATA_LIMIT ||\n      DASHBOARD_POSITION_DATA_LIMIT;\n    if (positionJSONLength >= limit) {\n      this.props.addDangerToast(\n        t(\n          'Your dashboard is too large. Please reduce the size before save it.',\n        ),\n      );\n    } else {\n      if (positionJSONLength >= limit * 0.9) {\n        this.props.addWarningToast('Your dashboard is near the size limit.');\n      }\n\n      this.props.onSave(data, dashboardInfo.id, SAVE_TYPE_OVERWRITE);\n    }\n  }\n\n  showPropertiesModal() {\n    this.setState({ showingPropertiesModal: true });\n  }\n\n  hidePropertiesModal() {\n    this.setState({ showingPropertiesModal: false });\n  }\n\n  render() {\n    const {\n      dashboardTitle,\n      layout,\n      expandedSlices,\n      customCss,\n      colorNamespace,\n      setColorSchemeAndUnsavedChanges,\n      colorScheme,\n      onUndo,\n      onRedo,\n      undoLength,\n      redoLength,\n      onChange,\n      onSave,\n      updateCss,\n      editMode,\n      isPublished,\n      dashboardInfo,\n      hasUnsavedChanges,\n      isLoading,\n      refreshFrequency,\n      shouldPersistRefreshFrequency,\n      setRefreshFrequency,\n      lastModifiedTime,\n    } = this.props;\n\n    const userCanEdit = dashboardInfo.dash_edit_perm;\n    const userCanShare = dashboardInfo.dash_share_perm;\n    const userCanSaveAs = dashboardInfo.dash_save_perm;\n    const refreshLimit =\n      dashboardInfo.common.conf.SUPERSET_DASHBOARD_PERIODICAL_REFRESH_LIMIT;\n    const refreshWarning =\n      dashboardInfo.common.conf\n        .SUPERSET_DASHBOARD_PERIODICAL_REFRESH_WARNING_MESSAGE;\n\n    return (\n      <StyledDashboardHeader\n        className=\"dashboard-header\"\n        data-test=\"dashboard-header\"\n        data-test-id={`${dashboardInfo.id}`}\n      >\n        <div className=\"dashboard-component-header header-large\">\n          <EditableTitle\n            title={dashboardTitle}\n            canEdit={userCanEdit && editMode}\n            onSaveTitle={this.handleChangeText}\n            showTooltip={false}\n          />\n          <PublishedStatus\n            dashboardId={dashboardInfo.id}\n            isPublished={isPublished}\n            savePublished={this.props.savePublished}\n            canEdit={userCanEdit}\n            canSave={userCanSaveAs}\n          />\n          {dashboardInfo.userId && (\n            <FaveStar\n              itemId={dashboardInfo.id}\n              fetchFaveStar={this.props.fetchFaveStar}\n              saveFaveStar={this.props.saveFaveStar}\n              isStarred={this.props.isStarred}\n              showTooltip\n            />\n          )}\n        </div>\n\n        <div className=\"button-container\">\n          {userCanSaveAs && (\n            <div\n              className=\"button-container\"\n              data-test=\"dashboard-edit-actions\"\n            >\n              {editMode && (\n                <>\n                  <ButtonGroup className=\"m-r-5\">\n                    <Button\n                      buttonSize=\"small\"\n                      onClick={onUndo}\n                      disabled={undoLength < 1}\n                      buttonStyle={\n                        this.state.emphasizeUndo ? 'primary' : undefined\n                      }\n                    >\n                      <i\n                        title=\"Undo\"\n                        className=\"undo-action fa fa-reply\"\n                        data-test=\"undo-action\"\n                      />\n                      &nbsp;\n                    </Button>\n                    <Button\n                      buttonSize=\"small\"\n                      onClick={onRedo}\n                      disabled={redoLength < 1}\n                      buttonStyle={\n                        this.state.emphasizeRedo ? 'primary' : undefined\n                      }\n                    >\n                      &nbsp;\n                      <i title=\"Redo\" className=\"redo-action fa fa-share\" />\n                    </Button>\n                  </ButtonGroup>\n                  <Button\n                    buttonSize=\"small\"\n                    className=\"m-r-5\"\n                    onClick={this.constructor.discardChanges}\n                    buttonStyle=\"default\"\n                    data-test=\"discard-changes-button\"\n                  >\n                    {t('Discard changes')}\n                  </Button>\n                  <Button\n                    buttonSize=\"small\"\n                    disabled={!hasUnsavedChanges}\n                    buttonStyle=\"primary\"\n                    onClick={this.overwriteDashboard}\n                    data-test=\"header-save-button\"\n                  >\n                    {t('Save')}\n                  </Button>\n                </>\n              )}\n            </div>\n          )}\n          {editMode && (\n            <UndoRedoKeyListeners\n              onUndo={this.handleCtrlZ}\n              onRedo={this.handleCtrlY}\n            />\n          )}\n\n          {!editMode && userCanEdit && (\n            <>\n              <span\n                role=\"button\"\n                title={t('Edit dashboard')}\n                tabIndex={0}\n                className=\"action-button\"\n                onClick={this.toggleEditMode}\n              >\n                <Icon name=\"edit-alt\" />\n              </span>\n            </>\n          )}\n\n          {this.state.showingPropertiesModal && (\n            <PropertiesModal\n              dashboardId={dashboardInfo.id}\n              show={this.state.showingPropertiesModal}\n              onHide={this.hidePropertiesModal}\n              colorScheme={this.props.colorScheme}\n              onSubmit={updates => {\n                const {\n                  dashboardInfoChanged,\n                  dashboardTitleChanged,\n                } = this.props;\n                dashboardInfoChanged({\n                  slug: updates.slug,\n                  metadata: JSON.parse(updates.jsonMetadata),\n                });\n                setColorSchemeAndUnsavedChanges(updates.colorScheme);\n                dashboardTitleChanged(updates.title);\n                if (updates.slug) {\n                  window.history.pushState(\n                    { event: 'dashboard_properties_changed' },\n                    '',\n                    `/superset/dashboard/${updates.slug}/`,\n                  );\n                }\n              }}\n            />\n          )}\n\n          <HeaderActionsDropdown\n            addSuccessToast={this.props.addSuccessToast}\n            addDangerToast={this.props.addDangerToast}\n            dashboardId={dashboardInfo.id}\n            dashboardTitle={dashboardTitle}\n            dashboardInfo={dashboardInfo}\n            layout={layout}\n            expandedSlices={expandedSlices}\n            customCss={customCss}\n            colorNamespace={colorNamespace}\n            colorScheme={colorScheme}\n            onSave={onSave}\n            onChange={onChange}\n            forceRefreshAllCharts={this.forceRefresh}\n            startPeriodicRender={this.startPeriodicRender}\n            refreshFrequency={refreshFrequency}\n            shouldPersistRefreshFrequency={shouldPersistRefreshFrequency}\n            setRefreshFrequency={setRefreshFrequency}\n            updateCss={updateCss}\n            editMode={editMode}\n            hasUnsavedChanges={hasUnsavedChanges}\n            userCanEdit={userCanEdit}\n            userCanShare={userCanShare}\n            userCanSave={userCanSaveAs}\n            isLoading={isLoading}\n            showPropertiesModal={this.showPropertiesModal}\n            refreshLimit={refreshLimit}\n            refreshWarning={refreshWarning}\n            lastModifiedTime={lastModifiedTime}\n          />\n        </div>\n      </StyledDashboardHeader>\n    );\n  }\n}\n\nHeader.propTypes = propTypes;\nHeader.defaultProps = defaultProps;\n\nexport default Header;\n"]},"metadata":{},"sourceType":"module"}