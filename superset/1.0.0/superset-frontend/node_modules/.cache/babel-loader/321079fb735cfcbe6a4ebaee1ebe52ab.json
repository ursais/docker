{"ast":null,"code":"import _bindInstanceProperty from \"@babel/runtime-corejs3/core-js-stable/instance/bind\";(function () {var enterModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.enterModule : undefined;enterModule && enterModule(module);})();var __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default.signature : function (a) {return a;}; /**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { t } from '@superset-ui/core';\nimport { Tooltip } from 'src/components/Tooltip';\nimport Label from 'src/components/Label';import { jsx as ___EmotionJSX } from \"@emotion/react\";\n\nconst propTypes = {\n  dashboardId: PropTypes.number.isRequired,\n  isPublished: PropTypes.bool.isRequired,\n  savePublished: PropTypes.func.isRequired,\n  canEdit: PropTypes.bool.isRequired,\n  canSave: PropTypes.bool.isRequired };\n\n\nconst draftButtonTooltip = t(\n'This dashboard is not published, it will not show up in the list of dashboards. ' +\n'Click here to publish this dashboard.');\n\n\nconst draftDivTooltip = t(\n'This dashboard is not published which means it will not show up in the list of dashboards.' +\n' Favorite it to see it there or access it by using the URL directly.');\n\n\nconst publishedTooltip = t(\n'This dashboard is published. Click to make it a draft.');\n\n\nexport default class PublishedStatus extends React.Component {\n  componentDidMount() {var _context;\n    this.togglePublished = _bindInstanceProperty(_context = this.togglePublished).call(_context, this);\n  }\n\n  togglePublished() {\n    this.props.savePublished(this.props.dashboardId, !this.props.isPublished);\n  }\n\n  render() {\n    // Show everybody the draft badge\n    if (!this.props.isPublished) {\n      // if they can edit the dash, make the badge a button\n      if (this.props.canEdit && this.props.canSave) {\n        return (\n          ___EmotionJSX(Tooltip, {\n            id: \"unpublished-dashboard-tooltip\",\n            placement: \"bottom\",\n            title: draftButtonTooltip },\n\n          ___EmotionJSX(Label, {\n            onClick: () => {\n              this.togglePublished();\n            } },\n\n          t('Draft'))));\n\n\n\n      }\n      return (\n        ___EmotionJSX(Tooltip, {\n          id: \"unpublished-dashboard-tooltip\",\n          placement: \"bottom\",\n          title: draftDivTooltip },\n\n        ___EmotionJSX(Label, null, t('Draft'))));\n\n\n    }\n\n    // Show the published badge for the owner of the dashboard to toggle\n    if (this.props.canEdit && this.props.canSave) {\n      return (\n        ___EmotionJSX(Tooltip, {\n          id: \"published-dashboard-tooltip\",\n          placement: \"bottom\",\n          title: publishedTooltip },\n\n        ___EmotionJSX(Label, {\n          onClick: () => {\n            this.togglePublished();\n          } },\n\n        t('Published'))));\n\n\n\n    }\n\n    // Don't show anything if one doesn't own the dashboard and it is published\n    return null;\n  } // @ts-ignore\n  __reactstandin__regenerateByEval(key, code) {// @ts-ignore\n    this[key] = eval(code);}}\nPublishedStatus.propTypes = propTypes;;(function () {var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined;if (!reactHotLoader) {return;}reactHotLoader.register(propTypes, \"propTypes\", \"/app/superset-frontend/src/dashboard/components/PublishedStatus/index.jsx\");reactHotLoader.register(draftButtonTooltip, \"draftButtonTooltip\", \"/app/superset-frontend/src/dashboard/components/PublishedStatus/index.jsx\");reactHotLoader.register(draftDivTooltip, \"draftDivTooltip\", \"/app/superset-frontend/src/dashboard/components/PublishedStatus/index.jsx\");reactHotLoader.register(publishedTooltip, \"publishedTooltip\", \"/app/superset-frontend/src/dashboard/components/PublishedStatus/index.jsx\");reactHotLoader.register(PublishedStatus, \"PublishedStatus\", \"/app/superset-frontend/src/dashboard/components/PublishedStatus/index.jsx\");})();;(function () {var leaveModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.leaveModule : undefined;leaveModule && leaveModule(module);})();","map":{"version":3,"sources":["/app/superset-frontend/src/dashboard/components/PublishedStatus/index.jsx"],"names":["React","PropTypes","t","Tooltip","Label","propTypes","dashboardId","number","isRequired","isPublished","bool","savePublished","func","canEdit","canSave","draftButtonTooltip","draftDivTooltip","publishedTooltip","PublishedStatus","Component","componentDidMount","togglePublished","props","render"],"mappings":"gYAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,SAASC,CAAT,QAAkB,mBAAlB;AACA,SAASC,OAAT,QAAwB,wBAAxB;AACA,OAAOC,KAAP,MAAkB,sBAAlB,C;;AAEA,MAAMC,SAAS,GAAG;AAChBC,EAAAA,WAAW,EAAEL,SAAS,CAACM,MAAV,CAAiBC,UADd;AAEhBC,EAAAA,WAAW,EAAER,SAAS,CAACS,IAAV,CAAeF,UAFZ;AAGhBG,EAAAA,aAAa,EAAEV,SAAS,CAACW,IAAV,CAAeJ,UAHd;AAIhBK,EAAAA,OAAO,EAAEZ,SAAS,CAACS,IAAV,CAAeF,UAJR;AAKhBM,EAAAA,OAAO,EAAEb,SAAS,CAACS,IAAV,CAAeF,UALR,EAAlB;;;AAQA,MAAMO,kBAAkB,GAAGb,CAAC;AAC1B;AACE,uCAFwB,CAA5B;;;AAKA,MAAMc,eAAe,GAAGd,CAAC;AACvB;AACE,sEAFqB,CAAzB;;;AAKA,MAAMe,gBAAgB,GAAGf,CAAC;AACxB,wDADwB,CAA1B;;;AAIA,eAAe,MAAMgB,eAAN,SAA8BlB,KAAK,CAACmB,SAApC,CAA8C;AAC3DC,EAAAA,iBAAiB,GAAG;AAClB,SAAKC,eAAL,GAAuB,sCAAKA,eAAL,iBAA0B,IAA1B,CAAvB;AACD;;AAEDA,EAAAA,eAAe,GAAG;AAChB,SAAKC,KAAL,CAAWX,aAAX,CAAyB,KAAKW,KAAL,CAAWhB,WAApC,EAAiD,CAAC,KAAKgB,KAAL,CAAWb,WAA7D;AACD;;AAEDc,EAAAA,MAAM,GAAG;AACP;AACA,QAAI,CAAC,KAAKD,KAAL,CAAWb,WAAhB,EAA6B;AAC3B;AACA,UAAI,KAAKa,KAAL,CAAWT,OAAX,IAAsB,KAAKS,KAAL,CAAWR,OAArC,EAA8C;AAC5C;AACE,wBAAC,OAAD;AACE,YAAA,EAAE,EAAC,+BADL;AAEE,YAAA,SAAS,EAAC,QAFZ;AAGE,YAAA,KAAK,EAAEC,kBAHT;;AAKE,wBAAC,KAAD;AACE,YAAA,OAAO,EAAE,MAAM;AACb,mBAAKM,eAAL;AACD,aAHH;;AAKGnB,UAAAA,CAAC,CAAC,OAAD,CALJ,CALF,CADF;;;;AAeD;AACD;AACE,sBAAC,OAAD;AACE,UAAA,EAAE,EAAC,+BADL;AAEE,UAAA,SAAS,EAAC,QAFZ;AAGE,UAAA,KAAK,EAAEc,eAHT;;AAKE,sBAAC,KAAD,QAAQd,CAAC,CAAC,OAAD,CAAT,CALF,CADF;;;AASD;;AAED;AACA,QAAI,KAAKoB,KAAL,CAAWT,OAAX,IAAsB,KAAKS,KAAL,CAAWR,OAArC,EAA8C;AAC5C;AACE,sBAAC,OAAD;AACE,UAAA,EAAE,EAAC,6BADL;AAEE,UAAA,SAAS,EAAC,QAFZ;AAGE,UAAA,KAAK,EAAEG,gBAHT;;AAKE,sBAAC,KAAD;AACE,UAAA,OAAO,EAAE,MAAM;AACb,iBAAKI,eAAL;AACD,WAHH;;AAKGnB,QAAAA,CAAC,CAAC,WAAD,CALJ,CALF,CADF;;;;AAeD;;AAED;AACA,WAAO,IAAP;AACD,GA9D0D;AAAA;AAAA;AAiE7DgB,eAAe,CAACb,SAAhB,GAA4BA,SAA5B,C,iLAvFMA,S,oHAQAU,kB,6HAKAC,e,0HAKAC,gB,2HAIeC,e","sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { t } from '@superset-ui/core';\nimport { Tooltip } from 'src/components/Tooltip';\nimport Label from 'src/components/Label';\n\nconst propTypes = {\n  dashboardId: PropTypes.number.isRequired,\n  isPublished: PropTypes.bool.isRequired,\n  savePublished: PropTypes.func.isRequired,\n  canEdit: PropTypes.bool.isRequired,\n  canSave: PropTypes.bool.isRequired,\n};\n\nconst draftButtonTooltip = t(\n  'This dashboard is not published, it will not show up in the list of dashboards. ' +\n    'Click here to publish this dashboard.',\n);\n\nconst draftDivTooltip = t(\n  'This dashboard is not published which means it will not show up in the list of dashboards.' +\n    ' Favorite it to see it there or access it by using the URL directly.',\n);\n\nconst publishedTooltip = t(\n  'This dashboard is published. Click to make it a draft.',\n);\n\nexport default class PublishedStatus extends React.Component {\n  componentDidMount() {\n    this.togglePublished = this.togglePublished.bind(this);\n  }\n\n  togglePublished() {\n    this.props.savePublished(this.props.dashboardId, !this.props.isPublished);\n  }\n\n  render() {\n    // Show everybody the draft badge\n    if (!this.props.isPublished) {\n      // if they can edit the dash, make the badge a button\n      if (this.props.canEdit && this.props.canSave) {\n        return (\n          <Tooltip\n            id=\"unpublished-dashboard-tooltip\"\n            placement=\"bottom\"\n            title={draftButtonTooltip}\n          >\n            <Label\n              onClick={() => {\n                this.togglePublished();\n              }}\n            >\n              {t('Draft')}\n            </Label>\n          </Tooltip>\n        );\n      }\n      return (\n        <Tooltip\n          id=\"unpublished-dashboard-tooltip\"\n          placement=\"bottom\"\n          title={draftDivTooltip}\n        >\n          <Label>{t('Draft')}</Label>\n        </Tooltip>\n      );\n    }\n\n    // Show the published badge for the owner of the dashboard to toggle\n    if (this.props.canEdit && this.props.canSave) {\n      return (\n        <Tooltip\n          id=\"published-dashboard-tooltip\"\n          placement=\"bottom\"\n          title={publishedTooltip}\n        >\n          <Label\n            onClick={() => {\n              this.togglePublished();\n            }}\n          >\n            {t('Published')}\n          </Label>\n        </Tooltip>\n      );\n    }\n\n    // Don't show anything if one doesn't own the dashboard and it is published\n    return null;\n  }\n}\n\nPublishedStatus.propTypes = propTypes;\n"]},"metadata":{},"sourceType":"module"}