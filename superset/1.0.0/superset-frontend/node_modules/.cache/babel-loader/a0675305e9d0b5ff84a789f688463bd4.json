{"ast":null,"code":"import \"core-js/modules/web.dom-collections.iterator.js\";import _setInterval from \"@babel/runtime-corejs3/core-js-stable/set-interval\";(function () {var enterModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.enterModule : undefined;enterModule && enterModule(module);})();var __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default.signature : function (a) {return a;}; /**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React, { useEffect, useRef, useState } from 'react';\nimport { styled } from '@superset-ui/core';\nimport Label from 'src/components/Label';\nimport { now, fDuration } from 'src/modules/dates';import { jsx as ___EmotionJSX } from \"@emotion/react\";\nconst TimerLabel = styled(Label)`\n  text-align: left;\n  width: 91px;\n`;\nexport default function Timer({ endTime, isRunning, startTime, status = 'success' }) {\n  const [clockStr, setClockStr] = useState('00:00:00.00');\n  const timer = useRef();\n  useEffect(() => {\n    const stopTimer = () => {\n      if (timer.current) {\n        clearInterval(timer.current);\n        timer.current = undefined;\n      }\n    };\n    if (isRunning) {\n      timer.current = _setInterval(() => {\n        if (startTime) {\n          const endDttm = endTime || now();\n          if (startTime < endDttm) {\n            setClockStr(fDuration(startTime, endDttm));\n          }\n          if (!isRunning) {\n            stopTimer();\n          }\n        }\n      }, 30);\n    }\n    return stopTimer;\n  }, [endTime, isRunning, startTime]);\n  return ___EmotionJSX(TimerLabel, { type: status, role: \"timer\" },\n  clockStr);\n\n}__signature__(Timer, \"useState{[clockStr, setClockStr]('00:00:00.00')}\\nuseRef{timer}\\nuseEffect{}\");;(function () {var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined;if (!reactHotLoader) {return;}reactHotLoader.register(TimerLabel, \"TimerLabel\", \"/app/superset-frontend/src/components/Timer/index.tsx\");reactHotLoader.register(Timer, \"Timer\", \"/app/superset-frontend/src/components/Timer/index.tsx\");})();;(function () {var leaveModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.leaveModule : undefined;leaveModule && leaveModule(module);})();","map":{"version":3,"sources":["/app/superset-frontend/src/components/Timer/index.tsx"],"names":[],"mappings":"+aAAA;;;;;;;;;;;;;;;;;AAiBG;AACH,OAAO,KAAP,IAAgB,SAAhB,EAA2B,MAA3B,EAAmC,QAAnC,QAAmD,OAAnD;AACA,SAAS,MAAT,QAAuB,mBAAvB;AACA,OAAO,KAAP,MAA4B,sBAA5B;AAEA,SAAS,GAAT,EAAc,SAAd,QAA+B,mBAA/B,C;AASA,MAAM,UAAU,GAAG,MAAM,CAAC,KAAD,CAAO;;;AAG/B,CAHD;AAKA,eAAc,SAAU,KAAV,CAAgB,EAC5B,OAD4B,EAE5B,SAF4B,EAG5B,SAH4B,EAI5B,MAAM,GAAG,SAJmB,EAAhB,EAKD;AACX,QAAM,CAAC,QAAD,EAAW,WAAX,IAA0B,QAAQ,CAAC,aAAD,CAAxC;AACA,QAAM,KAAK,GAAG,MAAM,EAApB;AAEA,EAAA,SAAS,CAAC,MAAK;AACb,UAAM,SAAS,GAAG,MAAK;AACrB,UAAI,KAAK,CAAC,OAAV,EAAmB;AACjB,QAAA,aAAa,CAAC,KAAK,CAAC,OAAP,CAAb;AACA,QAAA,KAAK,CAAC,OAAN,GAAgB,SAAhB;AACD;AACF,KALD;AAOA,QAAI,SAAJ,EAAe;AACb,MAAA,KAAK,CAAC,OAAN,GAAgB,aAAY,MAAK;AAC/B,YAAI,SAAJ,EAAe;AACb,gBAAM,OAAO,GAAG,OAAO,IAAI,GAAG,EAA9B;AACA,cAAI,SAAS,GAAG,OAAhB,EAAyB;AACvB,YAAA,WAAW,CAAC,SAAS,CAAC,SAAD,EAAY,OAAZ,CAAV,CAAX;AACD;AACD,cAAI,CAAC,SAAL,EAAgB;AACd,YAAA,SAAS;AACV;AACF;AACF,OAVe,EAUb,EAVa,CAAhB;AAWD;AACD,WAAO,SAAP;AACD,GAtBQ,EAsBN,CAAC,OAAD,EAAU,SAAV,EAAqB,SAArB,CAtBM,CAAT;AAwBA,SACE,cAAC,UAAD,IAAY,IAAI,EAAE,MAAlB,EAA0B,IAAI,EAAC,OAA/B;AACG,EAAA,QADH,CADF;;AAKD,C,cAtCuB,K,mQALlB,U,iGAKkB,K","sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React, { useEffect, useRef, useState } from 'react';\nimport { styled } from '@superset-ui/core';\nimport Label, { Type } from 'src/components/Label';\n\nimport { now, fDuration } from 'src/modules/dates';\n\nexport interface TimerProps {\n  endTime?: number;\n  isRunning: boolean;\n  startTime?: number;\n  status?: Type;\n}\n\nconst TimerLabel = styled(Label)`\n  text-align: left;\n  width: 91px;\n`;\n\nexport default function Timer({\n  endTime,\n  isRunning,\n  startTime,\n  status = 'success',\n}: TimerProps) {\n  const [clockStr, setClockStr] = useState('00:00:00.00');\n  const timer = useRef<ReturnType<typeof setInterval>>();\n\n  useEffect(() => {\n    const stopTimer = () => {\n      if (timer.current) {\n        clearInterval(timer.current);\n        timer.current = undefined;\n      }\n    };\n\n    if (isRunning) {\n      timer.current = setInterval(() => {\n        if (startTime) {\n          const endDttm = endTime || now();\n          if (startTime < endDttm) {\n            setClockStr(fDuration(startTime, endDttm));\n          }\n          if (!isRunning) {\n            stopTimer();\n          }\n        }\n      }, 30);\n    }\n    return stopTimer;\n  }, [endTime, isRunning, startTime]);\n\n  return (\n    <TimerLabel type={status} role=\"timer\">\n      {clockStr}\n    </TimerLabel>\n  );\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}