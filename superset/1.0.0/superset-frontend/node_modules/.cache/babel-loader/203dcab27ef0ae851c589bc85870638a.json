{"ast":null,"code":"import \"core-js/modules/web.dom-collections.iterator.js\";import _mapInstanceProperty from \"@babel/runtime-corejs3/core-js-stable/instance/map\";import _filterInstanceProperty from \"@babel/runtime-corejs3/core-js-stable/instance/filter\";import _JSON$stringify from \"@babel/runtime-corejs3/core-js-stable/json/stringify\";(function () {var enterModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.enterModule : undefined;enterModule && enterModule(module);})();var __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default.signature : function (a) {return a;}; /**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { ensureIsArray, GenericDataType, t, tn } from '@superset-ui/core';\nimport React, { useEffect, useState } from 'react';\nimport { Select } from 'src/common/components';\nimport { Styles, StyledSelect } from '../common';import { jsx as ___EmotionJSX } from \"@emotion/react\";\nconst { Option } = Select;\nexport default function PluginFilterTimeColumn(props) {var _context;\n  const { data, formData, height, width, setDataMask, setFocusedFilter, unsetFocusedFilter, filterState } = props;\n  const { defaultValue, inputRef } = formData;\n  const [value, setValue] = useState(defaultValue != null ? defaultValue : []);\n  const handleChange = value => {\n    const resultValue = ensureIsArray(value);\n    setValue(resultValue);\n    const extraFormData = {};\n    if (resultValue.length) {\n      extraFormData.granularity_sqla = resultValue[0];\n    }\n    setDataMask({\n      extraFormData,\n      filterState: {\n        value: resultValue.length ? resultValue : null } });\n\n\n  };\n  useEffect(() => {var _filterState$value;\n    handleChange((_filterState$value = filterState.value) != null ? _filterState$value : null);\n  }, [_JSON$stringify(filterState.value)]);\n  useEffect(() => {\n    handleChange(defaultValue != null ? defaultValue : null);\n    // I think after Config Modal update some filter it re-creates default value for all other filters\n    // so we can process it like this `JSON.stringify` or start to use `Immer`\n  }, [_JSON$stringify(defaultValue)]);\n  const timeColumns = _filterInstanceProperty(_context = data || []).call(_context, row => row.dtype === GenericDataType.TEMPORAL);\n  const placeholderText = timeColumns.length === 0 ?\n  t('No time columns') :\n  tn('%s option', '%s options', timeColumns.length, timeColumns.length);\n  return ___EmotionJSX(Styles, { height: height, width: width },\n  ___EmotionJSX(StyledSelect, { allowClear: true, value: value, placeholder: placeholderText\n    // @ts-ignore\n    , onChange: handleChange, onBlur: unsetFocusedFilter, onFocus: setFocusedFilter, ref: inputRef },\n  _mapInstanceProperty(timeColumns).call(timeColumns, row => {\n    const { column_name: columnName, verbose_name: verboseName } = row;\n    return ___EmotionJSX(Option, { key: columnName, value: columnName },\n    verboseName != null ? verboseName : columnName);\n\n  })));\n\n\n}__signature__(PluginFilterTimeColumn, \"useState{[value, setValue](defaultValue ?? [])}\\nuseEffect{}\\nuseEffect{}\");;(function () {var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined;if (!reactHotLoader) {return;}reactHotLoader.register(Option, \"Option\", \"/app/superset-frontend/src/filters/components/TimeColumn/TimeColumnFilterPlugin.tsx\");reactHotLoader.register(PluginFilterTimeColumn, \"PluginFilterTimeColumn\", \"/app/superset-frontend/src/filters/components/TimeColumn/TimeColumnFilterPlugin.tsx\");})();;(function () {var leaveModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.leaveModule : undefined;leaveModule && leaveModule(module);})();","map":{"version":3,"sources":["/app/superset-frontend/src/filters/components/TimeColumn/TimeColumnFilterPlugin.tsx"],"names":[],"mappings":"smBAAA;;;;;;;;;;;;;;;;;AAiBG;AACH,SACE,aADF,EAGE,eAHF,EAIE,CAJF,EAKE,EALF,QAMO,mBANP;AAOA,OAAO,KAAP,IAAgB,SAAhB,EAA2B,QAA3B,QAA2C,OAA3C;AACA,SAAS,MAAT,QAAuB,uBAAvB;AACA,SAAS,MAAT,EAAiB,YAAjB,QAAqC,WAArC,C;AAGA,MAAM,EAAE,MAAF,KAAa,MAAnB;AAEA,eAAc,SAAU,sBAAV,CACZ,KADY,EACsB;AAElC,QAAM,EACJ,IADI,EAEJ,QAFI,EAGJ,MAHI,EAIJ,KAJI,EAKJ,WALI,EAMJ,gBANI,EAOJ,kBAPI,EAQJ,WARI,KASF,KATJ;AAUA,QAAM,EAAE,YAAF,EAAgB,QAAhB,KAA6B,QAAnC;AAEA,QAAM,CAAC,KAAD,EAAQ,QAAR,IAAoB,QAAQ,CAAW,YAAX,WAAW,YAAX,GAA2B,EAA3B,CAAlC;AAEA,QAAM,YAAY,GAAI,KAAD,IAAqC;AACxD,UAAM,WAAW,GAAa,aAAa,CAAS,KAAT,CAA3C;AACA,IAAA,QAAQ,CAAC,WAAD,CAAR;AACA,UAAM,aAAa,GAAkB,EAArC;AACA,QAAI,WAAW,CAAC,MAAhB,EAAwB;AACtB,MAAA,aAAa,CAAC,gBAAd,GAAiC,WAAW,CAAC,CAAD,CAA5C;AACD;AAED,IAAA,WAAW,CAAC;AACV,MAAA,aADU;AAEV,MAAA,WAAW,EAAE;AACX,QAAA,KAAK,EAAE,WAAW,CAAC,MAAZ,GAAqB,WAArB,GAAmC,IAD/B,EAFH,EAAD,CAAX;;;AAMD,GAdD;AAgBA,EAAA,SAAS,CAAC,MAAK;AACb,IAAA,YAAY,uBAAC,WAAW,CAAC,KAAb,iCAAsB,IAAtB,CAAZ;AACD,GAFQ,EAEN,CAAC,gBAAe,WAAW,CAAC,KAA3B,CAAD,CAFM,CAAT;AAIA,EAAA,SAAS,CAAC,MAAK;AACb,IAAA,YAAY,CAAC,YAAD,WAAC,YAAD,GAAiB,IAAjB,CAAZ;AACA;AACA;AACD,GAJQ,EAIN,CAAC,gBAAe,YAAf,CAAD,CAJM,CAAT;AAMA,QAAM,WAAW,GAAG,mCAAC,IAAI,IAAI,EAAT,iBAClB,GAAG,IAAI,GAAG,CAAC,KAAJ,KAAc,eAAe,CAAC,QADnB,CAApB;AAIA,QAAM,eAAe,GACnB,WAAW,CAAC,MAAZ,KAAuB,CAAvB;AACI,EAAA,CAAC,CAAC,iBAAD,CADL;AAEI,EAAA,EAAE,CAAC,WAAD,EAAc,YAAd,EAA4B,WAAW,CAAC,MAAxC,EAAgD,WAAW,CAAC,MAA5D,CAHR;AAIA,SACE,cAAC,MAAD,IAAQ,MAAM,EAAE,MAAhB,EAAwB,KAAK,EAAE,KAA/B;AACE,gBAAC,YAAD,IACE,UAAU,MADZ,EAEE,KAAK,EAAE,KAFT,EAGE,WAAW,EAAE;AACb;AAJF,MAKE,QAAQ,EAAE,YALZ,EAME,MAAM,EAAE,kBANV,EAOE,OAAO,EAAE,gBAPX,EAQE,GAAG,EAAE,QARP;AAUG,uBAAA,WAAW,MAAX,CAAA,WAAW,EACT,GAAD,IAA8D;AAC5D,UAAM,EAAE,WAAW,EAAE,UAAf,EAA2B,YAAY,EAAE,WAAzC,KAAyD,GAA/D;AACA,WACE,cAAC,MAAD,IAAQ,GAAG,EAAE,UAAb,EAAyB,KAAK,EAAE,UAAhC;AACG,IAAA,WADH,WACG,WADH,GACkB,UADlB,CADF;;AAKD,GARS,CAVd,CADF,CADF;;;AAyBD,C,cA5EuB,sB,gQAFhB,M,2HAEgB,sB","sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport {\n  ensureIsArray,\n  ExtraFormData,\n  GenericDataType,\n  t,\n  tn,\n} from '@superset-ui/core';\nimport React, { useEffect, useState } from 'react';\nimport { Select } from 'src/common/components';\nimport { Styles, StyledSelect } from '../common';\nimport { PluginFilterTimeColumnProps } from './types';\n\nconst { Option } = Select;\n\nexport default function PluginFilterTimeColumn(\n  props: PluginFilterTimeColumnProps,\n) {\n  const {\n    data,\n    formData,\n    height,\n    width,\n    setDataMask,\n    setFocusedFilter,\n    unsetFocusedFilter,\n    filterState,\n  } = props;\n  const { defaultValue, inputRef } = formData;\n\n  const [value, setValue] = useState<string[]>(defaultValue ?? []);\n\n  const handleChange = (value?: string[] | string | null) => {\n    const resultValue: string[] = ensureIsArray<string>(value);\n    setValue(resultValue);\n    const extraFormData: ExtraFormData = {};\n    if (resultValue.length) {\n      extraFormData.granularity_sqla = resultValue[0];\n    }\n\n    setDataMask({\n      extraFormData,\n      filterState: {\n        value: resultValue.length ? resultValue : null,\n      },\n    });\n  };\n\n  useEffect(() => {\n    handleChange(filterState.value ?? null);\n  }, [JSON.stringify(filterState.value)]);\n\n  useEffect(() => {\n    handleChange(defaultValue ?? null);\n    // I think after Config Modal update some filter it re-creates default value for all other filters\n    // so we can process it like this `JSON.stringify` or start to use `Immer`\n  }, [JSON.stringify(defaultValue)]);\n\n  const timeColumns = (data || []).filter(\n    row => row.dtype === GenericDataType.TEMPORAL,\n  );\n\n  const placeholderText =\n    timeColumns.length === 0\n      ? t('No time columns')\n      : tn('%s option', '%s options', timeColumns.length, timeColumns.length);\n  return (\n    <Styles height={height} width={width}>\n      <StyledSelect\n        allowClear\n        value={value}\n        placeholder={placeholderText}\n        // @ts-ignore\n        onChange={handleChange}\n        onBlur={unsetFocusedFilter}\n        onFocus={setFocusedFilter}\n        ref={inputRef}\n      >\n        {timeColumns.map(\n          (row: { column_name: string; verbose_name: string | null }) => {\n            const { column_name: columnName, verbose_name: verboseName } = row;\n            return (\n              <Option key={columnName} value={columnName}>\n                {verboseName ?? columnName}\n              </Option>\n            );\n          },\n        )}\n      </StyledSelect>\n    </Styles>\n  );\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}