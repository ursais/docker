{"ast":null,"code":"(function () {var enterModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.enterModule : undefined;enterModule && enterModule(module);})();var __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default.signature : function (a) {return a;}; /**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { bindActionCreators } from 'redux';\nimport { connect } from 'react-redux';\nimport Dashboard from '../components/Dashboard';\nimport { addSliceToDashboard, removeSliceFromDashboard } from '../actions/dashboardState';\nimport { triggerQuery } from '../../chart/chartAction';\nimport { logEvent } from '../../logger/actions';\nimport { getActiveFilters } from '../util/activeDashboardFilters';\nimport { getAllActiveFilters, getRelevantDataMask } from '../util/activeAllDashboardFilters';\nfunction mapStateToProps(state) {var _dashboardInfo$metada, _dashboardInfo$metada2;\n  const { datasources, sliceEntities, charts, dataMask, dashboardInfo, dashboardState, dashboardLayout, impressionId, nativeFilters } = state;\n  return {\n    initMessages: dashboardInfo.common.flash_messages,\n    timeout: dashboardInfo.common.conf.SUPERSET_WEBSERVER_TIMEOUT,\n    userId: dashboardInfo.userId,\n    dashboardInfo,\n    dashboardState,\n    charts,\n    datasources,\n    // filters prop: a map structure for all the active filter_box's values and scope in this dashboard,\n    // for each filter field. map key is [chartId_column]\n    // When dashboard is first loaded into browser,\n    // its value is from preselect_filters that dashboard owner saved in dashboard's meta data\n    // When user start interacting with dashboard, it will be user picked values from all filter_box\n    activeFilters: {\n      ...getActiveFilters(),\n      ...getAllActiveFilters({\n        // eslint-disable-next-line camelcase\n        chartConfiguration: (_dashboardInfo$metada = dashboardInfo.metadata) == null ? void 0 : _dashboardInfo$metada.chart_configuration,\n        nativeFilters: nativeFilters.filters,\n        dataMask,\n        layout: dashboardLayout.present }) },\n\n\n    chartConfiguration: (_dashboardInfo$metada2 = dashboardInfo.metadata) == null ? void 0 : _dashboardInfo$metada2.chart_configuration,\n    ownDataCharts: getRelevantDataMask(dataMask, 'ownState'),\n    slices: sliceEntities.slices,\n    layout: dashboardLayout.present,\n    impressionId };\n\n}\nfunction mapDispatchToProps(dispatch) {\n  return {\n    actions: bindActionCreators({\n      addSliceToDashboard,\n      removeSliceFromDashboard,\n      triggerQuery,\n      logEvent },\n    dispatch) };\n\n}const _default =\nconnect(mapStateToProps, mapDispatchToProps)(Dashboard);export default _default;;(function () {var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined;if (!reactHotLoader) {return;}reactHotLoader.register(mapStateToProps, \"mapStateToProps\", \"/app/superset-frontend/src/dashboard/containers/Dashboard.ts\");reactHotLoader.register(mapDispatchToProps, \"mapDispatchToProps\", \"/app/superset-frontend/src/dashboard/containers/Dashboard.ts\");reactHotLoader.register(_default, \"default\", \"/app/superset-frontend/src/dashboard/containers/Dashboard.ts\");})();;(function () {var leaveModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.leaveModule : undefined;leaveModule && leaveModule(module);})();","map":{"version":3,"sources":["/app/superset-frontend/src/dashboard/containers/Dashboard.ts"],"names":[],"mappings":"wSAAA;;;;;;;;;;;;;;;;;AAiBG;AACH,SAAS,kBAAT,QAA6C,OAA7C;AACA,SAAS,OAAT,QAAwB,aAAxB;AACA,OAAO,SAAP,MAAsB,yBAAtB;AACA,SACE,mBADF,EAEE,wBAFF,QAGO,2BAHP;AAIA,SAAS,YAAT,QAA6B,yBAA7B;AACA,SAAS,QAAT,QAAyB,sBAAzB;AACA,SAAS,gBAAT,QAAiC,gCAAjC;AACA,SACE,mBADF,EAEE,mBAFF,QAGO,mCAHP;AAMA,SAAS,eAAT,CAAyB,KAAzB,EAAyC;AACvC,QAAM,EACJ,WADI,EAEJ,aAFI,EAGJ,MAHI,EAIJ,QAJI,EAKJ,aALI,EAMJ,cANI,EAOJ,eAPI,EAQJ,YARI,EASJ,aATI,KAUF,KAVJ;AAYA,SAAO;AACL,IAAA,YAAY,EAAE,aAAa,CAAC,MAAd,CAAqB,cAD9B;AAEL,IAAA,OAAO,EAAE,aAAa,CAAC,MAAd,CAAqB,IAArB,CAA0B,0BAF9B;AAGL,IAAA,MAAM,EAAE,aAAa,CAAC,MAHjB;AAIL,IAAA,aAJK;AAKL,IAAA,cALK;AAML,IAAA,MANK;AAOL,IAAA,WAPK;AAQL;AACA;AACA;AACA;AACA;AACA,IAAA,aAAa,EAAE;AACb,SAAG,gBAAgB,EADN;AAEb,SAAG,mBAAmB,CAAC;AACrB;AACA,QAAA,kBAAkB,2BAAE,aAAa,CAAC,QAAhB,qBAAE,sBAAwB,mBAFvB;AAGrB,QAAA,aAAa,EAAE,aAAa,CAAC,OAHR;AAIrB,QAAA,QAJqB;AAKrB,QAAA,MAAM,EAAE,eAAe,CAAC,OALH,EAAD,CAFT,EAbV;;;AAuBL,IAAA,kBAAkB,4BAAE,aAAa,CAAC,QAAhB,qBAAE,uBAAwB,mBAvBvC;AAwBL,IAAA,aAAa,EAAE,mBAAmB,CAAC,QAAD,EAAW,UAAX,CAxB7B;AAyBL,IAAA,MAAM,EAAE,aAAa,CAAC,MAzBjB;AA0BL,IAAA,MAAM,EAAE,eAAe,CAAC,OA1BnB;AA2BL,IAAA,YA3BK,EAAP;;AA6BD;AAED,SAAS,kBAAT,CAA4B,QAA5B,EAA8C;AAC5C,SAAO;AACL,IAAA,OAAO,EAAE,kBAAkB,CACzB;AACE,MAAA,mBADF;AAEE,MAAA,wBAFF;AAGE,MAAA,YAHF;AAIE,MAAA,QAJF,EADyB;AAOzB,IAAA,QAPyB,CADtB,EAAP;;AAWD,C;AAEc,OAAO,CAAC,eAAD,EAAkB,kBAAlB,CAAP,CAA6C,SAA7C,C,CAAf,wB,iLA1DS,e,6GA4CA,kB","sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { bindActionCreators, Dispatch } from 'redux';\nimport { connect } from 'react-redux';\nimport Dashboard from '../components/Dashboard';\nimport {\n  addSliceToDashboard,\n  removeSliceFromDashboard,\n} from '../actions/dashboardState';\nimport { triggerQuery } from '../../chart/chartAction';\nimport { logEvent } from '../../logger/actions';\nimport { getActiveFilters } from '../util/activeDashboardFilters';\nimport {\n  getAllActiveFilters,\n  getRelevantDataMask,\n} from '../util/activeAllDashboardFilters';\nimport { RootState } from '../types';\n\nfunction mapStateToProps(state: RootState) {\n  const {\n    datasources,\n    sliceEntities,\n    charts,\n    dataMask,\n    dashboardInfo,\n    dashboardState,\n    dashboardLayout,\n    impressionId,\n    nativeFilters,\n  } = state;\n\n  return {\n    initMessages: dashboardInfo.common.flash_messages,\n    timeout: dashboardInfo.common.conf.SUPERSET_WEBSERVER_TIMEOUT,\n    userId: dashboardInfo.userId,\n    dashboardInfo,\n    dashboardState,\n    charts,\n    datasources,\n    // filters prop: a map structure for all the active filter_box's values and scope in this dashboard,\n    // for each filter field. map key is [chartId_column]\n    // When dashboard is first loaded into browser,\n    // its value is from preselect_filters that dashboard owner saved in dashboard's meta data\n    // When user start interacting with dashboard, it will be user picked values from all filter_box\n    activeFilters: {\n      ...getActiveFilters(),\n      ...getAllActiveFilters({\n        // eslint-disable-next-line camelcase\n        chartConfiguration: dashboardInfo.metadata?.chart_configuration,\n        nativeFilters: nativeFilters.filters,\n        dataMask,\n        layout: dashboardLayout.present,\n      }),\n    },\n    chartConfiguration: dashboardInfo.metadata?.chart_configuration,\n    ownDataCharts: getRelevantDataMask(dataMask, 'ownState'),\n    slices: sliceEntities.slices,\n    layout: dashboardLayout.present,\n    impressionId,\n  };\n}\n\nfunction mapDispatchToProps(dispatch: Dispatch) {\n  return {\n    actions: bindActionCreators(\n      {\n        addSliceToDashboard,\n        removeSliceFromDashboard,\n        triggerQuery,\n        logEvent,\n      },\n      dispatch,\n    ),\n  };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Dashboard);\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}