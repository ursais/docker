{"ast":null,"code":"import \"core-js/modules/web.dom-collections.iterator.js\";import _Object$keys from \"@babel/runtime-corejs3/core-js-stable/object/keys\";import _filterInstanceProperty from \"@babel/runtime-corejs3/core-js-stable/instance/filter\";import _mapInstanceProperty from \"@babel/runtime-corejs3/core-js-stable/instance/map\";import _extends from \"@babel/runtime-corejs3/helpers/extends\";import _bindInstanceProperty from \"@babel/runtime-corejs3/core-js-stable/instance/bind\";import _forEachInstanceProperty from \"@babel/runtime-corejs3/core-js-stable/instance/for-each\";import _reduceInstanceProperty from \"@babel/runtime-corejs3/core-js-stable/instance/reduce\";import _someInstanceProperty from \"@babel/runtime-corejs3/core-js-stable/instance/some\";(function () {var enterModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.enterModule : undefined;enterModule && enterModule(module);})();var __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default.signature : function (a) {return a;}; /**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n/* eslint camelcase: 0 */\nimport React from 'react';\nimport { bindActionCreators } from 'redux';\nimport { connect } from 'react-redux';\nimport { ensureIsArray, t, styled, getChartControlPanelRegistry, DatasourceType, css } from '@superset-ui/core';\nimport { InfoTooltipWithTrigger, sections } from '@superset-ui/chart-controls';\nimport Collapse from 'src/components/Collapse';\nimport Tabs from 'src/components/Tabs';\nimport { PluginContext } from 'src/components/DynamicPlugins';\nimport Loading from 'src/components/Loading';\nimport { getSectionsToRender } from 'src/explore/controlUtils';\nimport { exploreActions } from 'src/explore/actions/exploreActions';\nimport ControlRow from './ControlRow';\nimport Control from './Control';import { jsx as ___EmotionJSX } from \"@emotion/react\";\nconst Styles = styled.div`\n  height: 100%;\n  width: 100%;\n  overflow: auto;\n  overflow-x: visible;\n  overflow-y: auto;\n  #controlSections {\n    min-height: 100%;\n    overflow: visible;\n  }\n  .nav-tabs {\n    flex: 0 0 1;\n  }\n  .tab-content {\n    overflow: auto;\n    flex: 1 1 100%;\n  }\n  .Select__menu {\n    max-width: 100%;\n  }\n  .type-label {\n    margin-right: ${({ theme }) => theme.gridUnit * 3}px;\n    width: ${({ theme }) => theme.gridUnit * 7}px;\n    display: inline-block;\n    text-align: center;\n    font-weight: ${({ theme }) => theme.typography.weights.bold};\n  }\n`;\nconst ControlPanelsTabs = styled(Tabs)`\n  .ant-tabs-nav-list {\n    width: ${({ fullWidth }) => fullWidth ? '100%' : '50%'};\n  }\n  .ant-tabs-content-holder {\n    overflow: visible;\n  }\n  .ant-tabs-tabpane {\n    height: 100%;\n  }\n`;\nconst isTimeSection = section => !!section.label && (\nsections.legacyRegularTime.label === section.label ||\nsections.legacyTimeseriesTime.label === section.label);\nconst hasTimeColumn = datasource => {var _datasource$columns;return (datasource == null ? void 0 : (_datasource$columns = datasource.columns) == null ? void 0 : _someInstanceProperty(_datasource$columns).call(_datasource$columns, c => c.is_dttm)) ||\n  datasource.type === DatasourceType.Druid;};\nconst sectionsToExpand = (sections, datasource) =>\n// avoid expanding time section if datasource doesn't include time column\n_reduceInstanceProperty(sections).call(sections, (acc, section) => section.expanded && (!isTimeSection(section) || hasTimeColumn(datasource)) ?\n[...acc, String(section.label)] :\nacc, []);\nfunction getState(props) {var _context;\n  const { exploreState: { datasource } } = props;\n  const querySections = [];\n  const customizeSections = [];\n  _forEachInstanceProperty(_context = getSectionsToRender(props.form_data.viz_type, props.datasource_type)).call(_context, section => {var _context2;\n    // if at least one control in the section is not `renderTrigger`\n    // or asks to be displayed at the Data tab\n    if (section.tabOverride === 'data' ||\n    _someInstanceProperty(_context2 = section.controlSetRows).call(_context2, rows => _someInstanceProperty(rows).call(rows, control => control &&\n    typeof control === 'object' &&\n    'config' in control &&\n    control.config && (\n    !control.config.renderTrigger ||\n    control.config.tabOverride === 'data')))) {\n      querySections.push(section);\n    } else\n    {\n      customizeSections.push(section);\n    }\n  });\n  const expandedQuerySections = sectionsToExpand(querySections, datasource);\n  const expandedCustomizeSections = sectionsToExpand(customizeSections, datasource);\n  return {\n    expandedQuerySections,\n    expandedCustomizeSections,\n    querySections,\n    customizeSections };\n\n}\nexport class ControlPanelsContainer extends React.Component {\n  constructor(props) {var _context3, _context4;\n    super(props);\n    this.state = {\n      expandedQuerySections: [],\n      expandedCustomizeSections: [],\n      querySections: [],\n      customizeSections: [] };\n\n    this.renderControl = _bindInstanceProperty(_context3 = this.renderControl).call(_context3, this);\n    this.renderControlPanelSection = _bindInstanceProperty(_context4 = this.renderControlPanelSection).call(_context4, this);\n  }\n  static getDerivedStateFromProps(props, state) {\n    // only update the sections, not the expanded/collapsed state\n    const newState = getState(props);\n    return {\n      ...state,\n      customizeSections: newState.customizeSections,\n      querySections: newState.querySections };\n\n  }\n  componentDidUpdate(prevProps) {\n    if (this.props.form_data.datasource !== prevProps.form_data.datasource ||\n    this.props.form_data.viz_type !== prevProps.form_data.viz_type) {\n      // eslint-disable-next-line react/no-did-update-set-state\n      this.setState(getState(this.props));\n    }\n  }\n  componentDidMount() {\n    this.setState(getState(this.props));\n  }\n  renderControl({ name, config }) {var _config$mapStateToPro;\n    const { actions, controls, chart, exploreState } = this.props;\n    const { visibility } = config;\n    // If the control item is not an object, we have to look up the control data from\n    // the centralized controls file.\n    // When it is an object we read control data straight from `config` instead\n    const controlData = {\n      ...config,\n      ...controls[name],\n      // if `mapStateToProps` accept three arguments, it means it needs chart\n      // state, too. Since it's may be expensive to run mapStateToProps for every\n      // re-render, we only run this when the chart plugin explicitly ask for this.\n      ...(((_config$mapStateToPro = config.mapStateToProps) == null ? void 0 : _config$mapStateToPro.length) === 3 ?\n      // @ts-ignore /* The typing accuses of having an extra parameter. I didn't remove it because I believe it could be an error in the types and not in the code */\n      config.mapStateToProps(exploreState, controls[name], chart) :\n      // for other controls, `mapStateToProps` is already run in\n      // controlUtils/getControlState.ts\n      undefined),\n      name };\n\n    const { validationErrors, ...restProps } = controlData;\n    // if visibility check says the config is not visible, don't render it\n    if (visibility && !visibility.call(config, this.props, controlData)) {\n      return null;\n    }\n    return ___EmotionJSX(Control, _extends({ key: `control-${name}`, name: name, validationErrors: validationErrors, actions: actions }, restProps));\n  }\n  renderControlPanelSection(section) {var _context5, _context6;\n    const { controls } = this.props;\n    const { label, description } = section;\n    // Section label can be a ReactNode but in some places we want to\n    // have a string ID. Using forced type conversion for now,\n    // should probably add a `id` field to sections in the future.\n    const sectionId = String(label);\n    const hasErrors = _someInstanceProperty(_context5 = section.controlSetRows).call(_context5, rows => _someInstanceProperty(rows).call(rows, item => {\n      const controlName = typeof item === 'string' ?\n      item :\n      item && 'name' in item ?\n      item.name :\n      null;\n      return controlName &&\n      controlName in controls &&\n      controls[controlName].validationErrors &&\n      controls[controlName].validationErrors.length > 0;\n    }));\n    const PanelHeader = () => ___EmotionJSX(\"span\", null,\n    ___EmotionJSX(\"span\", null, label), ' ',\n    description &&\n    // label is only used in tooltip id (should probably call this prop `id`)\n    ___EmotionJSX(InfoTooltipWithTrigger, { label: sectionId, tooltip: description }),\n    hasErrors && ___EmotionJSX(InfoTooltipWithTrigger, { label: \"validation-errors\", bsStyle: \"danger\", tooltip: \"This section contains validation errors\" }));\n\n    return ___EmotionJSX(Collapse.Panel, { \"data-test\": \"collapsible-control-panel\", css: theme => css`\n          margin-bottom: 0;\n          box-shadow: none;\n\n          &:last-child {\n            padding-bottom: ${theme.gridUnit * 10}px;\n          }\n\n          .panel-body {\n            margin-left: ${theme.gridUnit * 4}px;\n            padding-bottom: 0px;\n          }\n\n          span.label {\n            display: inline-block;\n          }\n        `, header: PanelHeader(), key: sectionId },\n    _mapInstanceProperty(_context6 = section.controlSetRows).call(_context6, (controlSets, i) => {var _context7;\n      const renderedControls = _filterInstanceProperty(_context7 = _mapInstanceProperty(controlSets).call(controlSets,\n      controlItem => {\n        if (!controlItem) {\n          // When the item is invalid\n          return null;\n        }\n        if ( /*#__PURE__*/React.isValidElement(controlItem)) {\n          // When the item is a React element\n          return controlItem;\n        }\n        if (controlItem.name &&\n        controlItem.config &&\n        controlItem.name !== 'datasource') {\n          return this.renderControl(controlItem);\n        }\n        return null;\n      })).call(_context7,\n      x => x !== null);\n      // don't show the row if it is empty\n      if (renderedControls.length === 0) {\n        return null;\n      }\n      return ___EmotionJSX(ControlRow, { key: `controlsetrow-${i}`, controls: renderedControls });\n    }));\n\n  }\n  render() {var _context8, _context9;\n    const controlPanelRegistry = getChartControlPanelRegistry();\n    if (!controlPanelRegistry.has(this.props.form_data.viz_type) &&\n    this.context.loading) {\n      return ___EmotionJSX(Loading, null);\n    }\n    const showCustomizeTab = this.state.customizeSections.length > 0;\n    return ___EmotionJSX(Styles, null,\n    ___EmotionJSX(ControlPanelsTabs, { id: \"controlSections\", \"data-test\": \"control-tabs\", fullWidth: showCustomizeTab },\n    ___EmotionJSX(Tabs.TabPane, { key: \"query\", tab: t('Data') },\n    ___EmotionJSX(Collapse, { bordered: true, activeKey: this.state.expandedQuerySections, expandIconPosition: \"right\", onChange: selection => {\n        this.setState({\n          expandedQuerySections: ensureIsArray(selection) });\n\n      }, ghost: true },\n    _mapInstanceProperty(_context8 = this.state.querySections).call(_context8, this.renderControlPanelSection))),\n\n\n    showCustomizeTab && ___EmotionJSX(Tabs.TabPane, { key: \"display\", tab: t('Customize') },\n    ___EmotionJSX(Collapse, { bordered: true, activeKey: this.state.expandedCustomizeSections, expandIconPosition: \"right\", onChange: selection => {\n        this.setState({\n          expandedCustomizeSections: ensureIsArray(selection) });\n\n      }, ghost: true },\n    _mapInstanceProperty(_context9 = this.state.customizeSections).call(_context9, this.renderControlPanelSection)))));\n\n\n\n\n  } // @ts-ignore\n  __reactstandin__regenerateByEval(key, code) {// @ts-ignore\n    this[key] = eval(code);}} // trigger updates to the component when async plugins load\nControlPanelsContainer.contextType = PluginContext;const _default =\nconnect(function mapStateToProps(state) {\n  const { explore, charts } = state;\n  const chartKey = _Object$keys(charts)[0];\n  const chart = charts[chartKey];\n  return {\n    chart,\n    isDatasourceMetaLoading: explore.isDatasourceMetaLoading,\n    controls: explore.controls,\n    exploreState: explore };\n\n}, function mapDispatchToProps(dispatch) {\n  return {\n    actions: bindActionCreators(exploreActions, dispatch) };\n\n})(ControlPanelsContainer);export default _default;;(function () {var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined;if (!reactHotLoader) {return;}reactHotLoader.register(Styles, \"Styles\", \"/app/superset-frontend/src/explore/components/ControlPanelsContainer.tsx\");reactHotLoader.register(ControlPanelsTabs, \"ControlPanelsTabs\", \"/app/superset-frontend/src/explore/components/ControlPanelsContainer.tsx\");reactHotLoader.register(isTimeSection, \"isTimeSection\", \"/app/superset-frontend/src/explore/components/ControlPanelsContainer.tsx\");reactHotLoader.register(hasTimeColumn, \"hasTimeColumn\", \"/app/superset-frontend/src/explore/components/ControlPanelsContainer.tsx\");reactHotLoader.register(sectionsToExpand, \"sectionsToExpand\", \"/app/superset-frontend/src/explore/components/ControlPanelsContainer.tsx\");reactHotLoader.register(getState, \"getState\", \"/app/superset-frontend/src/explore/components/ControlPanelsContainer.tsx\");reactHotLoader.register(ControlPanelsContainer, \"ControlPanelsContainer\", \"/app/superset-frontend/src/explore/components/ControlPanelsContainer.tsx\");reactHotLoader.register(_default, \"default\", \"/app/superset-frontend/src/explore/components/ControlPanelsContainer.tsx\");})();;(function () {var leaveModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.leaveModule : undefined;leaveModule && leaveModule(module);})();","map":{"version":3,"sources":["/app/superset-frontend/src/explore/components/ControlPanelsContainer.tsx"],"names":[],"mappings":"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","sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n/* eslint camelcase: 0 */\nimport React from 'react';\nimport { bindActionCreators } from 'redux';\nimport { connect } from 'react-redux';\nimport {\n  ensureIsArray,\n  t,\n  styled,\n  getChartControlPanelRegistry,\n  QueryFormData,\n  DatasourceType,\n  css,\n} from '@superset-ui/core';\nimport {\n  ControlPanelSectionConfig,\n  ControlState,\n  CustomControlItem,\n  DatasourceMeta,\n  ExpandedControlItem,\n  InfoTooltipWithTrigger,\n  sections,\n} from '@superset-ui/chart-controls';\n\nimport Collapse from 'src/components/Collapse';\nimport Tabs from 'src/components/Tabs';\nimport { PluginContext } from 'src/components/DynamicPlugins';\nimport Loading from 'src/components/Loading';\n\nimport { getSectionsToRender } from 'src/explore/controlUtils';\nimport {\n  ExploreActions,\n  exploreActions,\n} from 'src/explore/actions/exploreActions';\nimport { ExplorePageState } from 'src/explore/reducers/getInitialState';\nimport { ChartState } from 'src/explore/types';\n\nimport ControlRow from './ControlRow';\nimport Control from './Control';\n\nexport type ControlPanelsContainerProps = {\n  actions: ExploreActions;\n  datasource_type: DatasourceType;\n  exploreState: ExplorePageState['explore'];\n  chart: ChartState;\n  controls: Record<string, ControlState>;\n  form_data: QueryFormData;\n  isDatasourceMetaLoading: boolean;\n};\n\nexport type ExpandedControlPanelSectionConfig = Omit<\n  ControlPanelSectionConfig,\n  'controlSetRows'\n> & {\n  controlSetRows: ExpandedControlItem[][];\n};\n\nconst Styles = styled.div`\n  height: 100%;\n  width: 100%;\n  overflow: auto;\n  overflow-x: visible;\n  overflow-y: auto;\n  #controlSections {\n    min-height: 100%;\n    overflow: visible;\n  }\n  .nav-tabs {\n    flex: 0 0 1;\n  }\n  .tab-content {\n    overflow: auto;\n    flex: 1 1 100%;\n  }\n  .Select__menu {\n    max-width: 100%;\n  }\n  .type-label {\n    margin-right: ${({ theme }) => theme.gridUnit * 3}px;\n    width: ${({ theme }) => theme.gridUnit * 7}px;\n    display: inline-block;\n    text-align: center;\n    font-weight: ${({ theme }) => theme.typography.weights.bold};\n  }\n`;\n\nconst ControlPanelsTabs = styled(Tabs)`\n  .ant-tabs-nav-list {\n    width: ${({ fullWidth }) => (fullWidth ? '100%' : '50%')};\n  }\n  .ant-tabs-content-holder {\n    overflow: visible;\n  }\n  .ant-tabs-tabpane {\n    height: 100%;\n  }\n`;\n\ntype ControlPanelsContainerState = {\n  expandedQuerySections: string[];\n  expandedCustomizeSections: string[];\n  querySections: ControlPanelSectionConfig[];\n  customizeSections: ControlPanelSectionConfig[];\n};\n\nconst isTimeSection = (section: ControlPanelSectionConfig): boolean =>\n  !!section.label &&\n  (sections.legacyRegularTime.label === section.label ||\n    sections.legacyTimeseriesTime.label === section.label);\n\nconst hasTimeColumn = (datasource: DatasourceMeta): boolean =>\n  datasource?.columns?.some(c => c.is_dttm) ||\n  datasource.type === DatasourceType.Druid;\n\nconst sectionsToExpand = (\n  sections: ControlPanelSectionConfig[],\n  datasource: DatasourceMeta,\n): string[] =>\n  // avoid expanding time section if datasource doesn't include time column\n  sections.reduce(\n    (acc, section) =>\n      section.expanded && (!isTimeSection(section) || hasTimeColumn(datasource))\n        ? [...acc, String(section.label)]\n        : acc,\n    [] as string[],\n  );\n\nfunction getState(\n  props: ControlPanelsContainerProps,\n): ControlPanelsContainerState {\n  const {\n    exploreState: { datasource },\n  } = props;\n\n  const querySections: ControlPanelSectionConfig[] = [];\n  const customizeSections: ControlPanelSectionConfig[] = [];\n\n  getSectionsToRender(props.form_data.viz_type, props.datasource_type).forEach(\n    section => {\n      // if at least one control in the section is not `renderTrigger`\n      // or asks to be displayed at the Data tab\n      if (\n        section.tabOverride === 'data' ||\n        section.controlSetRows.some(rows =>\n          rows.some(\n            control =>\n              control &&\n              typeof control === 'object' &&\n              'config' in control &&\n              control.config &&\n              (!control.config.renderTrigger ||\n                control.config.tabOverride === 'data'),\n          ),\n        )\n      ) {\n        querySections.push(section);\n      } else {\n        customizeSections.push(section);\n      }\n    },\n  );\n  const expandedQuerySections: string[] = sectionsToExpand(\n    querySections,\n    datasource,\n  );\n  const expandedCustomizeSections: string[] = sectionsToExpand(\n    customizeSections,\n    datasource,\n  );\n  return {\n    expandedQuerySections,\n    expandedCustomizeSections,\n    querySections,\n    customizeSections,\n  };\n}\n\nexport class ControlPanelsContainer extends React.Component<\n  ControlPanelsContainerProps,\n  ControlPanelsContainerState\n> {\n  // trigger updates to the component when async plugins load\n  static contextType = PluginContext;\n\n  constructor(props: ControlPanelsContainerProps) {\n    super(props);\n    this.state = {\n      expandedQuerySections: [],\n      expandedCustomizeSections: [],\n      querySections: [],\n      customizeSections: [],\n    };\n    this.renderControl = this.renderControl.bind(this);\n    this.renderControlPanelSection = this.renderControlPanelSection.bind(this);\n  }\n\n  static getDerivedStateFromProps(\n    props: ControlPanelsContainerProps,\n    state: ControlPanelsContainerState,\n  ): ControlPanelsContainerState {\n    // only update the sections, not the expanded/collapsed state\n    const newState = getState(props);\n    return {\n      ...state,\n      customizeSections: newState.customizeSections,\n      querySections: newState.querySections,\n    };\n  }\n\n  componentDidUpdate(prevProps: ControlPanelsContainerProps) {\n    if (\n      this.props.form_data.datasource !== prevProps.form_data.datasource ||\n      this.props.form_data.viz_type !== prevProps.form_data.viz_type\n    ) {\n      // eslint-disable-next-line react/no-did-update-set-state\n      this.setState(getState(this.props));\n    }\n  }\n\n  componentDidMount() {\n    this.setState(getState(this.props));\n  }\n\n  renderControl({ name, config }: CustomControlItem) {\n    const { actions, controls, chart, exploreState } = this.props;\n    const { visibility } = config;\n\n    // If the control item is not an object, we have to look up the control data from\n    // the centralized controls file.\n    // When it is an object we read control data straight from `config` instead\n    const controlData = {\n      ...config,\n      ...controls[name],\n      // if `mapStateToProps` accept three arguments, it means it needs chart\n      // state, too. Since it's may be expensive to run mapStateToProps for every\n      // re-render, we only run this when the chart plugin explicitly ask for this.\n      ...(config.mapStateToProps?.length === 3\n        ? // @ts-ignore /* The typing accuses of having an extra parameter. I didn't remove it because I believe it could be an error in the types and not in the code */\n          config.mapStateToProps(exploreState, controls[name], chart)\n        : // for other controls, `mapStateToProps` is already run in\n          // controlUtils/getControlState.ts\n          undefined),\n      name,\n    };\n    const { validationErrors, ...restProps } = controlData as ControlState & {\n      validationErrors?: any[];\n    };\n\n    // if visibility check says the config is not visible, don't render it\n    if (visibility && !visibility.call(config, this.props, controlData)) {\n      return null;\n    }\n    return (\n      <Control\n        key={`control-${name}`}\n        name={name}\n        validationErrors={validationErrors}\n        actions={actions}\n        {...restProps}\n      />\n    );\n  }\n\n  renderControlPanelSection(section: ExpandedControlPanelSectionConfig) {\n    const { controls } = this.props;\n    const { label, description } = section;\n\n    // Section label can be a ReactNode but in some places we want to\n    // have a string ID. Using forced type conversion for now,\n    // should probably add a `id` field to sections in the future.\n    const sectionId = String(label);\n\n    const hasErrors = section.controlSetRows.some(rows =>\n      rows.some(item => {\n        const controlName =\n          typeof item === 'string'\n            ? item\n            : item && 'name' in item\n            ? item.name\n            : null;\n        return (\n          controlName &&\n          controlName in controls &&\n          controls[controlName].validationErrors &&\n          controls[controlName].validationErrors.length > 0\n        );\n      }),\n    );\n    const PanelHeader = () => (\n      <span>\n        <span>{label}</span>{' '}\n        {description && (\n          // label is only used in tooltip id (should probably call this prop `id`)\n          <InfoTooltipWithTrigger label={sectionId} tooltip={description} />\n        )}\n        {hasErrors && (\n          <InfoTooltipWithTrigger\n            label=\"validation-errors\"\n            bsStyle=\"danger\"\n            tooltip=\"This section contains validation errors\"\n          />\n        )}\n      </span>\n    );\n\n    return (\n      <Collapse.Panel\n        data-test=\"collapsible-control-panel\"\n        css={theme => css`\n          margin-bottom: 0;\n          box-shadow: none;\n\n          &:last-child {\n            padding-bottom: ${theme.gridUnit * 10}px;\n          }\n\n          .panel-body {\n            margin-left: ${theme.gridUnit * 4}px;\n            padding-bottom: 0px;\n          }\n\n          span.label {\n            display: inline-block;\n          }\n        `}\n        header={PanelHeader()}\n        key={sectionId}\n      >\n        {section.controlSetRows.map((controlSets, i) => {\n          const renderedControls = controlSets\n            .map(controlItem => {\n              if (!controlItem) {\n                // When the item is invalid\n                return null;\n              }\n              if (React.isValidElement(controlItem)) {\n                // When the item is a React element\n                return controlItem;\n              }\n              if (\n                controlItem.name &&\n                controlItem.config &&\n                controlItem.name !== 'datasource'\n              ) {\n                return this.renderControl(controlItem);\n              }\n              return null;\n            })\n            .filter(x => x !== null);\n          // don't show the row if it is empty\n          if (renderedControls.length === 0) {\n            return null;\n          }\n          return (\n            <ControlRow\n              key={`controlsetrow-${i}`}\n              controls={renderedControls}\n            />\n          );\n        })}\n      </Collapse.Panel>\n    );\n  }\n\n  render() {\n    const controlPanelRegistry = getChartControlPanelRegistry();\n    if (\n      !controlPanelRegistry.has(this.props.form_data.viz_type) &&\n      this.context.loading\n    ) {\n      return <Loading />;\n    }\n\n    const showCustomizeTab = this.state.customizeSections.length > 0;\n    return (\n      <Styles>\n        <ControlPanelsTabs\n          id=\"controlSections\"\n          data-test=\"control-tabs\"\n          fullWidth={showCustomizeTab}\n        >\n          <Tabs.TabPane key=\"query\" tab={t('Data')}>\n            <Collapse\n              bordered\n              activeKey={this.state.expandedQuerySections}\n              expandIconPosition=\"right\"\n              onChange={selection => {\n                this.setState({\n                  expandedQuerySections: ensureIsArray(selection),\n                });\n              }}\n              ghost\n            >\n              {this.state.querySections.map(this.renderControlPanelSection)}\n            </Collapse>\n          </Tabs.TabPane>\n          {showCustomizeTab && (\n            <Tabs.TabPane key=\"display\" tab={t('Customize')}>\n              <Collapse\n                bordered\n                activeKey={this.state.expandedCustomizeSections}\n                expandIconPosition=\"right\"\n                onChange={selection => {\n                  this.setState({\n                    expandedCustomizeSections: ensureIsArray(selection),\n                  });\n                }}\n                ghost\n              >\n                {this.state.customizeSections.map(\n                  this.renderControlPanelSection,\n                )}\n              </Collapse>\n            </Tabs.TabPane>\n          )}\n        </ControlPanelsTabs>\n      </Styles>\n    );\n  }\n}\n\nexport default connect(\n  function mapStateToProps(state: ExplorePageState) {\n    const { explore, charts } = state;\n    const chartKey = Object.keys(charts)[0];\n    const chart = charts[chartKey];\n    return {\n      chart,\n      isDatasourceMetaLoading: explore.isDatasourceMetaLoading,\n      controls: explore.controls,\n      exploreState: explore,\n    };\n  },\n  function mapDispatchToProps(dispatch) {\n    return {\n      actions: bindActionCreators(exploreActions, dispatch),\n    };\n  },\n)(ControlPanelsContainer);\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}