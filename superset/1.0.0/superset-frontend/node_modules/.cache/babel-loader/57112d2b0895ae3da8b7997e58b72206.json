{"ast":null,"code":"import \"core-js/modules/web.dom-collections.iterator.js\";import _Object$entries from \"@babel/runtime-corejs3/core-js-stable/object/entries\";import _reduceInstanceProperty from \"@babel/runtime-corejs3/core-js-stable/instance/reduce\";(function () {var enterModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.enterModule : undefined;enterModule && enterModule(module);})();var __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default.signature : function (a) {return a;}; /**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { getChartIdAndColumnFromFilterKey } from './getDashboardFilterKey';\n\n// input: { [id_column1]: values, [id_column2]: values }\n// output: { id: { column1: values, column2: values } }\nexport default function serializeActiveFilterValues(activeFilters) {var _context;\n  return _reduceInstanceProperty(_context = _Object$entries(activeFilters)).call(_context, (map, entry) => {\n    const [filterKey, { values }] = entry;\n    const { chartId, column } = getChartIdAndColumnFromFilterKey(filterKey);\n    const entryByChartId = {\n      ...map[chartId],\n      [column]: values };\n\n    return {\n      ...map,\n      [chartId]: entryByChartId };\n\n  }, {});\n};(function () {var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined;if (!reactHotLoader) {return;}reactHotLoader.register(serializeActiveFilterValues, \"serializeActiveFilterValues\", \"/app/superset-frontend/src/dashboard/util/serializeActiveFilterValues.js\");})();;(function () {var leaveModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.leaveModule : undefined;leaveModule && leaveModule(module);})();","map":{"version":3,"sources":["/app/superset-frontend/src/dashboard/util/serializeActiveFilterValues.js"],"names":["getChartIdAndColumnFromFilterKey","serializeActiveFilterValues","activeFilters","map","entry","filterKey","values","chartId","column","entryByChartId"],"mappings":"ghBAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASA,gCAAT,QAAiD,yBAAjD;;AAEA;AACA;AACA,eAAe,SAASC,2BAAT,CAAqCC,aAArC,EAAoD;AACjE,SAAO,mDAAeA,aAAf,kBAAqC,CAACC,GAAD,EAAMC,KAAN,KAAgB;AAC1D,UAAM,CAACC,SAAD,EAAY,EAAEC,MAAF,EAAZ,IAA0BF,KAAhC;AACA,UAAM,EAAEG,OAAF,EAAWC,MAAX,KAAsBR,gCAAgC,CAACK,SAAD,CAA5D;AACA,UAAMI,cAAc,GAAG;AACrB,SAAGN,GAAG,CAACI,OAAD,CADe;AAErB,OAACC,MAAD,GAAUF,MAFW,EAAvB;;AAIA,WAAO;AACL,SAAGH,GADE;AAEL,OAACI,OAAD,GAAWE,cAFN,EAAP;;AAID,GAXM,EAWJ,EAXI,CAAP;AAYD,C,iLAbuBR,2B","sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { getChartIdAndColumnFromFilterKey } from './getDashboardFilterKey';\n\n// input: { [id_column1]: values, [id_column2]: values }\n// output: { id: { column1: values, column2: values } }\nexport default function serializeActiveFilterValues(activeFilters) {\n  return Object.entries(activeFilters).reduce((map, entry) => {\n    const [filterKey, { values }] = entry;\n    const { chartId, column } = getChartIdAndColumnFromFilterKey(filterKey);\n    const entryByChartId = {\n      ...map[chartId],\n      [column]: values,\n    };\n    return {\n      ...map,\n      [chartId]: entryByChartId,\n    };\n  }, {});\n}\n"]},"metadata":{},"sourceType":"module"}