{"ast":null,"code":"import \"core-js/modules/web.dom-collections.iterator.js\";import _reduceInstanceProperty from \"@babel/runtime-corejs3/core-js-stable/instance/reduce\";import _sliceInstanceProperty from \"@babel/runtime-corejs3/core-js-stable/instance/slice\";import _mapInstanceProperty from \"@babel/runtime-corejs3/core-js-stable/instance/map\";(function () {var enterModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.enterModule : undefined;enterModule && enterModule(module);})();var __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default.signature : function (a) {return a;}; /**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { SupersetClient, t, styled } from '@superset-ui/core';\nimport React, { useState, useMemo, useCallback } from 'react';\nimport rison from 'rison';\nimport { createFetchRelated, createFetchDistinct, createErrorHandler } from 'src/views/CRUD/utils';\nimport { useListViewResource } from 'src/views/CRUD/hooks';\nimport ConfirmStatusChange from 'src/components/ConfirmStatusChange';\nimport DatasourceModal from 'src/datasource/DatasourceModal';\nimport DeleteModal from 'src/components/DeleteModal';\nimport handleResourceExport from 'src/utils/export';\nimport ListView, { FilterOperator } from 'src/components/ListView';\nimport Loading from 'src/components/Loading';\nimport SubMenu from 'src/components/Menu/SubMenu';\nimport { commonMenuData } from 'src/views/CRUD/data/common';\nimport withToasts from 'src/messageToasts/enhancers/withToasts';\nimport { Tooltip } from 'src/components/Tooltip';\nimport Icons from 'src/components/Icons';\nimport FacePile from 'src/components/FacePile';\nimport CertifiedIcon from 'src/components/CertifiedIcon';\nimport ImportModelsModal from 'src/components/ImportModal/index';\nimport { isFeatureEnabled, FeatureFlag } from 'src/featureFlags';\nimport WarningIconWithTooltip from 'src/components/WarningIconWithTooltip';\nimport AddDatasetModal from './AddDatasetModal';\nimport { PAGE_SIZE, SORT_BY, PASSWORDS_NEEDED_MESSAGE, CONFIRM_OVERWRITE_MESSAGE } from './constants';import { jsx as ___EmotionJSX } from \"@emotion/react\";\nconst FlexRowContainer = styled.div`\n  align-items: center;\n  display: flex;\n\n  > svg {\n    margin-right: ${({ theme }) => theme.gridUnit}px;\n  }\n`;\nconst Actions = styled.div`\n  color: ${({ theme }) => theme.colors.grayscale.base};\n`;\nconst DatasetList = ({ addDangerToast, addSuccessToast, user }) => {\n  const { state: { loading, resourceCount: datasetCount, resourceCollection: datasets, bulkSelectEnabled }, hasPerm, fetchData, toggleBulkSelect, refreshData } = useListViewResource('dataset', t('dataset'), addDangerToast);\n  const [datasetAddModalOpen, setDatasetAddModalOpen] = useState(false);\n  const [datasetCurrentlyDeleting, setDatasetCurrentlyDeleting] = useState(null);\n  const [datasetCurrentlyEditing, setDatasetCurrentlyEditing] = useState(null);\n  const [importingDataset, showImportModal] = useState(false);\n  const [passwordFields, setPasswordFields] = useState([]);\n  const [preparingExport, setPreparingExport] = useState(false);\n  const openDatasetImportModal = () => {\n    showImportModal(true);\n  };\n  const closeDatasetImportModal = () => {\n    showImportModal(false);\n  };\n  const handleDatasetImport = () => {\n    showImportModal(false);\n    refreshData();\n  };\n  const canEdit = hasPerm('can_write');\n  const canDelete = hasPerm('can_write');\n  const canCreate = hasPerm('can_write');\n  const canExport = hasPerm('can_read');\n  const initialSort = SORT_BY;\n  const openDatasetEditModal = useCallback(({ id }) => {\n    SupersetClient.get({\n      endpoint: `/api/v1/dataset/${id}` }).\n\n    then(({ json = {} }) => {var _context;\n      const owners = _mapInstanceProperty(_context = json.result.owners).call(_context, owner => owner.id);\n      setDatasetCurrentlyEditing({ ...json.result, owners });\n    }).\n    catch(() => {\n      addDangerToast(t('An error occurred while fetching dataset related data'));\n    });\n  }, [addDangerToast]);\n  const openDatasetDeleteModal = dataset => SupersetClient.get({\n    endpoint: `/api/v1/dataset/${dataset.id}/related_objects` }).\n\n  then(({ json = {} }) => {\n    setDatasetCurrentlyDeleting({\n      ...dataset,\n      chart_count: json.charts.count,\n      dashboard_count: json.dashboards.count });\n\n  }).\n  catch(createErrorHandler(errMsg => t('An error occurred while fetching dataset related data: %s', errMsg)));\n  const columns = useMemo(() => [\n  {\n    Cell: ({ row: { original: { kind } } }) => {\n      if (kind === 'physical') {\n        return ___EmotionJSX(Tooltip, { id: \"physical-dataset-tooltip\", title: t('Physical dataset') },\n        ___EmotionJSX(Icons.DatasetPhysical, null));\n\n      }\n      return ___EmotionJSX(Tooltip, { id: \"virtual-dataset-tooltip\", title: t('Virtual dataset') },\n      ___EmotionJSX(Icons.DatasetVirtual, null));\n\n    },\n    accessor: 'kind_icon',\n    disableSortBy: true,\n    size: 'xs' },\n\n  {\n    Cell: ({ row: { original: { extra, table_name: datasetTitle, explore_url: exploreURL } } }) => {\n      const titleLink = ___EmotionJSX(\"a\", { href: exploreURL }, datasetTitle);\n      try {\n        const parsedExtra = JSON.parse(extra);\n        return ___EmotionJSX(FlexRowContainer, null,\n        (parsedExtra == null ? void 0 : parsedExtra.certification) && ___EmotionJSX(CertifiedIcon, { certifiedBy: parsedExtra.certification.certified_by, details: parsedExtra.certification.details }),\n        (parsedExtra == null ? void 0 : parsedExtra.warning_markdown) && ___EmotionJSX(WarningIconWithTooltip, { warningMarkdown: parsedExtra.warning_markdown }),\n        titleLink);\n\n      }\n      catch {\n        return titleLink;\n      }\n    },\n    Header: t('Name'),\n    accessor: 'table_name' },\n\n  {\n    Cell: ({ row: { original: { kind } } }) => {var _kind$;return ((_kind$ = kind[0]) == null ? void 0 : _kind$.toUpperCase()) + _sliceInstanceProperty(kind).call(kind, 1);},\n    Header: t('Type'),\n    accessor: 'kind',\n    disableSortBy: true,\n    size: 'md' },\n\n  {\n    Header: t('Database'),\n    accessor: 'database.database_name',\n    size: 'lg' },\n\n  {\n    Header: t('Schema'),\n    accessor: 'schema',\n    size: 'lg' },\n\n  {\n    Cell: ({ row: { original: { changed_on_delta_humanized: changedOn } } }) => ___EmotionJSX(\"span\", { className: \"no-wrap\" }, changedOn),\n    Header: t('Modified'),\n    accessor: 'changed_on_delta_humanized',\n    size: 'xl' },\n\n  {\n    Cell: ({ row: { original: { changed_by_name: changedByName } } }) => changedByName,\n    Header: t('Modified by'),\n    accessor: 'changed_by.first_name',\n    size: 'xl' },\n\n  {\n    accessor: 'database',\n    disableSortBy: true,\n    hidden: true },\n\n  {\n    Cell: ({ row: { original: { owners = [] } } }) => ___EmotionJSX(FacePile, { users: owners }),\n    Header: t('Owners'),\n    id: 'owners',\n    disableSortBy: true,\n    size: 'lg' },\n\n  {\n    accessor: 'sql',\n    hidden: true,\n    disableSortBy: true },\n\n  {\n    Cell: ({ row: { original } }) => {\n      const handleEdit = () => openDatasetEditModal(original);\n      const handleDelete = () => openDatasetDeleteModal(original);\n      const handleExport = () => handleBulkDatasetExport([original]);\n      if (!canEdit && !canDelete && !canExport) {\n        return null;\n      }\n      return ___EmotionJSX(Actions, { className: \"actions\" },\n      canDelete && ___EmotionJSX(Tooltip, { id: \"delete-action-tooltip\", title: t('Delete'), placement: \"bottom\" },\n      ___EmotionJSX(\"span\", { role: \"button\", tabIndex: 0, className: \"action-button\", onClick: handleDelete },\n      ___EmotionJSX(Icons.Trash, null))),\n\n\n      canExport && ___EmotionJSX(Tooltip, { id: \"export-action-tooltip\", title: t('Export'), placement: \"bottom\" },\n      ___EmotionJSX(\"span\", { role: \"button\", tabIndex: 0, className: \"action-button\", onClick: handleExport },\n      ___EmotionJSX(Icons.Share, null))),\n\n\n      canEdit && ___EmotionJSX(Tooltip, { id: \"edit-action-tooltip\", title: t('Edit'), placement: \"bottom\" },\n      ___EmotionJSX(\"span\", { role: \"button\", tabIndex: 0, className: \"action-button\", onClick: handleEdit },\n      ___EmotionJSX(Icons.EditAlt, null))));\n\n\n\n    },\n    Header: t('Actions'),\n    id: 'actions',\n    hidden: !canEdit && !canDelete,\n    disableSortBy: true }],\n\n  [canEdit, canDelete, canExport, openDatasetEditModal]);\n  const filterTypes = useMemo(() => [\n  {\n    Header: t('Owner'),\n    id: 'owners',\n    input: 'select',\n    operator: FilterOperator.relationManyMany,\n    unfilteredLabel: 'All',\n    fetchSelects: createFetchRelated('dataset', 'owners', createErrorHandler(errMsg => t('An error occurred while fetching dataset owner values: %s', errMsg)), user.userId),\n    paginate: true },\n\n  {\n    Header: t('Database'),\n    id: 'database',\n    input: 'select',\n    operator: FilterOperator.relationOneMany,\n    unfilteredLabel: 'All',\n    fetchSelects: createFetchRelated('dataset', 'database', createErrorHandler(errMsg => t('An error occurred while fetching datasets: %s', errMsg))),\n    paginate: true },\n\n  {\n    Header: t('Schema'),\n    id: 'schema',\n    input: 'select',\n    operator: FilterOperator.equals,\n    unfilteredLabel: 'All',\n    fetchSelects: createFetchDistinct('dataset', 'schema', createErrorHandler(errMsg => t('An error occurred while fetching schema values: %s', errMsg))),\n    paginate: true },\n\n  {\n    Header: t('Type'),\n    id: 'sql',\n    input: 'select',\n    operator: FilterOperator.datasetIsNullOrEmpty,\n    unfilteredLabel: 'All',\n    selects: [\n    { label: 'Virtual', value: false },\n    { label: 'Physical', value: true }] },\n\n\n  {\n    Header: t('Search'),\n    id: 'table_name',\n    input: 'search',\n    operator: FilterOperator.contains }],\n\n  []);\n  const menuData = {\n    activeChild: 'Datasets',\n    ...commonMenuData };\n\n  const buttonArr = [];\n  if (canDelete || canExport) {\n    buttonArr.push({\n      name: t('Bulk select'),\n      onClick: toggleBulkSelect,\n      buttonStyle: 'secondary' });\n\n  }\n  if (canCreate) {\n    buttonArr.push({\n      name: ___EmotionJSX(React.Fragment, null,\n      ___EmotionJSX(\"i\", { className: \"fa fa-plus\" }), \" \", t('Dataset'), ' '),\n\n      onClick: () => setDatasetAddModalOpen(true),\n      buttonStyle: 'primary' });\n\n  }\n  if (isFeatureEnabled(FeatureFlag.VERSIONED_EXPORT)) {\n    buttonArr.push({\n      name: ___EmotionJSX(Tooltip, { id: \"import-tooltip\", title: t('Import datasets'), placement: \"bottomRight\" },\n      ___EmotionJSX(Icons.Import, { \"data-test\": \"import-button\" })),\n\n      buttonStyle: 'link',\n      onClick: openDatasetImportModal });\n\n  }\n  menuData.buttons = buttonArr;\n  const closeDatasetDeleteModal = () => {\n    setDatasetCurrentlyDeleting(null);\n  };\n  const closeDatasetEditModal = () => {\n    setDatasetCurrentlyEditing(null);\n  };\n  const handleDatasetDelete = ({ id, table_name: tableName }) => {\n    SupersetClient.delete({\n      endpoint: `/api/v1/dataset/${id}` }).\n    then(() => {\n      refreshData();\n      setDatasetCurrentlyDeleting(null);\n      addSuccessToast(t('Deleted: %s', tableName));\n    }, createErrorHandler(errMsg => addDangerToast(t('There was an issue deleting %s: %s', tableName, errMsg))));\n  };\n  const handleBulkDatasetDelete = datasetsToDelete => {\n    SupersetClient.delete({\n      endpoint: `/api/v1/dataset/?q=${rison.encode(_mapInstanceProperty(datasetsToDelete).call(datasetsToDelete, ({ id }) => id))}` }).\n    then(({ json = {} }) => {\n      refreshData();\n      addSuccessToast(json.message);\n    }, createErrorHandler(errMsg => addDangerToast(t('There was an issue deleting the selected datasets: %s', errMsg))));\n  };\n  const handleBulkDatasetExport = datasetsToExport => {\n    const ids = _mapInstanceProperty(datasetsToExport).call(datasetsToExport, ({ id }) => id);\n    handleResourceExport('dataset', ids, () => {\n      setPreparingExport(false);\n    });\n    setPreparingExport(true);\n  };\n  return ___EmotionJSX(React.Fragment, null,\n  ___EmotionJSX(SubMenu, menuData),\n  ___EmotionJSX(AddDatasetModal, { show: datasetAddModalOpen, onHide: () => setDatasetAddModalOpen(false), onDatasetAdd: refreshData }),\n  datasetCurrentlyDeleting && ___EmotionJSX(DeleteModal, { description: t('The dataset %s is linked to %s charts that appear on %s dashboards. Are you sure you want to continue? Deleting the dataset will break those objects.', datasetCurrentlyDeleting.table_name, datasetCurrentlyDeleting.chart_count, datasetCurrentlyDeleting.dashboard_count), onConfirm: () => {\n      if (datasetCurrentlyDeleting) {\n        handleDatasetDelete(datasetCurrentlyDeleting);\n      }\n    }, onHide: closeDatasetDeleteModal, open: true, title: t('Delete Dataset?') }),\n  datasetCurrentlyEditing && ___EmotionJSX(DatasourceModal, { datasource: datasetCurrentlyEditing, onDatasourceSave: refreshData, onHide: closeDatasetEditModal, show: true }),\n  ___EmotionJSX(ConfirmStatusChange, { title: t('Please confirm'), description: t('Are you sure you want to delete the selected datasets?'), onConfirm: handleBulkDatasetDelete },\n  confirmDelete => {\n    const bulkActions = [];\n    if (canDelete) {\n      bulkActions.push({\n        key: 'delete',\n        name: t('Delete'),\n        onSelect: confirmDelete,\n        type: 'danger' });\n\n    }\n    if (canExport) {\n      bulkActions.push({\n        key: 'export',\n        name: t('Export'),\n        type: 'primary',\n        onSelect: handleBulkDatasetExport });\n\n    }\n    return ___EmotionJSX(ListView, { className: \"dataset-list-view\", columns: columns, data: datasets, count: datasetCount, pageSize: PAGE_SIZE, fetchData: fetchData, filters: filterTypes, loading: loading, initialSort: initialSort, bulkActions: bulkActions, bulkSelectEnabled: bulkSelectEnabled, disableBulkSelect: toggleBulkSelect, renderBulkSelectCopy: selected => {\n        const { virtualCount, physicalCount } = _reduceInstanceProperty(selected).call(selected, (acc, e) => {\n          if (e.original.kind === 'physical')\n          acc.physicalCount += 1;else\n          if (e.original.kind === 'virtual') {\n            acc.virtualCount += 1;\n          }\n          return acc;\n        }, { virtualCount: 0, physicalCount: 0 });\n        if (!selected.length) {\n          return t('0 Selected');\n        }\n        if (virtualCount && !physicalCount) {\n          return t('%s Selected (Virtual)', selected.length, virtualCount);\n        }\n        if (physicalCount && !virtualCount) {\n          return t('%s Selected (Physical)', selected.length, physicalCount);\n        }\n        return t('%s Selected (%s Physical, %s Virtual)', selected.length, physicalCount, virtualCount);\n      } });\n  }),\n\n\n  ___EmotionJSX(ImportModelsModal, { resourceName: \"dataset\", resourceLabel: t('dataset'), passwordsNeededMessage: PASSWORDS_NEEDED_MESSAGE, confirmOverwriteMessage: CONFIRM_OVERWRITE_MESSAGE, addDangerToast: addDangerToast, addSuccessToast: addSuccessToast, onModelImport: handleDatasetImport, show: importingDataset, onHide: closeDatasetImportModal, passwordFields: passwordFields, setPasswordFields: setPasswordFields }),\n  preparingExport && ___EmotionJSX(Loading, null));\n\n};__signature__(DatasetList, \"useListViewResource{{ state: { loading, resourceCount: datasetCount, resourceCollection: datasets, bulkSelectEnabled, }, hasPerm, fetchData, toggleBulkSelect, refreshData, }}\\nuseState{[datasetAddModalOpen, setDatasetAddModalOpen](false)}\\nuseState{[datasetCurrentlyDeleting, setDatasetCurrentlyDeleting](null)}\\nuseState{[datasetCurrentlyEditing, setDatasetCurrentlyEditing,](null)}\\nuseState{[importingDataset, showImportModal](false)}\\nuseState{[passwordFields, setPasswordFields]([])}\\nuseState{[preparingExport, setPreparingExport](false)}\\nuseCallback{openDatasetEditModal}\\nuseMemo{columns}\\nuseMemo{filterTypes}\", () => [useListViewResource]);const _default =\nwithToasts(DatasetList);export default _default;;(function () {var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined;if (!reactHotLoader) {return;}reactHotLoader.register(FlexRowContainer, \"FlexRowContainer\", \"/app/superset-frontend/src/views/CRUD/data/dataset/DatasetList.tsx\");reactHotLoader.register(Actions, \"Actions\", \"/app/superset-frontend/src/views/CRUD/data/dataset/DatasetList.tsx\");reactHotLoader.register(DatasetList, \"DatasetList\", \"/app/superset-frontend/src/views/CRUD/data/dataset/DatasetList.tsx\");reactHotLoader.register(_default, \"default\", \"/app/superset-frontend/src/views/CRUD/data/dataset/DatasetList.tsx\");})();;(function () {var leaveModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.leaveModule : undefined;leaveModule && leaveModule(module);})();","map":{"version":3,"sources":["/app/superset-frontend/src/views/CRUD/data/dataset/DatasetList.tsx"],"names":[],"mappings":"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","sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { SupersetClient, t, styled } from '@superset-ui/core';\nimport React, {\n  FunctionComponent,\n  useState,\n  useMemo,\n  useCallback,\n} from 'react';\nimport rison from 'rison';\nimport {\n  createFetchRelated,\n  createFetchDistinct,\n  createErrorHandler,\n} from 'src/views/CRUD/utils';\nimport { useListViewResource } from 'src/views/CRUD/hooks';\nimport ConfirmStatusChange from 'src/components/ConfirmStatusChange';\nimport DatasourceModal from 'src/datasource/DatasourceModal';\nimport DeleteModal from 'src/components/DeleteModal';\nimport handleResourceExport from 'src/utils/export';\nimport ListView, {\n  ListViewProps,\n  Filters,\n  FilterOperator,\n} from 'src/components/ListView';\nimport Loading from 'src/components/Loading';\nimport SubMenu, {\n  SubMenuProps,\n  ButtonProps,\n} from 'src/components/Menu/SubMenu';\nimport { commonMenuData } from 'src/views/CRUD/data/common';\nimport Owner from 'src/types/Owner';\nimport withToasts from 'src/messageToasts/enhancers/withToasts';\nimport { Tooltip } from 'src/components/Tooltip';\nimport Icons from 'src/components/Icons';\nimport FacePile from 'src/components/FacePile';\nimport CertifiedIcon from 'src/components/CertifiedIcon';\nimport ImportModelsModal from 'src/components/ImportModal/index';\nimport { isFeatureEnabled, FeatureFlag } from 'src/featureFlags';\nimport WarningIconWithTooltip from 'src/components/WarningIconWithTooltip';\nimport AddDatasetModal from './AddDatasetModal';\nimport {\n  PAGE_SIZE,\n  SORT_BY,\n  PASSWORDS_NEEDED_MESSAGE,\n  CONFIRM_OVERWRITE_MESSAGE,\n} from './constants';\n\nconst FlexRowContainer = styled.div`\n  align-items: center;\n  display: flex;\n\n  > svg {\n    margin-right: ${({ theme }) => theme.gridUnit}px;\n  }\n`;\n\nconst Actions = styled.div`\n  color: ${({ theme }) => theme.colors.grayscale.base};\n`;\n\ntype Dataset = {\n  changed_by_name: string;\n  changed_by_url: string;\n  changed_by: string;\n  changed_on_delta_humanized: string;\n  database: {\n    id: string;\n    database_name: string;\n  };\n  kind: string;\n  explore_url: string;\n  id: number;\n  owners: Array<Owner>;\n  schema: string;\n  table_name: string;\n};\n\ninterface DatasetListProps {\n  addDangerToast: (msg: string) => void;\n  addSuccessToast: (msg: string) => void;\n  user: {\n    userId: string | number;\n  };\n}\n\nconst DatasetList: FunctionComponent<DatasetListProps> = ({\n  addDangerToast,\n  addSuccessToast,\n  user,\n}) => {\n  const {\n    state: {\n      loading,\n      resourceCount: datasetCount,\n      resourceCollection: datasets,\n      bulkSelectEnabled,\n    },\n    hasPerm,\n    fetchData,\n    toggleBulkSelect,\n    refreshData,\n  } = useListViewResource<Dataset>('dataset', t('dataset'), addDangerToast);\n\n  const [datasetAddModalOpen, setDatasetAddModalOpen] = useState<boolean>(\n    false,\n  );\n\n  const [datasetCurrentlyDeleting, setDatasetCurrentlyDeleting] = useState<\n    (Dataset & { chart_count: number; dashboard_count: number }) | null\n  >(null);\n\n  const [\n    datasetCurrentlyEditing,\n    setDatasetCurrentlyEditing,\n  ] = useState<Dataset | null>(null);\n\n  const [importingDataset, showImportModal] = useState<boolean>(false);\n  const [passwordFields, setPasswordFields] = useState<string[]>([]);\n  const [preparingExport, setPreparingExport] = useState<boolean>(false);\n\n  const openDatasetImportModal = () => {\n    showImportModal(true);\n  };\n\n  const closeDatasetImportModal = () => {\n    showImportModal(false);\n  };\n\n  const handleDatasetImport = () => {\n    showImportModal(false);\n    refreshData();\n  };\n\n  const canEdit = hasPerm('can_write');\n  const canDelete = hasPerm('can_write');\n  const canCreate = hasPerm('can_write');\n  const canExport = hasPerm('can_read');\n\n  const initialSort = SORT_BY;\n\n  const openDatasetEditModal = useCallback(\n    ({ id }: Dataset) => {\n      SupersetClient.get({\n        endpoint: `/api/v1/dataset/${id}`,\n      })\n        .then(({ json = {} }) => {\n          const owners = json.result.owners.map((owner: any) => owner.id);\n          setDatasetCurrentlyEditing({ ...json.result, owners });\n        })\n        .catch(() => {\n          addDangerToast(\n            t('An error occurred while fetching dataset related data'),\n          );\n        });\n    },\n    [addDangerToast],\n  );\n\n  const openDatasetDeleteModal = (dataset: Dataset) =>\n    SupersetClient.get({\n      endpoint: `/api/v1/dataset/${dataset.id}/related_objects`,\n    })\n      .then(({ json = {} }) => {\n        setDatasetCurrentlyDeleting({\n          ...dataset,\n          chart_count: json.charts.count,\n          dashboard_count: json.dashboards.count,\n        });\n      })\n      .catch(\n        createErrorHandler(errMsg =>\n          t(\n            'An error occurred while fetching dataset related data: %s',\n            errMsg,\n          ),\n        ),\n      );\n\n  const columns = useMemo(\n    () => [\n      {\n        Cell: ({\n          row: {\n            original: { kind },\n          },\n        }: any) => {\n          if (kind === 'physical') {\n            return (\n              <Tooltip\n                id=\"physical-dataset-tooltip\"\n                title={t('Physical dataset')}\n              >\n                <Icons.DatasetPhysical />\n              </Tooltip>\n            );\n          }\n\n          return (\n            <Tooltip id=\"virtual-dataset-tooltip\" title={t('Virtual dataset')}>\n              <Icons.DatasetVirtual />\n            </Tooltip>\n          );\n        },\n        accessor: 'kind_icon',\n        disableSortBy: true,\n        size: 'xs',\n      },\n      {\n        Cell: ({\n          row: {\n            original: {\n              extra,\n              table_name: datasetTitle,\n              explore_url: exploreURL,\n            },\n          },\n        }: any) => {\n          const titleLink = <a href={exploreURL}>{datasetTitle}</a>;\n          try {\n            const parsedExtra = JSON.parse(extra);\n            return (\n              <FlexRowContainer>\n                {parsedExtra?.certification && (\n                  <CertifiedIcon\n                    certifiedBy={parsedExtra.certification.certified_by}\n                    details={parsedExtra.certification.details}\n                  />\n                )}\n                {parsedExtra?.warning_markdown && (\n                  <WarningIconWithTooltip\n                    warningMarkdown={parsedExtra.warning_markdown}\n                  />\n                )}\n                {titleLink}\n              </FlexRowContainer>\n            );\n          } catch {\n            return titleLink;\n          }\n        },\n        Header: t('Name'),\n        accessor: 'table_name',\n      },\n      {\n        Cell: ({\n          row: {\n            original: { kind },\n          },\n        }: any) => kind[0]?.toUpperCase() + kind.slice(1),\n        Header: t('Type'),\n        accessor: 'kind',\n        disableSortBy: true,\n        size: 'md',\n      },\n      {\n        Header: t('Database'),\n        accessor: 'database.database_name',\n        size: 'lg',\n      },\n      {\n        Header: t('Schema'),\n        accessor: 'schema',\n        size: 'lg',\n      },\n      {\n        Cell: ({\n          row: {\n            original: { changed_on_delta_humanized: changedOn },\n          },\n        }: any) => <span className=\"no-wrap\">{changedOn}</span>,\n        Header: t('Modified'),\n        accessor: 'changed_on_delta_humanized',\n        size: 'xl',\n      },\n      {\n        Cell: ({\n          row: {\n            original: { changed_by_name: changedByName },\n          },\n        }: any) => changedByName,\n        Header: t('Modified by'),\n        accessor: 'changed_by.first_name',\n        size: 'xl',\n      },\n      {\n        accessor: 'database',\n        disableSortBy: true,\n        hidden: true,\n      },\n      {\n        Cell: ({\n          row: {\n            original: { owners = [] },\n          },\n        }: any) => <FacePile users={owners} />,\n        Header: t('Owners'),\n        id: 'owners',\n        disableSortBy: true,\n        size: 'lg',\n      },\n      {\n        accessor: 'sql',\n        hidden: true,\n        disableSortBy: true,\n      },\n      {\n        Cell: ({ row: { original } }: any) => {\n          const handleEdit = () => openDatasetEditModal(original);\n          const handleDelete = () => openDatasetDeleteModal(original);\n          const handleExport = () => handleBulkDatasetExport([original]);\n          if (!canEdit && !canDelete && !canExport) {\n            return null;\n          }\n          return (\n            <Actions className=\"actions\">\n              {canDelete && (\n                <Tooltip\n                  id=\"delete-action-tooltip\"\n                  title={t('Delete')}\n                  placement=\"bottom\"\n                >\n                  <span\n                    role=\"button\"\n                    tabIndex={0}\n                    className=\"action-button\"\n                    onClick={handleDelete}\n                  >\n                    <Icons.Trash />\n                  </span>\n                </Tooltip>\n              )}\n              {canExport && (\n                <Tooltip\n                  id=\"export-action-tooltip\"\n                  title={t('Export')}\n                  placement=\"bottom\"\n                >\n                  <span\n                    role=\"button\"\n                    tabIndex={0}\n                    className=\"action-button\"\n                    onClick={handleExport}\n                  >\n                    <Icons.Share />\n                  </span>\n                </Tooltip>\n              )}\n              {canEdit && (\n                <Tooltip\n                  id=\"edit-action-tooltip\"\n                  title={t('Edit')}\n                  placement=\"bottom\"\n                >\n                  <span\n                    role=\"button\"\n                    tabIndex={0}\n                    className=\"action-button\"\n                    onClick={handleEdit}\n                  >\n                    <Icons.EditAlt />\n                  </span>\n                </Tooltip>\n              )}\n            </Actions>\n          );\n        },\n        Header: t('Actions'),\n        id: 'actions',\n        hidden: !canEdit && !canDelete,\n        disableSortBy: true,\n      },\n    ],\n    [canEdit, canDelete, canExport, openDatasetEditModal],\n  );\n\n  const filterTypes: Filters = useMemo(\n    () => [\n      {\n        Header: t('Owner'),\n        id: 'owners',\n        input: 'select',\n        operator: FilterOperator.relationManyMany,\n        unfilteredLabel: 'All',\n        fetchSelects: createFetchRelated(\n          'dataset',\n          'owners',\n          createErrorHandler(errMsg =>\n            t(\n              'An error occurred while fetching dataset owner values: %s',\n              errMsg,\n            ),\n          ),\n          user.userId,\n        ),\n        paginate: true,\n      },\n      {\n        Header: t('Database'),\n        id: 'database',\n        input: 'select',\n        operator: FilterOperator.relationOneMany,\n        unfilteredLabel: 'All',\n        fetchSelects: createFetchRelated(\n          'dataset',\n          'database',\n          createErrorHandler(errMsg =>\n            t('An error occurred while fetching datasets: %s', errMsg),\n          ),\n        ),\n        paginate: true,\n      },\n      {\n        Header: t('Schema'),\n        id: 'schema',\n        input: 'select',\n        operator: FilterOperator.equals,\n        unfilteredLabel: 'All',\n        fetchSelects: createFetchDistinct(\n          'dataset',\n          'schema',\n          createErrorHandler(errMsg =>\n            t('An error occurred while fetching schema values: %s', errMsg),\n          ),\n        ),\n        paginate: true,\n      },\n      {\n        Header: t('Type'),\n        id: 'sql',\n        input: 'select',\n        operator: FilterOperator.datasetIsNullOrEmpty,\n        unfilteredLabel: 'All',\n        selects: [\n          { label: 'Virtual', value: false },\n          { label: 'Physical', value: true },\n        ],\n      },\n      {\n        Header: t('Search'),\n        id: 'table_name',\n        input: 'search',\n        operator: FilterOperator.contains,\n      },\n    ],\n    [],\n  );\n\n  const menuData: SubMenuProps = {\n    activeChild: 'Datasets',\n    ...commonMenuData,\n  };\n\n  const buttonArr: Array<ButtonProps> = [];\n\n  if (canDelete || canExport) {\n    buttonArr.push({\n      name: t('Bulk select'),\n      onClick: toggleBulkSelect,\n      buttonStyle: 'secondary',\n    });\n  }\n\n  if (canCreate) {\n    buttonArr.push({\n      name: (\n        <>\n          <i className=\"fa fa-plus\" /> {t('Dataset')}{' '}\n        </>\n      ),\n      onClick: () => setDatasetAddModalOpen(true),\n      buttonStyle: 'primary',\n    });\n  }\n\n  if (isFeatureEnabled(FeatureFlag.VERSIONED_EXPORT)) {\n    buttonArr.push({\n      name: (\n        <Tooltip\n          id=\"import-tooltip\"\n          title={t('Import datasets')}\n          placement=\"bottomRight\"\n        >\n          <Icons.Import data-test=\"import-button\" />\n        </Tooltip>\n      ),\n      buttonStyle: 'link',\n      onClick: openDatasetImportModal,\n    });\n  }\n\n  menuData.buttons = buttonArr;\n\n  const closeDatasetDeleteModal = () => {\n    setDatasetCurrentlyDeleting(null);\n  };\n\n  const closeDatasetEditModal = () => {\n    setDatasetCurrentlyEditing(null);\n  };\n\n  const handleDatasetDelete = ({ id, table_name: tableName }: Dataset) => {\n    SupersetClient.delete({\n      endpoint: `/api/v1/dataset/${id}`,\n    }).then(\n      () => {\n        refreshData();\n        setDatasetCurrentlyDeleting(null);\n        addSuccessToast(t('Deleted: %s', tableName));\n      },\n      createErrorHandler(errMsg =>\n        addDangerToast(\n          t('There was an issue deleting %s: %s', tableName, errMsg),\n        ),\n      ),\n    );\n  };\n\n  const handleBulkDatasetDelete = (datasetsToDelete: Dataset[]) => {\n    SupersetClient.delete({\n      endpoint: `/api/v1/dataset/?q=${rison.encode(\n        datasetsToDelete.map(({ id }) => id),\n      )}`,\n    }).then(\n      ({ json = {} }) => {\n        refreshData();\n        addSuccessToast(json.message);\n      },\n      createErrorHandler(errMsg =>\n        addDangerToast(\n          t('There was an issue deleting the selected datasets: %s', errMsg),\n        ),\n      ),\n    );\n  };\n\n  const handleBulkDatasetExport = (datasetsToExport: Dataset[]) => {\n    const ids = datasetsToExport.map(({ id }) => id);\n    handleResourceExport('dataset', ids, () => {\n      setPreparingExport(false);\n    });\n    setPreparingExport(true);\n  };\n\n  return (\n    <>\n      <SubMenu {...menuData} />\n      <AddDatasetModal\n        show={datasetAddModalOpen}\n        onHide={() => setDatasetAddModalOpen(false)}\n        onDatasetAdd={refreshData}\n      />\n      {datasetCurrentlyDeleting && (\n        <DeleteModal\n          description={t(\n            'The dataset %s is linked to %s charts that appear on %s dashboards. Are you sure you want to continue? Deleting the dataset will break those objects.',\n            datasetCurrentlyDeleting.table_name,\n            datasetCurrentlyDeleting.chart_count,\n            datasetCurrentlyDeleting.dashboard_count,\n          )}\n          onConfirm={() => {\n            if (datasetCurrentlyDeleting) {\n              handleDatasetDelete(datasetCurrentlyDeleting);\n            }\n          }}\n          onHide={closeDatasetDeleteModal}\n          open\n          title={t('Delete Dataset?')}\n        />\n      )}\n      {datasetCurrentlyEditing && (\n        <DatasourceModal\n          datasource={datasetCurrentlyEditing}\n          onDatasourceSave={refreshData}\n          onHide={closeDatasetEditModal}\n          show\n        />\n      )}\n      <ConfirmStatusChange\n        title={t('Please confirm')}\n        description={t(\n          'Are you sure you want to delete the selected datasets?',\n        )}\n        onConfirm={handleBulkDatasetDelete}\n      >\n        {confirmDelete => {\n          const bulkActions: ListViewProps['bulkActions'] = [];\n          if (canDelete) {\n            bulkActions.push({\n              key: 'delete',\n              name: t('Delete'),\n              onSelect: confirmDelete,\n              type: 'danger',\n            });\n          }\n          if (canExport) {\n            bulkActions.push({\n              key: 'export',\n              name: t('Export'),\n              type: 'primary',\n              onSelect: handleBulkDatasetExport,\n            });\n          }\n          return (\n            <ListView<Dataset>\n              className=\"dataset-list-view\"\n              columns={columns}\n              data={datasets}\n              count={datasetCount}\n              pageSize={PAGE_SIZE}\n              fetchData={fetchData}\n              filters={filterTypes}\n              loading={loading}\n              initialSort={initialSort}\n              bulkActions={bulkActions}\n              bulkSelectEnabled={bulkSelectEnabled}\n              disableBulkSelect={toggleBulkSelect}\n              renderBulkSelectCopy={selected => {\n                const { virtualCount, physicalCount } = selected.reduce(\n                  (acc, e) => {\n                    if (e.original.kind === 'physical') acc.physicalCount += 1;\n                    else if (e.original.kind === 'virtual') {\n                      acc.virtualCount += 1;\n                    }\n                    return acc;\n                  },\n                  { virtualCount: 0, physicalCount: 0 },\n                );\n\n                if (!selected.length) {\n                  return t('0 Selected');\n                }\n                if (virtualCount && !physicalCount) {\n                  return t(\n                    '%s Selected (Virtual)',\n                    selected.length,\n                    virtualCount,\n                  );\n                }\n                if (physicalCount && !virtualCount) {\n                  return t(\n                    '%s Selected (Physical)',\n                    selected.length,\n                    physicalCount,\n                  );\n                }\n\n                return t(\n                  '%s Selected (%s Physical, %s Virtual)',\n                  selected.length,\n                  physicalCount,\n                  virtualCount,\n                );\n              }}\n            />\n          );\n        }}\n      </ConfirmStatusChange>\n\n      <ImportModelsModal\n        resourceName=\"dataset\"\n        resourceLabel={t('dataset')}\n        passwordsNeededMessage={PASSWORDS_NEEDED_MESSAGE}\n        confirmOverwriteMessage={CONFIRM_OVERWRITE_MESSAGE}\n        addDangerToast={addDangerToast}\n        addSuccessToast={addSuccessToast}\n        onModelImport={handleDatasetImport}\n        show={importingDataset}\n        onHide={closeDatasetImportModal}\n        passwordFields={passwordFields}\n        setPasswordFields={setPasswordFields}\n      />\n      {preparingExport && <Loading />}\n    </>\n  );\n};\n\nexport default withToasts(DatasetList);\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}