{"ast":null,"code":"import \"core-js/modules/web.dom-collections.iterator.js\";import _setTimeout from \"@babel/runtime-corejs3/core-js-stable/set-timeout\";import _JSON$stringify from \"@babel/runtime-corejs3/core-js-stable/json/stringify\";(function () {var enterModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.enterModule : undefined;enterModule && enterModule(module);})();var __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default.signature : function (a) {return a;}; /**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React, { useEffect, useRef, useState } from 'react';\nimport { styled, SuperChart, t, Behavior, getChartMetadataRegistry } from '@superset-ui/core';\nimport { useDispatch } from 'react-redux';\nimport { areObjectsEqual } from 'src/reduxUtils';\nimport { getChartDataRequest } from 'src/chart/chartAction';\nimport Loading from 'src/components/Loading';\nimport BasicErrorAlert from 'src/components/ErrorMessage/BasicErrorAlert';\nimport { FeatureFlag, isFeatureEnabled } from 'src/featureFlags';\nimport { waitForAsyncData } from 'src/middleware/asyncEvent';\nimport { setFocusedNativeFilter, unsetFocusedNativeFilter } from 'src/dashboard/actions/nativeFilters';\nimport { getFormData } from '../../utils';\nimport { useCascadingFilters } from './state';import { jsx as ___EmotionJSX } from \"@emotion/react\";\nconst FilterItem = styled.div`\n  min-height: ${({ theme }) => theme.gridUnit * 11}px;\n  padding-bottom: ${({ theme }) => theme.gridUnit * 3}px;\n  & > div > div {\n    height: auto;\n  }\n`;\nconst FilterValue = ({ dataMaskSelected, filter, directPathToChild, onFilterSelectionChange, inView = true }) => {var _filter$dataMask2, _filter$dataMask3;\n  const { id, targets, filterType, adhoc_filters, time_range } = filter;\n  const metadata = getChartMetadataRegistry().get(filterType);\n  const cascadingFilters = useCascadingFilters(id, dataMaskSelected);\n  const [state, setState] = useState([]);\n  const [error, setError] = useState('');\n  const [formData, setFormData] = useState({});\n  const [ownState, setOwnState] = useState({});\n  const [inViewFirstTime, setInViewFirstTime] = useState(inView);\n  const inputRef = useRef(null);\n  const [target] = targets;\n  const { datasetId, column = {} } = target;\n  const { name: groupby } = column;\n  const hasDataSource = !!datasetId;\n  const [isLoading, setIsLoading] = useState(hasDataSource);\n  const [isRefreshing, setIsRefreshing] = useState(true);\n  const dispatch = useDispatch();\n  useEffect(() => {\n    if (!inViewFirstTime && inView) {\n      setInViewFirstTime(true);\n    }\n  }, [inView, inViewFirstTime, setInViewFirstTime]);\n  useEffect(() => {var _filter$dataMask;\n    if (!inViewFirstTime) {\n      return;\n    }\n    const newFormData = getFormData({\n      ...filter,\n      datasetId,\n      cascadingFilters,\n      groupby,\n      inputRef,\n      adhoc_filters,\n      time_range });\n\n    const filterOwnState = ((_filter$dataMask = filter.dataMask) == null ? void 0 : _filter$dataMask.ownState) || {};\n    if (!areObjectsEqual(formData, newFormData) ||\n    !areObjectsEqual(ownState, filterOwnState)) {\n      setFormData(newFormData);\n      setOwnState(filterOwnState);\n      if (!hasDataSource) {\n        return;\n      }\n      setIsRefreshing(true);\n      getChartDataRequest({\n        formData: newFormData,\n        force: false,\n        requestParams: { dashboardId: 0 },\n        ownState: filterOwnState }).\n\n      then(response => {\n        if (isFeatureEnabled(FeatureFlag.GLOBAL_ASYNC_QUERIES)) {\n          // deal with getChartDataRequest transforming the response data\n          const result = 'result' in response ? response.result[0] : response;\n          waitForAsyncData(result).\n          then(asyncResult => {\n            setIsRefreshing(false);\n            setIsLoading(false);\n            setState(asyncResult);\n          }).\n          catch(error => {\n            setError(error.message || error.error || t('Check configuration'));\n            setIsRefreshing(false);\n            setIsLoading(false);\n          });\n        } else\n        {\n          setState(response.result);\n          setError('');\n          setIsRefreshing(false);\n          setIsLoading(false);\n        }\n      }).\n      catch(error => {\n        setError(error.statusText);\n        setIsRefreshing(false);\n        setIsLoading(false);\n      });\n    }\n  }, [\n  inViewFirstTime,\n  cascadingFilters,\n  datasetId,\n  groupby,\n  _JSON$stringify(filter),\n  hasDataSource]);\n\n  useEffect(() => {\n    if ((directPathToChild == null ? void 0 : directPathToChild[0]) === filter.id) {\n      // wait for Cascade Popover to open\n      const timeout = _setTimeout(() => {var _inputRef$current;\n        inputRef == null ? void 0 : (_inputRef$current = inputRef.current) == null ? void 0 : _inputRef$current.focus();\n      }, 200);\n      return () => clearTimeout(timeout);\n    }\n    return undefined;\n  }, [inputRef, directPathToChild, filter.id]);\n  const setDataMask = dataMask => onFilterSelectionChange(filter, dataMask);\n  const setFocusedFilter = () => dispatch(setFocusedNativeFilter(id));\n  const unsetFocusedFilter = () => dispatch(unsetFocusedNativeFilter());\n  if (error) {\n    return ___EmotionJSX(BasicErrorAlert, { title: t('Cannot load filter'), body: error, level: \"error\" });\n  }\n  return ___EmotionJSX(FilterItem, { \"data-test\": \"form-item-value\" },\n  isLoading ? ___EmotionJSX(Loading, { position: \"inline-centered\" }) : ___EmotionJSX(SuperChart, { height: 20, width: 220, formData: formData\n    // For charts that don't have datasource we need workaround for empty placeholder\n    , queriesData: hasDataSource ? state : [{ data: [{}] }], chartType: filterType, behaviors: [Behavior.NATIVE_FILTER], filterState: (_filter$dataMask2 = filter.dataMask) == null ? void 0 : _filter$dataMask2.filterState, ownState: (_filter$dataMask3 = filter.dataMask) == null ? void 0 : _filter$dataMask3.ownState, enableNoResults: metadata == null ? void 0 : metadata.enableNoResults, isRefreshing: isRefreshing, hooks: { setDataMask, setFocusedFilter, unsetFocusedFilter } }));\n\n};__signature__(FilterValue, \"useCascadingFilters{cascadingFilters}\\nuseState{[state, setState]([])}\\nuseState{[error, setError]('')}\\nuseState{[formData, setFormData]({})}\\nuseState{[ownState, setOwnState]({})}\\nuseState{[inViewFirstTime, setInViewFirstTime](inView)}\\nuseRef{inputRef}\\nuseState{[isLoading, setIsLoading](hasDataSource)}\\nuseState{[isRefreshing, setIsRefreshing](true)}\\nuseDispatch{dispatch}\\nuseEffect{}\\nuseEffect{}\\nuseEffect{}\", () => [useCascadingFilters, useDispatch]);const _default =\nFilterValue;export default _default;;(function () {var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined;if (!reactHotLoader) {return;}reactHotLoader.register(FilterItem, \"FilterItem\", \"/app/superset-frontend/src/dashboard/components/nativeFilters/FilterBar/FilterControls/FilterValue.tsx\");reactHotLoader.register(FilterValue, \"FilterValue\", \"/app/superset-frontend/src/dashboard/components/nativeFilters/FilterBar/FilterControls/FilterValue.tsx\");reactHotLoader.register(_default, \"default\", \"/app/superset-frontend/src/dashboard/components/nativeFilters/FilterBar/FilterControls/FilterValue.tsx\");})();;(function () {var leaveModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.leaveModule : undefined;leaveModule && leaveModule(module);})();","map":{"version":3,"sources":["/app/superset-frontend/src/dashboard/components/nativeFilters/FilterBar/FilterControls/FilterValue.tsx"],"names":[],"mappings":"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","sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React, { useEffect, useRef, useState } from 'react';\nimport {\n  QueryFormData,\n  styled,\n  SuperChart,\n  DataMask,\n  t,\n  Behavior,\n  ChartDataResponseResult,\n  JsonObject,\n  getChartMetadataRegistry,\n} from '@superset-ui/core';\nimport { useDispatch } from 'react-redux';\nimport { areObjectsEqual } from 'src/reduxUtils';\nimport { getChartDataRequest } from 'src/chart/chartAction';\nimport Loading from 'src/components/Loading';\nimport BasicErrorAlert from 'src/components/ErrorMessage/BasicErrorAlert';\nimport { FeatureFlag, isFeatureEnabled } from 'src/featureFlags';\nimport { waitForAsyncData } from 'src/middleware/asyncEvent';\nimport {\n  setFocusedNativeFilter,\n  unsetFocusedNativeFilter,\n} from 'src/dashboard/actions/nativeFilters';\nimport { ClientErrorObject } from 'src/utils/getClientErrorObject';\nimport { FilterProps } from './types';\nimport { getFormData } from '../../utils';\nimport { useCascadingFilters } from './state';\n\nconst FilterItem = styled.div`\n  min-height: ${({ theme }) => theme.gridUnit * 11}px;\n  padding-bottom: ${({ theme }) => theme.gridUnit * 3}px;\n  & > div > div {\n    height: auto;\n  }\n`;\n\nconst FilterValue: React.FC<FilterProps> = ({\n  dataMaskSelected,\n  filter,\n  directPathToChild,\n  onFilterSelectionChange,\n  inView = true,\n}) => {\n  const { id, targets, filterType, adhoc_filters, time_range } = filter;\n  const metadata = getChartMetadataRegistry().get(filterType);\n  const cascadingFilters = useCascadingFilters(id, dataMaskSelected);\n  const [state, setState] = useState<ChartDataResponseResult[]>([]);\n  const [error, setError] = useState<string>('');\n  const [formData, setFormData] = useState<Partial<QueryFormData>>({});\n  const [ownState, setOwnState] = useState<JsonObject>({});\n  const [inViewFirstTime, setInViewFirstTime] = useState(inView);\n  const inputRef = useRef<HTMLInputElement>(null);\n  const [target] = targets;\n  const {\n    datasetId,\n    column = {},\n  }: Partial<{ datasetId: number; column: { name?: string } }> = target;\n  const { name: groupby } = column;\n  const hasDataSource = !!datasetId;\n  const [isLoading, setIsLoading] = useState<boolean>(hasDataSource);\n  const [isRefreshing, setIsRefreshing] = useState<boolean>(true);\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    if (!inViewFirstTime && inView) {\n      setInViewFirstTime(true);\n    }\n  }, [inView, inViewFirstTime, setInViewFirstTime]);\n\n  useEffect(() => {\n    if (!inViewFirstTime) {\n      return;\n    }\n    const newFormData = getFormData({\n      ...filter,\n      datasetId,\n      cascadingFilters,\n      groupby,\n      inputRef,\n      adhoc_filters,\n      time_range,\n    });\n    const filterOwnState = filter.dataMask?.ownState || {};\n    if (\n      !areObjectsEqual(formData, newFormData) ||\n      !areObjectsEqual(ownState, filterOwnState)\n    ) {\n      setFormData(newFormData);\n      setOwnState(filterOwnState);\n      if (!hasDataSource) {\n        return;\n      }\n      setIsRefreshing(true);\n      getChartDataRequest({\n        formData: newFormData,\n        force: false,\n        requestParams: { dashboardId: 0 },\n        ownState: filterOwnState,\n      })\n        .then(response => {\n          if (isFeatureEnabled(FeatureFlag.GLOBAL_ASYNC_QUERIES)) {\n            // deal with getChartDataRequest transforming the response data\n            const result = 'result' in response ? response.result[0] : response;\n            waitForAsyncData(result)\n              .then((asyncResult: ChartDataResponseResult[]) => {\n                setIsRefreshing(false);\n                setIsLoading(false);\n                setState(asyncResult);\n              })\n              .catch((error: ClientErrorObject) => {\n                setError(\n                  error.message || error.error || t('Check configuration'),\n                );\n                setIsRefreshing(false);\n                setIsLoading(false);\n              });\n          } else {\n            setState(response.result);\n            setError('');\n            setIsRefreshing(false);\n            setIsLoading(false);\n          }\n        })\n        .catch((error: Response) => {\n          setError(error.statusText);\n          setIsRefreshing(false);\n          setIsLoading(false);\n        });\n    }\n  }, [\n    inViewFirstTime,\n    cascadingFilters,\n    datasetId,\n    groupby,\n    JSON.stringify(filter),\n    hasDataSource,\n  ]);\n\n  useEffect(() => {\n    if (directPathToChild?.[0] === filter.id) {\n      // wait for Cascade Popover to open\n      const timeout = setTimeout(() => {\n        inputRef?.current?.focus();\n      }, 200);\n      return () => clearTimeout(timeout);\n    }\n    return undefined;\n  }, [inputRef, directPathToChild, filter.id]);\n\n  const setDataMask = (dataMask: DataMask) =>\n    onFilterSelectionChange(filter, dataMask);\n\n  const setFocusedFilter = () => dispatch(setFocusedNativeFilter(id));\n  const unsetFocusedFilter = () => dispatch(unsetFocusedNativeFilter());\n\n  if (error) {\n    return (\n      <BasicErrorAlert\n        title={t('Cannot load filter')}\n        body={error}\n        level=\"error\"\n      />\n    );\n  }\n\n  return (\n    <FilterItem data-test=\"form-item-value\">\n      {isLoading ? (\n        <Loading position=\"inline-centered\" />\n      ) : (\n        <SuperChart\n          height={20}\n          width={220}\n          formData={formData}\n          // For charts that don't have datasource we need workaround for empty placeholder\n          queriesData={hasDataSource ? state : [{ data: [{}] }]}\n          chartType={filterType}\n          behaviors={[Behavior.NATIVE_FILTER]}\n          filterState={filter.dataMask?.filterState}\n          ownState={filter.dataMask?.ownState}\n          enableNoResults={metadata?.enableNoResults}\n          isRefreshing={isRefreshing}\n          hooks={{ setDataMask, setFocusedFilter, unsetFocusedFilter }}\n        />\n      )}\n    </FilterItem>\n  );\n};\n\nexport default FilterValue;\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}