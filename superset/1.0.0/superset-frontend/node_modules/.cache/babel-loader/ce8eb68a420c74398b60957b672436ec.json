{"ast":null,"code":"import \"core-js/modules/web.dom-collections.iterator.js\";import _extends from \"@babel/runtime-corejs3/helpers/extends\";import _Promise from \"@babel/runtime-corejs3/core-js-stable/promise\";(function () {var enterModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.enterModule : undefined;enterModule && enterModule(module);})();var __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default.signature : function (a) {return a;}; /**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React, { useEffect, useState } from 'react';\nimport Loading from '../Loading';import { jsx as ___EmotionJSX } from \"@emotion/react\";\nfunction DefaultPlaceholder({ width, height, showLoadingForImport = false, placeholderStyle: style }) {\n  return (\n    // since `width` defaults to 100%, we can display the placeholder once\n    // height is specified.\n    height && ___EmotionJSX(\"div\", { key: \"async-asm-placeholder\", style: { width, height, ...style } },\n    showLoadingForImport && ___EmotionJSX(Loading, { position: \"floating\" })) ||\n\n    // `|| null` is for in case of height=0.\n    null);\n}\n/**\n * Asynchronously import an ES module as a React component, render a placeholder\n * first (if provided) and re-render once import is complete.\n */\nexport default function AsyncEsmComponent(\n/**\n * A promise generator that returns the React component to render.\n */\nloadComponent,\n/**\n * Placeholder while still importing.\n */\nplaceholder = DefaultPlaceholder) {\n  let promise;\n  let component;\n  /**\n   * Safely wait for promise, make sure the loader function only execute once.\n   */\n  function waitForPromise() {\n    if (!promise) {\n      // load component on initialization\n      promise =\n      loadComponent instanceof _Promise ? loadComponent : loadComponent();\n    }\n    if (!component) {\n      promise.then(result => {\n        component = result.default ||\n        result;\n      });\n    }\n    return promise;\n  }\n  const AsyncComponent = /*#__PURE__*/React.forwardRef(__signature__(function AsyncComponent(props, ref) {\n    const [loaded, setLoaded] = useState(component !== undefined);\n    useEffect(() => {\n      let isMounted = true;\n      if (!loaded) {\n        // update state to trigger a re-render\n        waitForPromise().then(() => {\n          if (isMounted) {\n            setLoaded(true);\n          }\n        });\n      }\n      return () => {\n        isMounted = false;\n      };\n    });\n    const Component = component || placeholder;\n    return Component ?\n    // placeholder does not get the ref\n    ___EmotionJSX(Component, _extends({ ref: Component === component ? ref : null }, props)) : null;\n  }, \"useState{[loaded, setLoaded](component !== undefined)}\\nuseEffect{}\"));\n  // preload the async component before rendering\n  AsyncComponent.preload = waitForPromise;\n  return AsyncComponent;\n};(function () {var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined;if (!reactHotLoader) {return;}reactHotLoader.register(DefaultPlaceholder, \"DefaultPlaceholder\", \"/app/superset-frontend/src/components/AsyncEsmComponent/index.tsx\");reactHotLoader.register(AsyncEsmComponent, \"AsyncEsmComponent\", \"/app/superset-frontend/src/components/AsyncEsmComponent/index.tsx\");})();;(function () {var leaveModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.leaveModule : undefined;leaveModule && leaveModule(module);})();","map":{"version":3,"sources":["/app/superset-frontend/src/components/AsyncEsmComponent/index.tsx"],"names":[],"mappings":"oeAAA;;;;;;;;;;;;;;;;;AAiBG;AACH,OAAO,KAAP,IAA+B,SAA/B,EAA0C,QAA1C,QAAqE,OAArE;AACA,OAAO,OAAP,MAAoB,YAApB,C;AAWA,SAAS,kBAAT,CAA4B,EAC1B,KAD0B,EAE1B,MAF0B,EAG1B,oBAAoB,GAAG,KAHG,EAI1B,gBAAgB,EAAE,KAJQ,EAA5B,EAKmB;AACjB;AACE;AACA;AACC,IAAA,MAAM,IACL,uBAAK,GAAG,EAAC,uBAAT,EAAiC,KAAK,EAAE,EAAE,KAAF,EAAS,MAAT,EAAiB,GAAG,KAApB,EAAxC;AACG,IAAA,oBAAoB,IAAI,cAAC,OAAD,IAAS,QAAQ,EAAC,UAAlB,GAD3B,CADF;;AAKA;AACA,QATF;AAWD;AAED;;;AAGG;AACH,eAAc,SAAU,iBAAV;AAIZ;;AAEG;AACH,aAPY;AAQZ;;AAEG;AACH,WAAA,GAEW,kBAbC,EAaiB;AAI7B,MAAI,OAAJ;AACA,MAAI,SAAJ;AAEA;;AAEG;AACH,WAAS,cAAT,GAAuB;AACrB,QAAI,CAAC,OAAL,EAAc;AACZ;AACA,MAAA,OAAO;AACL,MAAA,aAAa,oBAAb,GAAmC,aAAnC,GAAmD,aAAa,EADlE;AAED;AACD,QAAI,CAAC,SAAL,EAAgB;AACd,MAAA,OAAO,CAAC,IAAR,CAAa,MAAM,IAAG;AACpB,QAAA,SAAS,GAAK,MAA+C,CAAC,OAAhD;AACZ,QAAA,MADF;AAED,OAHD;AAID;AACD,WAAO,OAAP;AACD;AASD,QAAM,cAAc,gBAAmB,KAAK,CAAC,UAAN,eACrC,SAAS,cAAT,CACE,KADF,EAEE,GAFF,EAEgD;AAE9C,UAAM,CAAC,MAAD,EAAS,SAAT,IAAsB,QAAQ,CAAC,SAAS,KAAK,SAAf,CAApC;AACA,IAAA,SAAS,CAAC,MAAK;AACb,UAAI,SAAS,GAAG,IAAhB;AACA,UAAI,CAAC,MAAL,EAAa;AACX;AACA,QAAA,cAAc,GAAG,IAAjB,CAAsB,MAAK;AACzB,cAAI,SAAJ,EAAe;AACb,YAAA,SAAS,CAAC,IAAD,CAAT;AACD;AACF,SAJD;AAKD;AACD,aAAO,MAAK;AACV,QAAA,SAAS,GAAG,KAAZ;AACD,OAFD;AAGD,KAbQ,CAAT;AAcA,UAAM,SAAS,GAAG,SAAS,IAAI,WAA/B;AACA,WAAO,SAAS;AACd;AACA,kBAAC,SAAD,aAAW,GAAG,EAAE,SAAS,KAAK,SAAd,GAA0B,GAA1B,GAAgC,IAAhD,IAA0D,KAA1D,EAFc,GAGZ,IAHJ;AAID,GAzBoC,yEAAvC;AA2BA;AACA,EAAA,cAAc,CAAC,OAAf,GAAyB,cAAzB;AAEA,SAAO,cAAP;AAGD,C,iLArGQ,kB,qHAuBe,iB","sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React, { CSSProperties, useEffect, useState, RefObject } from 'react';\nimport Loading from '../Loading';\n\nexport type PlaceholderProps = {\n  showLoadingForImport?: boolean;\n  width?: string | number;\n  height?: string | number;\n  placeholderStyle?: CSSProperties;\n} & {\n  [key: string]: any;\n};\n\nfunction DefaultPlaceholder({\n  width,\n  height,\n  showLoadingForImport = false,\n  placeholderStyle: style,\n}: PlaceholderProps) {\n  return (\n    // since `width` defaults to 100%, we can display the placeholder once\n    // height is specified.\n    (height && (\n      <div key=\"async-asm-placeholder\" style={{ width, height, ...style }}>\n        {showLoadingForImport && <Loading position=\"floating\" />}\n      </div>\n    )) ||\n    // `|| null` is for in case of height=0.\n    null\n  );\n}\n\n/**\n * Asynchronously import an ES module as a React component, render a placeholder\n * first (if provided) and re-render once import is complete.\n */\nexport default function AsyncEsmComponent<\n  P = PlaceholderProps,\n  M = React.ComponentType<P> | { default: React.ComponentType<P> }\n>(\n  /**\n   * A promise generator that returns the React component to render.\n   */\n  loadComponent: Promise<M> | (() => Promise<M>),\n  /**\n   * Placeholder while still importing.\n   */\n  placeholder: React.ComponentType<\n    PlaceholderProps & Partial<P>\n  > | null = DefaultPlaceholder,\n) {\n  // component props + placeholder props\n  type FullProps = P & PlaceholderProps;\n  let promise: Promise<M> | undefined;\n  let component: React.ComponentType<FullProps>;\n\n  /**\n   * Safely wait for promise, make sure the loader function only execute once.\n   */\n  function waitForPromise() {\n    if (!promise) {\n      // load component on initialization\n      promise =\n        loadComponent instanceof Promise ? loadComponent : loadComponent();\n    }\n    if (!component) {\n      promise.then(result => {\n        component = ((result as { default?: React.ComponentType<P> }).default ||\n          result) as React.ComponentType<FullProps>;\n      });\n    }\n    return promise;\n  }\n\n  type AsyncComponent = React.ForwardRefExoticComponent<\n    React.PropsWithoutRef<FullProps> &\n      React.RefAttributes<React.ComponentType<FullProps>>\n  > & {\n    preload?: typeof waitForPromise;\n  };\n\n  const AsyncComponent: AsyncComponent = React.forwardRef(\n    function AsyncComponent(\n      props: FullProps,\n      ref: RefObject<React.ComponentType<FullProps>>,\n    ) {\n      const [loaded, setLoaded] = useState(component !== undefined);\n      useEffect(() => {\n        let isMounted = true;\n        if (!loaded) {\n          // update state to trigger a re-render\n          waitForPromise().then(() => {\n            if (isMounted) {\n              setLoaded(true);\n            }\n          });\n        }\n        return () => {\n          isMounted = false;\n        };\n      });\n      const Component = component || placeholder;\n      return Component ? (\n        // placeholder does not get the ref\n        <Component ref={Component === component ? ref : null} {...props} />\n      ) : null;\n    },\n  );\n  // preload the async component before rendering\n  AsyncComponent.preload = waitForPromise;\n\n  return AsyncComponent as AsyncComponent & {\n    preload: typeof waitForPromise;\n  };\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}