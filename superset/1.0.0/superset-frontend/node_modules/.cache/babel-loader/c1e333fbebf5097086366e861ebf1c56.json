{"ast":null,"code":"import \"core-js/modules/web.dom-collections.iterator.js\";import _Object$keys from \"@babel/runtime-corejs3/core-js-stable/object/keys\";import _Object$values from \"@babel/runtime-corejs3/core-js-stable/object/values\";import _someInstanceProperty from \"@babel/runtime-corejs3/core-js-stable/instance/some\";(function () {var enterModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.enterModule : undefined;enterModule && enterModule(module);})();var __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default.signature : function (a) {return a;}; /**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport memoizeOne from 'memoize-one';\nconst findPermission = memoizeOne((perm, view, roles) => {var _context;return !!roles &&\n  _someInstanceProperty(_context = _Object$values(roles)).call(_context, permissions => _someInstanceProperty(permissions).call(permissions, ([perm_, view_]) => perm_ === perm && view_ === view));});const _default =\nfindPermission;export default _default;\n// this should really be a config value,\n// but is hardcoded in backend logic already, so...\nconst ADMIN_ROLE_NAME = 'admin';\nconst isUserAdmin = user => {var _context2;return _someInstanceProperty(_context2 = _Object$keys(user.roles)).call(_context2, role => role.toLowerCase() === ADMIN_ROLE_NAME);};\nconst isUserDashboardOwner = (dashboard, user) => {var _context3;return _someInstanceProperty(_context3 = dashboard.owners).call(_context3, owner => owner.username === user.username);};\nexport const canUserEditDashboard = (dashboard, user) => !!(user != null && user.roles) && (\nisUserAdmin(user) || isUserDashboardOwner(dashboard, user)) &&\nfindPermission('can_write', 'Dashboard', user.roles);;(function () {var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined;if (!reactHotLoader) {return;}reactHotLoader.register(findPermission, \"findPermission\", \"/app/superset-frontend/src/dashboard/util/findPermission.ts\");reactHotLoader.register(ADMIN_ROLE_NAME, \"ADMIN_ROLE_NAME\", \"/app/superset-frontend/src/dashboard/util/findPermission.ts\");reactHotLoader.register(isUserAdmin, \"isUserAdmin\", \"/app/superset-frontend/src/dashboard/util/findPermission.ts\");reactHotLoader.register(isUserDashboardOwner, \"isUserDashboardOwner\", \"/app/superset-frontend/src/dashboard/util/findPermission.ts\");reactHotLoader.register(canUserEditDashboard, \"canUserEditDashboard\", \"/app/superset-frontend/src/dashboard/util/findPermission.ts\");reactHotLoader.register(_default, \"default\", \"/app/superset-frontend/src/dashboard/util/findPermission.ts\");})();;(function () {var leaveModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.leaveModule : undefined;leaveModule && leaveModule(module);})();","map":{"version":3,"sources":["/app/superset-frontend/src/dashboard/util/findPermission.ts"],"names":[],"mappings":"ulBAAA;;;;;;;;;;;;;;;;;AAiBG;AACH,OAAO,UAAP,MAAuB,aAAvB;AAMA,MAAM,cAAc,GAAG,UAAU,CAC/B,CAAC,IAAD,EAAe,IAAf,EAA6B,KAA7B,0BACE,CAAC,CAAC,KAAF;AACA,kDAAc,KAAd,kBAA0B,WAAW,IACnC,sBAAA,WAAW,MAAX,CAAA,WAAW,EAAM,CAAC,CAAC,KAAD,EAAQ,KAAR,CAAD,KAAoB,KAAK,KAAK,IAAV,IAAkB,KAAK,KAAK,IAAtD,CADb,CAFF,EAD+B,CAAjC,C;AAQe,c,CAAf;AAEA;AACA;AACA,MAAM,eAAe,GAAG,OAAxB;AAEA,MAAM,WAAW,GAAI,IAAD,0BAClB,+CAAY,IAAI,CAAC,KAAjB,mBAA6B,IAAI,IAAI,IAAI,CAAC,WAAL,OAAuB,eAA5D,CADkB,EAApB;AAGA,MAAM,oBAAoB,GAAG,CAC3B,SAD2B,EAE3B,IAF2B,2BAGxB,kCAAA,SAAS,CAAC,MAAV,kBAAsB,KAAK,IAAI,KAAK,CAAC,QAAN,KAAmB,IAAI,CAAC,QAAvD,CAHwB,EAA7B;AAKA,OAAO,MAAM,oBAAoB,GAAG,CAClC,SADkC,EAElC,IAFkC,KAIlC,CAAC,EAAC,IAAD,YAAC,IAAI,CAAE,KAAP,CAAD;AACC,WAAW,CAAC,IAAD,CAAX,IAAqB,oBAAoB,CAAC,SAAD,EAAY,IAAZ,CAD1C;AAEA,cAAc,CAAC,WAAD,EAAc,WAAd,EAA2B,IAAI,CAAC,KAAhC,CANT,C,iLAtBD,c,2GAYA,e,4GAEA,W,wGAGA,oB,iHAKO,oB","sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport memoizeOne from 'memoize-one';\nimport { UserWithPermissionsAndRoles } from 'src/types/bootstrapTypes';\nimport Dashboard from 'src/types/Dashboard';\n\ntype UserRoles = Record<string, [string, string][]>;\n\nconst findPermission = memoizeOne(\n  (perm: string, view: string, roles?: UserRoles | null) =>\n    !!roles &&\n    Object.values(roles).some(permissions =>\n      permissions.some(([perm_, view_]) => perm_ === perm && view_ === view),\n    ),\n);\n\nexport default findPermission;\n\n// this should really be a config value,\n// but is hardcoded in backend logic already, so...\nconst ADMIN_ROLE_NAME = 'admin';\n\nconst isUserAdmin = (user: UserWithPermissionsAndRoles) =>\n  Object.keys(user.roles).some(role => role.toLowerCase() === ADMIN_ROLE_NAME);\n\nconst isUserDashboardOwner = (\n  dashboard: Dashboard,\n  user: UserWithPermissionsAndRoles,\n) => dashboard.owners.some(owner => owner.username === user.username);\n\nexport const canUserEditDashboard = (\n  dashboard: Dashboard,\n  user?: UserWithPermissionsAndRoles | null,\n) =>\n  !!user?.roles &&\n  (isUserAdmin(user) || isUserDashboardOwner(dashboard, user)) &&\n  findPermission('can_write', 'Dashboard', user.roles);\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}