{"ast":null,"code":"import \"core-js/modules/web.dom-collections.iterator.js\";import _extends from \"@babel/runtime-corejs3/helpers/extends\";import _findInstanceProperty from \"@babel/runtime-corejs3/core-js-stable/instance/find\";import _spliceInstanceProperty from \"@babel/runtime-corejs3/core-js-stable/instance/splice\";import _Object$keys from \"@babel/runtime-corejs3/core-js-stable/object/keys\";import _reduceInstanceProperty from \"@babel/runtime-corejs3/core-js-stable/instance/reduce\";import _sortInstanceProperty from \"@babel/runtime-corejs3/core-js-stable/instance/sort\";import _filterInstanceProperty from \"@babel/runtime-corejs3/core-js-stable/instance/filter\";import _mapInstanceProperty from \"@babel/runtime-corejs3/core-js-stable/instance/map\";import _Array$from from \"@babel/runtime-corejs3/core-js-stable/array/from\";(function () {var enterModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.enterModule : undefined;enterModule && enterModule(module);})();var __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default.signature : function (a) {return a;}; /**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with work for additional information\n * regarding copyright ownership.  The ASF licenses file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React, { useEffect, useMemo, useState } from 'react';\nimport { logging, SupersetClient, t } from '@superset-ui/core';\nimport { Tooltip } from 'src/components/Tooltip';\nimport { Operators, OPERATOR_ENUM_TO_OPERATOR_TYPE } from 'src/explore/constants';\nimport AdhocFilterPopoverTrigger from 'src/explore/components/controls/FilterControl/AdhocFilterPopoverTrigger';\nimport OptionWrapper from 'src/explore/components/controls/DndColumnSelectControl/OptionWrapper';\nimport DndSelectLabel from 'src/explore/components/controls/DndColumnSelectControl/DndSelectLabel';\nimport AdhocFilter, { CLAUSES, EXPRESSION_TYPES } from 'src/explore/components/controls/FilterControl/AdhocFilter';\nimport AdhocMetric from 'src/explore/components/controls/MetricControl/AdhocMetric';\nimport { DndItemType } from 'src/explore/components/DndItemType';import { jsx as ___EmotionJSX } from \"@emotion/react\";\nconst isDictionaryForAdhocFilter = value => !(value instanceof AdhocFilter) && (value == null ? void 0 : value.expressionType);\nexport const DndFilterSelect = props => {var _props$value;\n  const propsValues = _Array$from((_props$value = props.value) != null ? _props$value : []);\n  const [values, setValues] = useState(_mapInstanceProperty(propsValues).call(propsValues, filter => isDictionaryForAdhocFilter(filter) ? new AdhocFilter(filter) : filter));\n  const [partitionColumn, setPartitionColumn] = useState(undefined);\n  const [newFilterPopoverVisible, setNewFilterPopoverVisible] = useState(false);\n  const [droppedItem, setDroppedItem] = useState(null);\n  const optionsForSelect = (columns, formData) => {var _context, _context2, _context3;\n    const options = _filterInstanceProperty(_context = [\n    ...columns,\n    ..._mapInstanceProperty(_context2 = [...((formData == null ? void 0 : formData.metrics) || []), formData == null ? void 0 : formData.metric]).call(_context2, metric => metric && (\n    typeof metric === 'string' ?\n    { saved_metric_name: metric } :\n    new AdhocMetric(metric)))]).call(_context,\n    option => option);\n    return _sortInstanceProperty(_context3 = _reduceInstanceProperty(options).call(options,\n    (results, option) => {\n      if ('saved_metric_name' in option && option.saved_metric_name) {\n        results.push({\n          ...option,\n          filterOptionName: option.saved_metric_name });\n\n      } else\n      if ('column_name' in option && option.column_name) {\n        results.push({\n          ...option,\n          filterOptionName: `_col_${option.column_name}` });\n\n      } else\n      if (option instanceof AdhocMetric) {\n        results.push({\n          ...option,\n          filterOptionName: `_adhocmetric_${option.label}` });\n\n      }\n      return results;\n    }, [])).call(_context3,\n    (a, b) => {var _localeCompare, _ref;return (_localeCompare = (_ref = a.saved_metric_name || a.column_name || a.label) == null ? void 0 : _ref.localeCompare(b.saved_metric_name || b.column_name || b.label || '')) != null ? _localeCompare : 0;});\n  };\n  const [options, setOptions] = useState(optionsForSelect(props.columns, props.formData));\n  useEffect(() => {\n    const { datasource } = props;\n    if (datasource && datasource.type === 'table') {var _datasource$database;\n      const dbId = (_datasource$database = datasource.database) == null ? void 0 : _datasource$database.id;\n      const { datasource_name: name, schema, is_sqllab_view: isSqllabView } = datasource;\n      if (!isSqllabView && dbId && name && schema) {\n        SupersetClient.get({\n          endpoint: `/superset/extra_table_metadata/${dbId}/${name}/${schema}/` }).\n\n        then(({ json }) => {\n          if (json && json.partitions) {\n            const { partitions } = json;\n            // for now only show latest_partition option\n            // when table datasource has only 1 partition key.\n            if (partitions &&\n            partitions.cols &&\n            _Object$keys(partitions.cols).length === 1) {\n              setPartitionColumn(partitions.cols[0]);\n            }\n          }\n        }).\n        catch(error => {\n          logging.error('fetch extra_table_metadata:', error.statusText);\n        });\n      }\n    }\n  }, []);\n  useEffect(() => {\n    setOptions(optionsForSelect(props.columns, props.formData));\n  }, [props.columns, props.formData]);\n  useEffect(() => {var _context4;\n    setValues(_mapInstanceProperty(_context4 = props.value || []).call(_context4, filter => isDictionaryForAdhocFilter(filter) ? new AdhocFilter(filter) : filter));\n  }, [props.value]);\n  const onClickClose = index => {\n    const valuesCopy = [...values];\n    _spliceInstanceProperty(valuesCopy).call(valuesCopy, index, 1);\n    setValues(valuesCopy);\n    props.onChange(valuesCopy);\n  };\n  const onShiftOptions = (dragIndex, hoverIndex) => {\n    const newValues = [...values];\n    [newValues[hoverIndex], newValues[dragIndex]] = [\n    newValues[dragIndex],\n    newValues[hoverIndex]];\n\n    setValues(newValues);\n  };\n  const getMetricExpression = savedMetricName => {var _props$savedMetrics$f, _context5;return (_props$savedMetrics$f = _findInstanceProperty(_context5 = props.savedMetrics).call(_context5, savedMetric => savedMetric.metric_name === savedMetricName)) == null ? void 0 : _props$savedMetrics$f.expression;};\n  const mapOption = option => {\n    // already a AdhocFilter, skip\n    if (option instanceof AdhocFilter) {\n      return option;\n    }\n    const filterOptions = option;\n    // via datasource saved metric\n    if (filterOptions.saved_metric_name) {\n      return new AdhocFilter({\n        expressionType: props.datasource.type === 'druid' ?\n        EXPRESSION_TYPES.SIMPLE :\n        EXPRESSION_TYPES.SQL,\n        subject: props.datasource.type === 'druid' ?\n        filterOptions.saved_metric_name :\n        getMetricExpression(filterOptions.saved_metric_name),\n        operator: OPERATOR_ENUM_TO_OPERATOR_TYPE[Operators.GREATER_THAN].operation,\n        operatorId: Operators.GREATER_THAN,\n        comparator: 0,\n        clause: CLAUSES.HAVING });\n\n    }\n    // has a custom label, meaning it's custom column\n    if (filterOptions.label) {\n      return new AdhocFilter({\n        expressionType: props.datasource.type === 'druid' ?\n        EXPRESSION_TYPES.SIMPLE :\n        EXPRESSION_TYPES.SQL,\n        subject: props.datasource.type === 'druid' ?\n        filterOptions.label :\n        new AdhocMetric(option).translateToSql(),\n        operator: OPERATOR_ENUM_TO_OPERATOR_TYPE[Operators.GREATER_THAN].operation,\n        operatorId: Operators.GREATER_THAN,\n        comparator: 0,\n        clause: CLAUSES.HAVING });\n\n    }\n    // add a new filter item\n    if (filterOptions.column_name) {\n      return new AdhocFilter({\n        expressionType: EXPRESSION_TYPES.SIMPLE,\n        subject: filterOptions.column_name,\n        operator: OPERATOR_ENUM_TO_OPERATOR_TYPE[Operators.EQUALS].operation,\n        operatorId: Operators.EQUALS,\n        comparator: '',\n        clause: CLAUSES.WHERE,\n        isNew: true });\n\n    }\n    return null;\n  };\n  const onFilterEdit = changedFilter => {\n    props.onChange(_mapInstanceProperty(values).call(values, value => {\n      if (value.filterOptionName === changedFilter.filterOptionName) {\n        return changedFilter;\n      }\n      return value;\n    }));\n  };\n  const onNewFilter = newFilter => {\n    const mappedOption = mapOption(newFilter);\n    if (mappedOption) {\n      const newValues = [...values, mappedOption];\n      setValues(newValues);\n      props.onChange(newValues);\n    }\n  };\n  const togglePopover = visible => {\n    setNewFilterPopoverVisible(visible);\n  };\n  const closePopover = () => {\n    togglePopover(false);\n  };\n  const valuesRenderer = () => _mapInstanceProperty(values).call(values, (adhocFilter, index) => {\n    const label = adhocFilter.getDefaultLabel();\n    return ___EmotionJSX(AdhocFilterPopoverTrigger, { key: index, adhocFilter: adhocFilter, options: options, datasource: props.datasource, onFilterEdit: onFilterEdit, partitionColumn: partitionColumn },\n    ___EmotionJSX(OptionWrapper, { key: index, index: index, clickClose: onClickClose, onShiftOptions: onShiftOptions, type: DndItemType.FilterOption, withCaret: true, isExtra: adhocFilter.isExtra },\n    ___EmotionJSX(Tooltip, { title: label }, label)));\n\n\n  });\n  const adhocFilter = useMemo(() => {\n    if (droppedItem != null && droppedItem.metric_name) {\n      return new AdhocFilter({\n        expressionType: EXPRESSION_TYPES.SQL,\n        clause: CLAUSES.HAVING,\n        sqlExpression: droppedItem == null ? void 0 : droppedItem.expression });\n\n    }\n    if (droppedItem instanceof AdhocMetric) {\n      return new AdhocFilter({\n        expressionType: EXPRESSION_TYPES.SQL,\n        clause: CLAUSES.HAVING,\n        sqlExpression: droppedItem == null ? void 0 : droppedItem.translateToSql() });\n\n    }\n    return new AdhocFilter({\n      subject: droppedItem == null ? void 0 : droppedItem.column_name });\n\n  }, [droppedItem]);\n  return ___EmotionJSX(React.Fragment, null,\n  ___EmotionJSX(DndSelectLabel, _extends({ onDrop: item => {\n      setDroppedItem(item.value);\n      togglePopover(true);\n    }, canDrop: () => true, valuesRenderer: valuesRenderer, accept: [\n    DndItemType.Column,\n    DndItemType.Metric,\n    DndItemType.MetricOption,\n    DndItemType.AdhocMetricOption],\n    ghostButtonText: t('Drop columns or metrics') }, props)),\n  ___EmotionJSX(AdhocFilterPopoverTrigger, { adhocFilter: adhocFilter, options: options, datasource: props.datasource, onFilterEdit: onNewFilter, partitionColumn: partitionColumn, isControlledComponent: true, visible: newFilterPopoverVisible, togglePopover: togglePopover, closePopover: closePopover, createNew: true },\n  ___EmotionJSX(\"div\", null)));\n\n\n};__signature__(DndFilterSelect, \"useState{[values, setValues](propsValues.map((filter) => isDictionaryForAdhocFilter(filter) ? new AdhocFilter(filter) : filter))}\\nuseState{[partitionColumn, setPartitionColumn](undefined)}\\nuseState{[newFilterPopoverVisible, setNewFilterPopoverVisible](false)}\\nuseState{[droppedItem, setDroppedItem](null)}\\nuseState{[options, setOptions](optionsForSelect(props.columns, props.formData))}\\nuseEffect{}\\nuseEffect{}\\nuseEffect{}\\nuseMemo{adhocFilter}\");;(function () {var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined;if (!reactHotLoader) {return;}reactHotLoader.register(isDictionaryForAdhocFilter, \"isDictionaryForAdhocFilter\", \"/app/superset-frontend/src/explore/components/controls/DndColumnSelectControl/DndFilterSelect.tsx\");reactHotLoader.register(DndFilterSelect, \"DndFilterSelect\", \"/app/superset-frontend/src/explore/components/controls/DndColumnSelectControl/DndFilterSelect.tsx\");})();;(function () {var leaveModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.leaveModule : undefined;leaveModule && leaveModule(module);})();","map":{"version":3,"sources":["/app/superset-frontend/src/explore/components/controls/DndColumnSelectControl/DndFilterSelect.tsx"],"names":[],"mappings":"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","sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with work for additional information\n * regarding copyright ownership.  The ASF licenses file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React, { useEffect, useMemo, useState } from 'react';\nimport { logging, SupersetClient, t, Metric } from '@superset-ui/core';\nimport { ColumnMeta } from '@superset-ui/chart-controls';\nimport { Tooltip } from 'src/components/Tooltip';\nimport {\n  Operators,\n  OPERATOR_ENUM_TO_OPERATOR_TYPE,\n} from 'src/explore/constants';\nimport { OptionSortType } from 'src/explore/types';\nimport {\n  DndFilterSelectProps,\n  OptionValueType,\n} from 'src/explore/components/controls/DndColumnSelectControl/types';\nimport AdhocFilterPopoverTrigger from 'src/explore/components/controls/FilterControl/AdhocFilterPopoverTrigger';\nimport OptionWrapper from 'src/explore/components/controls/DndColumnSelectControl/OptionWrapper';\nimport DndSelectLabel from 'src/explore/components/controls/DndColumnSelectControl/DndSelectLabel';\nimport AdhocFilter, {\n  CLAUSES,\n  EXPRESSION_TYPES,\n} from 'src/explore/components/controls/FilterControl/AdhocFilter';\nimport AdhocMetric from 'src/explore/components/controls/MetricControl/AdhocMetric';\nimport {\n  DatasourcePanelDndItem,\n  DndItemValue,\n} from 'src/explore/components/DatasourcePanel/types';\nimport { DndItemType } from 'src/explore/components/DndItemType';\n\nconst isDictionaryForAdhocFilter = (value: OptionValueType) =>\n  !(value instanceof AdhocFilter) && value?.expressionType;\n\nexport const DndFilterSelect = (props: DndFilterSelectProps) => {\n  const propsValues = Array.from(props.value ?? []);\n  const [values, setValues] = useState(\n    propsValues.map((filter: OptionValueType) =>\n      isDictionaryForAdhocFilter(filter) ? new AdhocFilter(filter) : filter,\n    ),\n  );\n  const [partitionColumn, setPartitionColumn] = useState(undefined);\n  const [newFilterPopoverVisible, setNewFilterPopoverVisible] = useState(false);\n  const [droppedItem, setDroppedItem] = useState<DndItemValue | null>(null);\n\n  const optionsForSelect = (\n    columns: ColumnMeta[],\n    formData: Record<string, any>,\n  ) => {\n    const options: OptionSortType[] = [\n      ...columns,\n      ...[...(formData?.metrics || []), formData?.metric].map(\n        metric =>\n          metric &&\n          (typeof metric === 'string'\n            ? { saved_metric_name: metric }\n            : new AdhocMetric(metric)),\n      ),\n    ].filter(option => option);\n\n    return options\n      .reduce(\n        (\n          results: (OptionSortType & { filterOptionName: string })[],\n          option,\n        ) => {\n          if ('saved_metric_name' in option && option.saved_metric_name) {\n            results.push({\n              ...option,\n              filterOptionName: option.saved_metric_name,\n            });\n          } else if ('column_name' in option && option.column_name) {\n            results.push({\n              ...option,\n              filterOptionName: `_col_${option.column_name}`,\n            });\n          } else if (option instanceof AdhocMetric) {\n            results.push({\n              ...option,\n              filterOptionName: `_adhocmetric_${option.label}`,\n            });\n          }\n          return results;\n        },\n        [],\n      )\n      .sort(\n        (a: OptionSortType, b: OptionSortType) =>\n          (a.saved_metric_name || a.column_name || a.label)?.localeCompare(\n            b.saved_metric_name || b.column_name || b.label || '',\n          ) ?? 0,\n      );\n  };\n  const [options, setOptions] = useState(\n    optionsForSelect(props.columns, props.formData),\n  );\n\n  useEffect(() => {\n    const { datasource } = props;\n    if (datasource && datasource.type === 'table') {\n      const dbId = datasource.database?.id;\n      const {\n        datasource_name: name,\n        schema,\n        is_sqllab_view: isSqllabView,\n      } = datasource;\n\n      if (!isSqllabView && dbId && name && schema) {\n        SupersetClient.get({\n          endpoint: `/superset/extra_table_metadata/${dbId}/${name}/${schema}/`,\n        })\n          .then(({ json }: { json: Record<string, any> }) => {\n            if (json && json.partitions) {\n              const { partitions } = json;\n              // for now only show latest_partition option\n              // when table datasource has only 1 partition key.\n              if (\n                partitions &&\n                partitions.cols &&\n                Object.keys(partitions.cols).length === 1\n              ) {\n                setPartitionColumn(partitions.cols[0]);\n              }\n            }\n          })\n          .catch((error: Record<string, any>) => {\n            logging.error('fetch extra_table_metadata:', error.statusText);\n          });\n      }\n    }\n  }, []);\n\n  useEffect(() => {\n    setOptions(optionsForSelect(props.columns, props.formData));\n  }, [props.columns, props.formData]);\n\n  useEffect(() => {\n    setValues(\n      (props.value || []).map((filter: OptionValueType) =>\n        isDictionaryForAdhocFilter(filter) ? new AdhocFilter(filter) : filter,\n      ),\n    );\n  }, [props.value]);\n\n  const onClickClose = (index: number) => {\n    const valuesCopy = [...values];\n    valuesCopy.splice(index, 1);\n    setValues(valuesCopy);\n    props.onChange(valuesCopy);\n  };\n\n  const onShiftOptions = (dragIndex: number, hoverIndex: number) => {\n    const newValues = [...values];\n    [newValues[hoverIndex], newValues[dragIndex]] = [\n      newValues[dragIndex],\n      newValues[hoverIndex],\n    ];\n    setValues(newValues);\n  };\n\n  const getMetricExpression = (savedMetricName: string) =>\n    props.savedMetrics.find(\n      (savedMetric: Metric) => savedMetric.metric_name === savedMetricName,\n    )?.expression;\n\n  const mapOption = (option: OptionValueType) => {\n    // already a AdhocFilter, skip\n    if (option instanceof AdhocFilter) {\n      return option;\n    }\n    const filterOptions = option as Record<string, any>;\n    // via datasource saved metric\n    if (filterOptions.saved_metric_name) {\n      return new AdhocFilter({\n        expressionType:\n          props.datasource.type === 'druid'\n            ? EXPRESSION_TYPES.SIMPLE\n            : EXPRESSION_TYPES.SQL,\n        subject:\n          props.datasource.type === 'druid'\n            ? filterOptions.saved_metric_name\n            : getMetricExpression(filterOptions.saved_metric_name),\n        operator:\n          OPERATOR_ENUM_TO_OPERATOR_TYPE[Operators.GREATER_THAN].operation,\n        operatorId: Operators.GREATER_THAN,\n        comparator: 0,\n        clause: CLAUSES.HAVING,\n      });\n    }\n    // has a custom label, meaning it's custom column\n    if (filterOptions.label) {\n      return new AdhocFilter({\n        expressionType:\n          props.datasource.type === 'druid'\n            ? EXPRESSION_TYPES.SIMPLE\n            : EXPRESSION_TYPES.SQL,\n        subject:\n          props.datasource.type === 'druid'\n            ? filterOptions.label\n            : new AdhocMetric(option).translateToSql(),\n        operator:\n          OPERATOR_ENUM_TO_OPERATOR_TYPE[Operators.GREATER_THAN].operation,\n        operatorId: Operators.GREATER_THAN,\n        comparator: 0,\n        clause: CLAUSES.HAVING,\n      });\n    }\n    // add a new filter item\n    if (filterOptions.column_name) {\n      return new AdhocFilter({\n        expressionType: EXPRESSION_TYPES.SIMPLE,\n        subject: filterOptions.column_name,\n        operator: OPERATOR_ENUM_TO_OPERATOR_TYPE[Operators.EQUALS].operation,\n        operatorId: Operators.EQUALS,\n        comparator: '',\n        clause: CLAUSES.WHERE,\n        isNew: true,\n      });\n    }\n    return null;\n  };\n\n  const onFilterEdit = (changedFilter: AdhocFilter) => {\n    props.onChange(\n      values.map((value: AdhocFilter) => {\n        if (value.filterOptionName === changedFilter.filterOptionName) {\n          return changedFilter;\n        }\n        return value;\n      }),\n    );\n  };\n\n  const onNewFilter = (newFilter: AdhocFilter) => {\n    const mappedOption = mapOption(newFilter);\n    if (mappedOption) {\n      const newValues = [...values, mappedOption];\n      setValues(newValues);\n      props.onChange(newValues);\n    }\n  };\n\n  const togglePopover = (visible: boolean) => {\n    setNewFilterPopoverVisible(visible);\n  };\n\n  const closePopover = () => {\n    togglePopover(false);\n  };\n\n  const valuesRenderer = () =>\n    values.map((adhocFilter: AdhocFilter, index: number) => {\n      const label = adhocFilter.getDefaultLabel();\n      return (\n        <AdhocFilterPopoverTrigger\n          key={index}\n          adhocFilter={adhocFilter}\n          options={options}\n          datasource={props.datasource}\n          onFilterEdit={onFilterEdit}\n          partitionColumn={partitionColumn}\n        >\n          <OptionWrapper\n            key={index}\n            index={index}\n            clickClose={onClickClose}\n            onShiftOptions={onShiftOptions}\n            type={DndItemType.FilterOption}\n            withCaret\n            isExtra={adhocFilter.isExtra}\n          >\n            <Tooltip title={label}>{label}</Tooltip>\n          </OptionWrapper>\n        </AdhocFilterPopoverTrigger>\n      );\n    });\n\n  const adhocFilter = useMemo(() => {\n    if (droppedItem?.metric_name) {\n      return new AdhocFilter({\n        expressionType: EXPRESSION_TYPES.SQL,\n        clause: CLAUSES.HAVING,\n        sqlExpression: droppedItem?.expression,\n      });\n    }\n    if (droppedItem instanceof AdhocMetric) {\n      return new AdhocFilter({\n        expressionType: EXPRESSION_TYPES.SQL,\n        clause: CLAUSES.HAVING,\n        sqlExpression: (droppedItem as AdhocMetric)?.translateToSql(),\n      });\n    }\n    return new AdhocFilter({\n      subject: (droppedItem as ColumnMeta)?.column_name,\n    });\n  }, [droppedItem]);\n\n  return (\n    <>\n      <DndSelectLabel<OptionValueType, OptionValueType[]>\n        onDrop={(item: DatasourcePanelDndItem) => {\n          setDroppedItem(item.value);\n          togglePopover(true);\n        }}\n        canDrop={() => true}\n        valuesRenderer={valuesRenderer}\n        accept={[\n          DndItemType.Column,\n          DndItemType.Metric,\n          DndItemType.MetricOption,\n          DndItemType.AdhocMetricOption,\n        ]}\n        ghostButtonText={t('Drop columns or metrics')}\n        {...props}\n      />\n      <AdhocFilterPopoverTrigger\n        adhocFilter={adhocFilter}\n        options={options}\n        datasource={props.datasource}\n        onFilterEdit={onNewFilter}\n        partitionColumn={partitionColumn}\n        isControlledComponent\n        visible={newFilterPopoverVisible}\n        togglePopover={togglePopover}\n        closePopover={closePopover}\n        createNew\n      >\n        <div />\n      </AdhocFilterPopoverTrigger>\n    </>\n  );\n};\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}