{"ast":null,"code":"import \"core-js/modules/web.dom-collections.iterator.js\";import _bindInstanceProperty from \"@babel/runtime-corejs3/core-js-stable/instance/bind\";(function () {var enterModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.enterModule : undefined;enterModule && enterModule(module);})();var __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default.signature : function (a) {return a;}; /**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { getEmptyImage } from 'react-dnd-html5-backend';\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { DragSource, DropTarget } from 'react-dnd';\nimport cx from 'classnames';\n\nimport { componentShape } from '../../util/propShapes';\nimport { dragConfig, dropConfig } from './dragDroppableConfig';\nimport {\nDROP_TOP,\nDROP_RIGHT,\nDROP_BOTTOM,\nDROP_LEFT } from\n'../../util/getDropPosition';import { jsx as ___EmotionJSX } from \"@emotion/react\";\n\nconst propTypes = {\n  children: PropTypes.func,\n  className: PropTypes.string,\n  component: componentShape.isRequired,\n  parentComponent: componentShape,\n  depth: PropTypes.number.isRequired,\n  disableDragdrop: PropTypes.bool,\n  orientation: PropTypes.oneOf(['row', 'column']),\n  index: PropTypes.number.isRequired,\n  style: PropTypes.object,\n  onDrop: PropTypes.func,\n  editMode: PropTypes.bool.isRequired,\n  useEmptyDragPreview: PropTypes.bool,\n\n  // from react-dnd\n  isDragging: PropTypes.bool.isRequired,\n  isDraggingOver: PropTypes.bool.isRequired,\n  isDraggingOverShallow: PropTypes.bool.isRequired,\n  droppableRef: PropTypes.func.isRequired,\n  dragSourceRef: PropTypes.func.isRequired,\n  dragPreviewRef: PropTypes.func.isRequired };\n\n\nconst defaultProps = {\n  className: null,\n  style: null,\n  parentComponent: null,\n  disableDragdrop: false,\n  children() {},\n  onDrop() {},\n  orientation: 'row',\n  useEmptyDragPreview: false };\n\n\n// export unwrapped component for testing\nexport class UnwrappedDragDroppable extends React.Component {\n  constructor(props) {var _context;\n    super(props);\n    this.state = {\n      dropIndicator: null // this gets set/modified by the react-dnd HOCs\n    };\n    this.setRef = _bindInstanceProperty(_context = this.setRef).call(_context, this);\n  }\n\n  componentDidMount() {\n    this.mounted = true;\n  }\n\n  componentWillUnmount() {\n    this.mounted = false;\n  }\n\n  setRef(ref) {\n    this.ref = ref;\n    // this is needed for a custom drag preview\n    if (this.props.useEmptyDragPreview) {\n      this.props.dragPreviewRef(getEmptyImage(), {\n        // IE fallback: specify that we'd rather screenshot the node\n        // when it already knows it's being dragged so we can hide it with CSS.\n        captureDraggingState: true });\n\n    } else {\n      this.props.dragPreviewRef(ref);\n    }\n    this.props.droppableRef(ref);\n  }\n\n  render() {\n    const {\n      children,\n      className,\n      orientation,\n      dragSourceRef,\n      isDragging,\n      isDraggingOver,\n      style,\n      editMode } =\n    this.props;\n\n    const { dropIndicator } = this.state;\n    const dropIndicatorProps =\n    isDraggingOver && dropIndicator ?\n    {\n      className: cx(\n      'drop-indicator',\n      dropIndicator === DROP_TOP && 'drop-indicator--top',\n      dropIndicator === DROP_BOTTOM && 'drop-indicator--bottom',\n      dropIndicator === DROP_LEFT && 'drop-indicator--left',\n      dropIndicator === DROP_RIGHT && 'drop-indicator--right') } :\n\n\n    null;\n\n    const childProps = editMode ?\n    {\n      dragSourceRef,\n      dropIndicatorProps } :\n\n    {};\n\n    return (\n      ___EmotionJSX(\"div\", {\n        style: style,\n        ref: this.setRef,\n        \"data-test\": \"dragdroppable-object\",\n        className: cx(\n        'dragdroppable',\n        orientation === 'row' && 'dragdroppable-row',\n        orientation === 'column' && 'dragdroppable-column',\n        isDragging && 'dragdroppable--dragging',\n        className) },\n\n\n      children(childProps)));\n\n\n  } // @ts-ignore\n  __reactstandin__regenerateByEval(key, code) {// @ts-ignore\n    this[key] = eval(code);}}\nUnwrappedDragDroppable.propTypes = propTypes;\nUnwrappedDragDroppable.defaultProps = defaultProps;\n\n// note that the composition order here determines using\n// component.method() vs decoratedComponentInstance.method() in the drag/drop config\nconst _default = DragSource(...dragConfig)(\nDropTarget(...dropConfig)(UnwrappedDragDroppable));export default _default;;(function () {var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined;if (!reactHotLoader) {return;}reactHotLoader.register(propTypes, \"propTypes\", \"/app/superset-frontend/src/dashboard/components/dnd/DragDroppable.jsx\");reactHotLoader.register(defaultProps, \"defaultProps\", \"/app/superset-frontend/src/dashboard/components/dnd/DragDroppable.jsx\");reactHotLoader.register(UnwrappedDragDroppable, \"UnwrappedDragDroppable\", \"/app/superset-frontend/src/dashboard/components/dnd/DragDroppable.jsx\");reactHotLoader.register(_default, \"default\", \"/app/superset-frontend/src/dashboard/components/dnd/DragDroppable.jsx\");})();;(function () {var leaveModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.leaveModule : undefined;leaveModule && leaveModule(module);})();","map":{"version":3,"sources":["/app/superset-frontend/src/dashboard/components/dnd/DragDroppable.jsx"],"names":["getEmptyImage","React","PropTypes","DragSource","DropTarget","cx","componentShape","dragConfig","dropConfig","DROP_TOP","DROP_RIGHT","DROP_BOTTOM","DROP_LEFT","propTypes","children","func","className","string","component","isRequired","parentComponent","depth","number","disableDragdrop","bool","orientation","oneOf","index","style","object","onDrop","editMode","useEmptyDragPreview","isDragging","isDraggingOver","isDraggingOverShallow","droppableRef","dragSourceRef","dragPreviewRef","defaultProps","UnwrappedDragDroppable","Component","constructor","props","state","dropIndicator","setRef","componentDidMount","mounted","componentWillUnmount","ref","captureDraggingState","render","dropIndicatorProps","childProps"],"mappings":"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","sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { getEmptyImage } from 'react-dnd-html5-backend';\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { DragSource, DropTarget } from 'react-dnd';\nimport cx from 'classnames';\n\nimport { componentShape } from '../../util/propShapes';\nimport { dragConfig, dropConfig } from './dragDroppableConfig';\nimport {\n  DROP_TOP,\n  DROP_RIGHT,\n  DROP_BOTTOM,\n  DROP_LEFT,\n} from '../../util/getDropPosition';\n\nconst propTypes = {\n  children: PropTypes.func,\n  className: PropTypes.string,\n  component: componentShape.isRequired,\n  parentComponent: componentShape,\n  depth: PropTypes.number.isRequired,\n  disableDragdrop: PropTypes.bool,\n  orientation: PropTypes.oneOf(['row', 'column']),\n  index: PropTypes.number.isRequired,\n  style: PropTypes.object,\n  onDrop: PropTypes.func,\n  editMode: PropTypes.bool.isRequired,\n  useEmptyDragPreview: PropTypes.bool,\n\n  // from react-dnd\n  isDragging: PropTypes.bool.isRequired,\n  isDraggingOver: PropTypes.bool.isRequired,\n  isDraggingOverShallow: PropTypes.bool.isRequired,\n  droppableRef: PropTypes.func.isRequired,\n  dragSourceRef: PropTypes.func.isRequired,\n  dragPreviewRef: PropTypes.func.isRequired,\n};\n\nconst defaultProps = {\n  className: null,\n  style: null,\n  parentComponent: null,\n  disableDragdrop: false,\n  children() {},\n  onDrop() {},\n  orientation: 'row',\n  useEmptyDragPreview: false,\n};\n\n// export unwrapped component for testing\nexport class UnwrappedDragDroppable extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      dropIndicator: null, // this gets set/modified by the react-dnd HOCs\n    };\n    this.setRef = this.setRef.bind(this);\n  }\n\n  componentDidMount() {\n    this.mounted = true;\n  }\n\n  componentWillUnmount() {\n    this.mounted = false;\n  }\n\n  setRef(ref) {\n    this.ref = ref;\n    // this is needed for a custom drag preview\n    if (this.props.useEmptyDragPreview) {\n      this.props.dragPreviewRef(getEmptyImage(), {\n        // IE fallback: specify that we'd rather screenshot the node\n        // when it already knows it's being dragged so we can hide it with CSS.\n        captureDraggingState: true,\n      });\n    } else {\n      this.props.dragPreviewRef(ref);\n    }\n    this.props.droppableRef(ref);\n  }\n\n  render() {\n    const {\n      children,\n      className,\n      orientation,\n      dragSourceRef,\n      isDragging,\n      isDraggingOver,\n      style,\n      editMode,\n    } = this.props;\n\n    const { dropIndicator } = this.state;\n    const dropIndicatorProps =\n      isDraggingOver && dropIndicator\n        ? {\n            className: cx(\n              'drop-indicator',\n              dropIndicator === DROP_TOP && 'drop-indicator--top',\n              dropIndicator === DROP_BOTTOM && 'drop-indicator--bottom',\n              dropIndicator === DROP_LEFT && 'drop-indicator--left',\n              dropIndicator === DROP_RIGHT && 'drop-indicator--right',\n            ),\n          }\n        : null;\n\n    const childProps = editMode\n      ? {\n          dragSourceRef,\n          dropIndicatorProps,\n        }\n      : {};\n\n    return (\n      <div\n        style={style}\n        ref={this.setRef}\n        data-test=\"dragdroppable-object\"\n        className={cx(\n          'dragdroppable',\n          orientation === 'row' && 'dragdroppable-row',\n          orientation === 'column' && 'dragdroppable-column',\n          isDragging && 'dragdroppable--dragging',\n          className,\n        )}\n      >\n        {children(childProps)}\n      </div>\n    );\n  }\n}\n\nUnwrappedDragDroppable.propTypes = propTypes;\nUnwrappedDragDroppable.defaultProps = defaultProps;\n\n// note that the composition order here determines using\n// component.method() vs decoratedComponentInstance.method() in the drag/drop config\nexport default DragSource(...dragConfig)(\n  DropTarget(...dropConfig)(UnwrappedDragDroppable),\n);\n"]},"metadata":{},"sourceType":"module"}