{"ast":null,"code":"import \"core-js/modules/web.dom-collections.iterator.js\";import _filterInstanceProperty from \"@babel/runtime-corejs3/core-js-stable/instance/filter\";import _indexOfInstanceProperty from \"@babel/runtime-corejs3/core-js-stable/instance/index-of\";import _sortInstanceProperty from \"@babel/runtime-corejs3/core-js-stable/instance/sort\";import _uniqWith from \"lodash/uniqWith\";(function () {var enterModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.enterModule : undefined;enterModule && enterModule(module);})();var __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default.signature : function (a) {return a;}; /**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { connect } from 'react-redux';\nimport { bindActionCreators } from 'redux';\n\nimport { setDirectPathToChild } from 'src/dashboard/actions/dashboardState';\nimport { selectIndicatorsForChart, IndicatorStatus, selectNativeIndicatorsForChart } from 'src/dashboard/components/FiltersBadge/selectors';\nimport FiltersBadge from 'src/dashboard/components/FiltersBadge';\nconst mapDispatchToProps = dispatch => bindActionCreators({\n  onHighlightFilterSource: setDirectPathToChild },\ndispatch);\nconst sortByStatus = indicators => {\n  const statuses = [\n  IndicatorStatus.Applied,\n  IndicatorStatus.Unset,\n  IndicatorStatus.Incompatible];\n\n  return _sortInstanceProperty(indicators).call(indicators, (a, b) => _indexOfInstanceProperty(statuses).call(statuses, a.status) -\n  _indexOfInstanceProperty(statuses).call(statuses, b.status));\n};\nconst mapStateToProps = ({ datasources, dashboardFilters, nativeFilters, dashboardInfo, charts, dataMask, dashboardLayout: { present } }, { chartId }) => {var _dashboardInfo$metada;\n  const dashboardIndicators = selectIndicatorsForChart(chartId, dashboardFilters, datasources, charts);\n  const nativeIndicators = selectNativeIndicatorsForChart(nativeFilters, dataMask, chartId, charts, present, (_dashboardInfo$metada = dashboardInfo.metadata) == null ? void 0 : _dashboardInfo$metada.chart_configuration);\n  const indicators = _uniqWith(sortByStatus([...dashboardIndicators, ...nativeIndicators]), (ind1, ind2) => ind1.column === ind2.column &&\n  ind1.name === ind2.name && (\n  ind1.status !== IndicatorStatus.Applied ||\n  ind2.status !== IndicatorStatus.Applied));\n  const appliedCrossFilterIndicators = _filterInstanceProperty(indicators).call(indicators, indicator => indicator.status === IndicatorStatus.CrossFilterApplied);\n  const appliedIndicators = _filterInstanceProperty(indicators).call(indicators, indicator => indicator.status === IndicatorStatus.Applied);\n  const unsetIndicators = _filterInstanceProperty(indicators).call(indicators, indicator => indicator.status === IndicatorStatus.Unset);\n  const incompatibleIndicators = _filterInstanceProperty(indicators).call(indicators, indicator => indicator.status === IndicatorStatus.Incompatible);\n  return {\n    chartId,\n    appliedIndicators,\n    appliedCrossFilterIndicators,\n    unsetIndicators,\n    incompatibleIndicators };\n\n};const _default =\nconnect(mapStateToProps, mapDispatchToProps)(FiltersBadge);export default _default;;(function () {var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined;if (!reactHotLoader) {return;}reactHotLoader.register(mapDispatchToProps, \"mapDispatchToProps\", \"/app/superset-frontend/src/dashboard/containers/FiltersBadge.tsx\");reactHotLoader.register(sortByStatus, \"sortByStatus\", \"/app/superset-frontend/src/dashboard/containers/FiltersBadge.tsx\");reactHotLoader.register(mapStateToProps, \"mapStateToProps\", \"/app/superset-frontend/src/dashboard/containers/FiltersBadge.tsx\");reactHotLoader.register(_default, \"default\", \"/app/superset-frontend/src/dashboard/containers/FiltersBadge.tsx\");})();;(function () {var leaveModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.leaveModule : undefined;leaveModule && leaveModule(module);})();","map":{"version":3,"sources":["/app/superset-frontend/src/dashboard/containers/FiltersBadge.tsx"],"names":[],"mappings":"4pBAAA;;;;;;;;;;;;;;;;;AAiBG;AACH,SAAS,OAAT,QAAwB,aAAxB;AACA,SAAS,kBAAT,QAA6C,OAA7C;;AAEA,SAAS,oBAAT,QAAqC,sCAArC;AACA,SACE,wBADF,EAGE,eAHF,EAIE,8BAJF,QAKO,iDALP;AAMA,OAAO,YAAP,MAAyB,uCAAzB;AAMA,MAAM,kBAAkB,GAAI,QAAD,IACzB,kBAAkB,CAChB;AACE,EAAA,uBAAuB,EAAE,oBAD3B,EADgB;AAIhB,QAJgB,CADpB;AAQA,MAAM,YAAY,GAAI,UAAD,IAAyC;AAC5D,QAAM,QAAQ,GAAG;AACf,EAAA,eAAe,CAAC,OADD;AAEf,EAAA,eAAe,CAAC,KAFD;AAGf,EAAA,eAAe,CAAC,YAHD,CAAjB;;AAKA,SAAO,sBAAA,UAAU,MAAV,CAAA,UAAU,EACf,CAAC,CAAD,EAAI,CAAJ,KACE,yBAAA,QAAQ,MAAR,CAAA,QAAQ,EAAS,CAAC,CAAC,MAAX,CAAR;AACA,2BAAA,QAAQ,MAAR,CAAA,QAAQ,EAAS,CAAC,CAAC,MAAX,CAHK,CAAjB;AAKD,CAXD;AAaA,MAAM,eAAe,GAAG,CACtB,EACE,WADF,EAEE,gBAFF,EAGE,aAHF,EAIE,aAJF,EAKE,MALF,EAME,QANF,EAOE,eAAe,EAAE,EAAE,OAAF,EAPnB,EADsB,EAUtB,EAAE,OAAF,EAVsB,KAWpB;AACF,QAAM,mBAAmB,GAAG,wBAAwB,CAClD,OADkD,EAElD,gBAFkD,EAGlD,WAHkD,EAIlD,MAJkD,CAApD;AAOA,QAAM,gBAAgB,GAAG,8BAA8B,CACrD,aADqD,EAErD,QAFqD,EAGrD,OAHqD,EAIrD,MAJqD,EAKrD,OALqD,2BAMrD,aAAa,CAAC,QANuC,qBAMrD,sBAAwB,mBAN6B,CAAvD;AASA,QAAM,UAAU,GAAG,UACjB,YAAY,CAAC,CAAC,GAAG,mBAAJ,EAAyB,GAAG,gBAA5B,CAAD,CADK,EAEjB,CAAC,IAAD,EAAO,IAAP,KACE,IAAI,CAAC,MAAL,KAAgB,IAAI,CAAC,MAArB;AACA,EAAA,IAAI,CAAC,IAAL,KAAc,IAAI,CAAC,IADnB;AAEC,EAAA,IAAI,CAAC,MAAL,KAAgB,eAAe,CAAC,OAAhC;AACC,EAAA,IAAI,CAAC,MAAL,KAAgB,eAAe,CAAC,OAHlC,CAHe,CAAnB;AASA,QAAM,4BAA4B,GAAG,wBAAA,UAAU,MAAV,CAAA,UAAU,EAC7C,SAAS,IAAI,SAAS,CAAC,MAAV,KAAqB,eAAe,CAAC,kBADL,CAA/C;AAGA,QAAM,iBAAiB,GAAG,wBAAA,UAAU,MAAV,CAAA,UAAU,EAClC,SAAS,IAAI,SAAS,CAAC,MAAV,KAAqB,eAAe,CAAC,OADhB,CAApC;AAGA,QAAM,eAAe,GAAG,wBAAA,UAAU,MAAV,CAAA,UAAU,EAChC,SAAS,IAAI,SAAS,CAAC,MAAV,KAAqB,eAAe,CAAC,KADlB,CAAlC;AAGA,QAAM,sBAAsB,GAAG,wBAAA,UAAU,MAAV,CAAA,UAAU,EACvC,SAAS,IAAI,SAAS,CAAC,MAAV,KAAqB,eAAe,CAAC,YADX,CAAzC;AAIA,SAAO;AACL,IAAA,OADK;AAEL,IAAA,iBAFK;AAGL,IAAA,4BAHK;AAIL,IAAA,eAJK;AAKL,IAAA,sBALK,EAAP;;AAOD,CAzDD,C;AA2De,OAAO,CAAC,eAAD,EAAkB,kBAAlB,CAAP,CAA6C,YAA7C,C,CAAf,wB,iLAhFM,kB,oHAQA,Y,8GAaA,e","sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { connect } from 'react-redux';\nimport { bindActionCreators, Dispatch } from 'redux';\nimport { uniqWith } from 'lodash';\nimport { setDirectPathToChild } from 'src/dashboard/actions/dashboardState';\nimport {\n  selectIndicatorsForChart,\n  Indicator,\n  IndicatorStatus,\n  selectNativeIndicatorsForChart,\n} from 'src/dashboard/components/FiltersBadge/selectors';\nimport FiltersBadge from 'src/dashboard/components/FiltersBadge';\n\nexport interface FiltersBadgeProps {\n  chartId: number;\n}\n\nconst mapDispatchToProps = (dispatch: Dispatch) =>\n  bindActionCreators(\n    {\n      onHighlightFilterSource: setDirectPathToChild,\n    },\n    dispatch,\n  );\n\nconst sortByStatus = (indicators: Indicator[]): Indicator[] => {\n  const statuses = [\n    IndicatorStatus.Applied,\n    IndicatorStatus.Unset,\n    IndicatorStatus.Incompatible,\n  ];\n  return indicators.sort(\n    (a, b) =>\n      statuses.indexOf(a.status as IndicatorStatus) -\n      statuses.indexOf(b.status as IndicatorStatus),\n  );\n};\n\nconst mapStateToProps = (\n  {\n    datasources,\n    dashboardFilters,\n    nativeFilters,\n    dashboardInfo,\n    charts,\n    dataMask,\n    dashboardLayout: { present },\n  }: any,\n  { chartId }: FiltersBadgeProps,\n) => {\n  const dashboardIndicators = selectIndicatorsForChart(\n    chartId,\n    dashboardFilters,\n    datasources,\n    charts,\n  );\n\n  const nativeIndicators = selectNativeIndicatorsForChart(\n    nativeFilters,\n    dataMask,\n    chartId,\n    charts,\n    present,\n    dashboardInfo.metadata?.chart_configuration,\n  );\n\n  const indicators = uniqWith(\n    sortByStatus([...dashboardIndicators, ...nativeIndicators]),\n    (ind1, ind2) =>\n      ind1.column === ind2.column &&\n      ind1.name === ind2.name &&\n      (ind1.status !== IndicatorStatus.Applied ||\n        ind2.status !== IndicatorStatus.Applied),\n  );\n\n  const appliedCrossFilterIndicators = indicators.filter(\n    indicator => indicator.status === IndicatorStatus.CrossFilterApplied,\n  );\n  const appliedIndicators = indicators.filter(\n    indicator => indicator.status === IndicatorStatus.Applied,\n  );\n  const unsetIndicators = indicators.filter(\n    indicator => indicator.status === IndicatorStatus.Unset,\n  );\n  const incompatibleIndicators = indicators.filter(\n    indicator => indicator.status === IndicatorStatus.Incompatible,\n  );\n\n  return {\n    chartId,\n    appliedIndicators,\n    appliedCrossFilterIndicators,\n    unsetIndicators,\n    incompatibleIndicators,\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(FiltersBadge);\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}