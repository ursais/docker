{"ast":null,"code":"import \"core-js/modules/web.dom-collections.iterator.js\";(function () {var enterModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.enterModule : undefined;enterModule && enterModule(module);})();var __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default.signature : function (a) {return a;}; /**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React from 'react';\nimport { useDrop } from 'react-dnd';\nimport { t, useTheme } from '@superset-ui/core';\nimport ControlHeader from 'src/explore/components/ControlHeader';\nimport { AddControlLabel, DndLabelsContainer, HeaderContainer } from 'src/explore/components/controls/OptionControls';\nimport Icons from 'src/components/Icons';import { jsx as ___EmotionJSX } from \"@emotion/react\";\nexport default function DndSelectLabel({ displayGhostButton = true, ...props }) {\n  const theme = useTheme();\n  const [{ isOver, canDrop }, datasourcePanelDrop] = useDrop({\n    accept: props.accept,\n    drop: item => {\n      props.onDrop(item);\n    },\n    canDrop: item => props.canDrop(item),\n    collect: monitor => ({\n      isOver: monitor.isOver(),\n      canDrop: monitor.canDrop(),\n      type: monitor.getItemType() }) });\n\n\n  function renderGhostButton() {\n    return ___EmotionJSX(AddControlLabel, { cancelHover: true },\n    ___EmotionJSX(Icons.PlusSmall, { iconColor: theme.colors.grayscale.light1 }),\n    t(props.ghostButtonText || 'Drop columns'));\n\n  }\n  return ___EmotionJSX(\"div\", { ref: datasourcePanelDrop },\n  ___EmotionJSX(HeaderContainer, null,\n  ___EmotionJSX(ControlHeader, props)),\n\n  ___EmotionJSX(DndLabelsContainer, { canDrop: canDrop, isOver: isOver },\n  props.valuesRenderer(),\n  displayGhostButton && renderGhostButton()));\n\n\n}__signature__(DndSelectLabel, \"useTheme{theme}\\nuseDrop{[{ isOver, canDrop }, datasourcePanelDrop]}\", () => [useTheme, useDrop]);;(function () {var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined;if (!reactHotLoader) {return;}reactHotLoader.register(DndSelectLabel, \"DndSelectLabel\", \"/app/superset-frontend/src/explore/components/controls/DndColumnSelectControl/DndSelectLabel.tsx\");})();;(function () {var leaveModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.leaveModule : undefined;leaveModule && leaveModule(module);})();","map":{"version":3,"sources":["/app/superset-frontend/src/explore/components/controls/DndColumnSelectControl/DndSelectLabel.tsx"],"names":[],"mappings":"iWAAA;;;;;;;;;;;;;;;;;AAiBG;AACH,OAAO,KAAP,MAAkB,OAAlB;AACA,SAAS,OAAT,QAAwB,WAAxB;AACA,SAAS,CAAT,EAAY,QAAZ,QAA4B,mBAA5B;AACA,OAAO,aAAP,MAA0B,sCAA1B;AACA,SACE,eADF,EAEE,kBAFF,EAGE,eAHF,QAIO,gDAJP;AAMA,OAAO,KAAP,MAAkB,sBAAlB,C;AAGA,eAAc,SAAU,cAAV,CAA+B,EAC3C,kBAAkB,GAAG,IADsB,EAE3C,GAAG,KAFwC,EAA/B,EAGe;AAC3B,QAAM,KAAK,GAAG,QAAQ,EAAtB;AAEA,QAAM,CAAC,EAAE,MAAF,EAAU,OAAV,EAAD,EAAsB,mBAAtB,IAA6C,OAAO,CAAC;AACzD,IAAA,MAAM,EAAE,KAAK,CAAC,MAD2C;AAGzD,IAAA,IAAI,EAAG,IAAD,IAAiC;AACrC,MAAA,KAAK,CAAC,MAAN,CAAa,IAAb;AACD,KALwD;AAOzD,IAAA,OAAO,EAAG,IAAD,IAAkC,KAAK,CAAC,OAAN,CAAc,IAAd,CAPc;AASzD,IAAA,OAAO,EAAE,OAAO,KAAK;AACnB,MAAA,MAAM,EAAE,OAAO,CAAC,MAAR,EADW;AAEnB,MAAA,OAAO,EAAE,OAAO,CAAC,OAAR,EAFU;AAGnB,MAAA,IAAI,EAAE,OAAO,CAAC,WAAR,EAHa,EAAL,CATyC,EAAD,CAA1D;;;AAgBA,WAAS,iBAAT,GAA0B;AACxB,WACE,cAAC,eAAD,IAAiB,WAAW,MAA5B;AACE,kBAAC,KAAD,CAAO,SAAP,IAAiB,SAAS,EAAE,KAAK,CAAC,MAAN,CAAa,SAAb,CAAuB,MAAnD,GADF;AAEG,IAAA,CAAC,CAAC,KAAK,CAAC,eAAN,IAAyB,cAA1B,CAFJ,CADF;;AAMD;AAED,SACE,uBAAK,GAAG,EAAE,mBAAV;AACE,gBAAC,eAAD;AACE,gBAAC,aAAD,EAAmB,KAAnB,CADF,CADF;;AAIE,gBAAC,kBAAD,IAAoB,OAAO,EAAE,OAA7B,EAAsC,MAAM,EAAE,MAA9C;AACG,EAAA,KAAK,CAAC,cAAN,EADH;AAEG,EAAA,kBAAkB,IAAI,iBAAiB,EAF1C,CAJF,CADF;;;AAWD,C,cA1CuB,c,iFAIR,Q,EAEqC,O,oLAN7B,c","sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React from 'react';\nimport { useDrop } from 'react-dnd';\nimport { t, useTheme } from '@superset-ui/core';\nimport ControlHeader from 'src/explore/components/ControlHeader';\nimport {\n  AddControlLabel,\n  DndLabelsContainer,\n  HeaderContainer,\n} from 'src/explore/components/controls/OptionControls';\nimport { DatasourcePanelDndItem } from 'src/explore/components/DatasourcePanel/types';\nimport Icons from 'src/components/Icons';\nimport { DndColumnSelectProps } from './types';\n\nexport default function DndSelectLabel<T, O>({\n  displayGhostButton = true,\n  ...props\n}: DndColumnSelectProps<T, O>) {\n  const theme = useTheme();\n\n  const [{ isOver, canDrop }, datasourcePanelDrop] = useDrop({\n    accept: props.accept,\n\n    drop: (item: DatasourcePanelDndItem) => {\n      props.onDrop(item);\n    },\n\n    canDrop: (item: DatasourcePanelDndItem) => props.canDrop(item),\n\n    collect: monitor => ({\n      isOver: monitor.isOver(),\n      canDrop: monitor.canDrop(),\n      type: monitor.getItemType(),\n    }),\n  });\n\n  function renderGhostButton() {\n    return (\n      <AddControlLabel cancelHover>\n        <Icons.PlusSmall iconColor={theme.colors.grayscale.light1} />\n        {t(props.ghostButtonText || 'Drop columns')}\n      </AddControlLabel>\n    );\n  }\n\n  return (\n    <div ref={datasourcePanelDrop}>\n      <HeaderContainer>\n        <ControlHeader {...props} />\n      </HeaderContainer>\n      <DndLabelsContainer canDrop={canDrop} isOver={isOver}>\n        {props.valuesRenderer()}\n        {displayGhostButton && renderGhostButton()}\n      </DndLabelsContainer>\n    </div>\n  );\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}