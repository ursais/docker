{"ast":null,"code":"import \"core-js/modules/web.dom-collections.iterator.js\";import _Object$values from \"@babel/runtime-corejs3/core-js-stable/object/values\";import _someInstanceProperty from \"@babel/runtime-corejs3/core-js-stable/instance/some\";import _includesInstanceProperty from \"@babel/runtime-corejs3/core-js-stable/instance/includes\";import _mapInstanceProperty from \"@babel/runtime-corejs3/core-js-stable/instance/map\";import _filterInstanceProperty from \"@babel/runtime-corejs3/core-js-stable/instance/filter\";import _uniq from \"lodash/uniq\";(function () {var enterModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.enterModule : undefined;enterModule && enterModule(module);})();var __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default.signature : function (a) {return a;}; /**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React, { useCallback, useMemo, useState, useRef } from 'react';\n\nimport { t, styled } from '@superset-ui/core';\nimport { Form } from 'src/common/components';\nimport { StyledModal } from 'src/components/Modal';\nimport ErrorBoundary from 'src/components/ErrorBoundary';\nimport { testWithId } from 'src/utils/testUtils';\nimport { useFilterConfigMap, useFilterConfiguration } from '../state';\nimport { validateForm, createHandleSave, createHandleTabEdit, generateFilterId, getFilterIds } from './utils';\nimport Footer from './Footer/Footer';\nimport FilterTabs from './FilterTabs';\nimport FiltersConfigForm from './FiltersConfigForm/FiltersConfigForm';\nimport { useOpenModal, useRemoveCurrentFilter } from './state';import { jsx as ___EmotionJSX } from \"@emotion/react\";\nconst StyledModalWrapper = styled(StyledModal)`\n  min-width: 700px;\n  .ant-modal-body {\n    padding: 0px;\n  }\n`;\nexport const StyledModalBody = styled.div`\n  display: flex;\n  height: 700px;\n  flex-direction: row;\n  .filters-list {\n    width: ${({ theme }) => theme.gridUnit * 50}px;\n    overflow: auto;\n  }\n`;\nexport const StyledForm = styled(Form)`\n  width: 100%;\n`;\nexport const FILTERS_CONFIG_MODAL_TEST_ID = 'filters-config-modal';\nexport const getFiltersConfigModalTestId = testWithId(FILTERS_CONFIG_MODAL_TEST_ID);\nexport const CASCADING_FILTERS = ['filter_select'];\n/**\n * This is the modal to configure all the dashboard-native filters.\n * Manages modal-level state, such as what filters are in the list,\n * and which filter is currently being edited.\n *\n * Calls the `save` callback with the new FilterConfiguration object\n * when the user saves the filters.\n */\nexport function FiltersConfigModal({ isOpen, initialFilterId, createNewOnOpen, onSave, onCancel }) {\n  const [form] = Form.useForm();\n  const configFormRef = useRef();\n  // the filter config from redux state, this does not change until modal is closed.\n  const filterConfig = useFilterConfiguration();\n  const filterConfigMap = useFilterConfigMap();\n  // new filter ids belong to filters have been added during\n  // this configuration session, and only exist in the form state until we submit.\n  const [newFilterIds, setNewFilterIds] = useState([]);\n  // store ids of filters that have been removed with the time they were removed\n  // so that we can disappear them after a few secs.\n  // filters are still kept in state until form is submitted.\n  const [removedFilters, setRemovedFilters] = useState({});\n  const [saveAlertVisible, setSaveAlertVisible] = useState(false);\n  // The full ordered set of ((original + new) - completely removed) filter ids\n  // Use this as the canonical list of what filters are being configured!\n  // This includes filter ids that are pending removal, so check for that.\n  const filterIds = useMemo(() => {var _context;return _filterInstanceProperty(_context = _uniq([...getFilterIds(filterConfig), ...newFilterIds])).call(_context, id => {var _removedFilters$id;return !removedFilters[id] || ((_removedFilters$id = removedFilters[id]) == null ? void 0 : _removedFilters$id.isPending);});}, [filterConfig, newFilterIds, removedFilters]);\n  // open the first filter in the list to start\n  const initialCurrentFilterId = initialFilterId != null ? initialFilterId : filterIds[0];\n  const [currentFilterId, setCurrentFilterId] = useState(initialCurrentFilterId);\n  // the form values are managed by the antd form, but we copy them to here\n  // so that we can display them (e.g. filter titles in the tab headers)\n  const [formValues, setFormValues] = useState({\n    filters: {} });\n\n  const unsavedFiltersIds = _filterInstanceProperty(newFilterIds).call(newFilterIds, id => !removedFilters[id]);\n  // brings back a filter that was previously removed (\"Undo\")\n  const restoreFilter = id => {\n    const removal = removedFilters[id];\n    // gotta clear the removal timeout to prevent the filter from getting deleted\n    if (removal != null && removal.isPending)\n    clearTimeout(removal.timerId);\n    setRemovedFilters(current => ({ ...current, [id]: null }));\n  };\n  // generates a new filter id and appends it to the newFilterIds\n  const addFilter = useCallback(() => {\n    const newFilterId = generateFilterId();\n    setNewFilterIds([...newFilterIds, newFilterId]);\n    setCurrentFilterId(newFilterId);\n    setSaveAlertVisible(false);\n  }, [newFilterIds, setCurrentFilterId]);\n  useOpenModal(isOpen, addFilter, createNewOnOpen);\n  useRemoveCurrentFilter(removedFilters, currentFilterId, filterIds, setCurrentFilterId);\n  const handleTabEdit = createHandleTabEdit(setRemovedFilters, setSaveAlertVisible, addFilter);\n  // After this, it should be as if the modal was just opened fresh.\n  // Called when the modal is closed.\n  const resetForm = () => {\n    form.resetFields();\n    setNewFilterIds([]);\n    setCurrentFilterId(initialCurrentFilterId);\n    setRemovedFilters({});\n    setSaveAlertVisible(false);\n  };\n  const getFilterTitle = id => {var _ref, _formValues$filters$i, _formValues$filters$i2, _filterConfigMap$id;return (_ref = (_formValues$filters$i = (_formValues$filters$i2 = formValues.filters[id]) == null ? void 0 : _formValues$filters$i2.name) != null ? _formValues$filters$i : (_filterConfigMap$id =\n    filterConfigMap[id]) == null ? void 0 : _filterConfigMap$id.name) != null ? _ref :\n    t('New filter');};\n  const getParentFilters = id => {var _context2, _context3;return _mapInstanceProperty(_context2 = _filterInstanceProperty(_context3 = _filterInstanceProperty(filterIds).call(filterIds,\n    filterId => filterId !== id && !removedFilters[filterId])).call(_context3,\n    filterId => {var _filterConfigMap$filt;return _includesInstanceProperty(CASCADING_FILTERS).call(CASCADING_FILTERS, formValues.filters[filterId] ?\n      formValues.filters[filterId].filterType : (_filterConfigMap$filt =\n      filterConfigMap[filterId]) == null ? void 0 : _filterConfigMap$filt.filterType);})).call(_context2,\n    id => ({\n      id,\n      title: getFilterTitle(id) }));};\n\n  const handleSave = async () => {\n    const values = await validateForm(form, currentFilterId, filterConfigMap, filterIds, removedFilters, setCurrentFilterId);\n    if (values) {\n      createHandleSave(filterConfigMap, filterIds, removedFilters, resetForm, onSave, values)();\n    } else\n    {\n      configFormRef.current.changeTab('configuration');\n    }\n  };\n  const handleConfirmCancel = () => {\n    resetForm();\n    onCancel();\n  };\n  const handleCancel = () => {\n    if (unsavedFiltersIds.length > 0) {\n      setSaveAlertVisible(true);\n    } else\n    {\n      handleConfirmCancel();\n    }\n  };\n  return ___EmotionJSX(StyledModalWrapper, { visible: isOpen, maskClosable: false, title: t('Filters configuration'), width: \"50%\", destroyOnClose: true, onCancel: handleCancel, onOk: handleSave, centered: true, \"data-test\": \"filter-modal\", footer: ___EmotionJSX(Footer, { onDismiss: () => setSaveAlertVisible(false), onCancel: handleCancel, getFilterTitle: getFilterTitle, handleSave: handleSave, saveAlertVisible: saveAlertVisible, unsavedFiltersIds: unsavedFiltersIds, onConfirmCancel: handleConfirmCancel }) },\n  ___EmotionJSX(ErrorBoundary, null,\n  ___EmotionJSX(StyledModalBody, null,\n  ___EmotionJSX(StyledForm, { preserve: false, form: form, onValuesChange: (changes, values) => {var _context4;\n      if (changes.filters &&\n      _someInstanceProperty(_context4 = _Object$values(changes.filters)).call(_context4, filter => filter.name != null)) {\n        // we only need to set this if a name changed\n        setFormValues(values);\n      }\n      setSaveAlertVisible(false);\n    }, layout: \"vertical\" },\n  ___EmotionJSX(FilterTabs, { onEdit: handleTabEdit, onChange: setCurrentFilterId, getFilterTitle: getFilterTitle, currentFilterId: currentFilterId, filterIds: filterIds, removedFilters: removedFilters, restoreFilter: restoreFilter },\n  id => ___EmotionJSX(FiltersConfigForm, { ref: configFormRef, form: form, filterId: id, filterToEdit: filterConfigMap[id], removed: !!removedFilters[id], restoreFilter: restoreFilter, parentFilters: getParentFilters(id) }))))));\n\n\n\n\n\n}__signature__(FiltersConfigModal, \"useForm{[form]}\\nuseRef{configFormRef}\\nuseFilterConfiguration{filterConfig}\\nuseFilterConfigMap{filterConfigMap}\\nuseState{[newFilterIds, setNewFilterIds]([])}\\nuseState{[removedFilters, setRemovedFilters]({})}\\nuseState{[saveAlertVisible, setSaveAlertVisible](false)}\\nuseMemo{filterIds}\\nuseState{[currentFilterId, setCurrentFilterId](initialCurrentFilterId)}\\nuseState{[formValues, setFormValues]({\\n        filters: {},\\n    })}\\nuseCallback{addFilter}\\nuseOpenModal{}\\nuseRemoveCurrentFilter{}\", () => [useFilterConfiguration, useFilterConfigMap, useOpenModal, useRemoveCurrentFilter]);;(function () {var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined;if (!reactHotLoader) {return;}reactHotLoader.register(StyledModalWrapper, \"StyledModalWrapper\", \"/app/superset-frontend/src/dashboard/components/nativeFilters/FiltersConfigModal/FiltersConfigModal.tsx\");reactHotLoader.register(StyledModalBody, \"StyledModalBody\", \"/app/superset-frontend/src/dashboard/components/nativeFilters/FiltersConfigModal/FiltersConfigModal.tsx\");reactHotLoader.register(StyledForm, \"StyledForm\", \"/app/superset-frontend/src/dashboard/components/nativeFilters/FiltersConfigModal/FiltersConfigModal.tsx\");reactHotLoader.register(FILTERS_CONFIG_MODAL_TEST_ID, \"FILTERS_CONFIG_MODAL_TEST_ID\", \"/app/superset-frontend/src/dashboard/components/nativeFilters/FiltersConfigModal/FiltersConfigModal.tsx\");reactHotLoader.register(getFiltersConfigModalTestId, \"getFiltersConfigModalTestId\", \"/app/superset-frontend/src/dashboard/components/nativeFilters/FiltersConfigModal/FiltersConfigModal.tsx\");reactHotLoader.register(CASCADING_FILTERS, \"CASCADING_FILTERS\", \"/app/superset-frontend/src/dashboard/components/nativeFilters/FiltersConfigModal/FiltersConfigModal.tsx\");reactHotLoader.register(FiltersConfigModal, \"FiltersConfigModal\", \"/app/superset-frontend/src/dashboard/components/nativeFilters/FiltersConfigModal/FiltersConfigModal.tsx\");})();;(function () {var leaveModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.leaveModule : undefined;leaveModule && leaveModule(module);})();","map":{"version":3,"sources":["/app/superset-frontend/src/dashboard/components/nativeFilters/FiltersConfigModal/FiltersConfigModal.tsx"],"names":[],"mappings":"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","sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React, { useCallback, useMemo, useState, useRef } from 'react';\nimport { uniq } from 'lodash';\nimport { t, styled } from '@superset-ui/core';\nimport { Form } from 'src/common/components';\nimport { StyledModal } from 'src/components/Modal';\nimport ErrorBoundary from 'src/components/ErrorBoundary';\nimport { testWithId } from 'src/utils/testUtils';\nimport { useFilterConfigMap, useFilterConfiguration } from '../state';\nimport { FilterRemoval, NativeFiltersForm } from './types';\nimport { FilterConfiguration } from '../types';\nimport {\n  validateForm,\n  createHandleSave,\n  createHandleTabEdit,\n  generateFilterId,\n  getFilterIds,\n} from './utils';\nimport Footer from './Footer/Footer';\nimport FilterTabs from './FilterTabs';\nimport FiltersConfigForm from './FiltersConfigForm/FiltersConfigForm';\nimport { useOpenModal, useRemoveCurrentFilter } from './state';\n\nconst StyledModalWrapper = styled(StyledModal)`\n  min-width: 700px;\n  .ant-modal-body {\n    padding: 0px;\n  }\n`;\n\nexport const StyledModalBody = styled.div`\n  display: flex;\n  height: 700px;\n  flex-direction: row;\n  .filters-list {\n    width: ${({ theme }) => theme.gridUnit * 50}px;\n    overflow: auto;\n  }\n`;\n\nexport const StyledForm = styled(Form)`\n  width: 100%;\n`;\n\nexport const FILTERS_CONFIG_MODAL_TEST_ID = 'filters-config-modal';\nexport const getFiltersConfigModalTestId = testWithId(\n  FILTERS_CONFIG_MODAL_TEST_ID,\n);\n\nexport interface FiltersConfigModalProps {\n  isOpen: boolean;\n  initialFilterId?: string;\n  createNewOnOpen?: boolean;\n  onSave: (filterConfig: FilterConfiguration) => Promise<void>;\n  onCancel: () => void;\n}\nexport const CASCADING_FILTERS = ['filter_select'];\n\n/**\n * This is the modal to configure all the dashboard-native filters.\n * Manages modal-level state, such as what filters are in the list,\n * and which filter is currently being edited.\n *\n * Calls the `save` callback with the new FilterConfiguration object\n * when the user saves the filters.\n */\nexport function FiltersConfigModal({\n  isOpen,\n  initialFilterId,\n  createNewOnOpen,\n  onSave,\n  onCancel,\n}: FiltersConfigModalProps) {\n  const [form] = Form.useForm<NativeFiltersForm>();\n\n  const configFormRef = useRef<any>();\n\n  // the filter config from redux state, this does not change until modal is closed.\n  const filterConfig = useFilterConfiguration();\n  const filterConfigMap = useFilterConfigMap();\n\n  // new filter ids belong to filters have been added during\n  // this configuration session, and only exist in the form state until we submit.\n  const [newFilterIds, setNewFilterIds] = useState<string[]>([]);\n\n  // store ids of filters that have been removed with the time they were removed\n  // so that we can disappear them after a few secs.\n  // filters are still kept in state until form is submitted.\n  const [removedFilters, setRemovedFilters] = useState<\n    Record<string, FilterRemoval>\n  >({});\n\n  const [saveAlertVisible, setSaveAlertVisible] = useState<boolean>(false);\n\n  // The full ordered set of ((original + new) - completely removed) filter ids\n  // Use this as the canonical list of what filters are being configured!\n  // This includes filter ids that are pending removal, so check for that.\n  const filterIds = useMemo(\n    () =>\n      uniq([...getFilterIds(filterConfig), ...newFilterIds]).filter(\n        id => !removedFilters[id] || removedFilters[id]?.isPending,\n      ),\n    [filterConfig, newFilterIds, removedFilters],\n  );\n\n  // open the first filter in the list to start\n  const initialCurrentFilterId = initialFilterId ?? filterIds[0];\n  const [currentFilterId, setCurrentFilterId] = useState(\n    initialCurrentFilterId,\n  );\n\n  // the form values are managed by the antd form, but we copy them to here\n  // so that we can display them (e.g. filter titles in the tab headers)\n  const [formValues, setFormValues] = useState<NativeFiltersForm>({\n    filters: {},\n  });\n\n  const unsavedFiltersIds = newFilterIds.filter(id => !removedFilters[id]);\n  // brings back a filter that was previously removed (\"Undo\")\n  const restoreFilter = (id: string) => {\n    const removal = removedFilters[id];\n    // gotta clear the removal timeout to prevent the filter from getting deleted\n    if (removal?.isPending) clearTimeout(removal.timerId);\n    setRemovedFilters(current => ({ ...current, [id]: null }));\n  };\n\n  // generates a new filter id and appends it to the newFilterIds\n  const addFilter = useCallback(() => {\n    const newFilterId = generateFilterId();\n    setNewFilterIds([...newFilterIds, newFilterId]);\n    setCurrentFilterId(newFilterId);\n    setSaveAlertVisible(false);\n  }, [newFilterIds, setCurrentFilterId]);\n\n  useOpenModal(isOpen, addFilter, createNewOnOpen);\n\n  useRemoveCurrentFilter(\n    removedFilters,\n    currentFilterId,\n    filterIds,\n    setCurrentFilterId,\n  );\n\n  const handleTabEdit = createHandleTabEdit(\n    setRemovedFilters,\n    setSaveAlertVisible,\n    addFilter,\n  );\n\n  // After this, it should be as if the modal was just opened fresh.\n  // Called when the modal is closed.\n  const resetForm = () => {\n    form.resetFields();\n    setNewFilterIds([]);\n    setCurrentFilterId(initialCurrentFilterId);\n    setRemovedFilters({});\n    setSaveAlertVisible(false);\n  };\n\n  const getFilterTitle = (id: string) =>\n    formValues.filters[id]?.name ??\n    filterConfigMap[id]?.name ??\n    t('New filter');\n\n  const getParentFilters = (id: string) =>\n    filterIds\n      .filter(filterId => filterId !== id && !removedFilters[filterId])\n      .filter(filterId =>\n        CASCADING_FILTERS.includes(\n          formValues.filters[filterId]\n            ? formValues.filters[filterId].filterType\n            : filterConfigMap[filterId]?.filterType,\n        ),\n      )\n      .map(id => ({\n        id,\n        title: getFilterTitle(id),\n      }));\n\n  const handleSave = async () => {\n    const values: NativeFiltersForm | null = await validateForm(\n      form,\n      currentFilterId,\n      filterConfigMap,\n      filterIds,\n      removedFilters,\n      setCurrentFilterId,\n    );\n\n    if (values) {\n      createHandleSave(\n        filterConfigMap,\n        filterIds,\n        removedFilters,\n        resetForm,\n        onSave,\n        values,\n      )();\n    } else {\n      configFormRef.current.changeTab('configuration');\n    }\n  };\n\n  const handleConfirmCancel = () => {\n    resetForm();\n    onCancel();\n  };\n\n  const handleCancel = () => {\n    if (unsavedFiltersIds.length > 0) {\n      setSaveAlertVisible(true);\n    } else {\n      handleConfirmCancel();\n    }\n  };\n\n  return (\n    <StyledModalWrapper\n      visible={isOpen}\n      maskClosable={false}\n      title={t('Filters configuration')}\n      width=\"50%\"\n      destroyOnClose\n      onCancel={handleCancel}\n      onOk={handleSave}\n      centered\n      data-test=\"filter-modal\"\n      footer={\n        <Footer\n          onDismiss={() => setSaveAlertVisible(false)}\n          onCancel={handleCancel}\n          getFilterTitle={getFilterTitle}\n          handleSave={handleSave}\n          saveAlertVisible={saveAlertVisible}\n          unsavedFiltersIds={unsavedFiltersIds}\n          onConfirmCancel={handleConfirmCancel}\n        />\n      }\n    >\n      <ErrorBoundary>\n        <StyledModalBody>\n          <StyledForm\n            preserve={false}\n            form={form}\n            onValuesChange={(changes, values: NativeFiltersForm) => {\n              if (\n                changes.filters &&\n                Object.values(changes.filters).some(\n                  (filter: any) => filter.name != null,\n                )\n              ) {\n                // we only need to set this if a name changed\n                setFormValues(values);\n              }\n              setSaveAlertVisible(false);\n            }}\n            layout=\"vertical\"\n          >\n            <FilterTabs\n              onEdit={handleTabEdit}\n              onChange={setCurrentFilterId}\n              getFilterTitle={getFilterTitle}\n              currentFilterId={currentFilterId}\n              filterIds={filterIds}\n              removedFilters={removedFilters}\n              restoreFilter={restoreFilter}\n            >\n              {(id: string) => (\n                <FiltersConfigForm\n                  ref={configFormRef}\n                  form={form}\n                  filterId={id}\n                  filterToEdit={filterConfigMap[id]}\n                  removed={!!removedFilters[id]}\n                  restoreFilter={restoreFilter}\n                  parentFilters={getParentFilters(id)}\n                />\n              )}\n            </FilterTabs>\n          </StyledForm>\n        </StyledModalBody>\n      </ErrorBoundary>\n    </StyledModalWrapper>\n  );\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}