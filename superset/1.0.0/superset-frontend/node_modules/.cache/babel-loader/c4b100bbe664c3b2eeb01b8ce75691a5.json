{"ast":null,"code":"import _mapInstanceProperty from \"@babel/runtime-corejs3/core-js-stable/instance/map\";import _flatInstanceProperty from \"@babel/runtime-corejs3/core-js-stable/instance/flat\";import _findInstanceProperty from \"@babel/runtime-corejs3/core-js-stable/instance/find\";(function () {var enterModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.enterModule : undefined;enterModule && enterModule(module);})();var __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default.signature : function (a) {return a;}; /**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport memoizeOne from 'memoize-one';\nimport { getChartControlPanelRegistry } from '@superset-ui/core';\nimport { expandControlConfig } from '@superset-ui/chart-controls';\n/**\n * Find control item from control panel config.\n */\nexport function findControlItem(controlPanelSections, controlKey) {var _controlPanelSections, _context, _context2;\n  return (_controlPanelSections = _findInstanceProperty(_context = _flatInstanceProperty(_context2 = _mapInstanceProperty(controlPanelSections).call(controlPanelSections,\n  section => section.controlSetRows)).call(_context2,\n  2)).call(_context,\n  control => controlKey === control ||\n  control !== null &&\n  typeof control === 'object' &&\n  'name' in control &&\n  control.name === controlKey)) != null ? _controlPanelSections : null;\n}\nconst getMemoizedControlConfig = memoizeOne((controlKey, controlPanelConfig) => {\n  const { controlOverrides = {}, controlPanelSections = [] } = controlPanelConfig;\n  const control = expandControlConfig(findControlItem(controlPanelSections, controlKey), controlOverrides);\n  return control && 'config' in control ? control.config : control;\n});\nexport const getControlConfig = function getControlConfig(controlKey, vizType) {\n  const controlPanelConfig = getChartControlPanelRegistry().get(vizType) || {};\n  return getMemoizedControlConfig(controlKey, controlPanelConfig);\n};;(function () {var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined;if (!reactHotLoader) {return;}reactHotLoader.register(findControlItem, \"findControlItem\", \"/app/superset-frontend/src/explore/controlUtils/getControlConfig.ts\");reactHotLoader.register(getMemoizedControlConfig, \"getMemoizedControlConfig\", \"/app/superset-frontend/src/explore/controlUtils/getControlConfig.ts\");reactHotLoader.register(getControlConfig, \"getControlConfig\", \"/app/superset-frontend/src/explore/controlUtils/getControlConfig.ts\");})();;(function () {var leaveModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.leaveModule : undefined;leaveModule && leaveModule(module);})();","map":{"version":3,"sources":["/app/superset-frontend/src/explore/controlUtils/getControlConfig.ts"],"names":[],"mappings":"8iBAAA;;;;;;;;;;;;;;;;;AAiBG;AACH,OAAO,UAAP,MAAuB,aAAvB;AACA,SAAS,4BAAT,QAA6C,mBAA7C;AACA,SAEE,mBAFF,QAGO,6BAHP;AAKA;;AAEG;AACH,OAAM,SAAU,eAAV,CACJ,oBADI,EAEJ,UAFI,EAEc;AAElB,kCACE,wFAAA,oBAAoB,MAApB,CAAA,oBAAoB;AACb,EAAA,OAAO,IAAI,OAAO,CAAC,cADN,CAApB;AAEQ,GAFR;AAII,EAAA,OAAO,IACL,UAAU,KAAK,OAAf;AACC,EAAA,OAAO,KAAK,IAAZ;AACC,SAAO,OAAP,KAAmB,QADpB;AAEC,YAAU,OAFX;AAGC,EAAA,OAAO,CAAC,IAAR,KAAiB,UATzB,CADF,oCAWS,IAXT;AAaD;AAED,MAAM,wBAAwB,GAAG,UAAU,CACzC,CAAC,UAAD,EAAa,kBAAb,KAAmC;AACjC,QAAM,EACJ,gBAAgB,GAAG,EADf,EAEJ,oBAAoB,GAAG,EAFnB,KAGF,kBAHJ;AAIA,QAAM,OAAO,GAAG,mBAAmB,CACjC,eAAe,CAAC,oBAAD,EAAuB,UAAvB,CADkB,EAEjC,gBAFiC,CAAnC;AAIA,SAAO,OAAO,IAAI,YAAY,OAAvB,GAAiC,OAAO,CAAC,MAAzC,GAAkD,OAAzD;AACD,CAXwC,CAA3C;AAcA,OAAO,MAAM,gBAAgB,GAAG,SAAS,gBAAT,CAC9B,UAD8B,EAE9B,OAF8B,EAEf;AAEf,QAAM,kBAAkB,GAAG,4BAA4B,GAAG,GAA/B,CAAmC,OAAnC,KAA+C,EAA1E;AACA,SAAO,wBAAwB,CAAC,UAAD,EAAa,kBAAb,CAA/B;AACD,CANM,C,iLAjCS,e,oHAmBV,wB,6HAcO,gB","sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport memoizeOne from 'memoize-one';\nimport { getChartControlPanelRegistry } from '@superset-ui/core';\nimport {\n  ControlPanelSectionConfig,\n  expandControlConfig,\n} from '@superset-ui/chart-controls';\n\n/**\n * Find control item from control panel config.\n */\nexport function findControlItem(\n  controlPanelSections: ControlPanelSectionConfig[],\n  controlKey: string,\n) {\n  return (\n    controlPanelSections\n      .map(section => section.controlSetRows)\n      .flat(2)\n      .find(\n        control =>\n          controlKey === control ||\n          (control !== null &&\n            typeof control === 'object' &&\n            'name' in control &&\n            control.name === controlKey),\n      ) ?? null\n  );\n}\n\nconst getMemoizedControlConfig = memoizeOne(\n  (controlKey, controlPanelConfig) => {\n    const {\n      controlOverrides = {},\n      controlPanelSections = [],\n    } = controlPanelConfig;\n    const control = expandControlConfig(\n      findControlItem(controlPanelSections, controlKey),\n      controlOverrides,\n    );\n    return control && 'config' in control ? control.config : control;\n  },\n);\n\nexport const getControlConfig = function getControlConfig(\n  controlKey: string,\n  vizType: string,\n) {\n  const controlPanelConfig = getChartControlPanelRegistry().get(vizType) || {};\n  return getMemoizedControlConfig(controlKey, controlPanelConfig);\n};\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}