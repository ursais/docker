{"ast":null,"code":"import \"core-js/modules/web.dom-collections.iterator.js\";import _filterInstanceProperty from \"@babel/runtime-corejs3/core-js-stable/instance/filter\";import _includesInstanceProperty from \"@babel/runtime-corejs3/core-js-stable/instance/includes\";import _Object$keys from \"@babel/runtime-corejs3/core-js-stable/object/keys\";import _Object$entries from \"@babel/runtime-corejs3/core-js-stable/object/entries\";import _sliceInstanceProperty from \"@babel/runtime-corejs3/core-js-stable/instance/slice\";import _forEachInstanceProperty from \"@babel/runtime-corejs3/core-js-stable/instance/for-each\";import _concatInstanceProperty from \"@babel/runtime-corejs3/core-js-stable/instance/concat\";import _mapInstanceProperty from \"@babel/runtime-corejs3/core-js-stable/instance/map\";import _startsWithInstanceProperty from \"@babel/runtime-corejs3/core-js-stable/instance/starts-with\";import _someInstanceProperty from \"@babel/runtime-corejs3/core-js-stable/instance/some\";import _reduceInstanceProperty from \"@babel/runtime-corejs3/core-js-stable/instance/reduce\";import _sortInstanceProperty from \"@babel/runtime-corejs3/core-js-stable/instance/sort\";import _bindInstanceProperty from \"@babel/runtime-corejs3/core-js-stable/instance/bind\";import _indexOfInstanceProperty from \"@babel/runtime-corejs3/core-js-stable/instance/index-of\";(function () {var enterModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.enterModule : undefined;enterModule && enterModule(module);})();var __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default.signature : function (a) {return a;}; /**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { List } from 'immutable';\nimport JSONbig from 'json-bigint';\nimport React, { PureComponent } from 'react';\nimport JSONTree from 'react-json-tree';\nimport { Column, Grid, ScrollSync, SortDirection, SortIndicator, Table } from 'react-virtualized';\nimport { getMultipleTextDimensions, t, styled } from '@superset-ui/core';\nimport { Tooltip } from 'src/components/Tooltip';\nimport Button from '../Button';\nimport CopyToClipboard from '../CopyToClipboard';\nimport ModalTrigger from '../ModalTrigger';import { jsx as ___EmotionJSX } from \"@emotion/react\";\nfunction safeJsonObjectParse(data) {var _context;\n  // First perform a cheap proxy to avoid calling JSON.parse on data that is clearly not a\n  // JSON object or array\n  if (typeof data !== 'string' ||\n  _indexOfInstanceProperty(_context = ['{', '[']).call(_context, data.substring(0, 1)) === -1) {\n    return null;\n  }\n  // We know `data` is a string starting with '{' or '[', so try to parse it as a valid object\n  try {\n    const jsonData = JSON.parse(data);\n    if (jsonData && typeof jsonData === 'object') {\n      return jsonData;\n    }\n    return null;\n  }\n  catch (_) {\n    return null;\n  }\n}\nconst SCROLL_BAR_HEIGHT = 15;\nconst GRID_POSITION_ADJUSTMENT = 4;\nconst JSON_TREE_THEME = {\n  scheme: 'monokai',\n  author: 'wimer hazenberg (http://www.monokai.nl)',\n  base00: '#272822',\n  base01: '#383830',\n  base02: '#49483e',\n  base03: '#75715e',\n  base04: '#a59f85',\n  base05: '#f8f8f2',\n  base06: '#f5f4f1',\n  base07: '#f9f8f5',\n  base08: '#f92672',\n  base09: '#fd971f',\n  base0A: '#f4bf75',\n  base0B: '#a6e22e',\n  base0C: '#a1efe4',\n  base0D: '#66d9ef',\n  base0E: '#ae81ff',\n  base0F: '#cc6633' };\n\nconst StyledFilterableTable = styled.div`\n  height: 100%;\n  overflow-x: auto;\n  margin-top: ${({ theme }) => theme.gridUnit * 2}px;\n  overflow-y: hidden;\n`;\n// when more than MAX_COLUMNS_FOR_TABLE are returned, switch from table to grid view\nexport const MAX_COLUMNS_FOR_TABLE = 50;\nexport default class FilterableTable extends PureComponent {\n  constructor(props) {var _context2, _context3, _context4, _context5, _context6, _context7, _context8, _context9, _context10, _context11, _context12, _context13, _context15, _context16;\n    super(props);\n    this.list = List(this.formatTableData(props.data));\n    this.addJsonModal = _bindInstanceProperty(_context2 = this.addJsonModal).call(_context2, this);\n    this.getCellContent = _bindInstanceProperty(_context3 = this.getCellContent).call(_context3, this);\n    this.renderGridCell = _bindInstanceProperty(_context4 = this.renderGridCell).call(_context4, this);\n    this.renderGridCellHeader = _bindInstanceProperty(_context5 = this.renderGridCellHeader).call(_context5, this);\n    this.renderGrid = _bindInstanceProperty(_context6 = this.renderGrid).call(_context6, this);\n    this.renderTableCell = _bindInstanceProperty(_context7 = this.renderTableCell).call(_context7, this);\n    this.renderTableHeader = _bindInstanceProperty(_context8 = this.renderTableHeader).call(_context8, this);\n    this.sortResults = _bindInstanceProperty(_context9 = this.sortResults).call(_context9, this);\n    this.renderTable = _bindInstanceProperty(_context10 = this.renderTable).call(_context10, this);\n    this.rowClassName = _bindInstanceProperty(_context11 = this.rowClassName).call(_context11, this);\n    this.sort = _bindInstanceProperty(_context12 = _sortInstanceProperty(this)).call(_context12, this);\n    // columns that have complex type and were expanded into sub columns\n    this.complexColumns = _reduceInstanceProperty(_context13 = props.orderedColumnKeys).call(_context13, (obj, key) => {var _context14;return {\n        ...obj,\n        [key]: _someInstanceProperty(_context14 = props.expandedColumns).call(_context14, name => _startsWithInstanceProperty(name).call(name, `${key}.`)) };},\n    {});\n    this.widthsForColumnsByKey = this.getWidthsForColumns();\n    this.totalTableWidth = _reduceInstanceProperty(_context15 = _mapInstanceProperty(_context16 = props.orderedColumnKeys).call(_context16,\n    key => this.widthsForColumnsByKey[key])).call(_context15,\n    (curr, next) => curr + next);\n    this.totalTableHeight = props.height;\n    this.state = {\n      sortDirection: SortDirection.ASC,\n      fitted: false };\n\n    this.container = /*#__PURE__*/React.createRef();\n  }\n  componentDidMount() {\n    this.fitTableToWidthIfNeeded();\n  }\n  getDatum(list, index) {\n    return list.get(index % list.size);\n  }\n  getWidthsForColumns() {var _context17, _context18, _context20, _context21;\n    const PADDING = 40; // accounts for cell padding and width of sorting icon\n    const widthsByColumnKey = {};\n    const cellContent = _concatInstanceProperty(_context17 = []).call(_context17, ..._mapInstanceProperty(_context18 = this.props.orderedColumnKeys).call(_context18, key => {var _context19;\n      const cellContentList = _mapInstanceProperty(_context19 = this.list).call(_context19, data => this.getCellContent({ cellData: data[key], columnKey: key }));\n      return cellContentList.push(key).toJS();\n    }));\n    const colWidths = _mapInstanceProperty(_context20 = getMultipleTextDimensions({\n      className: 'cell-text-for-measuring',\n      texts: cellContent })).call(_context20,\n    dimension => dimension.width);\n    _forEachInstanceProperty(_context21 = this.props.orderedColumnKeys).call(_context21, (key, index) => {var _context22;\n      // we can't use Math.max(...colWidths.slice(...)) here since the number\n      // of elements might be bigger than the number of allowed arguments in a\n      // Javascript function\n      widthsByColumnKey[key] =\n      _reduceInstanceProperty(_context22 = _sliceInstanceProperty(colWidths).call(colWidths,\n      index * (this.list.size + 1), (index + 1) * (this.list.size + 1))).call(_context22,\n      (a, b) => Math.max(a, b)) + PADDING;\n    });\n    return widthsByColumnKey;\n  }\n  getCellContent({ cellData, columnKey }) {\n    if (cellData === null) {\n      return ___EmotionJSX(\"i\", { className: \"text-muted\" }, \"NULL\");\n    }\n    const content = String(cellData);\n    const firstCharacter = content.substring(0, 1);\n    let truncated;\n    if (firstCharacter === '[') {\n      truncated = '[…]';\n    } else\n    if (firstCharacter === '{') {\n      truncated = '{…}';\n    } else\n    {\n      truncated = '';\n    }\n    return this.complexColumns[columnKey] ? truncated : content;\n  }\n  formatTableData(data) {\n    return _mapInstanceProperty(data).call(data, row => {var _context23;\n      const newRow = {};\n      _forEachInstanceProperty(_context23 = _Object$entries(row)).call(_context23, ([key, val]) => {var _context24;\n        if (_indexOfInstanceProperty(_context24 = ['string', 'number']).call(_context24, typeof val) >= 0) {\n          newRow[key] = val;\n        } else\n        {\n          newRow[key] = val === null ? null : JSONbig.stringify(val);\n        }\n      });\n      return newRow;\n    });\n  }\n  hasMatch(text, row) {var _context25;\n    const values = [];\n    _forEachInstanceProperty(_context25 = _Object$keys(row)).call(_context25, key => {\n      if (row.hasOwnProperty(key)) {\n        const cellValue = row[key];\n        if (typeof cellValue === 'string') {\n          values.push(cellValue.toLowerCase());\n        } else\n        if (cellValue !== null &&\n        typeof cellValue.toString === 'function') {\n          values.push(cellValue.toString());\n        }\n      }\n    });\n    const lowerCaseText = text.toLowerCase();\n    return _someInstanceProperty(values).call(values, v => _includesInstanceProperty(v).call(v, lowerCaseText));\n  }\n  rowClassName({ index }) {\n    let className = '';\n    if (this.props.striped) {\n      className = index % 2 === 0 ? 'even-row' : 'odd-row';\n    }\n    return className;\n  }\n  sort({ sortBy, sortDirection }) {\n    this.setState({ sortBy, sortDirection });\n  }\n  fitTableToWidthIfNeeded() {var _this$container$curre, _this$container$curre2;\n    const containerWidth = (_this$container$curre = (_this$container$curre2 = this.container.current) == null ? void 0 : _this$container$curre2.clientWidth) != null ? _this$container$curre : 0;\n    if (this.totalTableWidth < containerWidth) {\n      // fit table width if content doesn't fill the width of the container\n      this.totalTableWidth = containerWidth;\n    }\n    this.setState({ fitted: true });\n  }\n  addJsonModal(node, jsonObject, jsonString) {\n    return ___EmotionJSX(ModalTrigger, { modalBody: ___EmotionJSX(JSONTree, { data: jsonObject, theme: JSON_TREE_THEME }), modalFooter: ___EmotionJSX(Button, null,\n      ___EmotionJSX(CopyToClipboard, { shouldShowText: false, text: jsonString })),\n      modalTitle: t('Cell content'), triggerNode: node });\n  }\n  sortResults(sortBy, descending) {\n    return (a, b) => {\n      const aValue = a[sortBy];\n      const bValue = b[sortBy];\n      if (aValue === bValue) {\n        // equal items sort equally\n        return 0;\n      }\n      if (aValue === null) {\n        // nulls sort after anything else\n        return 1;\n      }\n      if (bValue === null) {\n        return -1;\n      }\n      if (descending) {\n        return aValue < bValue ? 1 : -1;\n      }\n      return aValue < bValue ? -1 : 1;\n    };\n  }\n  renderTableHeader({ dataKey, label, sortBy, sortDirection }) {var _context26;\n    const className = _indexOfInstanceProperty(_context26 = this.props.expandedColumns).call(_context26, label) > -1 ?\n    'header-style-disabled' :\n    'header-style';\n    return ___EmotionJSX(Tooltip, { id: \"header-tooltip\", title: label },\n    ___EmotionJSX(\"div\", { className: className },\n    label,\n    sortBy === dataKey && ___EmotionJSX(SortIndicator, { sortDirection: sortDirection })));\n\n\n  }\n  renderGridCellHeader({ columnIndex, key, style }) {var _context27;\n    const label = this.props.orderedColumnKeys[columnIndex];\n    const className = _indexOfInstanceProperty(_context27 = this.props.expandedColumns).call(_context27, label) > -1 ?\n    'header-style-disabled' :\n    'header-style';\n    return ___EmotionJSX(Tooltip, { key: key, id: \"header-tooltip\", title: label },\n    ___EmotionJSX(\"div\", { style: {\n        ...style,\n        top: typeof style.top === 'number' ?\n        style.top - GRID_POSITION_ADJUSTMENT :\n        style.top },\n      className: `${className} grid-cell grid-header-cell` },\n    label));\n\n\n  }\n  renderGridCell({ columnIndex, key, rowIndex, style }) {\n    const columnKey = this.props.orderedColumnKeys[columnIndex];\n    const cellData = this.list.get(rowIndex)[columnKey];\n    const content = this.getCellContent({ cellData, columnKey });\n    const cellNode = ___EmotionJSX(\"div\", { key: key, style: {\n        ...style,\n        top: typeof style.top === 'number' ?\n        style.top - GRID_POSITION_ADJUSTMENT :\n        style.top },\n      className: `grid-cell ${this.rowClassName({ index: rowIndex })}` },\n    content);\n\n    const jsonObject = safeJsonObjectParse(cellData);\n    if (jsonObject) {\n      return this.addJsonModal(cellNode, jsonObject, cellData);\n    }\n    return cellNode;\n  }\n  renderGrid() {\n    const { orderedColumnKeys, overscanColumnCount, overscanRowCount, rowHeight } = this.props;\n    let { height } = this.props;\n    let totalTableHeight = height;\n    if (this.container.current &&\n    this.totalTableWidth > this.container.current.clientWidth) {\n      // exclude the height of the horizontal scroll bar from the height of the table\n      // and the height of the table container if the content overflows\n      height -= SCROLL_BAR_HEIGHT;\n      totalTableHeight -= SCROLL_BAR_HEIGHT;\n    }\n    const getColumnWidth = ({ index }) => this.widthsForColumnsByKey[orderedColumnKeys[index]];\n    // fix height of filterable table\n    return ___EmotionJSX(StyledFilterableTable, null,\n    ___EmotionJSX(ScrollSync, null,\n    ({ onScroll, scrollTop }) => ___EmotionJSX(\"div\", { className: \"filterable-table-container Table\", \"data-test\": \"filterable-table-container\", ref: this.container },\n    ___EmotionJSX(\"div\", { className: \"LeftColumn\" },\n    ___EmotionJSX(Grid, { cellRenderer: this.renderGridCellHeader, columnCount: orderedColumnKeys.length, columnWidth: getColumnWidth, height: rowHeight, rowCount: 1, rowHeight: rowHeight, scrollTop: scrollTop, width: this.totalTableWidth })),\n\n    ___EmotionJSX(\"div\", { className: \"RightColumn\" },\n    ___EmotionJSX(Grid, { cellRenderer: this.renderGridCell, columnCount: orderedColumnKeys.length, columnWidth: getColumnWidth, height: totalTableHeight - rowHeight, onScroll: onScroll, overscanColumnCount: overscanColumnCount, overscanRowCount: overscanRowCount, rowCount: this.list.size, rowHeight: rowHeight, width: this.totalTableWidth })))));\n\n\n\n\n  }\n  renderTableCell({ cellData, columnKey }) {\n    const cellNode = this.getCellContent({ cellData, columnKey });\n    const jsonObject = safeJsonObjectParse(cellData);\n    if (jsonObject) {\n      return this.addJsonModal(cellNode, jsonObject, cellData);\n    }\n    return cellNode;\n  }\n  renderTable() {\n    const { sortBy, sortDirection } = this.state;\n    const { filterText, headerHeight, orderedColumnKeys, overscanRowCount, rowHeight } = this.props;\n    let sortedAndFilteredList = this.list;\n    // filter list\n    if (filterText) {var _context28;\n      sortedAndFilteredList = _filterInstanceProperty(_context28 = this.list).call(_context28, row => this.hasMatch(filterText, row));\n    }\n    // sort list\n    if (sortBy) {\n      sortedAndFilteredList = _sortInstanceProperty(sortedAndFilteredList).call(sortedAndFilteredList, this.sortResults(sortBy, sortDirection === SortDirection.DESC));\n    }\n    let { height } = this.props;\n    let totalTableHeight = height;\n    if (this.container.current &&\n    this.totalTableWidth > this.container.current.clientWidth) {\n      // exclude the height of the horizontal scroll bar from the height of the table\n      // and the height of the table container if the content overflows\n      height -= SCROLL_BAR_HEIGHT;\n      totalTableHeight -= SCROLL_BAR_HEIGHT;\n    }\n    const rowGetter = ({ index }) => this.getDatum(sortedAndFilteredList, index);\n    return ___EmotionJSX(StyledFilterableTable, { className: \"filterable-table-container\", ref: this.container },\n    this.state.fitted && ___EmotionJSX(Table, { ref: \"Table\", headerHeight: headerHeight, height: totalTableHeight, overscanRowCount: overscanRowCount, rowClassName: this.rowClassName, rowHeight: rowHeight, rowGetter: rowGetter, rowCount: sortedAndFilteredList.size, sort: _sortInstanceProperty(this), sortBy: sortBy, sortDirection: sortDirection, width: this.totalTableWidth },\n    _mapInstanceProperty(orderedColumnKeys).call(orderedColumnKeys, columnKey => ___EmotionJSX(Column, { cellRenderer: ({ cellData }) => this.renderTableCell({ cellData, columnKey }), dataKey: columnKey, disableSort: false, headerRenderer: this.renderTableHeader, width: this.widthsForColumnsByKey[columnKey], label: columnKey, key: columnKey }))));\n\n\n  }\n  render() {\n    if (this.props.orderedColumnKeys.length > MAX_COLUMNS_FOR_TABLE) {\n      return this.renderGrid();\n    }\n    return this.renderTable();\n  } // @ts-ignore\n  __reactstandin__regenerateByEval(key, code) {// @ts-ignore\n    this[key] = eval(code);}}FilterableTable.defaultProps = {\n  filterText: '',\n  headerHeight: 32,\n  overscanColumnCount: 10,\n  overscanRowCount: 10,\n  rowHeight: 32,\n  striped: true,\n  expandedColumns: [] };;(function () {var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined;if (!reactHotLoader) {return;}reactHotLoader.register(safeJsonObjectParse, \"safeJsonObjectParse\", \"/app/superset-frontend/src/components/FilterableTable/FilterableTable.tsx\");reactHotLoader.register(SCROLL_BAR_HEIGHT, \"SCROLL_BAR_HEIGHT\", \"/app/superset-frontend/src/components/FilterableTable/FilterableTable.tsx\");reactHotLoader.register(GRID_POSITION_ADJUSTMENT, \"GRID_POSITION_ADJUSTMENT\", \"/app/superset-frontend/src/components/FilterableTable/FilterableTable.tsx\");reactHotLoader.register(JSON_TREE_THEME, \"JSON_TREE_THEME\", \"/app/superset-frontend/src/components/FilterableTable/FilterableTable.tsx\");reactHotLoader.register(StyledFilterableTable, \"StyledFilterableTable\", \"/app/superset-frontend/src/components/FilterableTable/FilterableTable.tsx\");reactHotLoader.register(MAX_COLUMNS_FOR_TABLE, \"MAX_COLUMNS_FOR_TABLE\", \"/app/superset-frontend/src/components/FilterableTable/FilterableTable.tsx\");reactHotLoader.register(FilterableTable, \"FilterableTable\", \"/app/superset-frontend/src/components/FilterableTable/FilterableTable.tsx\");})();;(function () {var leaveModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.leaveModule : undefined;leaveModule && leaveModule(module);})();","map":{"version":3,"sources":["/app/superset-frontend/src/components/FilterableTable/FilterableTable.tsx"],"names":[],"mappings":"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","sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { List } from 'immutable';\nimport JSONbig from 'json-bigint';\nimport React, { PureComponent } from 'react';\nimport JSONTree from 'react-json-tree';\nimport {\n  Column,\n  Grid,\n  ScrollSync,\n  SortDirection,\n  SortDirectionType,\n  SortIndicator,\n  Table,\n} from 'react-virtualized';\nimport { getMultipleTextDimensions, t, styled } from '@superset-ui/core';\nimport { Tooltip } from 'src/components/Tooltip';\nimport Button from '../Button';\nimport CopyToClipboard from '../CopyToClipboard';\nimport ModalTrigger from '../ModalTrigger';\n\nfunction safeJsonObjectParse(\n  data: unknown,\n): null | unknown[] | Record<string, unknown> {\n  // First perform a cheap proxy to avoid calling JSON.parse on data that is clearly not a\n  // JSON object or array\n  if (\n    typeof data !== 'string' ||\n    ['{', '['].indexOf(data.substring(0, 1)) === -1\n  ) {\n    return null;\n  }\n\n  // We know `data` is a string starting with '{' or '[', so try to parse it as a valid object\n  try {\n    const jsonData = JSON.parse(data);\n    if (jsonData && typeof jsonData === 'object') {\n      return jsonData;\n    }\n    return null;\n  } catch (_) {\n    return null;\n  }\n}\n\nconst SCROLL_BAR_HEIGHT = 15;\nconst GRID_POSITION_ADJUSTMENT = 4;\nconst JSON_TREE_THEME = {\n  scheme: 'monokai',\n  author: 'wimer hazenberg (http://www.monokai.nl)',\n  base00: '#272822',\n  base01: '#383830',\n  base02: '#49483e',\n  base03: '#75715e',\n  base04: '#a59f85',\n  base05: '#f8f8f2',\n  base06: '#f5f4f1',\n  base07: '#f9f8f5',\n  base08: '#f92672',\n  base09: '#fd971f',\n  base0A: '#f4bf75',\n  base0B: '#a6e22e',\n  base0C: '#a1efe4',\n  base0D: '#66d9ef',\n  base0E: '#ae81ff',\n  base0F: '#cc6633',\n};\n\nconst StyledFilterableTable = styled.div`\n  height: 100%;\n  overflow-x: auto;\n  margin-top: ${({ theme }) => theme.gridUnit * 2}px;\n  overflow-y: hidden;\n`;\n\n// when more than MAX_COLUMNS_FOR_TABLE are returned, switch from table to grid view\nexport const MAX_COLUMNS_FOR_TABLE = 50;\n\ntype CellDataType = string | number | null;\ntype Datum = Record<string, CellDataType>;\n\ninterface FilterableTableProps {\n  orderedColumnKeys: string[];\n  data: Record<string, unknown>[];\n  height: number;\n  filterText: string;\n  headerHeight: number;\n  overscanColumnCount: number;\n  overscanRowCount: number;\n  rowHeight: number;\n  striped: boolean;\n  expandedColumns: string[];\n}\n\ninterface FilterableTableState {\n  sortBy?: string;\n  sortDirection: SortDirectionType;\n  fitted: boolean;\n}\n\nexport default class FilterableTable extends PureComponent<\n  FilterableTableProps,\n  FilterableTableState\n> {\n  static defaultProps = {\n    filterText: '',\n    headerHeight: 32,\n    overscanColumnCount: 10,\n    overscanRowCount: 10,\n    rowHeight: 32,\n    striped: true,\n    expandedColumns: [],\n  };\n\n  list: List<Datum>;\n\n  complexColumns: Record<string, boolean>;\n\n  widthsForColumnsByKey: Record<string, number>;\n\n  totalTableWidth: number;\n\n  totalTableHeight: number;\n\n  container: React.RefObject<HTMLDivElement>;\n\n  constructor(props: FilterableTableProps) {\n    super(props);\n    this.list = List(this.formatTableData(props.data));\n    this.addJsonModal = this.addJsonModal.bind(this);\n    this.getCellContent = this.getCellContent.bind(this);\n    this.renderGridCell = this.renderGridCell.bind(this);\n    this.renderGridCellHeader = this.renderGridCellHeader.bind(this);\n    this.renderGrid = this.renderGrid.bind(this);\n    this.renderTableCell = this.renderTableCell.bind(this);\n    this.renderTableHeader = this.renderTableHeader.bind(this);\n    this.sortResults = this.sortResults.bind(this);\n    this.renderTable = this.renderTable.bind(this);\n    this.rowClassName = this.rowClassName.bind(this);\n    this.sort = this.sort.bind(this);\n\n    // columns that have complex type and were expanded into sub columns\n    this.complexColumns = props.orderedColumnKeys.reduce(\n      (obj, key) => ({\n        ...obj,\n        [key]: props.expandedColumns.some(name => name.startsWith(`${key}.`)),\n      }),\n      {},\n    );\n\n    this.widthsForColumnsByKey = this.getWidthsForColumns();\n    this.totalTableWidth = props.orderedColumnKeys\n      .map(key => this.widthsForColumnsByKey[key])\n      .reduce((curr, next) => curr + next);\n    this.totalTableHeight = props.height;\n\n    this.state = {\n      sortDirection: SortDirection.ASC,\n      fitted: false,\n    };\n\n    this.container = React.createRef();\n  }\n\n  componentDidMount() {\n    this.fitTableToWidthIfNeeded();\n  }\n\n  getDatum(list: List<Datum>, index: number) {\n    return list.get(index % list.size);\n  }\n\n  getWidthsForColumns() {\n    const PADDING = 40; // accounts for cell padding and width of sorting icon\n    const widthsByColumnKey = {};\n    const cellContent = [].concat(\n      ...this.props.orderedColumnKeys.map(key => {\n        const cellContentList = this.list.map((data: Datum) =>\n          this.getCellContent({ cellData: data[key], columnKey: key }),\n        ) as List<string | JSX.Element>;\n        return cellContentList.push(key).toJS();\n      }),\n    );\n\n    const colWidths = getMultipleTextDimensions({\n      className: 'cell-text-for-measuring',\n      texts: cellContent,\n    }).map(dimension => dimension.width);\n\n    this.props.orderedColumnKeys.forEach((key, index) => {\n      // we can't use Math.max(...colWidths.slice(...)) here since the number\n      // of elements might be bigger than the number of allowed arguments in a\n      // Javascript function\n      widthsByColumnKey[key] =\n        colWidths\n          .slice(\n            index * (this.list.size + 1),\n            (index + 1) * (this.list.size + 1),\n          )\n          .reduce((a, b) => Math.max(a, b)) + PADDING;\n    });\n\n    return widthsByColumnKey;\n  }\n\n  getCellContent({\n    cellData,\n    columnKey,\n  }: {\n    cellData: CellDataType;\n    columnKey: string;\n  }): string | JSX.Element {\n    if (cellData === null) {\n      return <i className=\"text-muted\">NULL</i>;\n    }\n    const content = String(cellData);\n    const firstCharacter = content.substring(0, 1);\n    let truncated;\n    if (firstCharacter === '[') {\n      truncated = '[…]';\n    } else if (firstCharacter === '{') {\n      truncated = '{…}';\n    } else {\n      truncated = '';\n    }\n    return this.complexColumns[columnKey] ? truncated : content;\n  }\n\n  formatTableData(data: Record<string, unknown>[]): Datum[] {\n    return data.map(row => {\n      const newRow = {};\n      Object.entries(row).forEach(([key, val]) => {\n        if (['string', 'number'].indexOf(typeof val) >= 0) {\n          newRow[key] = val;\n        } else {\n          newRow[key] = val === null ? null : JSONbig.stringify(val);\n        }\n      });\n      return newRow;\n    });\n  }\n\n  hasMatch(text: string, row: Datum) {\n    const values: string[] = [];\n    Object.keys(row).forEach(key => {\n      if (row.hasOwnProperty(key)) {\n        const cellValue = row[key];\n        if (typeof cellValue === 'string') {\n          values.push(cellValue.toLowerCase());\n        } else if (\n          cellValue !== null &&\n          typeof cellValue.toString === 'function'\n        ) {\n          values.push(cellValue.toString());\n        }\n      }\n    });\n    const lowerCaseText = text.toLowerCase();\n    return values.some(v => v.includes(lowerCaseText));\n  }\n\n  rowClassName({ index }: { index: number }) {\n    let className = '';\n    if (this.props.striped) {\n      className = index % 2 === 0 ? 'even-row' : 'odd-row';\n    }\n    return className;\n  }\n\n  sort({\n    sortBy,\n    sortDirection,\n  }: {\n    sortBy: string;\n    sortDirection: SortDirectionType;\n  }) {\n    this.setState({ sortBy, sortDirection });\n  }\n\n  fitTableToWidthIfNeeded() {\n    const containerWidth = this.container.current?.clientWidth ?? 0;\n    if (this.totalTableWidth < containerWidth) {\n      // fit table width if content doesn't fill the width of the container\n      this.totalTableWidth = containerWidth;\n    }\n    this.setState({ fitted: true });\n  }\n\n  addJsonModal(\n    node: React.ReactNode,\n    jsonObject: Record<string, unknown> | unknown[],\n    jsonString: CellDataType,\n  ) {\n    return (\n      <ModalTrigger\n        modalBody={<JSONTree data={jsonObject} theme={JSON_TREE_THEME} />}\n        modalFooter={\n          <Button>\n            <CopyToClipboard shouldShowText={false} text={jsonString} />\n          </Button>\n        }\n        modalTitle={t('Cell content')}\n        triggerNode={node}\n      />\n    );\n  }\n\n  sortResults(sortBy: string, descending: boolean) {\n    return (a: Datum, b: Datum) => {\n      const aValue = a[sortBy];\n      const bValue = b[sortBy];\n      if (aValue === bValue) {\n        // equal items sort equally\n        return 0;\n      }\n      if (aValue === null) {\n        // nulls sort after anything else\n        return 1;\n      }\n      if (bValue === null) {\n        return -1;\n      }\n      if (descending) {\n        return aValue < bValue ? 1 : -1;\n      }\n      return aValue < bValue ? -1 : 1;\n    };\n  }\n\n  renderTableHeader({\n    dataKey,\n    label,\n    sortBy,\n    sortDirection,\n  }: {\n    dataKey: string;\n    label: string;\n    sortBy: string;\n    sortDirection: SortDirectionType;\n  }) {\n    const className =\n      this.props.expandedColumns.indexOf(label) > -1\n        ? 'header-style-disabled'\n        : 'header-style';\n    return (\n      <Tooltip id=\"header-tooltip\" title={label}>\n        <div className={className}>\n          {label}\n          {sortBy === dataKey && (\n            <SortIndicator sortDirection={sortDirection} />\n          )}\n        </div>\n      </Tooltip>\n    );\n  }\n\n  renderGridCellHeader({\n    columnIndex,\n    key,\n    style,\n  }: {\n    columnIndex: number;\n    key: string;\n    style: React.CSSProperties;\n  }) {\n    const label = this.props.orderedColumnKeys[columnIndex];\n    const className =\n      this.props.expandedColumns.indexOf(label) > -1\n        ? 'header-style-disabled'\n        : 'header-style';\n    return (\n      <Tooltip key={key} id=\"header-tooltip\" title={label}>\n        <div\n          style={{\n            ...style,\n            top:\n              typeof style.top === 'number'\n                ? style.top - GRID_POSITION_ADJUSTMENT\n                : style.top,\n          }}\n          className={`${className} grid-cell grid-header-cell`}\n        >\n          {label}\n        </div>\n      </Tooltip>\n    );\n  }\n\n  renderGridCell({\n    columnIndex,\n    key,\n    rowIndex,\n    style,\n  }: {\n    columnIndex: number;\n    key: string;\n    rowIndex: number;\n    style: React.CSSProperties;\n  }) {\n    const columnKey = this.props.orderedColumnKeys[columnIndex];\n    const cellData = this.list.get(rowIndex)[columnKey];\n    const content = this.getCellContent({ cellData, columnKey });\n    const cellNode = (\n      <div\n        key={key}\n        style={{\n          ...style,\n          top:\n            typeof style.top === 'number'\n              ? style.top - GRID_POSITION_ADJUSTMENT\n              : style.top,\n        }}\n        className={`grid-cell ${this.rowClassName({ index: rowIndex })}`}\n      >\n        {content}\n      </div>\n    );\n\n    const jsonObject = safeJsonObjectParse(cellData);\n    if (jsonObject) {\n      return this.addJsonModal(cellNode, jsonObject, cellData);\n    }\n    return cellNode;\n  }\n\n  renderGrid() {\n    const {\n      orderedColumnKeys,\n      overscanColumnCount,\n      overscanRowCount,\n      rowHeight,\n    } = this.props;\n\n    let { height } = this.props;\n    let totalTableHeight = height;\n    if (\n      this.container.current &&\n      this.totalTableWidth > this.container.current.clientWidth\n    ) {\n      // exclude the height of the horizontal scroll bar from the height of the table\n      // and the height of the table container if the content overflows\n      height -= SCROLL_BAR_HEIGHT;\n      totalTableHeight -= SCROLL_BAR_HEIGHT;\n    }\n\n    const getColumnWidth = ({ index }: { index: number }) =>\n      this.widthsForColumnsByKey[orderedColumnKeys[index]];\n\n    // fix height of filterable table\n    return (\n      <StyledFilterableTable>\n        <ScrollSync>\n          {({ onScroll, scrollTop }) => (\n            <div\n              className=\"filterable-table-container Table\"\n              data-test=\"filterable-table-container\"\n              ref={this.container}\n            >\n              <div className=\"LeftColumn\">\n                <Grid\n                  cellRenderer={this.renderGridCellHeader}\n                  columnCount={orderedColumnKeys.length}\n                  columnWidth={getColumnWidth}\n                  height={rowHeight}\n                  rowCount={1}\n                  rowHeight={rowHeight}\n                  scrollTop={scrollTop}\n                  width={this.totalTableWidth}\n                />\n              </div>\n              <div className=\"RightColumn\">\n                <Grid\n                  cellRenderer={this.renderGridCell}\n                  columnCount={orderedColumnKeys.length}\n                  columnWidth={getColumnWidth}\n                  height={totalTableHeight - rowHeight}\n                  onScroll={onScroll}\n                  overscanColumnCount={overscanColumnCount}\n                  overscanRowCount={overscanRowCount}\n                  rowCount={this.list.size}\n                  rowHeight={rowHeight}\n                  width={this.totalTableWidth}\n                />\n              </div>\n            </div>\n          )}\n        </ScrollSync>\n      </StyledFilterableTable>\n    );\n  }\n\n  renderTableCell({\n    cellData,\n    columnKey,\n  }: {\n    cellData: CellDataType;\n    columnKey: string;\n  }) {\n    const cellNode = this.getCellContent({ cellData, columnKey });\n    const jsonObject = safeJsonObjectParse(cellData);\n    if (jsonObject) {\n      return this.addJsonModal(cellNode, jsonObject, cellData);\n    }\n    return cellNode;\n  }\n\n  renderTable() {\n    const { sortBy, sortDirection } = this.state;\n    const {\n      filterText,\n      headerHeight,\n      orderedColumnKeys,\n      overscanRowCount,\n      rowHeight,\n    } = this.props;\n\n    let sortedAndFilteredList: List<Datum> = this.list;\n    // filter list\n    if (filterText) {\n      sortedAndFilteredList = this.list.filter((row: Datum) =>\n        this.hasMatch(filterText, row),\n      ) as List<Datum>;\n    }\n    // sort list\n    if (sortBy) {\n      sortedAndFilteredList = sortedAndFilteredList.sort(\n        this.sortResults(sortBy, sortDirection === SortDirection.DESC),\n      ) as List<Datum>;\n    }\n\n    let { height } = this.props;\n    let totalTableHeight = height;\n    if (\n      this.container.current &&\n      this.totalTableWidth > this.container.current.clientWidth\n    ) {\n      // exclude the height of the horizontal scroll bar from the height of the table\n      // and the height of the table container if the content overflows\n      height -= SCROLL_BAR_HEIGHT;\n      totalTableHeight -= SCROLL_BAR_HEIGHT;\n    }\n\n    const rowGetter = ({ index }: { index: number }) =>\n      this.getDatum(sortedAndFilteredList, index);\n    return (\n      <StyledFilterableTable\n        className=\"filterable-table-container\"\n        ref={this.container}\n      >\n        {this.state.fitted && (\n          <Table\n            ref=\"Table\"\n            headerHeight={headerHeight}\n            height={totalTableHeight}\n            overscanRowCount={overscanRowCount}\n            rowClassName={this.rowClassName}\n            rowHeight={rowHeight}\n            rowGetter={rowGetter}\n            rowCount={sortedAndFilteredList.size}\n            sort={this.sort}\n            sortBy={sortBy}\n            sortDirection={sortDirection}\n            width={this.totalTableWidth}\n          >\n            {orderedColumnKeys.map(columnKey => (\n              <Column\n                cellRenderer={({ cellData }) =>\n                  this.renderTableCell({ cellData, columnKey })\n                }\n                dataKey={columnKey}\n                disableSort={false}\n                headerRenderer={this.renderTableHeader}\n                width={this.widthsForColumnsByKey[columnKey]}\n                label={columnKey}\n                key={columnKey}\n              />\n            ))}\n          </Table>\n        )}\n      </StyledFilterableTable>\n    );\n  }\n\n  render() {\n    if (this.props.orderedColumnKeys.length > MAX_COLUMNS_FOR_TABLE) {\n      return this.renderGrid();\n    }\n    return this.renderTable();\n  }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}