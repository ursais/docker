{"ast":null,"code":"import _Object$keys from \"@babel/runtime-corejs3/core-js-stable/object/keys\";import _startsWithInstanceProperty from \"@babel/runtime-corejs3/core-js-stable/instance/starts-with\";import _Object$values from \"@babel/runtime-corejs3/core-js-stable/object/values\";import _forEachInstanceProperty from \"@babel/runtime-corejs3/core-js-stable/instance/for-each\";(function () {var enterModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.enterModule : undefined;enterModule && enterModule(module);})();var __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default.signature : function (a) {return a;}; /**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n/* eslint-disable no-param-reassign */\n// <- When we work with Immer, we need reassign, so disabling lint\nimport produce from 'immer';\nimport { FeatureFlag } from '@superset-ui/core';\nimport { NATIVE_FILTER_PREFIX } from 'src/dashboard/components/nativeFilters/FiltersConfigModal/utils';\nimport { HYDRATE_DASHBOARD } from 'src/dashboard/actions/hydrate';\nimport { isFeatureEnabled } from 'src/featureFlags';\nimport { SET_DATA_MASK_FOR_FILTER_CONFIG_COMPLETE, UPDATE_DATA_MASK } from './actions';\nimport { areObjectsEqual } from '../reduxUtils';\nexport function getInitialDataMask(id) {\n  let otherProps = {};\n  if (id) {\n    otherProps = {\n      id };\n\n  }\n  return {\n    ...otherProps,\n    extraFormData: {},\n    filterState: {\n      value: undefined },\n\n    ownState: {} };\n\n}\nfunction fillNativeFilters(filterConfig, mergedDataMask, draftDataMask, currentFilters) {var _context;\n  _forEachInstanceProperty(filterConfig).call(filterConfig, filter => {var _currentFilters$filte;\n    mergedDataMask[filter.id] = {\n      ...getInitialDataMask(filter.id),\n      ...filter.defaultDataMask,\n      ...draftDataMask[filter.id] };\n\n    // if we came from filters config modal and particular filters changed take it's dataMask\n    if (currentFilters &&\n    !areObjectsEqual(filter.defaultDataMask, (_currentFilters$filte = currentFilters[filter.id]) == null ? void 0 : _currentFilters$filte.defaultDataMask, { ignoreUndefined: true })) {\n      mergedDataMask[filter.id] = {\n        ...mergedDataMask[filter.id],\n        ...filter.defaultDataMask };\n\n    }\n  });\n  // Get back all other non-native filters\n  _forEachInstanceProperty(_context = _Object$values(draftDataMask)).call(_context, filter => {var _context2;\n    if (!_startsWithInstanceProperty(_context2 = String(filter == null ? void 0 : filter.id)).call(_context2, NATIVE_FILTER_PREFIX)) {\n      mergedDataMask[filter == null ? void 0 : filter.id] = filter;\n    }\n  });\n}\nconst dataMaskReducer = produce((draft, action) => {var _action$data$dashboar3, _action$data$dashboar4, _action$data$dashboar5, _action$filterConfig;\n  const cleanState = {};\n  switch (action.type) {\n    case UPDATE_DATA_MASK:\n      draft[action.filterId] = {\n        ...getInitialDataMask(action.filterId),\n        ...draft[action.filterId],\n        ...action.dataMask };\n\n      return draft;\n    // TODO: update hydrate to .ts\n    // @ts-ignore\n    case HYDRATE_DASHBOARD:\n      if (isFeatureEnabled(FeatureFlag.DASHBOARD_CROSS_FILTERS)) {var _context3, _action$data$dashboar, _action$data$dashboar2;\n        _forEachInstanceProperty(_context3 = _Object$keys(\n        // @ts-ignore\n        (_action$data$dashboar = action.data.dashboardInfo) == null ? void 0 : (_action$data$dashboar2 = _action$data$dashboar.metadata) == null ? void 0 : _action$data$dashboar2.chart_configuration)).call(_context3, id => {\n          cleanState[id] = {\n            ...getInitialDataMask(id) };\n\n        });\n      }\n      fillNativeFilters(\n      // @ts-ignore\n      (_action$data$dashboar3 = (_action$data$dashboar4 = action.data.dashboardInfo) == null ? void 0 : (_action$data$dashboar5 = _action$data$dashboar4.metadata) == null ? void 0 : _action$data$dashboar5.native_filter_configuration) != null ? _action$data$dashboar3 :\n      [], cleanState, draft);\n      return cleanState;\n    case SET_DATA_MASK_FOR_FILTER_CONFIG_COMPLETE:\n      fillNativeFilters((_action$filterConfig = action.filterConfig) != null ? _action$filterConfig : [], cleanState, draft, action.filters);\n      return cleanState;\n    default:\n      return draft;}\n\n}, {});const _default =\ndataMaskReducer;export default _default;;(function () {var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined;if (!reactHotLoader) {return;}reactHotLoader.register(getInitialDataMask, \"getInitialDataMask\", \"/app/superset-frontend/src/dataMask/reducer.ts\");reactHotLoader.register(fillNativeFilters, \"fillNativeFilters\", \"/app/superset-frontend/src/dataMask/reducer.ts\");reactHotLoader.register(dataMaskReducer, \"dataMaskReducer\", \"/app/superset-frontend/src/dataMask/reducer.ts\");reactHotLoader.register(_default, \"default\", \"/app/superset-frontend/src/dataMask/reducer.ts\");})();;(function () {var leaveModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.leaveModule : undefined;leaveModule && leaveModule(module);})();","map":{"version":3,"sources":["/app/superset-frontend/src/dataMask/reducer.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\n/* eslint-disable no-param-reassign */\n// <- When we work with Immer, we need reassign, so disabling lint\nimport produce from 'immer';\nimport { DataMask, FeatureFlag } from '@superset-ui/core';\nimport { NATIVE_FILTER_PREFIX } from 'src/dashboard/components/nativeFilters/FiltersConfigModal/utils';\nimport { HYDRATE_DASHBOARD } from 'src/dashboard/actions/hydrate';\nimport { isFeatureEnabled } from 'src/featureFlags';\nimport { DataMaskStateWithId, DataMaskWithId } from './types';\nimport {\n  AnyDataMaskAction,\n  SET_DATA_MASK_FOR_FILTER_CONFIG_COMPLETE,\n  UPDATE_DATA_MASK,\n} from './actions';\nimport {\n  Filter,\n  FilterConfiguration,\n} from '../dashboard/components/nativeFilters/types';\nimport { areObjectsEqual } from '../reduxUtils';\nimport { Filters } from '../dashboard/reducers/types';\n\nexport function getInitialDataMask(id?: string): DataMask;\nexport function getInitialDataMask(id: string): DataMaskWithId {\n  let otherProps = {};\n  if (id) {\n    otherProps = {\n      id,\n    };\n  }\n  return {\n    ...otherProps,\n    extraFormData: {},\n    filterState: {\n      value: undefined,\n    },\n    ownState: {},\n  } as DataMaskWithId;\n}\n\nfunction fillNativeFilters(\n  filterConfig: FilterConfiguration,\n  mergedDataMask: DataMaskStateWithId,\n  draftDataMask: DataMaskStateWithId,\n  currentFilters?: Filters,\n) {\n  filterConfig.forEach((filter: Filter) => {\n    mergedDataMask[filter.id] = {\n      ...getInitialDataMask(filter.id), // take initial data\n      ...filter.defaultDataMask, // if something new came from BE - take it\n      ...draftDataMask[filter.id], // keep local filter data\n    };\n    // if we came from filters config modal and particular filters changed take it's dataMask\n    if (\n      currentFilters &&\n      !areObjectsEqual(\n        filter.defaultDataMask,\n        currentFilters[filter.id]?.defaultDataMask,\n        { ignoreUndefined: true },\n      )\n    ) {\n      mergedDataMask[filter.id] = {\n        ...mergedDataMask[filter.id],\n        ...filter.defaultDataMask,\n      };\n    }\n  });\n\n  // Get back all other non-native filters\n  Object.values(draftDataMask).forEach(filter => {\n    if (!String(filter?.id).startsWith(NATIVE_FILTER_PREFIX)) {\n      mergedDataMask[filter?.id] = filter;\n    }\n  });\n}\n\nconst dataMaskReducer = produce(\n  (draft: DataMaskStateWithId, action: AnyDataMaskAction) => {\n    const cleanState = {};\n    switch (action.type) {\n      case UPDATE_DATA_MASK:\n        draft[action.filterId] = {\n          ...getInitialDataMask(action.filterId),\n          ...draft[action.filterId],\n          ...action.dataMask,\n        };\n        return draft;\n      // TODO: update hydrate to .ts\n      // @ts-ignore\n      case HYDRATE_DASHBOARD:\n        if (isFeatureEnabled(FeatureFlag.DASHBOARD_CROSS_FILTERS)) {\n          Object.keys(\n            // @ts-ignore\n            action.data.dashboardInfo?.metadata?.chart_configuration,\n          ).forEach(id => {\n            cleanState[id] = {\n              ...getInitialDataMask(id), // take initial data\n            };\n          });\n        }\n        fillNativeFilters(\n          // @ts-ignore\n          action.data.dashboardInfo?.metadata?.native_filter_configuration ??\n            [],\n          cleanState,\n          draft,\n        );\n        return cleanState;\n      case SET_DATA_MASK_FOR_FILTER_CONFIG_COMPLETE:\n        fillNativeFilters(\n          action.filterConfig ?? [],\n          cleanState,\n          draft,\n          action.filters,\n        );\n        return cleanState;\n\n      default:\n        return draft;\n    }\n  },\n  {},\n);\n\nexport default dataMaskReducer;\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}