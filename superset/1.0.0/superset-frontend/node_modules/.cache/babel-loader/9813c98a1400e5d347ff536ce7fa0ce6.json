{"ast":null,"code":"import _sliceInstanceProperty from \"@babel/runtime-corejs3/core-js-stable/instance/slice\";(function () {var enterModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.enterModule : undefined;enterModule && enterModule(module);})();var __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default.signature : function (a) {return a;}; /**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n/* eslint-disable camelcase */\n/* eslint prefer-const: 2 */\nimport shortid from 'shortid';\nimport { SupersetClient } from '@superset-ui/core';\n\nimport { safeStringify } from '../utils/safeStringify';\nimport { LOG_EVENT } from '../logger/actions';\nimport { LOG_EVENT_TYPE_TIMING } from '../logger/LogUtils';\nimport DebouncedMessageQueue from '../utils/DebouncedMessageQueue';\n\nconst LOG_ENDPOINT = '/superset/log/?explode=events';\nconst sendBeacon = events => {\n  if (events.length <= 0) {\n    return;\n  }\n\n  let endpoint = LOG_ENDPOINT;\n  const { source, source_id } = events[0];\n  // backend logs treat these request params as first-class citizens\n  if (source === 'dashboard') {\n    endpoint += `&dashboard_id=${source_id}`;\n  } else if (source === 'slice') {\n    endpoint += `&slice_id=${source_id}`;\n  }\n\n  if (navigator.sendBeacon) {\n    const formData = new FormData();\n    formData.append('events', safeStringify(events));\n    navigator.sendBeacon(endpoint, formData);\n  } else {\n    SupersetClient.post({\n      endpoint,\n      postPayload: { events },\n      parseMethod: null });\n\n  }\n};\n\n// beacon API has data size limit = 2^16.\n// assume avg each log entry has 2^6 characters\nconst MAX_EVENTS_PER_REQUEST = 1024;\nconst logMessageQueue = new DebouncedMessageQueue({\n  callback: sendBeacon,\n  sizeThreshold: MAX_EVENTS_PER_REQUEST,\n  delayThreshold: 1000 });\n\nlet lastEventId = 0;\nconst loggerMiddleware = store => next => action => {var _dashboardLayout$pres;\n  if (action.type !== LOG_EVENT) {\n    return next(action);\n  }\n\n  const {\n    dashboardInfo,\n    explore,\n    impressionId,\n    dashboardLayout } =\n  store.getState();\n  let logMetadata = {\n    impression_id: impressionId,\n    version: 'v2' };\n\n  if (dashboardInfo) {\n    logMetadata = {\n      source: 'dashboard',\n      source_id: dashboardInfo.id,\n      ...logMetadata };\n\n  } else if (explore) {\n    logMetadata = {\n      source: 'explore',\n      source_id: _sliceInstanceProperty(explore) ? _sliceInstanceProperty(explore).slice_id : 0,\n      ...logMetadata };\n\n  }\n\n  const { eventName } = action.payload;\n  let { eventData = {} } = action.payload;\n  eventData = {\n    ...logMetadata,\n    ts: new Date().getTime(),\n    event_name: eventName,\n    ...eventData };\n\n  if (LOG_EVENT_TYPE_TIMING.has(eventName)) {\n    eventData = {\n      ...eventData,\n      event_type: 'timing',\n      trigger_event: lastEventId };\n\n  } else {\n    lastEventId = shortid.generate();\n    eventData = {\n      ...eventData,\n      event_type: 'user',\n      event_id: lastEventId,\n      visibility: document.visibilityState };\n\n  }\n\n  if (eventData.target_id && dashboardLayout != null && (_dashboardLayout$pres = dashboardLayout.present) != null && _dashboardLayout$pres[eventData.target_id]) {\n    const { meta } = dashboardLayout.present[eventData.target_id];\n    // chart name or tab/header text\n    eventData.target_name = meta.chartId ? meta.sliceName : meta.text;\n  }\n\n  logMessageQueue.append(eventData);\n  return eventData;\n};const _default =\n\nloggerMiddleware;export default _default;;(function () {var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined;if (!reactHotLoader) {return;}reactHotLoader.register(LOG_ENDPOINT, \"LOG_ENDPOINT\", \"/app/superset-frontend/src/middleware/loggerMiddleware.js\");reactHotLoader.register(sendBeacon, \"sendBeacon\", \"/app/superset-frontend/src/middleware/loggerMiddleware.js\");reactHotLoader.register(MAX_EVENTS_PER_REQUEST, \"MAX_EVENTS_PER_REQUEST\", \"/app/superset-frontend/src/middleware/loggerMiddleware.js\");reactHotLoader.register(logMessageQueue, \"logMessageQueue\", \"/app/superset-frontend/src/middleware/loggerMiddleware.js\");reactHotLoader.register(lastEventId, \"lastEventId\", \"/app/superset-frontend/src/middleware/loggerMiddleware.js\");reactHotLoader.register(loggerMiddleware, \"loggerMiddleware\", \"/app/superset-frontend/src/middleware/loggerMiddleware.js\");reactHotLoader.register(_default, \"default\", \"/app/superset-frontend/src/middleware/loggerMiddleware.js\");})();;(function () {var leaveModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.leaveModule : undefined;leaveModule && leaveModule(module);})();","map":{"version":3,"sources":["/app/superset-frontend/src/middleware/loggerMiddleware.js"],"names":["shortid","SupersetClient","safeStringify","LOG_EVENT","LOG_EVENT_TYPE_TIMING","DebouncedMessageQueue","LOG_ENDPOINT","sendBeacon","events","length","endpoint","source","source_id","navigator","formData","FormData","append","post","postPayload","parseMethod","MAX_EVENTS_PER_REQUEST","logMessageQueue","callback","sizeThreshold","delayThreshold","lastEventId","loggerMiddleware","store","next","action","type","dashboardInfo","explore","impressionId","dashboardLayout","getState","logMetadata","impression_id","version","id","slice_id","eventName","payload","eventData","ts","Date","getTime","event_name","has","event_type","trigger_event","generate","event_id","visibility","document","visibilityState","target_id","present","meta","target_name","chartId","sliceName","text"],"mappings":"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","sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n/* eslint-disable camelcase */\n/* eslint prefer-const: 2 */\nimport shortid from 'shortid';\nimport { SupersetClient } from '@superset-ui/core';\n\nimport { safeStringify } from '../utils/safeStringify';\nimport { LOG_EVENT } from '../logger/actions';\nimport { LOG_EVENT_TYPE_TIMING } from '../logger/LogUtils';\nimport DebouncedMessageQueue from '../utils/DebouncedMessageQueue';\n\nconst LOG_ENDPOINT = '/superset/log/?explode=events';\nconst sendBeacon = events => {\n  if (events.length <= 0) {\n    return;\n  }\n\n  let endpoint = LOG_ENDPOINT;\n  const { source, source_id } = events[0];\n  // backend logs treat these request params as first-class citizens\n  if (source === 'dashboard') {\n    endpoint += `&dashboard_id=${source_id}`;\n  } else if (source === 'slice') {\n    endpoint += `&slice_id=${source_id}`;\n  }\n\n  if (navigator.sendBeacon) {\n    const formData = new FormData();\n    formData.append('events', safeStringify(events));\n    navigator.sendBeacon(endpoint, formData);\n  } else {\n    SupersetClient.post({\n      endpoint,\n      postPayload: { events },\n      parseMethod: null,\n    });\n  }\n};\n\n// beacon API has data size limit = 2^16.\n// assume avg each log entry has 2^6 characters\nconst MAX_EVENTS_PER_REQUEST = 1024;\nconst logMessageQueue = new DebouncedMessageQueue({\n  callback: sendBeacon,\n  sizeThreshold: MAX_EVENTS_PER_REQUEST,\n  delayThreshold: 1000,\n});\nlet lastEventId = 0;\nconst loggerMiddleware = store => next => action => {\n  if (action.type !== LOG_EVENT) {\n    return next(action);\n  }\n\n  const {\n    dashboardInfo,\n    explore,\n    impressionId,\n    dashboardLayout,\n  } = store.getState();\n  let logMetadata = {\n    impression_id: impressionId,\n    version: 'v2',\n  };\n  if (dashboardInfo) {\n    logMetadata = {\n      source: 'dashboard',\n      source_id: dashboardInfo.id,\n      ...logMetadata,\n    };\n  } else if (explore) {\n    logMetadata = {\n      source: 'explore',\n      source_id: explore.slice ? explore.slice.slice_id : 0,\n      ...logMetadata,\n    };\n  }\n\n  const { eventName } = action.payload;\n  let { eventData = {} } = action.payload;\n  eventData = {\n    ...logMetadata,\n    ts: new Date().getTime(),\n    event_name: eventName,\n    ...eventData,\n  };\n  if (LOG_EVENT_TYPE_TIMING.has(eventName)) {\n    eventData = {\n      ...eventData,\n      event_type: 'timing',\n      trigger_event: lastEventId,\n    };\n  } else {\n    lastEventId = shortid.generate();\n    eventData = {\n      ...eventData,\n      event_type: 'user',\n      event_id: lastEventId,\n      visibility: document.visibilityState,\n    };\n  }\n\n  if (eventData.target_id && dashboardLayout?.present?.[eventData.target_id]) {\n    const { meta } = dashboardLayout.present[eventData.target_id];\n    // chart name or tab/header text\n    eventData.target_name = meta.chartId ? meta.sliceName : meta.text;\n  }\n\n  logMessageQueue.append(eventData);\n  return eventData;\n};\n\nexport default loggerMiddleware;\n"]},"metadata":{},"sourceType":"module"}