{"ast":null,"code":"import _setTimeout from \"@babel/runtime-corejs3/core-js-stable/set-timeout\";import _forEachInstanceProperty from \"@babel/runtime-corejs3/core-js-stable/instance/for-each\";import _Object$keys from \"@babel/runtime-corejs3/core-js-stable/object/keys\";import _Promise from \"@babel/runtime-corejs3/core-js-stable/promise\";(function () {var enterModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.enterModule : undefined;enterModule && enterModule(module);})();var __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default.signature : function (a) {return a;}; /**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { ensureIsArray, makeApi, SupersetClient } from '@superset-ui/core';\nimport { FeatureFlag, isFeatureEnabled } from '../featureFlags';\nimport { getClientErrorObject, parseErrorJson } from '../utils/getClientErrorObject';\nconst TRANSPORT_POLLING = 'polling';\nconst TRANSPORT_WS = 'ws';\nconst JOB_STATUS = {\n  PENDING: 'pending',\n  RUNNING: 'running',\n  ERROR: 'error',\n  DONE: 'done' };\n\nconst LOCALSTORAGE_KEY = 'last_async_event_id';\nconst POLLING_URL = '/api/v1/async_event/';\nconst MAX_RETRIES = 6;\nconst RETRY_DELAY = 100;\nlet config;\nlet transport;\nlet pollingDelayMs;\nlet pollingTimeoutId;\nlet listenersByJobId;\nlet retriesByJobId;\nlet lastReceivedEventId;\nexport const init = appConfig => {\n  if (!isFeatureEnabled(FeatureFlag.GLOBAL_ASYNC_QUERIES))\n  return;\n  if (pollingTimeoutId)\n  clearTimeout(pollingTimeoutId);\n  listenersByJobId = {};\n  retriesByJobId = {};\n  lastReceivedEventId = null;\n  if (appConfig) {\n    config = appConfig;\n  } else\n  {\n    // load bootstrap data from DOM\n    const appContainer = document.getElementById('app');\n    if (appContainer) {var _bootstrapData$common;\n      const bootstrapData = JSON.parse((appContainer == null ? void 0 : appContainer.getAttribute('data-bootstrap')) || '{}');\n      config = bootstrapData == null ? void 0 : (_bootstrapData$common = bootstrapData.common) == null ? void 0 : _bootstrapData$common.conf;\n    } else\n    {\n      config = {};\n      console.warn('asyncEvent: app config data not found');\n    }\n  }\n  transport = config.GLOBAL_ASYNC_QUERIES_TRANSPORT || TRANSPORT_POLLING;\n  pollingDelayMs = config.GLOBAL_ASYNC_QUERIES_POLLING_DELAY || 500;\n  try {\n    lastReceivedEventId = localStorage.getItem(LOCALSTORAGE_KEY);\n  }\n  catch (err) {\n    console.warn('Failed to fetch last event Id from localStorage');\n  }\n  if (transport === TRANSPORT_POLLING) {\n    loadEventsFromApi();\n  }\n  if (transport === TRANSPORT_WS) {\n    wsConnect();\n  }\n};\nconst addListener = (id, fn) => {\n  listenersByJobId[id] = fn;\n};\nconst removeListener = id => {\n  if (!listenersByJobId[id])\n  return;\n  delete listenersByJobId[id];\n};\nexport const waitForAsyncData = async asyncResponse => new _Promise((resolve, reject) => {\n  const jobId = asyncResponse.job_id;\n  const listener = async asyncEvent => {\n    switch (asyncEvent.status) {\n      case JOB_STATUS.DONE:{\n          let { data, status } = await fetchCachedData(asyncEvent); // eslint-disable-line prefer-const\n          data = ensureIsArray(data);\n          if (status === 'success') {\n            resolve(data);\n          } else\n          {\n            reject(data);\n          }\n          break;\n        }\n      case JOB_STATUS.ERROR:{\n          const err = parseErrorJson(asyncEvent);\n          reject(err);\n          break;\n        }\n      default:{\n          console.warn('received event with status', asyncEvent.status);\n        }}\n\n    removeListener(jobId);\n  };\n  addListener(jobId, listener);\n});\nconst fetchEvents = makeApi({\n  method: 'GET',\n  endpoint: POLLING_URL });\n\nconst fetchCachedData = async asyncEvent => {\n  let status = 'success';\n  let data;\n  try {\n    const { json } = await SupersetClient.get({\n      endpoint: String(asyncEvent.result_url) });\n\n    data = 'result' in json ? json.result : json;\n  }\n  catch (response) {\n    status = 'error';\n    data = await getClientErrorObject(response);\n  }\n  return { status, data };\n};\nconst setLastId = asyncEvent => {\n  lastReceivedEventId = asyncEvent.id;\n  try {\n    localStorage.setItem(LOCALSTORAGE_KEY, lastReceivedEventId);\n  }\n  catch (err) {\n    console.warn('Error saving event Id to localStorage', err);\n  }\n};\nconst loadEventsFromApi = async () => {\n  const eventArgs = lastReceivedEventId ? { last_id: lastReceivedEventId } : {};\n  if (_Object$keys(listenersByJobId).length) {\n    try {\n      const { result: events } = await fetchEvents(eventArgs);\n      if (events && events.length)\n      await processEvents(events);\n    }\n    catch (err) {\n      console.warn(err);\n    }\n  }\n  if (transport === TRANSPORT_POLLING) {\n    pollingTimeoutId = window.setTimeout(loadEventsFromApi, pollingDelayMs);\n  }\n};\nexport const processEvents = async events => {\n  _forEachInstanceProperty(events).call(events, asyncEvent => {\n    const jobId = asyncEvent.job_id;\n    const listener = listenersByJobId[jobId];\n    if (listener) {\n      listener(asyncEvent);\n      delete retriesByJobId[jobId];\n    } else\n    {\n      // handle race condition where event is received\n      // before listener is registered\n      if (!retriesByJobId[jobId])\n      retriesByJobId[jobId] = 0;\n      retriesByJobId[jobId] += 1;\n      if (retriesByJobId[jobId] <= MAX_RETRIES) {\n        _setTimeout(() => {\n          processEvents([asyncEvent]);\n        }, RETRY_DELAY * retriesByJobId[jobId]);\n      } else\n      {\n        delete retriesByJobId[jobId];\n        console.warn('listener not found for job_id', asyncEvent.job_id);\n      }\n    }\n    setLastId(asyncEvent);\n  });\n};\nconst wsConnectMaxRetries = 6;\nconst wsConnectErrorDelay = 2500;\nlet wsConnectRetries = 0;\nlet wsConnectTimeout;\nlet ws;\nconst wsConnect = () => {\n  let url = config.GLOBAL_ASYNC_QUERIES_WEBSOCKET_URL;\n  if (lastReceivedEventId)\n  url += `?last_id=${lastReceivedEventId}`;\n  ws = new WebSocket(url);\n  ws.addEventListener('open', event => {\n    console.log('WebSocket connected');\n    clearTimeout(wsConnectTimeout);\n    wsConnectRetries = 0;\n  });\n  ws.addEventListener('close', event => {\n    wsConnectTimeout = _setTimeout(() => {\n      wsConnectRetries += 1;\n      if (wsConnectRetries <= wsConnectMaxRetries) {\n        wsConnect();\n      } else\n      {\n        console.warn('WebSocket not available, falling back to async polling');\n        loadEventsFromApi();\n      }\n    }, wsConnectErrorDelay);\n  });\n  ws.addEventListener('error', event => {\n    // https://developer.mozilla.org/en-US/docs/Web/API/WebSocket/readyState\n    if (ws.readyState < 2)\n    ws.close();\n  });\n  ws.addEventListener('message', async event => {\n    let events = [];\n    try {\n      events = [JSON.parse(event.data)];\n      await processEvents(events);\n    }\n    catch (err) {\n      console.warn(err);\n    }\n  });\n};\ninit();;(function () {var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined;if (!reactHotLoader) {return;}reactHotLoader.register(TRANSPORT_POLLING, \"TRANSPORT_POLLING\", \"/app/superset-frontend/src/middleware/asyncEvent.ts\");reactHotLoader.register(TRANSPORT_WS, \"TRANSPORT_WS\", \"/app/superset-frontend/src/middleware/asyncEvent.ts\");reactHotLoader.register(JOB_STATUS, \"JOB_STATUS\", \"/app/superset-frontend/src/middleware/asyncEvent.ts\");reactHotLoader.register(LOCALSTORAGE_KEY, \"LOCALSTORAGE_KEY\", \"/app/superset-frontend/src/middleware/asyncEvent.ts\");reactHotLoader.register(POLLING_URL, \"POLLING_URL\", \"/app/superset-frontend/src/middleware/asyncEvent.ts\");reactHotLoader.register(MAX_RETRIES, \"MAX_RETRIES\", \"/app/superset-frontend/src/middleware/asyncEvent.ts\");reactHotLoader.register(RETRY_DELAY, \"RETRY_DELAY\", \"/app/superset-frontend/src/middleware/asyncEvent.ts\");reactHotLoader.register(config, \"config\", \"/app/superset-frontend/src/middleware/asyncEvent.ts\");reactHotLoader.register(transport, \"transport\", \"/app/superset-frontend/src/middleware/asyncEvent.ts\");reactHotLoader.register(pollingDelayMs, \"pollingDelayMs\", \"/app/superset-frontend/src/middleware/asyncEvent.ts\");reactHotLoader.register(pollingTimeoutId, \"pollingTimeoutId\", \"/app/superset-frontend/src/middleware/asyncEvent.ts\");reactHotLoader.register(listenersByJobId, \"listenersByJobId\", \"/app/superset-frontend/src/middleware/asyncEvent.ts\");reactHotLoader.register(retriesByJobId, \"retriesByJobId\", \"/app/superset-frontend/src/middleware/asyncEvent.ts\");reactHotLoader.register(lastReceivedEventId, \"lastReceivedEventId\", \"/app/superset-frontend/src/middleware/asyncEvent.ts\");reactHotLoader.register(init, \"init\", \"/app/superset-frontend/src/middleware/asyncEvent.ts\");reactHotLoader.register(addListener, \"addListener\", \"/app/superset-frontend/src/middleware/asyncEvent.ts\");reactHotLoader.register(removeListener, \"removeListener\", \"/app/superset-frontend/src/middleware/asyncEvent.ts\");reactHotLoader.register(waitForAsyncData, \"waitForAsyncData\", \"/app/superset-frontend/src/middleware/asyncEvent.ts\");reactHotLoader.register(fetchEvents, \"fetchEvents\", \"/app/superset-frontend/src/middleware/asyncEvent.ts\");reactHotLoader.register(fetchCachedData, \"fetchCachedData\", \"/app/superset-frontend/src/middleware/asyncEvent.ts\");reactHotLoader.register(setLastId, \"setLastId\", \"/app/superset-frontend/src/middleware/asyncEvent.ts\");reactHotLoader.register(loadEventsFromApi, \"loadEventsFromApi\", \"/app/superset-frontend/src/middleware/asyncEvent.ts\");reactHotLoader.register(processEvents, \"processEvents\", \"/app/superset-frontend/src/middleware/asyncEvent.ts\");reactHotLoader.register(wsConnectMaxRetries, \"wsConnectMaxRetries\", \"/app/superset-frontend/src/middleware/asyncEvent.ts\");reactHotLoader.register(wsConnectErrorDelay, \"wsConnectErrorDelay\", \"/app/superset-frontend/src/middleware/asyncEvent.ts\");reactHotLoader.register(wsConnectRetries, \"wsConnectRetries\", \"/app/superset-frontend/src/middleware/asyncEvent.ts\");reactHotLoader.register(wsConnectTimeout, \"wsConnectTimeout\", \"/app/superset-frontend/src/middleware/asyncEvent.ts\");reactHotLoader.register(ws, \"ws\", \"/app/superset-frontend/src/middleware/asyncEvent.ts\");reactHotLoader.register(wsConnect, \"wsConnect\", \"/app/superset-frontend/src/middleware/asyncEvent.ts\");})();;(function () {var leaveModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.leaveModule : undefined;leaveModule && leaveModule(module);})();","map":{"version":3,"sources":["/app/superset-frontend/src/middleware/asyncEvent.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { ensureIsArray, makeApi, SupersetClient } from '@superset-ui/core';\nimport { SupersetError } from 'src/components/ErrorMessage/types';\nimport { FeatureFlag, isFeatureEnabled } from '../featureFlags';\nimport {\n  getClientErrorObject,\n  parseErrorJson,\n} from '../utils/getClientErrorObject';\n\ntype AsyncEvent = {\n  id?: string | null;\n  channel_id: string;\n  job_id: string;\n  user_id?: string;\n  status: string;\n  errors?: SupersetError[];\n  result_url: string | null;\n};\n\ntype CachedDataResponse = {\n  status: string;\n  data: any;\n};\ntype AppConfig = Record<string, any>;\ntype ListenerFn = (asyncEvent: AsyncEvent) => Promise<any>;\n\nconst TRANSPORT_POLLING = 'polling';\nconst TRANSPORT_WS = 'ws';\nconst JOB_STATUS = {\n  PENDING: 'pending',\n  RUNNING: 'running',\n  ERROR: 'error',\n  DONE: 'done',\n};\nconst LOCALSTORAGE_KEY = 'last_async_event_id';\nconst POLLING_URL = '/api/v1/async_event/';\nconst MAX_RETRIES = 6;\nconst RETRY_DELAY = 100;\n\nlet config: AppConfig;\nlet transport: string;\nlet pollingDelayMs: number;\nlet pollingTimeoutId: number;\nlet listenersByJobId: Record<string, ListenerFn>;\nlet retriesByJobId: Record<string, number>;\nlet lastReceivedEventId: string | null | undefined;\n\nexport const init = (appConfig?: AppConfig) => {\n  if (!isFeatureEnabled(FeatureFlag.GLOBAL_ASYNC_QUERIES)) return;\n  if (pollingTimeoutId) clearTimeout(pollingTimeoutId);\n\n  listenersByJobId = {};\n  retriesByJobId = {};\n  lastReceivedEventId = null;\n\n  if (appConfig) {\n    config = appConfig;\n  } else {\n    // load bootstrap data from DOM\n    const appContainer = document.getElementById('app');\n    if (appContainer) {\n      const bootstrapData = JSON.parse(\n        appContainer?.getAttribute('data-bootstrap') || '{}',\n      );\n      config = bootstrapData?.common?.conf;\n    } else {\n      config = {};\n      console.warn('asyncEvent: app config data not found');\n    }\n  }\n  transport = config.GLOBAL_ASYNC_QUERIES_TRANSPORT || TRANSPORT_POLLING;\n  pollingDelayMs = config.GLOBAL_ASYNC_QUERIES_POLLING_DELAY || 500;\n\n  try {\n    lastReceivedEventId = localStorage.getItem(LOCALSTORAGE_KEY);\n  } catch (err) {\n    console.warn('Failed to fetch last event Id from localStorage');\n  }\n\n  if (transport === TRANSPORT_POLLING) {\n    loadEventsFromApi();\n  }\n  if (transport === TRANSPORT_WS) {\n    wsConnect();\n  }\n};\n\nconst addListener = (id: string, fn: any) => {\n  listenersByJobId[id] = fn;\n};\n\nconst removeListener = (id: string) => {\n  if (!listenersByJobId[id]) return;\n  delete listenersByJobId[id];\n};\n\nexport const waitForAsyncData = async (asyncResponse: AsyncEvent) =>\n  new Promise((resolve, reject) => {\n    const jobId = asyncResponse.job_id;\n    const listener = async (asyncEvent: AsyncEvent) => {\n      switch (asyncEvent.status) {\n        case JOB_STATUS.DONE: {\n          let { data, status } = await fetchCachedData(asyncEvent); // eslint-disable-line prefer-const\n          data = ensureIsArray(data);\n          if (status === 'success') {\n            resolve(data);\n          } else {\n            reject(data);\n          }\n          break;\n        }\n        case JOB_STATUS.ERROR: {\n          const err = parseErrorJson(asyncEvent);\n          reject(err);\n          break;\n        }\n        default: {\n          console.warn('received event with status', asyncEvent.status);\n        }\n      }\n      removeListener(jobId);\n    };\n    addListener(jobId, listener);\n  });\n\nconst fetchEvents = makeApi<\n  { last_id?: string | null },\n  { result: AsyncEvent[] }\n>({\n  method: 'GET',\n  endpoint: POLLING_URL,\n});\n\nconst fetchCachedData = async (\n  asyncEvent: AsyncEvent,\n): Promise<CachedDataResponse> => {\n  let status = 'success';\n  let data;\n  try {\n    const { json } = await SupersetClient.get({\n      endpoint: String(asyncEvent.result_url),\n    });\n    data = 'result' in json ? json.result : json;\n  } catch (response) {\n    status = 'error';\n    data = await getClientErrorObject(response);\n  }\n\n  return { status, data };\n};\n\nconst setLastId = (asyncEvent: AsyncEvent) => {\n  lastReceivedEventId = asyncEvent.id;\n  try {\n    localStorage.setItem(LOCALSTORAGE_KEY, lastReceivedEventId as string);\n  } catch (err) {\n    console.warn('Error saving event Id to localStorage', err);\n  }\n};\n\nconst loadEventsFromApi = async () => {\n  const eventArgs = lastReceivedEventId ? { last_id: lastReceivedEventId } : {};\n  if (Object.keys(listenersByJobId).length) {\n    try {\n      const { result: events } = await fetchEvents(eventArgs);\n      if (events && events.length) await processEvents(events);\n    } catch (err) {\n      console.warn(err);\n    }\n  }\n\n  if (transport === TRANSPORT_POLLING) {\n    pollingTimeoutId = window.setTimeout(loadEventsFromApi, pollingDelayMs);\n  }\n};\n\nexport const processEvents = async (events: AsyncEvent[]) => {\n  events.forEach((asyncEvent: AsyncEvent) => {\n    const jobId = asyncEvent.job_id;\n    const listener = listenersByJobId[jobId];\n    if (listener) {\n      listener(asyncEvent);\n      delete retriesByJobId[jobId];\n    } else {\n      // handle race condition where event is received\n      // before listener is registered\n      if (!retriesByJobId[jobId]) retriesByJobId[jobId] = 0;\n      retriesByJobId[jobId] += 1;\n\n      if (retriesByJobId[jobId] <= MAX_RETRIES) {\n        setTimeout(() => {\n          processEvents([asyncEvent]);\n        }, RETRY_DELAY * retriesByJobId[jobId]);\n      } else {\n        delete retriesByJobId[jobId];\n        console.warn('listener not found for job_id', asyncEvent.job_id);\n      }\n    }\n    setLastId(asyncEvent);\n  });\n};\n\nconst wsConnectMaxRetries = 6;\nconst wsConnectErrorDelay = 2500;\nlet wsConnectRetries = 0;\nlet wsConnectTimeout: any;\nlet ws: WebSocket;\n\nconst wsConnect = (): void => {\n  let url = config.GLOBAL_ASYNC_QUERIES_WEBSOCKET_URL;\n  if (lastReceivedEventId) url += `?last_id=${lastReceivedEventId}`;\n  ws = new WebSocket(url);\n\n  ws.addEventListener('open', event => {\n    console.log('WebSocket connected');\n    clearTimeout(wsConnectTimeout);\n    wsConnectRetries = 0;\n  });\n\n  ws.addEventListener('close', event => {\n    wsConnectTimeout = setTimeout(() => {\n      wsConnectRetries += 1;\n      if (wsConnectRetries <= wsConnectMaxRetries) {\n        wsConnect();\n      } else {\n        console.warn('WebSocket not available, falling back to async polling');\n        loadEventsFromApi();\n      }\n    }, wsConnectErrorDelay);\n  });\n\n  ws.addEventListener('error', event => {\n    // https://developer.mozilla.org/en-US/docs/Web/API/WebSocket/readyState\n    if (ws.readyState < 2) ws.close();\n  });\n\n  ws.addEventListener('message', async event => {\n    let events: AsyncEvent[] = [];\n    try {\n      events = [JSON.parse(event.data)];\n      await processEvents(events);\n    } catch (err) {\n      console.warn(err);\n    }\n  });\n};\n\ninit();\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}