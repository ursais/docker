{"ast":null,"code":"import \"core-js/modules/web.dom-collections.iterator.js\";import _valuesInstanceProperty from \"@babel/runtime-corejs3/core-js-stable/instance/values\";import _includesInstanceProperty from \"@babel/runtime-corejs3/core-js-stable/instance/includes\";import _concatInstanceProperty from \"@babel/runtime-corejs3/core-js-stable/instance/concat\";import _Set from \"@babel/runtime-corejs3/core-js-stable/set\";import _Object$keys from \"@babel/runtime-corejs3/core-js-stable/object/keys\";import _Object$values from \"@babel/runtime-corejs3/core-js-stable/object/values\";import _forEachInstanceProperty from \"@babel/runtime-corejs3/core-js-stable/instance/for-each\";import _indexOfInstanceProperty from \"@babel/runtime-corejs3/core-js-stable/instance/index-of\";import _filterInstanceProperty from \"@babel/runtime-corejs3/core-js-stable/instance/filter\";import _bindInstanceProperty from \"@babel/runtime-corejs3/core-js-stable/instance/bind\";(function () {var enterModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.enterModule : undefined;enterModule && enterModule(module);})();var __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default.signature : function (a) {return a;}; /**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { isFeatureEnabled, t, FeatureFlag } from '@superset-ui/core';\n\nimport { PluginContext } from 'src/components/DynamicPlugins';\nimport Loading from 'src/components/Loading';\nimport getChartIdsFromLayout from '../util/getChartIdsFromLayout';\nimport getLayoutComponentFromChartId from '../util/getLayoutComponentFromChartId';\nimport DashboardBuilder from './DashboardBuilder/DashboardBuilder';\nimport {\nchartPropShape,\nslicePropShape,\ndashboardInfoPropShape,\ndashboardStatePropShape } from\n'../util/propShapes';\nimport {\nLOG_ACTIONS_HIDE_BROWSER_TAB,\nLOG_ACTIONS_MOUNT_DASHBOARD,\nLogger } from\n'../../logger/LogUtils';\nimport OmniContainer from '../../components/OmniContainer';\nimport { areObjectsEqual } from '../../reduxUtils';\n\nimport '../stylesheets/index.less';\nimport getLocationHash from '../util/getLocationHash';\nimport isDashboardEmpty from '../util/isDashboardEmpty';\nimport { getAffectedOwnDataCharts } from '../util/charts/getOwnDataCharts';import { jsx as ___EmotionJSX } from \"@emotion/react\";\n\nconst propTypes = {\n  actions: PropTypes.shape({\n    addSliceToDashboard: PropTypes.func.isRequired,\n    removeSliceFromDashboard: PropTypes.func.isRequired,\n    triggerQuery: PropTypes.func.isRequired,\n    logEvent: PropTypes.func.isRequired }).\n  isRequired,\n  dashboardInfo: dashboardInfoPropShape.isRequired,\n  dashboardState: dashboardStatePropShape.isRequired,\n  charts: PropTypes.objectOf(chartPropShape).isRequired,\n  slices: PropTypes.objectOf(slicePropShape).isRequired,\n  activeFilters: PropTypes.object.isRequired,\n  chartConfiguration: PropTypes.object.isRequired,\n  datasources: PropTypes.object.isRequired,\n  ownDataCharts: PropTypes.object.isRequired,\n  layout: PropTypes.object.isRequired,\n  impressionId: PropTypes.string.isRequired,\n  initMessages: PropTypes.array,\n  timeout: PropTypes.number,\n  userId: PropTypes.string };\n\n\nconst defaultProps = {\n  initMessages: [],\n  timeout: 60,\n  userId: '' };\n\n\nclass Dashboard extends React.PureComponent {\n\n\n  static onBeforeUnload(hasChanged) {\n    if (hasChanged) {\n      window.addEventListener('beforeunload', Dashboard.unload);\n    } else {\n      window.removeEventListener('beforeunload', Dashboard.unload);\n    }\n  }\n\n  static unload() {\n    const message = t('You have unsaved changes.');\n    window.event.returnValue = message; // Gecko + IE\n    return message; // Gecko + Webkit, Safari, Chrome etc.\n  }\n\n  constructor(props) {var _props$activeFilters, _props$ownDataCharts, _context;\n    super(props);\n    this.appliedFilters = (_props$activeFilters = props.activeFilters) != null ? _props$activeFilters : {};\n    this.appliedOwnDataCharts = (_props$ownDataCharts = props.ownDataCharts) != null ? _props$ownDataCharts : {};\n    this.onVisibilityChange = _bindInstanceProperty(_context = this.onVisibilityChange).call(_context, this);\n  }\n\n  componentDidMount() {\n    const appContainer = document.getElementById('app');\n    const bootstrapData = (appContainer == null ? void 0 : appContainer.getAttribute('data-bootstrap')) || '';\n    const { dashboardState, layout } = this.props;\n    const eventData = {\n      is_edit_mode: dashboardState.editMode,\n      mount_duration: Logger.getTimestamp(),\n      is_empty: isDashboardEmpty(layout),\n      is_published: dashboardState.isPublished,\n      bootstrap_data_length: bootstrapData.length };\n\n    const directLinkComponentId = getLocationHash();\n    if (directLinkComponentId) {\n      eventData.target_id = directLinkComponentId;\n    }\n    this.props.actions.logEvent(LOG_ACTIONS_MOUNT_DASHBOARD, eventData);\n\n    // Handle browser tab visibility change\n    if (document.visibilityState === 'hidden') {\n      this.visibilityEventData = {\n        start_offset: Logger.getTimestamp(),\n        ts: new Date().getTime() };\n\n    }\n    window.addEventListener('visibilitychange', this.onVisibilityChange);\n    this.applyCharts();\n  }\n\n  componentDidUpdate() {\n    this.applyCharts();\n  }\n\n  UNSAFE_componentWillReceiveProps(nextProps) {\n    const currentChartIds = getChartIdsFromLayout(this.props.layout);\n    const nextChartIds = getChartIdsFromLayout(nextProps.layout);\n\n    if (currentChartIds.length < nextChartIds.length) {\n      const newChartIds = _filterInstanceProperty(nextChartIds).call(nextChartIds,\n      key => _indexOfInstanceProperty(currentChartIds).call(currentChartIds, key) === -1);\n\n      _forEachInstanceProperty(newChartIds).call(newChartIds, (newChartId) =>\n      this.props.actions.addSliceToDashboard(\n      newChartId,\n      getLayoutComponentFromChartId(nextProps.layout, newChartId)));\n\n\n    } else if (currentChartIds.length > nextChartIds.length) {\n      // remove chart\n      const removedChartIds = _filterInstanceProperty(currentChartIds).call(currentChartIds,\n      key => _indexOfInstanceProperty(nextChartIds).call(nextChartIds, key) === -1);\n\n      _forEachInstanceProperty(removedChartIds).call(removedChartIds, (removedChartId) =>\n      this.props.actions.removeSliceFromDashboard(removedChartId));\n\n    }\n  }\n\n  applyCharts() {\n    const { hasUnsavedChanges, editMode } = this.props.dashboardState;\n\n    const { appliedFilters, appliedOwnDataCharts } = this;\n    const { activeFilters, ownDataCharts, chartConfiguration } = this.props;\n    if (\n    isFeatureEnabled(FeatureFlag.DASHBOARD_CROSS_FILTERS) &&\n    !chartConfiguration)\n    {\n      // For a first loading we need to wait for cross filters charts data loaded to get all active filters\n      // for correct comparing  of filters to avoid unnecessary requests\n      return;\n    }\n\n    if (\n    !editMode && (\n    !areObjectsEqual(appliedOwnDataCharts, ownDataCharts, {\n      ignoreUndefined: true }) ||\n\n    !areObjectsEqual(appliedFilters, activeFilters, {\n      ignoreUndefined: true })))\n\n    {\n      this.applyFilters();\n    }\n\n    if (hasUnsavedChanges) {\n      Dashboard.onBeforeUnload(true);\n    } else {\n      Dashboard.onBeforeUnload(false);\n    }\n  }\n\n  componentWillUnmount() {\n    window.removeEventListener('visibilitychange', this.onVisibilityChange);\n  }\n\n  onVisibilityChange() {\n    if (document.visibilityState === 'hidden') {\n      // from visible to hidden\n      this.visibilityEventData = {\n        start_offset: Logger.getTimestamp(),\n        ts: new Date().getTime() };\n\n    } else if (document.visibilityState === 'visible') {\n      // from hidden to visible\n      const logStart = this.visibilityEventData.start_offset;\n      this.props.actions.logEvent(LOG_ACTIONS_HIDE_BROWSER_TAB, {\n        ...this.visibilityEventData,\n        duration: Logger.getTimestamp() - logStart });\n\n    }\n  }\n\n  // return charts in array\n  getAllCharts() {\n    return _Object$values(this.props.charts);\n  }\n\n  applyFilters() {var _context2;\n    const { appliedFilters } = this;\n    const { activeFilters, ownDataCharts } = this.props;\n\n    // refresh charts if a filter was removed, added, or changed\n    const currFilterKeys = _Object$keys(activeFilters);\n    const appliedFilterKeys = _Object$keys(appliedFilters);\n\n    const allKeys = new _Set(_concatInstanceProperty(currFilterKeys).call(currFilterKeys, appliedFilterKeys));\n    const affectedChartIds = getAffectedOwnDataCharts(\n    ownDataCharts,\n    this.appliedOwnDataCharts);\n\n    _forEachInstanceProperty(_context2 = [...allKeys]).call(_context2, filterKey => {\n      if (\n      !_includesInstanceProperty(currFilterKeys).call(currFilterKeys, filterKey) &&\n      _includesInstanceProperty(appliedFilterKeys).call(appliedFilterKeys, filterKey))\n      {\n        // filterKey is removed?\n        affectedChartIds.push(...appliedFilters[filterKey].scope);\n      } else if (!_includesInstanceProperty(appliedFilterKeys).call(appliedFilterKeys, filterKey)) {\n        // filterKey is newly added?\n        affectedChartIds.push(...activeFilters[filterKey].scope);\n      } else {\n        // if filterKey changes value,\n        // update charts in its scope\n        if (\n        !areObjectsEqual(_valuesInstanceProperty(\n        appliedFilters[filterKey]), _valuesInstanceProperty(\n        activeFilters[filterKey]),\n        {\n          ignoreUndefined: true }))\n\n\n        {\n          affectedChartIds.push(...activeFilters[filterKey].scope);\n        }\n\n        // if filterKey changes scope,\n        // update all charts in its scope\n        if (\n        !areObjectsEqual(\n        appliedFilters[filterKey].scope,\n        activeFilters[filterKey].scope))\n\n        {var _context3;\n          const chartsInScope = _concatInstanceProperty(_context3 = activeFilters[filterKey].scope || []).call(_context3,\n          appliedFilters[filterKey].scope || []);\n\n          affectedChartIds.push(...chartsInScope);\n        }\n      }\n    });\n\n    // remove dup in affectedChartIds\n    this.refreshCharts([...new _Set(affectedChartIds)]);\n    this.appliedFilters = activeFilters;\n    this.appliedOwnDataCharts = ownDataCharts;\n  }\n\n  refreshCharts(ids) {\n    _forEachInstanceProperty(ids).call(ids, id => {\n      this.props.actions.triggerQuery(true, id);\n    });\n  }\n\n  render() {\n    if (this.context.loading) {\n      return ___EmotionJSX(Loading, null);\n    }\n    return (\n      ___EmotionJSX(React.Fragment, null,\n      ___EmotionJSX(OmniContainer, { logEvent: this.props.actions.logEvent }),\n      ___EmotionJSX(DashboardBuilder, null)));\n\n\n  } // @ts-ignore\n  __reactstandin__regenerateByEval(key, code) {// @ts-ignore\n    this[key] = eval(code);}}Dashboard.contextType = PluginContext;\nDashboard.propTypes = propTypes;\nDashboard.defaultProps = defaultProps;const _default =\n\nDashboard;export default _default;;(function () {var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined;if (!reactHotLoader) {return;}reactHotLoader.register(propTypes, \"propTypes\", \"/app/superset-frontend/src/dashboard/components/Dashboard.jsx\");reactHotLoader.register(defaultProps, \"defaultProps\", \"/app/superset-frontend/src/dashboard/components/Dashboard.jsx\");reactHotLoader.register(Dashboard, \"Dashboard\", \"/app/superset-frontend/src/dashboard/components/Dashboard.jsx\");reactHotLoader.register(_default, \"default\", \"/app/superset-frontend/src/dashboard/components/Dashboard.jsx\");})();;(function () {var leaveModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.leaveModule : undefined;leaveModule && leaveModule(module);})();","map":{"version":3,"sources":["/app/superset-frontend/src/dashboard/components/Dashboard.jsx"],"names":["React","PropTypes","isFeatureEnabled","t","FeatureFlag","PluginContext","Loading","getChartIdsFromLayout","getLayoutComponentFromChartId","DashboardBuilder","chartPropShape","slicePropShape","dashboardInfoPropShape","dashboardStatePropShape","LOG_ACTIONS_HIDE_BROWSER_TAB","LOG_ACTIONS_MOUNT_DASHBOARD","Logger","OmniContainer","areObjectsEqual","getLocationHash","isDashboardEmpty","getAffectedOwnDataCharts","propTypes","actions","shape","addSliceToDashboard","func","isRequired","removeSliceFromDashboard","triggerQuery","logEvent","dashboardInfo","dashboardState","charts","objectOf","slices","activeFilters","object","chartConfiguration","datasources","ownDataCharts","layout","impressionId","string","initMessages","array","timeout","number","userId","defaultProps","Dashboard","PureComponent","onBeforeUnload","hasChanged","window","addEventListener","unload","removeEventListener","message","event","returnValue","constructor","props","appliedFilters","appliedOwnDataCharts","onVisibilityChange","componentDidMount","appContainer","document","getElementById","bootstrapData","getAttribute","eventData","is_edit_mode","editMode","mount_duration","getTimestamp","is_empty","is_published","isPublished","bootstrap_data_length","length","directLinkComponentId","target_id","visibilityState","visibilityEventData","start_offset","ts","Date","getTime","applyCharts","componentDidUpdate","UNSAFE_componentWillReceiveProps","nextProps","currentChartIds","nextChartIds","newChartIds","key","newChartId","removedChartIds","removedChartId","hasUnsavedChanges","DASHBOARD_CROSS_FILTERS","ignoreUndefined","applyFilters","componentWillUnmount","logStart","duration","getAllCharts","currFilterKeys","appliedFilterKeys","allKeys","affectedChartIds","filterKey","push","scope","chartsInScope","refreshCharts","ids","id","render","context","loading","contextType"],"mappings":"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","sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { isFeatureEnabled, t, FeatureFlag } from '@superset-ui/core';\n\nimport { PluginContext } from 'src/components/DynamicPlugins';\nimport Loading from 'src/components/Loading';\nimport getChartIdsFromLayout from '../util/getChartIdsFromLayout';\nimport getLayoutComponentFromChartId from '../util/getLayoutComponentFromChartId';\nimport DashboardBuilder from './DashboardBuilder/DashboardBuilder';\nimport {\n  chartPropShape,\n  slicePropShape,\n  dashboardInfoPropShape,\n  dashboardStatePropShape,\n} from '../util/propShapes';\nimport {\n  LOG_ACTIONS_HIDE_BROWSER_TAB,\n  LOG_ACTIONS_MOUNT_DASHBOARD,\n  Logger,\n} from '../../logger/LogUtils';\nimport OmniContainer from '../../components/OmniContainer';\nimport { areObjectsEqual } from '../../reduxUtils';\n\nimport '../stylesheets/index.less';\nimport getLocationHash from '../util/getLocationHash';\nimport isDashboardEmpty from '../util/isDashboardEmpty';\nimport { getAffectedOwnDataCharts } from '../util/charts/getOwnDataCharts';\n\nconst propTypes = {\n  actions: PropTypes.shape({\n    addSliceToDashboard: PropTypes.func.isRequired,\n    removeSliceFromDashboard: PropTypes.func.isRequired,\n    triggerQuery: PropTypes.func.isRequired,\n    logEvent: PropTypes.func.isRequired,\n  }).isRequired,\n  dashboardInfo: dashboardInfoPropShape.isRequired,\n  dashboardState: dashboardStatePropShape.isRequired,\n  charts: PropTypes.objectOf(chartPropShape).isRequired,\n  slices: PropTypes.objectOf(slicePropShape).isRequired,\n  activeFilters: PropTypes.object.isRequired,\n  chartConfiguration: PropTypes.object.isRequired,\n  datasources: PropTypes.object.isRequired,\n  ownDataCharts: PropTypes.object.isRequired,\n  layout: PropTypes.object.isRequired,\n  impressionId: PropTypes.string.isRequired,\n  initMessages: PropTypes.array,\n  timeout: PropTypes.number,\n  userId: PropTypes.string,\n};\n\nconst defaultProps = {\n  initMessages: [],\n  timeout: 60,\n  userId: '',\n};\n\nclass Dashboard extends React.PureComponent {\n  static contextType = PluginContext;\n\n  static onBeforeUnload(hasChanged) {\n    if (hasChanged) {\n      window.addEventListener('beforeunload', Dashboard.unload);\n    } else {\n      window.removeEventListener('beforeunload', Dashboard.unload);\n    }\n  }\n\n  static unload() {\n    const message = t('You have unsaved changes.');\n    window.event.returnValue = message; // Gecko + IE\n    return message; // Gecko + Webkit, Safari, Chrome etc.\n  }\n\n  constructor(props) {\n    super(props);\n    this.appliedFilters = props.activeFilters ?? {};\n    this.appliedOwnDataCharts = props.ownDataCharts ?? {};\n    this.onVisibilityChange = this.onVisibilityChange.bind(this);\n  }\n\n  componentDidMount() {\n    const appContainer = document.getElementById('app');\n    const bootstrapData = appContainer?.getAttribute('data-bootstrap') || '';\n    const { dashboardState, layout } = this.props;\n    const eventData = {\n      is_edit_mode: dashboardState.editMode,\n      mount_duration: Logger.getTimestamp(),\n      is_empty: isDashboardEmpty(layout),\n      is_published: dashboardState.isPublished,\n      bootstrap_data_length: bootstrapData.length,\n    };\n    const directLinkComponentId = getLocationHash();\n    if (directLinkComponentId) {\n      eventData.target_id = directLinkComponentId;\n    }\n    this.props.actions.logEvent(LOG_ACTIONS_MOUNT_DASHBOARD, eventData);\n\n    // Handle browser tab visibility change\n    if (document.visibilityState === 'hidden') {\n      this.visibilityEventData = {\n        start_offset: Logger.getTimestamp(),\n        ts: new Date().getTime(),\n      };\n    }\n    window.addEventListener('visibilitychange', this.onVisibilityChange);\n    this.applyCharts();\n  }\n\n  componentDidUpdate() {\n    this.applyCharts();\n  }\n\n  UNSAFE_componentWillReceiveProps(nextProps) {\n    const currentChartIds = getChartIdsFromLayout(this.props.layout);\n    const nextChartIds = getChartIdsFromLayout(nextProps.layout);\n\n    if (currentChartIds.length < nextChartIds.length) {\n      const newChartIds = nextChartIds.filter(\n        key => currentChartIds.indexOf(key) === -1,\n      );\n      newChartIds.forEach(newChartId =>\n        this.props.actions.addSliceToDashboard(\n          newChartId,\n          getLayoutComponentFromChartId(nextProps.layout, newChartId),\n        ),\n      );\n    } else if (currentChartIds.length > nextChartIds.length) {\n      // remove chart\n      const removedChartIds = currentChartIds.filter(\n        key => nextChartIds.indexOf(key) === -1,\n      );\n      removedChartIds.forEach(removedChartId =>\n        this.props.actions.removeSliceFromDashboard(removedChartId),\n      );\n    }\n  }\n\n  applyCharts() {\n    const { hasUnsavedChanges, editMode } = this.props.dashboardState;\n\n    const { appliedFilters, appliedOwnDataCharts } = this;\n    const { activeFilters, ownDataCharts, chartConfiguration } = this.props;\n    if (\n      isFeatureEnabled(FeatureFlag.DASHBOARD_CROSS_FILTERS) &&\n      !chartConfiguration\n    ) {\n      // For a first loading we need to wait for cross filters charts data loaded to get all active filters\n      // for correct comparing  of filters to avoid unnecessary requests\n      return;\n    }\n\n    if (\n      !editMode &&\n      (!areObjectsEqual(appliedOwnDataCharts, ownDataCharts, {\n        ignoreUndefined: true,\n      }) ||\n        !areObjectsEqual(appliedFilters, activeFilters, {\n          ignoreUndefined: true,\n        }))\n    ) {\n      this.applyFilters();\n    }\n\n    if (hasUnsavedChanges) {\n      Dashboard.onBeforeUnload(true);\n    } else {\n      Dashboard.onBeforeUnload(false);\n    }\n  }\n\n  componentWillUnmount() {\n    window.removeEventListener('visibilitychange', this.onVisibilityChange);\n  }\n\n  onVisibilityChange() {\n    if (document.visibilityState === 'hidden') {\n      // from visible to hidden\n      this.visibilityEventData = {\n        start_offset: Logger.getTimestamp(),\n        ts: new Date().getTime(),\n      };\n    } else if (document.visibilityState === 'visible') {\n      // from hidden to visible\n      const logStart = this.visibilityEventData.start_offset;\n      this.props.actions.logEvent(LOG_ACTIONS_HIDE_BROWSER_TAB, {\n        ...this.visibilityEventData,\n        duration: Logger.getTimestamp() - logStart,\n      });\n    }\n  }\n\n  // return charts in array\n  getAllCharts() {\n    return Object.values(this.props.charts);\n  }\n\n  applyFilters() {\n    const { appliedFilters } = this;\n    const { activeFilters, ownDataCharts } = this.props;\n\n    // refresh charts if a filter was removed, added, or changed\n    const currFilterKeys = Object.keys(activeFilters);\n    const appliedFilterKeys = Object.keys(appliedFilters);\n\n    const allKeys = new Set(currFilterKeys.concat(appliedFilterKeys));\n    const affectedChartIds = getAffectedOwnDataCharts(\n      ownDataCharts,\n      this.appliedOwnDataCharts,\n    );\n    [...allKeys].forEach(filterKey => {\n      if (\n        !currFilterKeys.includes(filterKey) &&\n        appliedFilterKeys.includes(filterKey)\n      ) {\n        // filterKey is removed?\n        affectedChartIds.push(...appliedFilters[filterKey].scope);\n      } else if (!appliedFilterKeys.includes(filterKey)) {\n        // filterKey is newly added?\n        affectedChartIds.push(...activeFilters[filterKey].scope);\n      } else {\n        // if filterKey changes value,\n        // update charts in its scope\n        if (\n          !areObjectsEqual(\n            appliedFilters[filterKey].values,\n            activeFilters[filterKey].values,\n            {\n              ignoreUndefined: true,\n            },\n          )\n        ) {\n          affectedChartIds.push(...activeFilters[filterKey].scope);\n        }\n\n        // if filterKey changes scope,\n        // update all charts in its scope\n        if (\n          !areObjectsEqual(\n            appliedFilters[filterKey].scope,\n            activeFilters[filterKey].scope,\n          )\n        ) {\n          const chartsInScope = (activeFilters[filterKey].scope || []).concat(\n            appliedFilters[filterKey].scope || [],\n          );\n          affectedChartIds.push(...chartsInScope);\n        }\n      }\n    });\n\n    // remove dup in affectedChartIds\n    this.refreshCharts([...new Set(affectedChartIds)]);\n    this.appliedFilters = activeFilters;\n    this.appliedOwnDataCharts = ownDataCharts;\n  }\n\n  refreshCharts(ids) {\n    ids.forEach(id => {\n      this.props.actions.triggerQuery(true, id);\n    });\n  }\n\n  render() {\n    if (this.context.loading) {\n      return <Loading />;\n    }\n    return (\n      <>\n        <OmniContainer logEvent={this.props.actions.logEvent} />\n        <DashboardBuilder />\n      </>\n    );\n  }\n}\n\nDashboard.propTypes = propTypes;\nDashboard.defaultProps = defaultProps;\n\nexport default Dashboard;\n"]},"metadata":{},"sourceType":"module"}