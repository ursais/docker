{"ast":null,"code":"(function () {var enterModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.enterModule : undefined;enterModule && enterModule(module);})();var __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default.signature : function (a) {return a;}; /**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { getNumberFormatter, t } from '@superset-ui/core';\n\nimport Label from 'src/components/Label';\nimport { Tooltip } from 'src/components/Tooltip';import { jsx as ___EmotionJSX } from \"@emotion/react\";\n\nconst propTypes = {\n  rowcount: PropTypes.number,\n  limit: PropTypes.number,\n  rows: PropTypes.string,\n  suffix: PropTypes.string,\n  loading: PropTypes.bool };\n\n\nconst defaultProps = {\n  suffix: t('rows') };\n\n\nexport default function RowCountLabel({ rowcount, limit, suffix, loading }) {\n  const limitReached = rowcount === limit;\n  const type =\n  limitReached || rowcount === 0 && !loading ? 'danger' : 'default';\n  const formattedRowCount = getNumberFormatter()(rowcount);\n  const tooltip =\n  ___EmotionJSX(\"span\", null,\n  limitReached && ___EmotionJSX(\"div\", null, t('Limit reached')),\n  loading ? 'Loading' : rowcount);\n\n\n  return (\n    ___EmotionJSX(Tooltip, { id: \"tt-rowcount-tooltip\", title: tooltip },\n    ___EmotionJSX(Label, { type: type, \"data-test\": \"row-count-label\" },\n    loading ? 'Loading...' : `${formattedRowCount} ${suffix}`)));\n\n\n\n}\n\nRowCountLabel.propTypes = propTypes;\nRowCountLabel.defaultProps = defaultProps;;(function () {var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined;if (!reactHotLoader) {return;}reactHotLoader.register(propTypes, \"propTypes\", \"/app/superset-frontend/src/explore/components/RowCountLabel.jsx\");reactHotLoader.register(defaultProps, \"defaultProps\", \"/app/superset-frontend/src/explore/components/RowCountLabel.jsx\");reactHotLoader.register(RowCountLabel, \"RowCountLabel\", \"/app/superset-frontend/src/explore/components/RowCountLabel.jsx\");})();;(function () {var leaveModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.leaveModule : undefined;leaveModule && leaveModule(module);})();","map":{"version":3,"sources":["/app/superset-frontend/src/explore/components/RowCountLabel.jsx"],"names":["React","PropTypes","getNumberFormatter","t","Label","Tooltip","propTypes","rowcount","number","limit","rows","string","suffix","loading","bool","defaultProps","RowCountLabel","limitReached","type","formattedRowCount","tooltip"],"mappings":"wSAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,SAASC,kBAAT,EAA6BC,CAA7B,QAAsC,mBAAtC;;AAEA,OAAOC,KAAP,MAAkB,sBAAlB;AACA,SAASC,OAAT,QAAwB,wBAAxB,C;;AAEA,MAAMC,SAAS,GAAG;AAChBC,EAAAA,QAAQ,EAAEN,SAAS,CAACO,MADJ;AAEhBC,EAAAA,KAAK,EAAER,SAAS,CAACO,MAFD;AAGhBE,EAAAA,IAAI,EAAET,SAAS,CAACU,MAHA;AAIhBC,EAAAA,MAAM,EAAEX,SAAS,CAACU,MAJF;AAKhBE,EAAAA,OAAO,EAAEZ,SAAS,CAACa,IALH,EAAlB;;;AAQA,MAAMC,YAAY,GAAG;AACnBH,EAAAA,MAAM,EAAET,CAAC,CAAC,MAAD,CADU,EAArB;;;AAIA,eAAe,SAASa,aAAT,CAAuB,EAAET,QAAF,EAAYE,KAAZ,EAAmBG,MAAnB,EAA2BC,OAA3B,EAAvB,EAA6D;AAC1E,QAAMI,YAAY,GAAGV,QAAQ,KAAKE,KAAlC;AACA,QAAMS,IAAI;AACRD,EAAAA,YAAY,IAAKV,QAAQ,KAAK,CAAb,IAAkB,CAACM,OAApC,GAA+C,QAA/C,GAA0D,SAD5D;AAEA,QAAMM,iBAAiB,GAAGjB,kBAAkB,GAAGK,QAAH,CAA5C;AACA,QAAMa,OAAO;AACX;AACGH,EAAAA,YAAY,IAAI,2BAAMd,CAAC,CAAC,eAAD,CAAP,CADnB;AAEGU,EAAAA,OAAO,GAAG,SAAH,GAAeN,QAFzB,CADF;;;AAMA;AACE,kBAAC,OAAD,IAAS,EAAE,EAAC,qBAAZ,EAAkC,KAAK,EAAEa,OAAzC;AACE,kBAAC,KAAD,IAAO,IAAI,EAAEF,IAAb,EAAmB,aAAU,iBAA7B;AACGL,IAAAA,OAAO,GAAG,YAAH,GAAmB,GAAEM,iBAAkB,IAAGP,MAAO,EAD3D,CADF,CADF;;;;AAOD;;AAEDI,aAAa,CAACV,SAAd,GAA0BA,SAA1B;AACAU,aAAa,CAACD,YAAd,GAA6BA,YAA7B,C,iLAjCMT,S,0GAQAS,Y,6GAIkBC,a","sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { getNumberFormatter, t } from '@superset-ui/core';\n\nimport Label from 'src/components/Label';\nimport { Tooltip } from 'src/components/Tooltip';\n\nconst propTypes = {\n  rowcount: PropTypes.number,\n  limit: PropTypes.number,\n  rows: PropTypes.string,\n  suffix: PropTypes.string,\n  loading: PropTypes.bool,\n};\n\nconst defaultProps = {\n  suffix: t('rows'),\n};\n\nexport default function RowCountLabel({ rowcount, limit, suffix, loading }) {\n  const limitReached = rowcount === limit;\n  const type =\n    limitReached || (rowcount === 0 && !loading) ? 'danger' : 'default';\n  const formattedRowCount = getNumberFormatter()(rowcount);\n  const tooltip = (\n    <span>\n      {limitReached && <div>{t('Limit reached')}</div>}\n      {loading ? 'Loading' : rowcount}\n    </span>\n  );\n  return (\n    <Tooltip id=\"tt-rowcount-tooltip\" title={tooltip}>\n      <Label type={type} data-test=\"row-count-label\">\n        {loading ? 'Loading...' : `${formattedRowCount} ${suffix}`}\n      </Label>\n    </Tooltip>\n  );\n}\n\nRowCountLabel.propTypes = propTypes;\nRowCountLabel.defaultProps = defaultProps;\n"]},"metadata":{},"sourceType":"module"}