{"ast":null,"code":"import _findLastIndex from \"lodash/findLastIndex\";(function () {var enterModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.enterModule : undefined;enterModule && enterModule(module);})();var __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default.signature : function (a) {return a;};import { useEffect } from 'react';\n\nimport { usePrevious } from '../../../../common/hooks/usePrevious';\n/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nexport const useRemoveCurrentFilter = (removedFilters, currentFilterId, filterIds, setCurrentFilterId) => {\n  useEffect(() => {\n    // if the currently viewed filter is fully removed, change to another tab\n    const currentFilterRemoved = removedFilters[currentFilterId];\n    if (currentFilterRemoved && !currentFilterRemoved.isPending) {\n      const nextFilterIndex = _findLastIndex(filterIds, id => !removedFilters[id] && id !== currentFilterId);\n      if (nextFilterIndex !== -1)\n      setCurrentFilterId(filterIds[nextFilterIndex]);\n    }\n  }, [currentFilterId, removedFilters, filterIds]);\n};__signature__(useRemoveCurrentFilter, \"useEffect{}\");\nexport const useOpenModal = (isOpen, addFilter, createNewOnOpen) => {\n  const wasOpen = usePrevious(isOpen);\n  // if this is a \"create\" modal rather than an \"edit\" modal,\n  // add a filter on modal open\n  useEffect(() => {\n    if (createNewOnOpen && isOpen && !wasOpen) {\n      addFilter();\n    }\n  }, [createNewOnOpen, isOpen, wasOpen, addFilter]);\n};__signature__(useOpenModal, \"usePrevious{wasOpen}\\nuseEffect{}\", () => [usePrevious]);;(function () {var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined;if (!reactHotLoader) {return;}reactHotLoader.register(useRemoveCurrentFilter, \"useRemoveCurrentFilter\", \"/app/superset-frontend/src/dashboard/components/nativeFilters/FiltersConfigModal/state.ts\");reactHotLoader.register(useOpenModal, \"useOpenModal\", \"/app/superset-frontend/src/dashboard/components/nativeFilters/FiltersConfigModal/state.ts\");})();;(function () {var leaveModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.leaveModule : undefined;leaveModule && leaveModule(module);})();","map":{"version":3,"sources":["/app/superset-frontend/src/dashboard/components/nativeFilters/FiltersConfigModal/state.ts"],"names":[],"mappings":"yVAAA,SAAS,SAAT,QAA0B,OAA1B;;AAGA,SAAS,WAAT,QAA4B,sCAA5B;AAEA;;;;;;;;;;;;;;;;;AAiBG;AAEH,OAAO,MAAM,sBAAsB,GAAG,CACpC,cADoC,EAEpC,eAFoC,EAGpC,SAHoC,EAIpC,kBAJoC,KAKlC;AACF,EAAA,SAAS,CAAC,MAAK;AACb;AACA,UAAM,oBAAoB,GAAG,cAAc,CAAC,eAAD,CAA3C;AACA,QAAI,oBAAoB,IAAI,CAAC,oBAAoB,CAAC,SAAlD,EAA6D;AAC3D,YAAM,eAAe,GAAG,eACtB,SADsB,EAEtB,EAAE,IAAI,CAAC,cAAc,CAAC,EAAD,CAAf,IAAuB,EAAE,KAAK,eAFd,CAAxB;AAIA,UAAI,eAAe,KAAK,CAAC,CAAzB;AACE,MAAA,kBAAkB,CAAC,SAAS,CAAC,eAAD,CAAV,CAAlB;AACH;AACF,GAXQ,EAWN,CAAC,eAAD,EAAkB,cAAlB,EAAkC,SAAlC,CAXM,CAAT;AAYD,CAlBM,C,cAAM,sB;AAoBb,OAAO,MAAM,YAAY,GAAG,CAC1B,MAD0B,EAE1B,SAF0B,EAG1B,eAH0B,KAIxB;AACF,QAAM,OAAO,GAAG,WAAW,CAAC,MAAD,CAA3B;AACA;AACA;AACA,EAAA,SAAS,CAAC,MAAK;AACb,QAAI,eAAe,IAAI,MAAnB,IAA6B,CAAC,OAAlC,EAA2C;AACzC,MAAA,SAAS;AACV;AACF,GAJQ,EAIN,CAAC,eAAD,EAAkB,MAAlB,EAA0B,OAA1B,EAAmC,SAAnC,CAJM,CAAT;AAKD,CAbM,C,cAAM,Y,8CAKK,W,oLAzBL,sB,iJAoBA,Y","sourcesContent":["import { useEffect } from 'react';\nimport { findLastIndex } from 'lodash';\nimport { FilterRemoval } from './types';\nimport { usePrevious } from '../../../../common/hooks/usePrevious';\n\n/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nexport const useRemoveCurrentFilter = (\n  removedFilters: Record<string, FilterRemoval>,\n  currentFilterId: string,\n  filterIds: string[],\n  setCurrentFilterId: Function,\n) => {\n  useEffect(() => {\n    // if the currently viewed filter is fully removed, change to another tab\n    const currentFilterRemoved = removedFilters[currentFilterId];\n    if (currentFilterRemoved && !currentFilterRemoved.isPending) {\n      const nextFilterIndex = findLastIndex(\n        filterIds,\n        id => !removedFilters[id] && id !== currentFilterId,\n      );\n      if (nextFilterIndex !== -1)\n        setCurrentFilterId(filterIds[nextFilterIndex]);\n    }\n  }, [currentFilterId, removedFilters, filterIds]);\n};\n\nexport const useOpenModal = (\n  isOpen: boolean,\n  addFilter: Function,\n  createNewOnOpen?: boolean,\n) => {\n  const wasOpen = usePrevious(isOpen);\n  // if this is a \"create\" modal rather than an \"edit\" modal,\n  // add a filter on modal open\n  useEffect(() => {\n    if (createNewOnOpen && isOpen && !wasOpen) {\n      addFilter();\n    }\n  }, [createNewOnOpen, isOpen, wasOpen, addFilter]);\n};\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}