{"ast":null,"code":"import \"core-js/modules/web.dom-collections.iterator.js\";import _extends from \"@babel/runtime-corejs3/helpers/extends\";import _spliceInstanceProperty from \"@babel/runtime-corejs3/core-js-stable/instance/splice\";import _JSON$stringify from \"@babel/runtime-corejs3/core-js-stable/json/stringify\";import _everyInstanceProperty from \"@babel/runtime-corejs3/core-js-stable/instance/every\";import _Set from \"@babel/runtime-corejs3/core-js-stable/set\";import _includesInstanceProperty from \"@babel/runtime-corejs3/core-js-stable/instance/includes\";import _filterInstanceProperty from \"@babel/runtime-corejs3/core-js-stable/instance/filter\";import _mapInstanceProperty from \"@babel/runtime-corejs3/core-js-stable/instance/map\";import _Array$isArray from \"@babel/runtime-corejs3/core-js-stable/array/is-array\";import _isEqual from \"lodash/isEqual\";(function () {var enterModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.enterModule : undefined;enterModule && enterModule(module);})();var __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default.signature : function (a) {return a;}; /**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with work for additional information\n * regarding copyright ownership.  The ASF licenses file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React, { useCallback, useEffect, useMemo, useState } from 'react';\nimport { ensureIsArray, tn } from '@superset-ui/core';\n\nimport { usePrevious } from 'src/common/hooks/usePrevious';\nimport AdhocMetric from 'src/explore/components/controls/MetricControl/AdhocMetric';\nimport AdhocMetricPopoverTrigger from 'src/explore/components/controls/MetricControl/AdhocMetricPopoverTrigger';\nimport MetricDefinitionValue from 'src/explore/components/controls/MetricControl/MetricDefinitionValue';\nimport { DndItemType } from 'src/explore/components/DndItemType';\nimport DndSelectLabel from 'src/explore/components/controls/DndColumnSelectControl/DndSelectLabel';import { jsx as ___EmotionJSX } from \"@emotion/react\";\nconst isDictionaryForAdhocMetric = value => value && !(value instanceof AdhocMetric) && value.expressionType;\nconst coerceAdhocMetrics = value => {\n  if (!value) {\n    return [];\n  }\n  if (!_Array$isArray(value)) {\n    if (isDictionaryForAdhocMetric(value)) {\n      return [new AdhocMetric(value)];\n    }\n    return [value];\n  }\n  return _mapInstanceProperty(value).call(value, val => {\n    if (isDictionaryForAdhocMetric(val)) {\n      return new AdhocMetric(val);\n    }\n    return val;\n  });\n};\nconst getOptionsForSavedMetrics = (savedMetrics, currentMetricValues, currentMetric) => {var _savedMetrics$filter;return (_savedMetrics$filter = savedMetrics == null ? void 0 : _filterInstanceProperty(savedMetrics).call(savedMetrics, savedMetric => {var _savedMetric$metric_n;return _Array$isArray(currentMetricValues) ?\n    !_includesInstanceProperty(currentMetricValues).call(currentMetricValues, (_savedMetric$metric_n = savedMetric.metric_name) != null ? _savedMetric$metric_n : '') ||\n    savedMetric.metric_name === currentMetric :\n    savedMetric;})) != null ? _savedMetrics$filter : [];};\nconst columnsContainAllMetrics = (value, columns, savedMetrics) => {var _context, _context2, _context3, _context4, _context5;\n  const columnNames = new _Set(_mapInstanceProperty(_context = [...(columns || []), ...(savedMetrics || [])]\n  // eslint-disable-next-line camelcase\n  ).call(_context, item => item.column_name ||\n  item.metric_name));\n  return _everyInstanceProperty(_context2 = _filterInstanceProperty(_context3 = _mapInstanceProperty(_context4 = _filterInstanceProperty(_context5 = ensureIsArray(value)).call(_context5,\n  metric => metric)\n  // find column names\n  ).call(_context4, metric => metric.column ?\n  metric.column.column_name :\n  metric.column_name || metric)).call(_context3,\n  name => name && typeof name === 'string')).call(_context2,\n  name => columnNames.has(name));\n};\nexport const DndMetricSelect = props => {\n  const { onChange, multi, columns, savedMetrics } = props;\n  const handleChange = useCallback(opts => {var _context6;\n    // if clear out options\n    if (opts === null) {\n      onChange(null);\n      return;\n    }\n    const transformedOpts = ensureIsArray(opts);\n    const optionValues = _filterInstanceProperty(_context6 = _mapInstanceProperty(transformedOpts).call(transformedOpts,\n    option => {\n      // pre-defined metric\n      if (option.metric_name) {\n        return option.metric_name;\n      }\n      return option;\n    })).call(_context6,\n    option => option);\n    onChange(multi ? optionValues : optionValues[0]);\n  }, [multi, onChange]);\n  const [value, setValue] = useState(coerceAdhocMetrics(props.value));\n  const [droppedItem, setDroppedItem] = useState(null);\n  const [newMetricPopoverVisible, setNewMetricPopoverVisible] = useState(false);\n  const prevColumns = usePrevious(columns);\n  const prevSavedMetrics = usePrevious(savedMetrics);\n  useEffect(() => {\n    setValue(coerceAdhocMetrics(props.value));\n  }, [_JSON$stringify(props.value)]);\n  useEffect(() => {\n    if (!_isEqual(prevColumns, columns) ||\n    !_isEqual(prevSavedMetrics, savedMetrics)) {\n      // Remove all metrics if selected value no longer a valid column\n      // in the dataset. Must use `nextProps` here because Redux reducers may\n      // have already updated the value for this control.\n      if (!columnsContainAllMetrics(props.value, columns, savedMetrics)) {\n        onChange([]);\n      }\n    }\n  }, [\n  prevColumns,\n  columns,\n  prevSavedMetrics,\n  savedMetrics,\n  props.value,\n  onChange]);\n\n  const canDrop = item => {\n    const isMetricAlreadyInValues = item.type === 'metric' ? _includesInstanceProperty(value).call(value, item.value.metric_name) : false;\n    return (props.multi || value.length === 0) && !isMetricAlreadyInValues;\n  };\n  const onNewMetric = newMetric => {\n    const newValue = [...value, newMetric];\n    setValue(newValue);\n    handleChange(newValue);\n  };\n  const onMetricEdit = (changedMetric, oldMetric) => {\n    const newValue = _mapInstanceProperty(value).call(value, value => {\n      if (\n      // compare saved metrics\n      value === oldMetric.metric_name ||\n      // compare adhoc metrics\n      typeof value.optionName !== 'undefined' ?\n      value.optionName ===\n      oldMetric.optionName :\n      false) {\n        return changedMetric;\n      }\n      return value;\n    });\n    setValue(newValue);\n    handleChange(newValue);\n  };\n  const onRemoveMetric = index => {\n    if (!_Array$isArray(value)) {\n      return;\n    }\n    const valuesCopy = [...value];\n    _spliceInstanceProperty(valuesCopy).call(valuesCopy, index, 1);\n    setValue(valuesCopy);\n    onChange(valuesCopy);\n  };\n  const moveLabel = (dragIndex, hoverIndex) => {\n    const newValues = [...value];\n    [newValues[hoverIndex], newValues[dragIndex]] = [\n    newValues[dragIndex],\n    newValues[hoverIndex]];\n\n    setValue(newValues);\n  };\n  const valueRenderer = (option, index) => {var _props$value;return ___EmotionJSX(MetricDefinitionValue, { key: index, index: index, option: option, onMetricEdit: onMetricEdit, onRemoveMetric: () => onRemoveMetric(index), columns: props.columns, savedMetrics: props.savedMetrics, savedMetricsOptions: getOptionsForSavedMetrics(props.savedMetrics, props.value, (_props$value = props.value) == null ? void 0 : _props$value[index]), datasourceType: props.datasourceType, onMoveLabel: moveLabel, onDropLabel: () => onChange(value) });};\n  const valuesRenderer = () => _mapInstanceProperty(value).call(value, (value, index) => valueRenderer(value, index));\n  const togglePopover = visible => {\n    setNewMetricPopoverVisible(visible);\n  };\n  const closePopover = () => {\n    togglePopover(false);\n  };\n  const handleDrop = item => {\n    if (item.type === DndItemType.Metric) {\n      onNewMetric(item.value);\n    }\n    if (item.type === DndItemType.Column) {\n      setDroppedItem(item);\n      togglePopover(true);\n    }\n  };\n  const adhocMetric = useMemo(() => {\n    if ((droppedItem == null ? void 0 : droppedItem.type) === DndItemType.Column) {\n      const itemValue = droppedItem == null ? void 0 : droppedItem.value;\n      return new AdhocMetric({\n        column: { column_name: itemValue == null ? void 0 : itemValue.column_name } });\n\n    }\n    return new AdhocMetric({ isNew: true });\n  }, [droppedItem == null ? void 0 : droppedItem.type, droppedItem == null ? void 0 : droppedItem.value]);\n  return ___EmotionJSX(\"div\", { className: \"metrics-select\" },\n  ___EmotionJSX(DndSelectLabel, _extends({ onDrop: handleDrop, canDrop: canDrop, valuesRenderer: valuesRenderer, accept: [DndItemType.Column, DndItemType.Metric], ghostButtonText: tn('Drop column or metric', 'Drop columns or metrics', multi ? 2 : 1), displayGhostButton: multi || value.length === 0 }, props)),\n  ___EmotionJSX(AdhocMetricPopoverTrigger, { adhocMetric: adhocMetric, onMetricEdit: onNewMetric, columns: props.columns, savedMetricsOptions: getOptionsForSavedMetrics(props.savedMetrics, props.value), savedMetric: {}, datasourceType: props.datasourceType, isControlledComponent: true, visible: newMetricPopoverVisible, togglePopover: togglePopover, closePopover: closePopover, createNew: true },\n  ___EmotionJSX(\"div\", null)));\n\n\n};__signature__(DndMetricSelect, \"useCallback{handleChange}\\nuseState{[value, setValue](coerceAdhocMetrics(props.value))}\\nuseState{[droppedItem, setDroppedItem](null)}\\nuseState{[newMetricPopoverVisible, setNewMetricPopoverVisible](false)}\\nusePrevious{prevColumns}\\nusePrevious{prevSavedMetrics}\\nuseEffect{}\\nuseEffect{}\\nuseMemo{adhocMetric}\", () => [usePrevious, usePrevious]);;(function () {var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined;if (!reactHotLoader) {return;}reactHotLoader.register(isDictionaryForAdhocMetric, \"isDictionaryForAdhocMetric\", \"/app/superset-frontend/src/explore/components/controls/DndColumnSelectControl/DndMetricSelect.tsx\");reactHotLoader.register(coerceAdhocMetrics, \"coerceAdhocMetrics\", \"/app/superset-frontend/src/explore/components/controls/DndColumnSelectControl/DndMetricSelect.tsx\");reactHotLoader.register(getOptionsForSavedMetrics, \"getOptionsForSavedMetrics\", \"/app/superset-frontend/src/explore/components/controls/DndColumnSelectControl/DndMetricSelect.tsx\");reactHotLoader.register(columnsContainAllMetrics, \"columnsContainAllMetrics\", \"/app/superset-frontend/src/explore/components/controls/DndColumnSelectControl/DndMetricSelect.tsx\");reactHotLoader.register(DndMetricSelect, \"DndMetricSelect\", \"/app/superset-frontend/src/explore/components/controls/DndColumnSelectControl/DndMetricSelect.tsx\");})();;(function () {var leaveModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.leaveModule : undefined;leaveModule && leaveModule(module);})();","map":{"version":3,"sources":["/app/superset-frontend/src/explore/components/controls/DndColumnSelectControl/DndMetricSelect.tsx"],"names":[],"mappings":"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","sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with work for additional information\n * regarding copyright ownership.  The ASF licenses file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport React, { useCallback, useEffect, useMemo, useState } from 'react';\nimport { ensureIsArray, Metric, tn } from '@superset-ui/core';\nimport { ColumnMeta } from '@superset-ui/chart-controls';\nimport { isEqual } from 'lodash';\nimport { usePrevious } from 'src/common/hooks/usePrevious';\nimport AdhocMetric from 'src/explore/components/controls/MetricControl/AdhocMetric';\nimport AdhocMetricPopoverTrigger from 'src/explore/components/controls/MetricControl/AdhocMetricPopoverTrigger';\nimport MetricDefinitionValue from 'src/explore/components/controls/MetricControl/MetricDefinitionValue';\nimport { OptionValueType } from 'src/explore/components/controls/DndColumnSelectControl/types';\nimport { DatasourcePanelDndItem } from 'src/explore/components/DatasourcePanel/types';\nimport { DndItemType } from 'src/explore/components/DndItemType';\nimport DndSelectLabel from 'src/explore/components/controls/DndColumnSelectControl/DndSelectLabel';\nimport { savedMetricType } from 'src/explore/components/controls/MetricControl/types';\n\nconst isDictionaryForAdhocMetric = (value: any) =>\n  value && !(value instanceof AdhocMetric) && value.expressionType;\n\nconst coerceAdhocMetrics = (value: any) => {\n  if (!value) {\n    return [];\n  }\n  if (!Array.isArray(value)) {\n    if (isDictionaryForAdhocMetric(value)) {\n      return [new AdhocMetric(value)];\n    }\n    return [value];\n  }\n  return value.map(val => {\n    if (isDictionaryForAdhocMetric(val)) {\n      return new AdhocMetric(val);\n    }\n    return val;\n  });\n};\n\nconst getOptionsForSavedMetrics = (\n  savedMetrics: savedMetricType[],\n  currentMetricValues: (string | AdhocMetric)[],\n  currentMetric?: string,\n) =>\n  savedMetrics?.filter(savedMetric =>\n    Array.isArray(currentMetricValues)\n      ? !currentMetricValues.includes(savedMetric.metric_name ?? '') ||\n        savedMetric.metric_name === currentMetric\n      : savedMetric,\n  ) ?? [];\n\nconst columnsContainAllMetrics = (\n  value: (string | AdhocMetric | ColumnMeta)[],\n  columns: ColumnMeta[],\n  savedMetrics: savedMetricType[],\n) => {\n  const columnNames = new Set(\n    [...(columns || []), ...(savedMetrics || [])]\n      // eslint-disable-next-line camelcase\n      .map(\n        item =>\n          (item as ColumnMeta).column_name ||\n          (item as savedMetricType).metric_name,\n      ),\n  );\n\n  return (\n    ensureIsArray(value)\n      .filter(metric => metric)\n      // find column names\n      .map(metric =>\n        (metric as AdhocMetric).column\n          ? (metric as AdhocMetric).column.column_name\n          : (metric as ColumnMeta).column_name || metric,\n      )\n      .filter(name => name && typeof name === 'string')\n      .every(name => columnNames.has(name))\n  );\n};\n\nexport const DndMetricSelect = (props: any) => {\n  const { onChange, multi, columns, savedMetrics } = props;\n\n  const handleChange = useCallback(\n    opts => {\n      // if clear out options\n      if (opts === null) {\n        onChange(null);\n        return;\n      }\n\n      const transformedOpts = ensureIsArray(opts);\n      const optionValues = transformedOpts\n        .map(option => {\n          // pre-defined metric\n          if (option.metric_name) {\n            return option.metric_name;\n          }\n          return option;\n        })\n        .filter(option => option);\n      onChange(multi ? optionValues : optionValues[0]);\n    },\n    [multi, onChange],\n  );\n\n  const [value, setValue] = useState<(AdhocMetric | Metric | string)[]>(\n    coerceAdhocMetrics(props.value),\n  );\n  const [droppedItem, setDroppedItem] = useState<DatasourcePanelDndItem | null>(\n    null,\n  );\n  const [newMetricPopoverVisible, setNewMetricPopoverVisible] = useState(false);\n  const prevColumns = usePrevious(columns);\n  const prevSavedMetrics = usePrevious(savedMetrics);\n\n  useEffect(() => {\n    setValue(coerceAdhocMetrics(props.value));\n  }, [JSON.stringify(props.value)]);\n\n  useEffect(() => {\n    if (\n      !isEqual(prevColumns, columns) ||\n      !isEqual(prevSavedMetrics, savedMetrics)\n    ) {\n      // Remove all metrics if selected value no longer a valid column\n      // in the dataset. Must use `nextProps` here because Redux reducers may\n      // have already updated the value for this control.\n      if (!columnsContainAllMetrics(props.value, columns, savedMetrics)) {\n        onChange([]);\n      }\n    }\n  }, [\n    prevColumns,\n    columns,\n    prevSavedMetrics,\n    savedMetrics,\n    props.value,\n    onChange,\n  ]);\n\n  const canDrop = (item: DatasourcePanelDndItem) => {\n    const isMetricAlreadyInValues =\n      item.type === 'metric' ? value.includes(item.value.metric_name) : false;\n    return (props.multi || value.length === 0) && !isMetricAlreadyInValues;\n  };\n\n  const onNewMetric = (newMetric: Metric) => {\n    const newValue = [...value, newMetric];\n    setValue(newValue);\n    handleChange(newValue);\n  };\n\n  const onMetricEdit = (\n    changedMetric: Metric | AdhocMetric,\n    oldMetric: Metric | AdhocMetric,\n  ) => {\n    const newValue = value.map(value => {\n      if (\n        // compare saved metrics\n        value === (oldMetric as Metric).metric_name ||\n        // compare adhoc metrics\n        typeof (value as AdhocMetric).optionName !== 'undefined'\n          ? (value as AdhocMetric).optionName ===\n            (oldMetric as AdhocMetric).optionName\n          : false\n      ) {\n        return changedMetric;\n      }\n      return value;\n    });\n    setValue(newValue);\n    handleChange(newValue);\n  };\n\n  const onRemoveMetric = (index: number) => {\n    if (!Array.isArray(value)) {\n      return;\n    }\n    const valuesCopy = [...value];\n    valuesCopy.splice(index, 1);\n    setValue(valuesCopy);\n    onChange(valuesCopy);\n  };\n\n  const moveLabel = (dragIndex: number, hoverIndex: number) => {\n    const newValues = [...value];\n    [newValues[hoverIndex], newValues[dragIndex]] = [\n      newValues[dragIndex],\n      newValues[hoverIndex],\n    ];\n    setValue(newValues);\n  };\n\n  const valueRenderer = (\n    option: Metric | AdhocMetric | string,\n    index: number,\n  ) => (\n    <MetricDefinitionValue\n      key={index}\n      index={index}\n      option={option}\n      onMetricEdit={onMetricEdit}\n      onRemoveMetric={() => onRemoveMetric(index)}\n      columns={props.columns}\n      savedMetrics={props.savedMetrics}\n      savedMetricsOptions={getOptionsForSavedMetrics(\n        props.savedMetrics,\n        props.value,\n        props.value?.[index],\n      )}\n      datasourceType={props.datasourceType}\n      onMoveLabel={moveLabel}\n      onDropLabel={() => onChange(value)}\n    />\n  );\n\n  const valuesRenderer = () =>\n    value.map((value, index) => valueRenderer(value, index));\n\n  const togglePopover = (visible: boolean) => {\n    setNewMetricPopoverVisible(visible);\n  };\n\n  const closePopover = () => {\n    togglePopover(false);\n  };\n\n  const handleDrop = (item: DatasourcePanelDndItem) => {\n    if (item.type === DndItemType.Metric) {\n      onNewMetric(item.value as Metric);\n    }\n    if (item.type === DndItemType.Column) {\n      setDroppedItem(item);\n      togglePopover(true);\n    }\n  };\n\n  const adhocMetric = useMemo(() => {\n    if (droppedItem?.type === DndItemType.Column) {\n      const itemValue = droppedItem?.value as ColumnMeta;\n      return new AdhocMetric({\n        column: { column_name: itemValue?.column_name },\n      });\n    }\n    return new AdhocMetric({ isNew: true });\n  }, [droppedItem?.type, droppedItem?.value]);\n\n  return (\n    <div className=\"metrics-select\">\n      <DndSelectLabel<OptionValueType, OptionValueType[]>\n        onDrop={handleDrop}\n        canDrop={canDrop}\n        valuesRenderer={valuesRenderer}\n        accept={[DndItemType.Column, DndItemType.Metric]}\n        ghostButtonText={tn(\n          'Drop column or metric',\n          'Drop columns or metrics',\n          multi ? 2 : 1,\n        )}\n        displayGhostButton={multi || value.length === 0}\n        {...props}\n      />\n      <AdhocMetricPopoverTrigger\n        adhocMetric={adhocMetric}\n        onMetricEdit={onNewMetric}\n        columns={props.columns}\n        savedMetricsOptions={getOptionsForSavedMetrics(\n          props.savedMetrics,\n          props.value,\n        )}\n        savedMetric={{} as savedMetricType}\n        datasourceType={props.datasourceType}\n        isControlledComponent\n        visible={newMetricPopoverVisible}\n        togglePopover={togglePopover}\n        closePopover={closePopover}\n        createNew\n      >\n        <div />\n      </AdhocMetricPopoverTrigger>\n    </div>\n  );\n};\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}