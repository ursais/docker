{"ast":null,"code":"import \"core-js/modules/web.dom-collections.iterator.js\";import _includesInstanceProperty from \"@babel/runtime-corejs3/core-js-stable/instance/includes\";import _Object$entries from \"@babel/runtime-corejs3/core-js-stable/object/entries\";import _filterInstanceProperty from \"@babel/runtime-corejs3/core-js-stable/instance/filter\";import _mapInstanceProperty from \"@babel/runtime-corejs3/core-js-stable/instance/map\";import _isEqual from \"lodash/isEqual\";(function () {var enterModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.enterModule : undefined;enterModule && enterModule(module);})();var __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default.signature : function (a) {return a;};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nimport { CategoricalColorNamespace } from '@superset-ui/core';\nimport { getExtraFormData } from 'src/dashboard/components/nativeFilters/utils';\nimport getEffectiveExtraFilters from './getEffectiveExtraFilters';\nimport { getAllActiveFilters } from '../activeAllDashboardFilters';\n// We cache formData objects so that our connected container components don't always trigger\n// render cascades. we cannot leverage the reselect library because our cache size is >1\nconst cachedFiltersByChart = {};\nconst cachedFormdataByChart = {};\n// this function merge chart's formData with dashboard filters value,\n// and generate a new formData which will be used in the new query.\n// filters param only contains those applicable to this chart.\nexport default function getFormDataWithExtraFilters({ chart, charts, filters, nativeFilters, chartConfiguration, colorScheme, colorNamespace, sliceId, layout, dataMask }) {var _context, _context2;\n  // Propagate color mapping to chart\n  const scale = CategoricalColorNamespace.getScale(colorScheme, colorNamespace);\n  const labelColors = scale.getColorMap();\n  // if dashboard metadata + filters have not changed, use cache if possible\n  if ((cachedFiltersByChart[sliceId] || {}) === filters && (\n  colorScheme == null ||\n  cachedFormdataByChart[sliceId].color_scheme === colorScheme) &&\n  cachedFormdataByChart[sliceId].color_namespace === colorNamespace &&\n  _isEqual(cachedFormdataByChart[sliceId].label_colors, labelColors) &&\n  !!cachedFormdataByChart[sliceId] &&\n  dataMask === undefined) {\n    return cachedFormdataByChart[sliceId];\n  }\n  let extraData = {};\n  const activeFilters = getAllActiveFilters({\n    chartConfiguration,\n    dataMask,\n    layout,\n    nativeFilters: nativeFilters.filters });\n\n  const filterIdsAppliedOnChart = _mapInstanceProperty(_context = _filterInstanceProperty(_context2 = _Object$entries(activeFilters)).call(_context2,\n  ([, { scope }]) => _includesInstanceProperty(scope).call(scope, chart.id))).call(_context,\n  ([filterId]) => filterId);\n  if (filterIdsAppliedOnChart.length) {\n    extraData = {\n      extra_form_data: getExtraFormData(dataMask, charts, filterIdsAppliedOnChart) };\n\n  }\n  const formData = {\n    ...chart.formData,\n    ...(colorScheme && { color_scheme: colorScheme }),\n    label_colors: labelColors,\n    extra_filters: getEffectiveExtraFilters(filters),\n    ...extraData };\n\n  cachedFiltersByChart[sliceId] = filters;\n  cachedFormdataByChart[sliceId] = formData;\n  return formData;\n};(function () {var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined;if (!reactHotLoader) {return;}reactHotLoader.register(cachedFiltersByChart, \"cachedFiltersByChart\", \"/app/superset-frontend/src/dashboard/util/charts/getFormDataWithExtraFilters.ts\");reactHotLoader.register(cachedFormdataByChart, \"cachedFormdataByChart\", \"/app/superset-frontend/src/dashboard/util/charts/getFormDataWithExtraFilters.ts\");reactHotLoader.register(getFormDataWithExtraFilters, \"getFormDataWithExtraFilters\", \"/app/superset-frontend/src/dashboard/util/charts/getFormDataWithExtraFilters.ts\");})();;(function () {var leaveModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.leaveModule : undefined;leaveModule && leaveModule(module);})();","map":{"version":3,"sources":["/app/superset-frontend/src/dashboard/util/charts/getFormDataWithExtraFilters.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;AAmBA,SACE,yBADF,QAIO,mBAJP;AAMA,SAAS,gBAAT,QAAiC,8CAAjC;AAEA,OAAO,wBAAP,MAAqC,4BAArC;AAEA,SAAS,mBAAT,QAAoC,8BAApC;AAEA;AACA;AACA,MAAM,oBAAoB,GAAG,EAA7B;AACA,MAAM,qBAAqB,GAAG,EAA9B;AAeA;AACA;AACA;AACA,eAAc,SAAU,2BAAV,CAAsC,EAClD,KADkD,EAElD,MAFkD,EAGlD,OAHkD,EAIlD,aAJkD,EAKlD,kBALkD,EAMlD,WANkD,EAOlD,cAPkD,EAQlD,OARkD,EASlD,MATkD,EAUlD,QAVkD,EAAtC,EAWyB;AACrC;AACA,QAAM,KAAK,GAAG,yBAAyB,CAAC,QAA1B,CAAmC,WAAnC,EAAgD,cAAhD,CAAd;AACA,QAAM,WAAW,GAAG,KAAK,CAAC,WAAN,EAApB;AAEA;AACA,MACE,CAAC,oBAAoB,CAAC,OAAD,CAApB,IAAiC,EAAlC,MAA0C,OAA1C;AACC,EAAA,WAAW,IAAI,IAAf;AACC,EAAA,qBAAqB,CAAC,OAAD,CAArB,CAA+B,YAA/B,KAAgD,WAFlD;AAGA,EAAA,qBAAqB,CAAC,OAAD,CAArB,CAA+B,eAA/B,KAAmD,cAHnD;AAIA,WAAQ,qBAAqB,CAAC,OAAD,CAArB,CAA+B,YAAvC,EAAqD,WAArD,CAJA;AAKA,GAAC,CAAC,qBAAqB,CAAC,OAAD,CALvB;AAMA,EAAA,QAAQ,KAAK,SAPf,EAQE;AACA,WAAO,qBAAqB,CAAC,OAAD,CAA5B;AACD;AAED,MAAI,SAAS,GAAqC,EAAlD;AACA,QAAM,aAAa,GAAG,mBAAmB,CAAC;AACxC,IAAA,kBADwC;AAExC,IAAA,QAFwC;AAGxC,IAAA,MAHwC;AAIxC,IAAA,aAAa,EAAE,aAAa,CAAC,OAJW,EAAD,CAAzC;;AAMA,QAAM,uBAAuB,GAAG,oFAAe,aAAf;AACtB,GAAC,GAAG,EAAE,KAAF,EAAH,CAAD,KAAmB,0BAAA,KAAK,MAAL,CAAA,KAAK,EAAU,KAAK,CAAC,EAAhB,CADF;AAEzB,GAAC,CAAC,QAAD,CAAD,KAAgB,QAFS,CAAhC;AAGA,MAAI,uBAAuB,CAAC,MAA5B,EAAoC;AAClC,IAAA,SAAS,GAAG;AACV,MAAA,eAAe,EAAE,gBAAgB,CAC/B,QAD+B,EAE/B,MAF+B,EAG/B,uBAH+B,CADvB,EAAZ;;AAOD;AAED,QAAM,QAAQ,GAAG;AACf,OAAG,KAAK,CAAC,QADM;AAEf,QAAI,WAAW,IAAI,EAAE,YAAY,EAAE,WAAhB,EAAnB,CAFe;AAGf,IAAA,YAAY,EAAE,WAHC;AAIf,IAAA,aAAa,EAAE,wBAAwB,CAAC,OAAD,CAJxB;AAKf,OAAG,SALY,EAAjB;;AAOA,EAAA,oBAAoB,CAAC,OAAD,CAApB,GAAgC,OAAhC;AACA,EAAA,qBAAqB,CAAC,OAAD,CAArB,GAAiC,QAAjC;AAEA,SAAO,QAAP;AACD,C,iLA/EK,oB,qIACA,qB,sIAkBkB,2B","sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { isEqual } from 'lodash';\nimport {\n  CategoricalColorNamespace,\n  DataRecordFilters,\n  JsonObject,\n} from '@superset-ui/core';\nimport { ChartQueryPayload, Charts, LayoutItem } from 'src/dashboard/types';\nimport { getExtraFormData } from 'src/dashboard/components/nativeFilters/utils';\nimport { DataMaskStateWithId } from 'src/dataMask/types';\nimport getEffectiveExtraFilters from './getEffectiveExtraFilters';\nimport { ChartConfiguration, NativeFiltersState } from '../../reducers/types';\nimport { getAllActiveFilters } from '../activeAllDashboardFilters';\n\n// We cache formData objects so that our connected container components don't always trigger\n// render cascades. we cannot leverage the reselect library because our cache size is >1\nconst cachedFiltersByChart = {};\nconst cachedFormdataByChart = {};\n\nexport interface GetFormDataWithExtraFiltersArguments {\n  chartConfiguration: ChartConfiguration;\n  chart: ChartQueryPayload;\n  charts: Charts;\n  filters: DataRecordFilters;\n  layout: { [key: string]: LayoutItem };\n  colorScheme?: string;\n  colorNamespace?: string;\n  sliceId: number;\n  dataMask: DataMaskStateWithId;\n  nativeFilters: NativeFiltersState;\n}\n\n// this function merge chart's formData with dashboard filters value,\n// and generate a new formData which will be used in the new query.\n// filters param only contains those applicable to this chart.\nexport default function getFormDataWithExtraFilters({\n  chart,\n  charts,\n  filters,\n  nativeFilters,\n  chartConfiguration,\n  colorScheme,\n  colorNamespace,\n  sliceId,\n  layout,\n  dataMask,\n}: GetFormDataWithExtraFiltersArguments) {\n  // Propagate color mapping to chart\n  const scale = CategoricalColorNamespace.getScale(colorScheme, colorNamespace);\n  const labelColors = scale.getColorMap();\n\n  // if dashboard metadata + filters have not changed, use cache if possible\n  if (\n    (cachedFiltersByChart[sliceId] || {}) === filters &&\n    (colorScheme == null ||\n      cachedFormdataByChart[sliceId].color_scheme === colorScheme) &&\n    cachedFormdataByChart[sliceId].color_namespace === colorNamespace &&\n    isEqual(cachedFormdataByChart[sliceId].label_colors, labelColors) &&\n    !!cachedFormdataByChart[sliceId] &&\n    dataMask === undefined\n  ) {\n    return cachedFormdataByChart[sliceId];\n  }\n\n  let extraData: { extra_form_data?: JsonObject } = {};\n  const activeFilters = getAllActiveFilters({\n    chartConfiguration,\n    dataMask,\n    layout,\n    nativeFilters: nativeFilters.filters,\n  });\n  const filterIdsAppliedOnChart = Object.entries(activeFilters)\n    .filter(([, { scope }]) => scope.includes(chart.id))\n    .map(([filterId]) => filterId);\n  if (filterIdsAppliedOnChart.length) {\n    extraData = {\n      extra_form_data: getExtraFormData(\n        dataMask,\n        charts,\n        filterIdsAppliedOnChart,\n      ),\n    };\n  }\n\n  const formData = {\n    ...chart.formData,\n    ...(colorScheme && { color_scheme: colorScheme }),\n    label_colors: labelColors,\n    extra_filters: getEffectiveExtraFilters(filters),\n    ...extraData,\n  };\n  cachedFiltersByChart[sliceId] = filters;\n  cachedFormdataByChart[sliceId] = formData;\n\n  return formData;\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}