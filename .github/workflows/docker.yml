name: Docker
on:
  push:
    branches:
      - master
    tags:
      - '*'
  pull_request:

env:
  APPS: "backup frepple odoo postgresql pyspy"
  OS: "centos debian redhat ubuntu"
  ORG: ursa
  DOCKER_BUILDKIT: 1

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: 'recursive'

      - name: Run OS tests
        run: |
          OLD_PWD=$(pwd)
          for image in `find $OS -name Dockerfile | sort -r`; do
            echo "Building $image..."
            cd $(dirname $image)
            docker build . --file Dockerfile
            echo "Build of $image completed!"
            docker image prune -a
            cd $OLD_PWD
          done

#      - name: Run Apps tests
#        run: |
#          OLD_PWD=$(pwd)
#          for image in `find $APPS -name Dockerfile | sort -r`; do
#            echo "Building $image..."
#            cd $(dirname $image)
#            docker build . --file Dockerfile
#            echo "Build of $image completed!"
#            docker image prune -a
#            cd $OLD_PWD
#          done

  build:
    needs: test
    runs-on: ubuntu-latest
    if: github.event_name == 'push'
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: 'recursive'

      - name: Login to Docker Hub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push OS
        run: |
          OLD_PWD=$(pwd)
          for image in `find $OS -name Dockerfile | sort -r`; do
            echo $image
            DIR=$(dirname $image)
            IMAGE_ID=$(echo $DIR | sed -e 's/^\.\///g' -e 's/\//-/g')
            cd $DIR
            VERSION=$(echo "${{ github.ref }}" | sed -e 's,.*/\(.*\),\1,')
            [ "$VERSION" == "master" ] && VERSION=latest
            docker build . --file Dockerfile --tag $ORG/$IMAGE_ID:$VERSION --no-cache
            docker push $ORG/$IMAGE_ID:$VERSION
            cd $OLD_PWD
          done

      - name: Build and push Apps
        run: |
          OLD_PWD=$(pwd)
          for image in `find $APPS -name Dockerfile`; do
            echo $image
            DIR=$(dirname $image)
            IMAGE_ID=$(echo $DIR | sed -e 's/^\.\///g' -e 's/\//-/g')
            cd $DIR
            VERSION=$(echo "${{ github.ref }}" | sed -e 's,.*/\(.*\),\1,')
            [ "$VERSION" == "master" ] && VERSION=latest
            docker build . --file Dockerfile --tag $ORG/$IMAGE_ID:$VERSION --no-cache
            docker push $ORG/$IMAGE_ID:$VERSION
            cd $OLD_PWD
          done
